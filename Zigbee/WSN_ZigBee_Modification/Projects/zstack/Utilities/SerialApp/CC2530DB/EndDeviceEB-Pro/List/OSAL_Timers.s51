///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.3.10338/W32 for 8051        10/Jul/2018  16:37:30 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Components\osal\common\OSAL_Timers.c             /
//    Command line       =  -f D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_Ð /
//                          Þ¸Ä\Projects\zstack\Utilities\SerialApp\CC2530DB\ /
//                          ..\..\..\Tools\CC2530DB\f8wEndev.cfg (-DCPU32MHZ  /
//                          -DROOT=__near_func -DBLINK_LEDS) -f               /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\Tools\CC2530DB\f8wConfig.cfg (-DSECURE=0    /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xfFF1                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          "-DCONST=const __code" -DGENERIC=__generic        /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµ /
//                          Ï°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\Components\osal\common\OS /
//                          AL_Timers.c -D ZIGBEEPRO -D NWK_AUTO_POLL -D      /
//                          HAL_UART=TRUE -D SERIAL_APP_PORT=0 -D             /
//                          LCD_SUPPORTED -D xPOWER_SAVING -lC                /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\End /
//                          DeviceEB-Pro\List\ -lA D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµ /
//                          Ï°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\Projects\zstack\Utilities /
//                          \SerialApp\CC2530DB\EndDeviceEB-Pro\List\         /
//                          --diag_suppress Pe001,Pa010 -o                    /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\End /
//                          DeviceEB-Pro\Obj\ -e --debug --core=plain         /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 8 -I D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµ /
//                          Ï°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\Projects\zstack\Utilities /
//                          \SerialApp\CC2530DB\ -I                           /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          SOURCE\ -I D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ /
//                          ZigBee_ÐÞ¸Ä\Projects\zstack\Utilities\SerialApp\C /
//                          C2530DB\..\..\..\ZMAIN\TI2530DB\ -I               /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\MT\ -I                     /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\HAL\INCLUDE\ -I            /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\ -I    /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\ -I         /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\OSAL\INCLUDE\ -I           /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\STACK\AF\ -I               /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\STACK\NWK\ -I              /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\STACK\SEC\ -I              /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\STACK\SAPI\ -I             /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\STACK\SYS\ -I              /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\STACK\ZDO\ -I              /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\ZMAC\F8W\ -I               /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\ZMAC\ -I                   /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\SERVICES\SADDR\ -I         /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\SERVICES\SDATA\ -I         /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\MAC\INCLUDE\ -I            /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\ -I         /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\ -I    /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE /
//                          _CHIP\ -Ohz --require_prototypes                  /
//    List file          =  D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\End /
//                          DeviceEB-Pro\List\OSAL_Timers.s51                 /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME OSAL_Timers

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?L_ADD_TO_X
        EXTERN ?V0
        EXTERN ?XLOAD_R2345
        EXTERN ?XSTORE_R2345
        EXTERN __INIT_XDATA_Z

        PUBLIC ??osalAddTimer?relay
        FUNCTION ??osalAddTimer?relay,0203H
        PUBLIC ??osalDeleteTimer?relay
        FUNCTION ??osalDeleteTimer?relay,0203H
        PUBLIC ??osalFindTimer?relay
        FUNCTION ??osalFindTimer?relay,0203H
        PUBLIC ??osalTimerInit?relay
        FUNCTION ??osalTimerInit?relay,0203H
        PUBLIC ??osalTimerUpdate?relay
        FUNCTION ??osalTimerUpdate?relay,0203H
        PUBLIC ??osal_GetSystemClock?relay
        FUNCTION ??osal_GetSystemClock?relay,0203H
        PUBLIC ??osal_get_timeoutEx?relay
        FUNCTION ??osal_get_timeoutEx?relay,0203H
        PUBLIC ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,0203H
        PUBLIC ??osal_stop_timerEx?relay
        FUNCTION ??osal_stop_timerEx?relay,0203H
        PUBLIC ??osal_timer_num_active?relay
        FUNCTION ??osal_timer_num_active?relay,0203H
        PUBWEAK _A_IEN0
        PUBWEAK __Constant_0
        PUBLIC osalAddTimer
        FUNCTION osalAddTimer,021203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC osalDeleteTimer
        FUNCTION osalDeleteTimer,0203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC osalFindTimer
        FUNCTION osalFindTimer,0203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC osalTimerInit
        FUNCTION osalTimerInit,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC osalTimerUpdate
        FUNCTION osalTimerUpdate,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC osal_GetSystemClock
        FUNCTION osal_GetSystemClock,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC osal_get_timeoutEx
        FUNCTION osal_get_timeoutEx,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC osal_start_timerEx
        FUNCTION osal_start_timerEx,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC osal_stop_timerEx
        FUNCTION osal_stop_timerEx,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC osal_timer_num_active
        FUNCTION osal_timer_num_active,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC timerHead
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
osal_mem_alloc      SYMBOL "osal_mem_alloc"
osal_set_event      SYMBOL "osal_set_event"
osal_mem_free       SYMBOL "osal_mem_free"
??osal_mem_alloc?relay SYMBOL "?relay", osal_mem_alloc
??osal_mem_free?relay SYMBOL "?relay", osal_mem_free
??osal_set_event?relay SYMBOL "?relay", osal_set_event
osalAddTimer        SYMBOL "osalAddTimer"
??osalAddTimer?relay SYMBOL "?relay", osalAddTimer
osalDeleteTimer     SYMBOL "osalDeleteTimer"
??osalDeleteTimer?relay SYMBOL "?relay", osalDeleteTimer
osalFindTimer       SYMBOL "osalFindTimer"
??osalFindTimer?relay SYMBOL "?relay", osalFindTimer
osalTimerInit       SYMBOL "osalTimerInit"
??osalTimerInit?relay SYMBOL "?relay", osalTimerInit
osalTimerUpdate     SYMBOL "osalTimerUpdate"
??osalTimerUpdate?relay SYMBOL "?relay", osalTimerUpdate
osal_GetSystemClock SYMBOL "osal_GetSystemClock"
??osal_GetSystemClock?relay SYMBOL "?relay", osal_GetSystemClock
osal_get_timeoutEx  SYMBOL "osal_get_timeoutEx"
??osal_get_timeoutEx?relay SYMBOL "?relay", osal_get_timeoutEx
osal_start_timerEx  SYMBOL "osal_start_timerEx"
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
osal_stop_timerEx   SYMBOL "osal_stop_timerEx"
??osal_stop_timerEx?relay SYMBOL "?relay", osal_stop_timerEx
osal_timer_num_active SYMBOL "osal_timer_num_active"
??osal_timer_num_active?relay SYMBOL "?relay", osal_timer_num_active

        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_set_event
        FUNCTION osal_set_event,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??osal_mem_alloc?relay
        FUNCTION ??osal_mem_alloc?relay,00H
        EXTERN ??osal_mem_free?relay
        FUNCTION ??osal_mem_free?relay,00H
        EXTERN ??osal_set_event?relay
        FUNCTION ??osal_set_event?relay,00H

// D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\Components\osal\common\OSAL_Timers.c
//    1 /**************************************************************************************************
//    2   Filename:       OSAL_Timers.c
//    3   Revised:        $Date: 2009-02-24 11:20:27 -0800 (Tue, 24 Feb 2009) $
//    4   Revision:       $Revision: 19256 $
//    5 
//    6   Description:    OSAL Timer definition and manipulation functions.
//    7 
//    8 
//    9   Copyright 2004-2009 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License").  You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product.  Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 
//   40 /*********************************************************************
//   41  * INCLUDES
//   42  */
//   43 
//   44 #include "comdef.h"
//   45 #include "OnBoard.h"

        ASEGN SFR_AN:DATA:NOROOT,0a8H
// union <unnamed> volatile __sfr _A_IEN0
_A_IEN0:
        DATA8
        DS 1
//   46 #include "OSAL.h"
//   47 #include "OSAL_Timers.h"
//   48 #include "hal_timer.h"
//   49 
//   50 /*********************************************************************
//   51  * MACROS
//   52  */
//   53 
//   54 /*********************************************************************
//   55  * CONSTANTS
//   56  */
//   57 
//   58 /*********************************************************************
//   59  * TYPEDEFS
//   60  */
//   61 
//   62 typedef struct
//   63 {
//   64   void *next;
//   65   uint16 timeout;
//   66   uint16 event_flag;
//   67   uint8 task_id;
//   68 } osalTimerRec_t;
//   69 
//   70 /*********************************************************************
//   71  * GLOBAL VARIABLES
//   72  */
//   73 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//   74 osalTimerRec_t *timerHead;
timerHead:
        DS 2
        REQUIRE __INIT_XDATA_Z
//   75 
//   76 /*********************************************************************
//   77  * EXTERNAL VARIABLES
//   78  */
//   79 
//   80 /*********************************************************************
//   81  * EXTERNAL FUNCTIONS
//   82  */
//   83 
//   84 /*********************************************************************
//   85  * LOCAL VARIABLES
//   86  */
//   87 // Milliseconds since last reboot

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
//   88 static uint32 osal_systemClock;
osal_systemClock:
        DS 4
        REQUIRE __INIT_XDATA_Z
//   89 
//   90 /*********************************************************************
//   91  * LOCAL FUNCTION PROTOTYPES
//   92  */
//   93 osalTimerRec_t  *osalAddTimer( uint8 task_id, uint16 event_flag, uint16 timeout );
//   94 osalTimerRec_t *osalFindTimer( uint8 task_id, uint16 event_flag );
//   95 void osalDeleteTimer( osalTimerRec_t *rmTimer );
//   96 
//   97 /*********************************************************************
//   98  * FUNCTIONS
//   99  *********************************************************************/
//  100 
//  101 /*********************************************************************
//  102  * @fn      osalTimerInit
//  103  *
//  104  * @brief   Initialization for the OSAL Timer System.
//  105  *
//  106  * @param   none
//  107  *
//  108  * @return
//  109  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  110 void osalTimerInit( void )
osalTimerInit:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function osalTimerInit
        CODE
//  111 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  112   osal_systemClock = 0;
        MOV     DPTR,#__Constant_0
        LCALL   ?XLOAD_R2345
        MOV     DPTR,#osal_systemClock
        LCALL   ?XSTORE_R2345
//  113 }
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock0
//  114 
//  115 /*********************************************************************
//  116  * @fn      osalAddTimer
//  117  *
//  118  * @brief   Add a timer to the timer list.
//  119  *          Ints must be disabled.
//  120  *
//  121  * @param   task_id
//  122  * @param   event_flag
//  123  * @param   timeout
//  124  *
//  125  * @return  osalTimerRec_t * - pointer to newly created timer
//  126  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  127 osalTimerRec_t * osalAddTimer( uint8 task_id, uint16 event_flag, uint16 timeout )
osalAddTimer:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function osalAddTimer
        CODE
//  128 {
        FUNCALL osalAddTimer, osalFindTimer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osalAddTimer, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     ?V0 + 2,R1
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
//  129   osalTimerRec_t *newTimer;
//  130   osalTimerRec_t *srchTimer;
//  131 
//  132   // Look for an existing timer first
//  133   newTimer = osalFindTimer( task_id, event_flag );
        ; Setup parameters for call to function osalFindTimer
        LCALL   ??osalFindTimer?relay
//  134   if ( newTimer )
        MOV     A,R2
        ORL     A,R3
        JZ      ??osalAddTimer_0
//  135   {
//  136     // Timer is found - update it.
//  137     newTimer->timeout = timeout;
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
??osalAddTimer_1:
        MOVX    @DPTR,A
//  138 
//  139     return ( newTimer );
        SJMP    ??osalAddTimer_2
//  140   }
//  141   else
//  142   {
//  143     // New Timer
//  144     newTimer = osal_mem_alloc( sizeof( osalTimerRec_t ) );
??osalAddTimer_0:
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0x7
        MOV     R3,#0x0
        LCALL   ??osal_mem_alloc?relay
//  145 
//  146     if ( newTimer )
        MOV     A,R2
        ORL     A,R3
        JZ      ??osalAddTimer_3
//  147     {
//  148       // Fill in new timer
//  149       newTimer->task_id = task_id;
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,?V0 + 2
        MOVX    @DPTR,A
//  150       newTimer->event_flag = event_flag;
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 1
        MOVX    @DPTR,A
//  151       newTimer->timeout = timeout;
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        MOVX    @DPTR,A
//  152       newTimer->next = (void *)NULL;
        MOV     DPL,R2
        MOV     DPH,R3
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  153 
//  154       // Does the timer list already exist
//  155       if ( timerHead == NULL )
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_4:
        MOV     DPTR,#timerHead
        JNZ     ??osalAddTimer_4
//  156       {
//  157         // Start task list
//  158         timerHead = newTimer;
??osalAddTimer_5:
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        SJMP    ??osalAddTimer_1
//  159       }
//  160       else
//  161       {
//  162         // Add it to the end of the timer list
//  163         srchTimer = timerHead;
??osalAddTimer_4:
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        SJMP    ??osalAddTimer_6
//  164 
//  165         // Stop at the last record
//  166         while ( srchTimer->next )
//  167           srchTimer = srchTimer->next;
??osalAddTimer_7:
        MOV     A,R0
        MOV     R4,A
        MOV     A,R1
??osalAddTimer_6:
        MOV     R5,A
        MOV     DPL,R4
        MOV     DPH,R5
        LCALL   ??Subroutine4_0 & 0xFFFF
??CrossCallReturnLabel_0:
        JNZ     ??osalAddTimer_7
//  168 
//  169         // Add to the list
//  170         srchTimer->next = newTimer;
        MOV     DPL,R4
        MOV     DPH,R5
        SJMP    ??osalAddTimer_5
//  171       }
//  172 
//  173       return ( newTimer );
//  174     }
//  175     else
//  176       return ( (osalTimerRec_t *)NULL );
??osalAddTimer_3:
        MOV     R2,#0x0
        MOV     R3,#0x0
        CFI EndBlock cfiBlock1
//  177   }
??osalAddTimer_2:
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1
//  178 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock2
//  179 
//  180 /*********************************************************************
//  181  * @fn      osalFindTimer
//  182  *
//  183  * @brief   Find a timer in a timer list.
//  184  *          Ints must be disabled.
//  185  *
//  186  * @param   task_id
//  187  * @param   event_flag
//  188  *
//  189  * @return  osalTimerRec_t *
//  190  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  191 osalTimerRec_t *osalFindTimer( uint8 task_id, uint16 event_flag )
osalFindTimer:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function osalFindTimer
        CODE
//  192 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  193   osalTimerRec_t *srchTimer;
//  194 
//  195   // Head of the timer list
//  196   srchTimer = timerHead;
        MOV     DPTR,#timerHead
        SJMP    ??osalFindTimer_0
//  197 
//  198   // Stop when found or at the end
//  199   while ( srchTimer )
//  200   {
//  201     if ( srchTimer->event_flag == event_flag &&
//  202          srchTimer->task_id == task_id )
//  203       break;
//  204 
//  205     // Not this one, check another
//  206     srchTimer = srchTimer->next;
??osalFindTimer_1:
        MOV     DPL,R4
        MOV     DPH,R5
??osalFindTimer_0:
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,R4
        ORL     A,R5
        JZ      ??osalFindTimer_2
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R2
        JNZ     ??osalFindTimer_3
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R3
??osalFindTimer_3:
        JNZ     ??osalFindTimer_1
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
        JNZ     ??osalFindTimer_1
//  207   }
//  208 
//  209   return ( srchTimer );
??osalFindTimer_2:
        MOV     A,R4
        MOV     R2,A
        MOV     A,R5
        MOV     R3,A
        SJMP    ?Subroutine0
        CFI EndBlock cfiBlock3
//  210 }
//  211 
//  212 /*********************************************************************
//  213  * @fn      osalDeleteTimer
//  214  *
//  215  * @brief   Delete a timer from a timer list.
//  216  *
//  217  * @param   table
//  218  * @param   rmTimer
//  219  *
//  220  * @return  none
//  221  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  222 void osalDeleteTimer( osalTimerRec_t *rmTimer )
osalDeleteTimer:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI Function osalDeleteTimer
        CODE
//  223 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  224   // Does the timer list really exist
//  225   if ( rmTimer )
        MOV     A,R2
        ORL     A,R3
        JZ      ??osalDeleteTimer_0
//  226   {
//  227     // Clear the event flag and osalTimerUpdate() will delete 
//  228     // the timer from the list.
//  229     rmTimer->event_flag = 0;
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        CFI EndBlock cfiBlock4
//  230   }
//  231 }
??osalDeleteTimer_0:
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock5 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP     DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP    ?BRET
        CFI EndBlock cfiBlock5
//  232 
//  233 /*********************************************************************
//  234  * @fn      osal_start_timerEx
//  235  *
//  236  * @brief
//  237  *
//  238  *   This function is called to start a timer to expire in n mSecs.
//  239  *   When the timer expires, the calling task will get the specified event.
//  240  *
//  241  * @param   uint8 taskID - task id to set timer for
//  242  * @param   uint16 event_id - event to be notified with
//  243  * @param   UNINT16 timeout_value - in milliseconds.
//  244  *
//  245  * @return  SUCCESS, or NO_TIMER_AVAIL.
//  246  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  247 uint8 osal_start_timerEx( uint8 taskID, uint16 event_id, uint16 timeout_value )
osal_start_timerEx:
        CFI Block cfiBlock6 Using cfiCommon0
        CFI Function osal_start_timerEx
        CODE
//  248 {
        FUNCALL osal_start_timerEx, osalAddTimer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  249   halIntState_t intState;
//  250   osalTimerRec_t *newTimer;
//  251 
//  252   HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
        MOV     A,0xa8
        MOV     R6,A
        CLR     0xa8.7
//  253 
//  254   // Add timer
//  255   newTimer = osalAddTimer( taskID, event_id, timeout_value );
        ; Setup parameters for call to function osalAddTimer
        LCALL   ??osalAddTimer?relay
        MOV     ?V0 + 1,R3
        MOV     R1,?V0 + 1
//  256 
//  257   HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
        MOV     A,R6
        MOV     C,0xE0 /* A   */.7
        MOV     0xa8.7,C
//  258 
//  259   return ( (newTimer != NULL) ? SUCCESS : NO_TIMER_AVAIL );
        MOV     A,R2
        ORL     A,R1
        JZ      ??osal_start_timerEx_0
        MOV     R1,#0x0
        SJMP    ??osal_start_timerEx_1
??osal_start_timerEx_0:
        MOV     R1,#0x8
??osal_start_timerEx_1:
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock6
        REQUIRE _A_IEN0
//  260 }
//  261 
//  262 /*********************************************************************
//  263  * @fn      osal_stop_timerEx
//  264  *
//  265  * @brief
//  266  *
//  267  *   This function is called to stop a timer that has already been started.
//  268  *   If ZSUCCESS, the function will cancel the timer and prevent the event
//  269  *   associated with the timer from being set for the calling task.
//  270  *
//  271  * @param   uint8 task_id - task id of timer to stop
//  272  * @param   uint16 event_id - identifier of the timer that is to be stopped
//  273  *
//  274  * @return  SUCCESS or INVALID_EVENT_ID
//  275  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  276 uint8 osal_stop_timerEx( uint8 task_id, uint16 event_id )
osal_stop_timerEx:
        CFI Block cfiBlock7 Using cfiCommon0
        CFI Function osal_stop_timerEx
        CODE
//  277 {
        FUNCALL osal_stop_timerEx, osalFindTimer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_stop_timerEx, osalDeleteTimer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
//  278   halIntState_t intState;
//  279   osalTimerRec_t *foundTimer;
//  280 
//  281   HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
        MOV     C,0xa8.7
        CLR     A
        RLC     A
        MOV     ?V0 + 1,A
        CLR     0xa8.7
//  282 
//  283   // Find the timer to stop
//  284   foundTimer = osalFindTimer( task_id, event_id );
        ; Setup parameters for call to function osalFindTimer
        LCALL   ??osalFindTimer?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     R6,?V0 + 2
        MOV     R7,?V0 + 3
//  285   if ( foundTimer )
        MOV     A,R6
        ORL     A,R7
        JZ      ??osal_stop_timerEx_0
//  286   {
//  287     osalDeleteTimer( foundTimer );
        ; Setup parameters for call to function osalDeleteTimer
        LCALL   ??osalDeleteTimer?relay
//  288   }
//  289 
//  290   HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
??osal_stop_timerEx_0:
        MOV     A,?V0 + 1
        MOV     C,0xE0 /* A   */.0
        MOV     0xa8.7,C
//  291 
//  292   return ( (foundTimer != NULL) ? SUCCESS : INVALID_EVENT_ID );
        MOV     A,R6
        ORL     A,R7
        JZ      ??osal_stop_timerEx_1
        MOV     R1,#0x0
        SJMP    ??osal_stop_timerEx_2
??osal_stop_timerEx_1:
        MOV     R1,#0x6
        CFI EndBlock cfiBlock7
??osal_stop_timerEx_2:
        REQUIRE ?Subroutine2
        REQUIRE _A_IEN0
        ; // Fall through to label ?Subroutine2
//  293 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiBlock8 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock8
//  294 
//  295 /*********************************************************************
//  296  * @fn      osal_get_timeoutEx
//  297  *
//  298  * @brief
//  299  *
//  300  * @param   uint8 task_id - task id of timer to check
//  301  * @param   uint16 event_id - identifier of timer to be checked
//  302  *
//  303  * @return  Return the timer's tick count if found, zero otherwise.
//  304  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  305 uint16 osal_get_timeoutEx( uint8 task_id, uint16 event_id )
osal_get_timeoutEx:
        CFI Block cfiBlock9 Using cfiCommon0
        CFI Function osal_get_timeoutEx
        CODE
//  306 {
        FUNCALL osal_get_timeoutEx, osalFindTimer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
//  307   halIntState_t intState;
//  308   uint16 rtrn = 0;
        MOV     R6,#0x0
        MOV     R7,#0x0
//  309   osalTimerRec_t *tmr;
//  310 
//  311   HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
        MOV     C,0xa8.7
        CLR     A
        RLC     A
        MOV     ?V0 + 1,A
        CLR     0xa8.7
//  312 
//  313   tmr = osalFindTimer( task_id, event_id );
        ; Setup parameters for call to function osalFindTimer
        LCALL   ??osalFindTimer?relay
        MOV     DPL,R2
        MOV     DPH,R3
//  314 
//  315   if ( tmr )
        MOV     A,DPL
        ORL     A,DPH
        JZ      ??osal_get_timeoutEx_0
//  316   {
//  317     rtrn = tmr->timeout;
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
//  318   }
//  319 
//  320   HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
??osal_get_timeoutEx_0:
        MOV     A,?V0 + 1
        MOV     C,0xE0 /* A   */.0
        MOV     0xa8.7,C
//  321 
//  322   return rtrn;
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        SJMP    ?Subroutine2
        CFI EndBlock cfiBlock9
        REQUIRE _A_IEN0
//  323 }
//  324 
//  325 /*********************************************************************
//  326  * @fn      osal_timer_num_active
//  327  *
//  328  * @brief
//  329  *
//  330  *   This function counts the number of active timers.
//  331  *
//  332  * @return  uint8 - number of timers
//  333  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  334 uint8 osal_timer_num_active( void )
osal_timer_num_active:
        CFI Block cfiBlock10 Using cfiCommon0
        CFI Function osal_timer_num_active
        CODE
//  335 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  336   halIntState_t intState;
//  337   uint8 num_timers = 0;
        MOV     R1,#0x0
//  338   osalTimerRec_t *srchTimer;
//  339 
//  340   HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
        MOV     C,0xa8.7
        CLR     A
        RLC     A
        MOV     R0,A
        CLR     0xa8.7
//  341 
//  342   // Head of the timer list
//  343   srchTimer = timerHead;
        MOV     DPTR,#timerHead
        SJMP    ??osal_timer_num_active_0
//  344 
//  345   // Count timers in the list
//  346   while ( srchTimer != NULL )
//  347   {
//  348     num_timers++;
??osal_timer_num_active_1:
        INC     R1
//  349     srchTimer = srchTimer->next;
??osal_timer_num_active_0:
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     DPL,R2
        MOV     DPH,R3
//  350   }
        MOV     A,DPL
        ORL     A,DPH
        JNZ     ??osal_timer_num_active_1
//  351 
//  352   HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
        MOV     A,R0
        MOV     C,0xE0 /* A   */.0
        MOV     0xa8.7,C
//  353 
//  354   return num_timers;
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock10
        REQUIRE _A_IEN0
//  355 }
//  356 
//  357 /*********************************************************************
//  358  * @fn      osalTimerUpdate
//  359  *
//  360  * @brief   Update the timer structures for a timer tick.
//  361  *
//  362  * @param   none
//  363  *
//  364  * @return  none
//  365  *********************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  366 void osalTimerUpdate( uint16 updateTime )
osalTimerUpdate:
        CFI Block cfiBlock11 Using cfiCommon0
        CFI Function osalTimerUpdate
        CODE
//  367 {
        FUNCALL osalTimerUpdate, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osalTimerUpdate, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  368   halIntState_t intState;
//  369   osalTimerRec_t *srchTimer;
//  370   osalTimerRec_t *prevTimer;
//  371 
//  372   HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
        MOV     A,0xa8
        MOV     R1,A
        CLR     0xa8.7
//  373   // Update the system time
//  374   osal_systemClock += updateTime;
        MOV     ?V0 + 0,R6
        MOV     ?V0 + 1,R7
        CLR     A
        MOV     ?V0 + 2,A
        MOV     ?V0 + 3,A
        MOV     DPTR,#osal_systemClock
        MOV     R0,#?V0 + 0
        LCALL   ?L_ADD_TO_X
//  375   HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
        MOV     A,R1
        MOV     C,0xE0 /* A   */.7
        MOV     0xa8.7,C
//  376 
//  377   // Look for open timer slot
//  378   if ( timerHead != NULL )
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_5:
        JNZ     $+5
        LJMP    ??osalTimerUpdate_0 & 0xFFFF
//  379   {
//  380     // Add it to the end of the timer list
//  381     srchTimer = timerHead;
        MOV     DPTR,#timerHead
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
//  382     prevTimer = (void *)NULL;
        MOV     ?V0 + 4,#0x0
        MOV     ?V0 + 5,#0x0
//  383 
//  384     // Look for open timer slot
//  385     while ( srchTimer )
//  386     {
//  387       osalTimerRec_t *freeTimer = NULL;
??osalTimerUpdate_1:
        MOV     ?V0 + 2,#0x0
        MOV     ?V0 + 3,#0x0
//  388      
//  389       HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
        MOV     C,0xa8.7
        CLR     A
        RLC     A
        MOV     R2,A
        CLR     0xa8.7
//  390       
//  391       if (srchTimer->timeout <= updateTime)
        MOV     A,?V0 + 0
        ADD     A,#0x2
        MOV     R0,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        CLR     C
        MOV     A,R6
        SUBB    A,R4
        MOV     A,R7
        SUBB    A,R5
        MOV     DPL,R0
        MOV     DPH,R1
        JC      ??osalTimerUpdate_2
//  392       {
//  393         srchTimer->timeout = 0;
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        SJMP    ??osalTimerUpdate_3
//  394       }
//  395       else
//  396       {
//  397         srchTimer->timeout = srchTimer->timeout - updateTime;
??osalTimerUpdate_2:
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,R7
        MOVX    @DPTR,A
//  398       }
//  399       
//  400       // When timeout or delete (event_flag == 0)
//  401       if ( srchTimer->timeout == 0 || srchTimer->event_flag == 0 )
        MOV     DPL,R0
        MOV     DPH,R1
        LCALL   ??Subroutine4_0 & 0xFFFF
??CrossCallReturnLabel_1:
        JZ      ??osalTimerUpdate_3
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine4_0 & 0xFFFF
??CrossCallReturnLabel_2:
        JNZ     ??osalTimerUpdate_4
//  402       {
//  403         // Take out of list
//  404         if ( prevTimer == NULL )
??osalTimerUpdate_3:
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,?V0 + 4
        ORL     A,?V0 + 5
        JNZ     ??osalTimerUpdate_5
//  405           timerHead = srchTimer->next;
        MOV     DPTR,#timerHead
        SJMP    ??osalTimerUpdate_6
//  406         else
//  407           prevTimer->next = srchTimer->next;
??osalTimerUpdate_5:
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
??osalTimerUpdate_6:
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  408 
//  409         // Setup to free memory
//  410         freeTimer = srchTimer;
        MOV     ?V0 + 2,?V0 + 0
        MOV     ?V0 + 3,?V0 + 1
//  411 
//  412         // Next
//  413         srchTimer = srchTimer->next;
        SJMP    ??osalTimerUpdate_7
//  414       }
//  415       else
//  416       {
//  417         // Get next
//  418         prevTimer = srchTimer;
??osalTimerUpdate_4:
        MOV     ?V0 + 4,?V0 + 0
        MOV     ?V0 + 5,?V0 + 1
//  419         srchTimer = srchTimer->next;
??osalTimerUpdate_7:
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
//  420       }
//  421       
//  422       HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
        MOV     A,R2
        MOV     C,0xE0 /* A   */.0
        MOV     0xa8.7,C
//  423       
//  424       if ( freeTimer )
        MOV     A,?V0 + 2
        ORL     A,?V0 + 3
        JZ      ??osalTimerUpdate_8
//  425       {
//  426         if ( freeTimer->timeout == 0 )
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine4_0 & 0xFFFF
??CrossCallReturnLabel_3:
        JNZ     ??osalTimerUpdate_9
//  427         {
//  428           osal_set_event( freeTimer->task_id, freeTimer->event_flag );
        ; Setup parameters for call to function osal_set_event
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_set_event?relay
//  429         }
//  430         osal_mem_free( freeTimer );
??osalTimerUpdate_9:
        ; Setup parameters for call to function osal_mem_free
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        LCALL   ??osal_mem_free?relay
//  431       }
//  432     }
??osalTimerUpdate_8:
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JZ      $+5
        LJMP    ??osalTimerUpdate_1 & 0xFFFF
//  433   }
//  434 }
??osalTimerUpdate_0:
        LJMP    ?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock11
        REQUIRE _A_IEN0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond12 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond13 Using cfiCommon0
        CFI (cfiCond13) NoFunction
        CFI (cfiCond13) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond13) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond13) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond13) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond13) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond13) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond13) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond13) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond13) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond13) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond13) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond13) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond13) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond13) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond13) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond13) CFA_SP SP+0
        CFI (cfiCond13) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker14 Using cfiCommon1
        CFI (cfiPicker14) NoFunction
        CFI (cfiPicker14) Picker
        MOV     DPTR,#timerHead
        CFI EndBlock cfiCond12
        CFI EndBlock cfiCond13
        CFI EndBlock cfiPicker14
        REQUIRE ??Subroutine4_0
        ; // Fall through to label ??Subroutine4_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine4_0:
        CFI Block cfiCond15 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond16 Using cfiCommon0
        CFI (cfiCond16) NoFunction
        CFI (cfiCond16) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond16) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond16) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond16) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond16) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond16) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond16) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond16) CFA_SP SP+0
        CFI (cfiCond16) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond17 Using cfiCommon0
        CFI (cfiCond17) NoFunction
        CFI (cfiCond17) Conditional ??CrossCallReturnLabel_2
        CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond17) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond17) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond17) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond17) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond17) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond17) CFA_SP SP+0
        CFI (cfiCond17) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond18 Using cfiCommon0
        CFI (cfiCond18) NoFunction
        CFI (cfiCond18) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond18) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond18) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond18) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond18) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond18) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond18) CFA_SP SP+0
        CFI (cfiCond18) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond19 Using cfiCommon0
        CFI (cfiCond19) NoFunction
        CFI (cfiCond19) Conditional ??CrossCallReturnLabel_4
        CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond19) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond19) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond19) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond19) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond19) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond19) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond19) CFA_SP SP+0
        CFI (cfiCond19) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond20 Using cfiCommon0
        CFI (cfiCond20) NoFunction
        CFI (cfiCond20) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond20) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond20) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond20) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond20) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond20) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond20) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond20) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond20) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond20) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond20) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond20) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond20) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond20) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond20) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond20) CFA_SP SP+0
        CFI (cfiCond20) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker21 Using cfiCommon1
        CFI (cfiPicker21) NoFunction
        CFI (cfiPicker21) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        RET
        CFI EndBlock cfiCond15
        CFI EndBlock cfiCond16
        CFI EndBlock cfiCond17
        CFI EndBlock cfiCond18
        CFI EndBlock cfiCond19
        CFI EndBlock cfiCond20
        CFI EndBlock cfiPicker21
//  435 
//  436 #ifdef POWER_SAVING
//  437 /*********************************************************************
//  438  * @fn      osal_adjust_timers
//  439  *
//  440  * @brief   Update the timer structures for elapsed ticks.
//  441  *
//  442  * @param   none
//  443  *
//  444  * @return  none
//  445  *********************************************************************/
//  446 void osal_adjust_timers( void )
//  447 {
//  448   uint16 eTime;
//  449 
//  450   if ( timerHead != NULL )
//  451   {
//  452     // Compute elapsed time (msec)
//  453     eTime = TimerElapsed() /  TICK_COUNT;
//  454 
//  455     if ( eTime )
//  456       osalTimerUpdate( eTime );
//  457   }
//  458 }
//  459 
//  460 /*********************************************************************
//  461  * @fn      osal_next_timeout
//  462  *
//  463  * @brief
//  464  *
//  465  *   Search timer table to return the lowest timeout value. If the
//  466  *   timer list is empty, then the returned timeout will be zero.
//  467  *
//  468  * @param   none
//  469  *
//  470  * @return  none
//  471  *********************************************************************/
//  472 uint16 osal_next_timeout( void )
//  473 {
//  474   uint16 nextTimeout;
//  475   osalTimerRec_t *srchTimer;
//  476 
//  477   if ( timerHead != NULL )
//  478   {
//  479     // Head of the timer list
//  480     srchTimer = timerHead;
//  481     nextTimeout = OSAL_TIMERS_MAX_TIMEOUT;
//  482 
//  483     // Look for the next timeout timer
//  484     while ( srchTimer != NULL )
//  485     {
//  486       if (srchTimer->timeout < nextTimeout)
//  487       {
//  488         nextTimeout = srchTimer->timeout;
//  489       }
//  490       // Check next timer
//  491       srchTimer = srchTimer->next;
//  492     }
//  493   }
//  494   else
//  495   {
//  496     // No timers
//  497     nextTimeout = 0;
//  498   }
//  499 
//  500   return ( nextTimeout );
//  501 }
//  502 #endif // POWER_SAVING
//  503 
//  504 /*********************************************************************
//  505  * @fn      osal_GetSystemClock()
//  506  *
//  507  * @brief   Read the local system clock.
//  508  *
//  509  * @param   none
//  510  *
//  511  * @return  local clock in milliseconds
//  512  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  513 uint32 osal_GetSystemClock( void )
osal_GetSystemClock:
        CFI Block cfiBlock22 Using cfiCommon0
        CFI Function osal_GetSystemClock
        CODE
//  514 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  515   return ( osal_systemClock );
        MOV     DPTR,#osal_systemClock
        LCALL   ?XLOAD_R2345
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock22
//  516 }

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_0:
        DD 0

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osalTimerInit?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    osalTimerInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osalAddTimer?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    osalAddTimer

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osalFindTimer?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    osalFindTimer

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osalDeleteTimer?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    osalDeleteTimer

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osal_start_timerEx?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    osal_start_timerEx

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osal_stop_timerEx?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    osal_stop_timerEx

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osal_get_timeoutEx?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    osal_get_timeoutEx

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osal_timer_num_active?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    osal_timer_num_active

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osalTimerUpdate?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    osalTimerUpdate

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osal_GetSystemClock?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    osal_GetSystemClock

        END
//  517 
//  518 /*********************************************************************
//  519 *********************************************************************/
// 
// 726 bytes in segment BANKED_CODE
//  60 bytes in segment BANK_RELAYS
//   1 byte  in segment SFR_AN
//   4 bytes in segment XDATA_ROM_C
//   6 bytes in segment XDATA_Z
// 
// 786 bytes of CODE  memory
//   0 bytes of CONST memory (+ 4 bytes shared)
//   0 bytes of DATA  memory (+ 1 byte  shared)
//   6 bytes of XDATA memory
//
//Errors: none
//Warnings: none
