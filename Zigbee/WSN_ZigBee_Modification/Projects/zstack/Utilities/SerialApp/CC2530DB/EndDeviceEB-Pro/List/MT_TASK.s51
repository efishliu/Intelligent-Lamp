///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.3.10338/W32 for 8051        10/Jul/2018  16:37:27 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Components\mt\MT_TASK.c                          /
//    Command line       =  -f D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_Ð /
//                          Þ¸Ä\Projects\zstack\Utilities\SerialApp\CC2530DB\ /
//                          ..\..\..\Tools\CC2530DB\f8wEndev.cfg (-DCPU32MHZ  /
//                          -DROOT=__near_func -DBLINK_LEDS) -f               /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\Tools\CC2530DB\f8wConfig.cfg (-DSECURE=0    /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xfFF1                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          "-DCONST=const __code" -DGENERIC=__generic        /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµ /
//                          Ï°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\Components\mt\MT_TASK.c   /
//                          -D ZIGBEEPRO -D NWK_AUTO_POLL -D HAL_UART=TRUE    /
//                          -D SERIAL_APP_PORT=0 -D LCD_SUPPORTED -D          /
//                          xPOWER_SAVING -lC D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ /
//                          ¼«\WSN_ZigBee_ÐÞ¸Ä\Projects\zstack\Utilities\Seri /
//                          alApp\CC2530DB\EndDeviceEB-Pro\List\ -lA          /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\End /
//                          DeviceEB-Pro\List\ --diag_suppress Pe001,Pa010    /
//                          -o D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_Ð /
//                          Þ¸Ä\Projects\zstack\Utilities\SerialApp\CC2530DB\ /
//                          EndDeviceEB-Pro\Obj\ -e --debug --core=plain      /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 8 -I D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµ /
//                          Ï°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\Projects\zstack\Utilities /
//                          \SerialApp\CC2530DB\ -I                           /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          SOURCE\ -I D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ /
//                          ZigBee_ÐÞ¸Ä\Projects\zstack\Utilities\SerialApp\C /
//                          C2530DB\..\..\..\ZMAIN\TI2530DB\ -I               /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\MT\ -I                     /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\HAL\INCLUDE\ -I            /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\ -I    /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\ -I         /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\OSAL\INCLUDE\ -I           /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\STACK\AF\ -I               /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\STACK\NWK\ -I              /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\STACK\SEC\ -I              /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\STACK\SAPI\ -I             /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\STACK\SYS\ -I              /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\STACK\ZDO\ -I              /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\ZMAC\F8W\ -I               /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\ZMAC\ -I                   /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\SERVICES\SADDR\ -I         /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\SERVICES\SDATA\ -I         /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\MAC\INCLUDE\ -I            /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\ -I         /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\ -I    /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE /
//                          _CHIP\ -Ohz --require_prototypes                  /
//    List file          =  D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\End /
//                          DeviceEB-Pro\List\MT_TASK.s51                     /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME MT_TASK

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?V0

        PUBLIC ??MT_ProcessEvent?relay
        FUNCTION ??MT_ProcessEvent?relay,0203H
        PUBLIC ??MT_ProcessIncomingCommand?relay
        FUNCTION ??MT_ProcessIncomingCommand?relay,0203H
        PUBLIC ??MT_TaskInit?relay
        FUNCTION ??MT_TaskInit?relay,0203H
        PUBLIC MT_ProcessEvent
        FUNCTION MT_ProcessEvent,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC MT_ProcessIncomingCommand
        FUNCTION MT_ProcessIncomingCommand,021203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC MT_TaskInit
        FUNCTION MT_TaskInit,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
MT_Init             SYMBOL "MT_Init"
MT_UartInit         SYMBOL "MT_UartInit"
MT_UartRegisterTaskID SYMBOL "MT_UartRegisterTaskID"
osal_msg_receive    SYMBOL "osal_msg_receive"
MT_ProcessIncoming  SYMBOL "MT_ProcessIncoming"
MT_ProcessDebugMsg  SYMBOL "MT_ProcessDebugMsg"
MT_ProcessDebugStr  SYMBOL "MT_ProcessDebugStr"
MT_UartCalcFCS      SYMBOL "MT_UartCalcFCS"
MTProcessAppRspMsg  SYMBOL "MTProcessAppRspMsg"
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
??MTProcessAppRspMsg?relay SYMBOL "?relay", MTProcessAppRspMsg
??MT_Init?relay     SYMBOL "?relay", MT_Init
??MT_ProcessDebugMsg?relay SYMBOL "?relay", MT_ProcessDebugMsg
??MT_ProcessDebugStr?relay SYMBOL "?relay", MT_ProcessDebugStr
??MT_ProcessIncoming?relay SYMBOL "?relay", MT_ProcessIncoming
??MT_UartCalcFCS?relay SYMBOL "?relay", MT_UartCalcFCS
??MT_UartInit?relay SYMBOL "?relay", MT_UartInit
??MT_UartRegisterTaskID?relay SYMBOL "?relay", MT_UartRegisterTaskID
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
??osal_msg_receive?relay SYMBOL "?relay", osal_msg_receive
MT_ProcessEvent     SYMBOL "MT_ProcessEvent"
??MT_ProcessEvent?relay SYMBOL "?relay", MT_ProcessEvent
MT_ProcessIncomingCommand SYMBOL "MT_ProcessIncomingCommand"
??MT_ProcessIncomingCommand?relay SYMBOL "?relay", MT_ProcessIncomingCommand
MT_TaskInit         SYMBOL "MT_TaskInit"
??MT_TaskInit?relay SYMBOL "?relay", MT_TaskInit

        EXTERN MT_Init
        FUNCTION MT_Init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MT_UartInit
        FUNCTION MT_UartInit,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MT_UartRegisterTaskID
        FUNCTION MT_UartRegisterTaskID,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MT_ProcessIncoming
        FUNCTION MT_ProcessIncoming,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MT_ProcessDebugMsg
        FUNCTION MT_ProcessDebugMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MT_ProcessDebugStr
        FUNCTION MT_ProcessDebugStr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MT_UartCalcFCS
        FUNCTION MT_UartCalcFCS,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MTProcessAppRspMsg
        FUNCTION MTProcessAppRspMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??MTProcessAppRspMsg?relay
        FUNCTION ??MTProcessAppRspMsg?relay,00H
        EXTERN ??MT_Init?relay
        FUNCTION ??MT_Init?relay,00H
        EXTERN ??MT_ProcessDebugMsg?relay
        FUNCTION ??MT_ProcessDebugMsg?relay,00H
        EXTERN ??MT_ProcessDebugStr?relay
        FUNCTION ??MT_ProcessDebugStr?relay,00H
        EXTERN ??MT_ProcessIncoming?relay
        FUNCTION ??MT_ProcessIncoming?relay,00H
        EXTERN ??MT_UartCalcFCS?relay
        FUNCTION ??MT_UartCalcFCS?relay,00H
        EXTERN ??MT_UartInit?relay
        FUNCTION ??MT_UartInit?relay,00H
        EXTERN ??MT_UartRegisterTaskID?relay
        FUNCTION ??MT_UartRegisterTaskID?relay,00H
        EXTERN ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,00H
        EXTERN ??osal_msg_receive?relay
        FUNCTION ??osal_msg_receive?relay,00H
        EXTERN MT_TaskID

// D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\Components\mt\MT_TASK.c
//    1 /***************************************************************************************************
//    2   Filename:       MT_TASK.c
//    3   Revised:        $Date: 2009-03-12 16:25:22 -0700 (Thu, 12 Mar 2009) $
//    4   Revision:       $Revision: 19404 $
//    5 
//    6   Description:    MonitorTest Task handling routines
//    7 
//    8   Copyright 2007 Texas Instruments Incorporated. All rights reserved.
//    9 
//   10   IMPORTANT: Your use of this Software is limited to those specific rights
//   11   granted under the terms of a software license agreement between the user
//   12   who downloaded the software, his/her employer (which must be your employer)
//   13   and Texas Instruments Incorporated (the "License").  You may not use this
//   14   Software unless you agree to abide by the terms of the License. The License
//   15   limits your use, and you acknowledge, that the Software may not be modified,
//   16   copied or distributed unless embedded on a Texas Instruments microcontroller
//   17   or used solely and exclusively in conjunction with a Texas Instruments radio
//   18   frequency transceiver, which is integrated into your product.  Other than for
//   19   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   20   works of, modify, distribute, perform, display or sell this Software and/or
//   21   its documentation for any purpose.
//   22 
//   23   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   24   PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   25   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   26   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   27   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   28   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   29   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   30   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   31   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   32   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   33   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   34 
//   35   Should you have any questions regarding your right to use this Software,
//   36   contact Texas Instruments Incorporated at www.TI.com.
//   37 
//   38  ***************************************************************************************************/
//   39 
//   40 /***************************************************************************************************
//   41  * INCLUDES
//   42  ***************************************************************************************************/
//   43 #include "ZComDef.h"
//   44 #include "MT_TASK.h"
//   45 #include "MT.h"
//   46 #include "MT_DEBUG.h"
//   47 #include "MT_UART.h"
//   48 #include "MT_SYS.h"
//   49 
//   50 #include "hal_uart.h"
//   51 
//   52 #include "OSAL_Memory.h"
//   53 
//   54 /***************************************************************************************************
//   55  * LOCAL FUNCTIONS
//   56  ***************************************************************************************************/
//   57 void MT_ProcessIncomingCommand( mtOSALSerialData_t *msg );
//   58 
//   59 /***************************************************************************************************
//   60  * GLOBALS
//   61  ***************************************************************************************************/
//   62 
//   63 /***************************************************************************************************
//   64  * @fn      MT_TaskInit
//   65  *
//   66  * @brief  MonitorTest Task Initialization.  This function is put into the
//   67  *         task table.
//   68  *
//   69  * @param   byte task_id - task ID of the MT Task
//   70  *
//   71  * @return  void
//   72  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   73 void MT_TaskInit(uint8 task_id)
MT_TaskInit:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function MT_TaskInit
        CODE
//   74 {
        FUNCALL MT_TaskInit, MT_Init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_TaskInit, MT_UartInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_TaskInit, MT_UartRegisterTaskID
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//   75   /* Initialize MT */
//   76   MT_Init(task_id);
        ; Setup parameters for call to function MT_Init
        LCALL   ??MT_Init?relay
//   77 
//   78   /* Initialize the Serial port */
//   79   MT_UartInit();
        ; Setup parameters for call to function MT_UartInit
        LCALL   ??MT_UartInit?relay
//   80 
//   81   /* Register taskID - Do this after UartInit() because it will reset the taskID */
//   82   MT_UartRegisterTaskID (task_id);
        ; Setup parameters for call to function MT_UartRegisterTaskID
        MOV     A,R6
        MOV     R1,A
        LCALL   ??MT_UartRegisterTaskID?relay
//   83 
//   84 } /* MT_TaskInit() */
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock0
//   85 
//   86 /***************************************************************************************************
//   87  * @fn      MT_ProcessEvent
//   88  *
//   89  * @brief MonitorTest Task Event Processor.  This task is put into the task table.
//   90  *
//   91  * @param   byte task_id - task ID of the MT Task
//   92  * @param   UINT16 events - event(s) for the MT Task
//   93  *
//   94  * @return  void
//   95  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   96 UINT16 MT_ProcessEvent(uint8 task_id, uint16 events)
MT_ProcessEvent:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function MT_ProcessEvent
        CODE
//   97 {
        FUNCALL MT_ProcessEvent, MT_ProcessIncomingCommand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//   98   uint8 *msg_ptr;
//   99   
//  100   (void)task_id;  // Intentionally unreferenced parameter
//  101 
//  102   /* Could be multiple events, so switch won't work */
//  103   if ( events & SYS_EVENT_MSG )
        ANL     A,#0x80
        JNZ     ??MT_ProcessEvent_0
//  104   {
//  105     while ( (msg_ptr = osal_msg_receive( MT_TaskID )) )
//  106     {
//  107       MT_ProcessIncomingCommand((mtOSALSerialData_t *)msg_ptr);
//  108     }
//  109 
//  110     /* Return unproccessed events */
//  111     return (events ^ SYS_EVENT_MSG);
//  112   }
//  113 
//  114   if ( events & MT_ZTOOL_SERIAL_RCV_BUFFER_FULL )
        MOV     A,R6
        ANL     A,#0x4
        JZ      ??MT_ProcessEvent_1
//  115   {
//  116     /* Return unproccessed events */
//  117     return (events ^ MT_ZTOOL_SERIAL_RCV_BUFFER_FULL);
        MOV     A,R6
        XRL     A,#0x4
        MOV     R2,A
        SJMP    ??MT_ProcessEvent_2
//  118   }
??MT_ProcessEvent_3:
        ; Setup parameters for call to function MT_ProcessIncomingCommand
        LCALL   ??MT_ProcessIncomingCommand?relay
??MT_ProcessEvent_0:
        ; Setup parameters for call to function osal_msg_receive
        MOV     DPTR,#MT_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_receive?relay
        MOV     A,R2
        ORL     A,R3
        JNZ     ??MT_ProcessEvent_3
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x80
        MOV     R3,A
        SJMP    ??MT_ProcessEvent_2
//  119 
//  120   /* Handle MT_SYS_OSAL_START_TIMER callbacks */
//  121 #if defined MT_SYS_FUNC
//  122   if ( events & (MT_SYS_OSAL_EVENT_MASK))
//  123   {
//  124     if (events & MT_SYS_OSAL_EVENT_0)
//  125     {
//  126       MT_SysOsalTimerExpired(0x00);
//  127       events ^= MT_SYS_OSAL_EVENT_0;
//  128     }
//  129 
//  130     if (events & MT_SYS_OSAL_EVENT_1)
//  131     {
//  132       MT_SysOsalTimerExpired(0x01);
//  133       events ^= MT_SYS_OSAL_EVENT_1;
//  134     }
//  135 
//  136     if (events & MT_SYS_OSAL_EVENT_2)
//  137     {
//  138       MT_SysOsalTimerExpired(0x02);
//  139       events ^= MT_SYS_OSAL_EVENT_2;
//  140     }
//  141 
//  142     if (events & MT_SYS_OSAL_EVENT_3)
//  143     {
//  144       MT_SysOsalTimerExpired(0x03);
//  145       events ^= MT_SYS_OSAL_EVENT_3;
//  146     }
//  147 
//  148     return events;
//  149   }
//  150 #endif
//  151 
//  152   /* Discard or make more handlers */
//  153   return 0;
??MT_ProcessEvent_1:
        MOV     R2,#0x0
        MOV     R3,#0x0
??MT_ProcessEvent_2:
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock1
//  154 
//  155 } /* MT_ProcessEvent() */
//  156 
//  157 /***************************************************************************************************
//  158  * @fn      MT_ProcessIncomingCommand
//  159  *
//  160  * @brief
//  161  *
//  162  *   Process Event Messages.
//  163  *
//  164  * @param   byte *msg - pointer to event message
//  165  *
//  166  * @return
//  167  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  168 void MT_ProcessIncomingCommand( mtOSALSerialData_t *msg )
MT_ProcessIncomingCommand:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function MT_ProcessIncomingCommand
        CODE
//  169 {
        FUNCALL MT_ProcessIncomingCommand, MT_ProcessIncoming
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ProcessIncomingCommand, MT_ProcessDebugMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ProcessIncomingCommand, MT_ProcessDebugStr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ProcessIncomingCommand, MT_UartCalcFCS
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ProcessIncomingCommand, MTProcessAppRspMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ProcessIncomingCommand, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  170   byte deallocate;
//  171   byte *msg_ptr;
//  172   byte len;
//  173 
//  174   /* A little setup for AF, CB_FUNC and MT_SYS_APP_RSP_MSG */
//  175   msg_ptr = msg->msg;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
//  176 
//  177   deallocate = true;
//  178 
//  179   /* Use the first byte of the message as the command ID */
//  180   switch ( msg->hdr.event )
        MOV     A,R2
        ADD     A,#0x3
        MOV     R0,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        DEC     A
        JZ      ??MT_ProcessIncomingCommand_0
        DEC     A
        JZ      ??MT_ProcessIncomingCommand_1
        ADD     A,#-0x2
        JZ      ??MT_ProcessIncomingCommand_2
        ADD     A,#-0x2
        JZ      ??MT_ProcessIncomingCommand_3
        ADD     A,#-0x1e
        JZ      ??MT_ProcessIncomingCommand_4
        SJMP    ??MT_ProcessIncomingCommand_5
//  181   {
//  182     case CMD_SERIAL_MSG:
//  183       MT_ProcessIncoming(msg->msg);
??MT_ProcessIncomingCommand_0:
        ; Setup parameters for call to function MT_ProcessIncoming
        LCALL   ??MT_ProcessIncoming?relay
//  184       break;
        SJMP    ??MT_ProcessIncomingCommand_5
//  185 
//  186     case CMD_DEBUG_MSG:
//  187       MT_ProcessDebugMsg( (mtDebugMsg_t *)msg );
??MT_ProcessIncomingCommand_1:
        ; Setup parameters for call to function MT_ProcessDebugMsg
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??MT_ProcessDebugMsg?relay
//  188       break;
        SJMP    ??MT_ProcessIncomingCommand_5
//  189 
//  190     case CMD_DEBUG_STR:
//  191       MT_ProcessDebugStr( (mtDebugStr_t *)msg );
??MT_ProcessIncomingCommand_3:
        ; Setup parameters for call to function MT_ProcessDebugStr
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??MT_ProcessDebugStr?relay
//  192       break;
        SJMP    ??MT_ProcessIncomingCommand_5
//  193 
//  194     case CB_FUNC:
//  195       /*
//  196         Build SPI message here instead of redundantly calling MT_BuildSPIMsg
//  197         because we have copied data already in the allocated message
//  198       */
//  199 
//  200       /* msg_ptr is the beginning of the intended SPI message */
//  201       len = SPI_0DATA_MSG_LEN + msg_ptr[DATALEN_FIELD];
??MT_ProcessIncomingCommand_2:
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        ADD     A,#0x5
        MOV     ?V0 + 2,A
//  202 
//  203       /*
//  204         FCS goes to the last byte in the message and is calculated over all
//  205         the bytes except FCS and SOP
//  206       */
//  207       msg_ptr[len-1] = MT_UartCalcFCS(msg_ptr + 1, (byte)(len-2));
        ; Setup parameters for call to function MT_UartCalcFCS
        MOV     A,#-0x2
        ADD     A,?V0 + 2
        MOV     R1,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??MT_UartCalcFCS?relay
        MOV     A,R1
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,?V0 + 0
        ADD     A,?V0 + 2
        MOV     R0,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,R0
        ADD     A,#-0x1
        MOV     DPL,A
        MOV     A,R1
        ADDC    A,#-0x1
        MOV     DPH,A
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  208 
//  209 #ifdef MT_UART_DEFAULT_PORT
//  210       HalUARTWrite ( MT_UART_DEFAULT_PORT, msg_ptr, len );
//  211 #endif
//  212       break;
        SJMP    ??MT_ProcessIncomingCommand_5
//  213 
//  214 #if !defined ( NONWK )
//  215     case MT_SYS_APP_RSP_MSG:
//  216       len = SPI_0DATA_MSG_LEN + msg_ptr[DATALEN_FIELD];
//  217       MTProcessAppRspMsg( msg_ptr, len );
??MT_ProcessIncomingCommand_4:
        ; Setup parameters for call to function MTProcessAppRspMsg
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        ADD     A,#0x5
        MOV     R1,A
        LCALL   ??MTProcessAppRspMsg?relay
//  218       break;
//  219 #endif  // NONWK
//  220 
//  221     default:
//  222       break;
//  223   }
//  224 
//  225   if ( deallocate )
//  226   {
//  227     osal_msg_deallocate( (uint8 *)msg );
??MT_ProcessIncomingCommand_5:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??osal_msg_deallocate?relay
//  228   }
//  229 }
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock2

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_TaskInit?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MT_TaskInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_ProcessEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MT_ProcessEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_ProcessIncomingCommand?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MT_ProcessIncomingCommand

        END
//  230 
//  231 #ifdef MT_TASK
//  232 /***************************************************************************************************
//  233  * @fn      MT_TransportAlloc
//  234  *
//  235  * @brief   Allocate memory for transport msg
//  236  *
//  237  * @param   uint8 cmd0 - The first byte of the MT command id containing the command type and subsystem.
//  238  *          uint8 len - length
//  239  *
//  240  * @return  pointer the allocated memory or NULL if fail to allocate the memory
//  241  ***************************************************************************************************/
//  242 uint8 *MT_TransportAlloc(uint8 cmd0, uint8 len)
//  243 {
//  244   uint8 *p;
//  245 
//  246   (void)cmd0;  // Intentionally unreferenced parameter
//  247   
//  248   /* Allocate a buffer of data length + SOP+CMD+FCS (5bytes) */
//  249   p = osal_msg_allocate(len + SPI_0DATA_MSG_LEN);
//  250 
//  251   if (p)
//  252   {
//  253     p++; /* Save space for SOP_VALUE, msg structure */
//  254     return p;
//  255   }
//  256   else
//  257   {
//  258     return NULL;
//  259   }
//  260 }
//  261 
//  262 /***************************************************************************************************
//  263  * @fn      MT_TransportSend
//  264  *
//  265  * @brief   Fill in SOP and FCS then send out the msg
//  266  *
//  267  * @param   uint8 *pBuf - pointer to the message that contains CMD, length, data and FCS
//  268  *
//  269  * @return  None
//  270  ***************************************************************************************************/
//  271 void MT_TransportSend(uint8 *pBuf)
//  272 {
//  273   uint8 *msgPtr;
//  274   uint8 dataLen = pBuf[0]; /* Data length is on byte #1 from the pointer */
//  275 
//  276   /* Move back to the SOP */
//  277   msgPtr = pBuf-1;
//  278 
//  279   /* Insert SOP */
//  280   msgPtr[0] = MT_UART_SOF;
//  281 
//  282   /* Insert FCS */
//  283   msgPtr[SPI_0DATA_MSG_LEN - 1 + dataLen] = MT_UartCalcFCS (pBuf, (3 + dataLen));
//  284 
//  285   /* Send to UART */
//  286 #ifdef MT_UART_DEFAULT_PORT
//  287   HalUARTWrite(MT_UART_DEFAULT_PORT, msgPtr, dataLen + SPI_0DATA_MSG_LEN);
//  288 #endif
//  289 
//  290   /* Deallocate */
//  291   osal_msg_deallocate(msgPtr);
//  292 }
//  293 #endif /* MT_TASK */
//  294 /***************************************************************************************************
//  295  ***************************************************************************************************/
// 
// 236 bytes in segment BANKED_CODE
//  18 bytes in segment BANK_RELAYS
// 
// 254 bytes of CODE memory
//
//Errors: none
//Warnings: none
