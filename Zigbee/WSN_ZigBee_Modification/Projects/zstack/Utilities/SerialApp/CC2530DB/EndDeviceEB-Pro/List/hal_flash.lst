###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         10/Jul/2018  16:37:41 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Components\hal\target\CC2530EB\hal_flash.c         #
#    Command line       =  -f D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ #
#                          ¸Ä\Projects\zstack\Utilities\SerialApp\CC2530DB\.. #
#                          \..\..\Tools\CC2530DB\f8wEndev.cfg (-DCPU32MHZ     #
#                          -DROOT=__near_func -DBLINK_LEDS) -f                #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\Tools\CC2530DB\f8wConfig.cfg (-DSECURE=0       #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xfFF1                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Components\hal\target\CC2530EB\hal_flash.c -D      #
#                          ZIGBEEPRO -D NWK_AUTO_POLL -D HAL_UART=TRUE -D     #
#                          SERIAL_APP_PORT=0 -D LCD_SUPPORTED -D              #
#                          xPOWER_SAVING -lC D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼ #
#                          «\WSN_ZigBee_ÐÞ¸Ä\Projects\zstack\Utilities\Serial #
#                          App\CC2530DB\EndDeviceEB-Pro\List\ -lA             #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\EndDe #
#                          viceEB-Pro\List\ --diag_suppress Pe001,Pa010 -o    #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\EndDe #
#                          viceEB-Pro\Obj\ -e --debug --core=plain            #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 8 -I D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ #
#                          °\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\Projects\zstack\Utilities\S #
#                          erialApp\CC2530DB\ -I D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ° #
#                          \ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\Projects\zstack\Utilities\Se #
#                          rialApp\CC2530DB\..\SOURCE\ -I                     #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\ZMAIN\TI2530DB\ -I D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ #
#                          °\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\Projects\zstack\Utilities\S #
#                          erialApp\CC2530DB\..\..\..\..\..\COMPONENTS\MT\    #
#                          -I D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ #
#                          ¸Ä\Projects\zstack\Utilities\SerialApp\CC2530DB\.. #
#                          \..\..\..\..\COMPONENTS\HAL\INCLUDE\ -I            #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\ -I       #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\OSAL\MCU\CCSOC\ -I            #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\OSAL\INCLUDE\ -I              #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\STACK\AF\ -I                  #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\STACK\NWK\ -I                 #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\STACK\SEC\ -I                 #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\STACK\SAPI\ -I                #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\STACK\SYS\ -I                 #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\STACK\ZDO\ -I                 #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\ZMAC\F8W\ -I                  #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\ZMAC\ -I                      #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\SERVICES\SADDR\ -I            #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\SERVICES\SDATA\ -I            #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\MAC\INCLUDE\ -I               #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\MAC\HIGH_LEVEL\ -I            #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\ -I       #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CH #
#                          IP\ -Ohz --require_prototypes                      #
#    List file          =  D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\EndDe #
#                          viceEB-Pro\List\hal_flash.lst                      #
#    Object file        =  D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\EndDe #
#                          viceEB-Pro\Obj\hal_flash.r51                       #
#                                                                             #
#                                                                             #
###############################################################################

D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\Components\hal\target\CC2530EB\hal_flash.c
      1          /**************************************************************************************************
      2            Filename:       _hal_flash.c
      3            Revised:        $Date:$
      4            Revision:       $Revision:$
      5          
      6            Description: This file contains the interface to the H/W Flash driver.
      7          
      8          
      9            Copyright 2006-2009 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /* ------------------------------------------------------------------------------------------------
     41           *                                          Includes
     42           * ------------------------------------------------------------------------------------------------
     43           */
     44          
     45          #include "hal_board_cfg.h"

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc7
   \   unsigned char volatile __sfr MEMCTR
   \                     MEMCTR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xd1
   \   unsigned char volatile __sfr DMAIRQ
   \                     DMAIRQ:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xd6
   \   unsigned char volatile __sfr DMAARM
   \                     DMAARM:
   \   000000                DS 1
     46          #include "hal_dma.h"
     47          #include "hal_flash.h"
     48          #include "hal_types.h"
     49          
     50          /* ------------------------------------------------------------------------------------------------
     51           *                                           Macros
     52           * ------------------------------------------------------------------------------------------------
     53           */
     54          
     55          /* ------------------------------------------------------------------------------------------------
     56           *                                          Constants
     57           * ------------------------------------------------------------------------------------------------
     58           */
     59          
     60          // These values depend on RAM_CODE_FLASH in the .xcl file used.
     61          #if defined CC2530F64  // RemoTI is using 0x01DDD --> pg 3, offset 0x5DD.
     62          #define OSET_OF_RAM_CODE  0x5DD
     63          #define PAGE_OF_RAM_CODE  3
     64          #define SIZE_OF_RAM_CODE  0x23
     65          #elif defined HAL_OAD_BOOT_CODE // OAD boot code does not use RAM copy
     66          #define OSET_OF_RAM_CODE  0x7E5
     67          #define PAGE_OF_RAM_CODE  0
     68          #define SIZE_OF_RAM_CODE  0x1B
     69          #else                   // Z-Stack is using 0x39DDD --> pg 51, offset 0x5DD.
     70          #define OSET_OF_RAM_CODE  0x5DD
     71          #define PAGE_OF_RAM_CODE  51
     72          #define SIZE_OF_RAM_CODE  0x23
     73          #endif
     74          
     75          /* ------------------------------------------------------------------------------------------------
     76           *                                          Typedefs
     77           * ------------------------------------------------------------------------------------------------
     78           */
     79          
     80          /* ------------------------------------------------------------------------------------------------
     81           *                                       Global Variables
     82           * ------------------------------------------------------------------------------------------------
     83           */
     84          
     85          /* ------------------------------------------------------------------------------------------------
     86           *                                       Global Functions
     87           * ------------------------------------------------------------------------------------------------
     88           */
     89          
     90          /* ------------------------------------------------------------------------------------------------
     91           *                                       Local Variables
     92           * ------------------------------------------------------------------------------------------------
     93           */
     94          
     95          #pragma location="RAM_CODE_XDATA"

   \                                 In  segment RAM_CODE_XDATA, align 1
     96          static __no_init uint8 ramCode[SIZE_OF_RAM_CODE];
   \                     ramCode:
   \   000000                DS 35
     97          
     98          /* ------------------------------------------------------------------------------------------------
     99           *                                       Local Functions
    100           * ------------------------------------------------------------------------------------------------
    101           */
    102          
    103          #pragma location="RAM_CODE_FLASH"
    104          #if defined HAL_OAD_BOOT_CODE
    105          static void HalFlashWriteTrigger(void);
    106          #else
    107          static __monitor void HalFlashWriteTrigger(void);
    108          #endif
    109          
    110          /**************************************************************************************************
    111           * @fn          HalFlashInit
    112           *
    113           * @brief       This function initializes the environment for this module.
    114           *
    115           * input parameters
    116           *
    117           * None.
    118           *
    119           * output parameters
    120           *
    121           * None.
    122           *
    123           * @return      None.
    124           **************************************************************************************************
    125           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    126          void HalFlashInit(void)
   \                     HalFlashInit:
    127          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    128            // Load the code to run from RAM into its reserved area of RAM once at startup.
    129            HalFlashRead(PAGE_OF_RAM_CODE, OSET_OF_RAM_CODE, ramCode, SIZE_OF_RAM_CODE);
   \   000005                ; Setup parameters for call to function HalFlashRead
   \   000005   75..23       MOV     ?V0 + 0,#0x23
   \   000008   75..00       MOV     ?V0 + 1,#0x0
   \   00000B   78..         MOV     R0,#?V0 + 0
   \   00000D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000010   7C..         MOV     R4,#ramCode & 0xff
   \   000012   7D..         MOV     R5,#(ramCode >> 8) & 0xff
   \   000014   7ADD         MOV     R2,#-0x23
   \   000016   7B05         MOV     R3,#0x5
   \   000018   7933         MOV     R1,#0x33
   \   00001A   12....       LCALL   ??HalFlashRead?relay
   \   00001D   7402         MOV     A,#0x2
   \   00001F   12....       LCALL   ?DEALLOC_XSTACK8
    130          }
   \   000022                REQUIRE ?Subroutine0
   \   000022                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    131          
    132          /**************************************************************************************************
    133           * @fn          HalFlashRead
    134           *
    135           * @brief       This function reads 'cnt' bytes from the internal flash.
    136           *
    137           * input parameters
    138           *
    139           * @param       pg - A valid flash page number.
    140           * @param       offset - A valid offset into the page.
    141           * @param       buf - A valid buffer space at least as big as the 'cnt' parameter.
    142           * @param       cnt - A valid number of bytes to read.
    143           *
    144           * output parameters
    145           *
    146           * None.
    147           *
    148           * @return      None.
    149           **************************************************************************************************
    150           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    151          void HalFlashRead(uint8 pg, uint16 offset, uint8 *buf, uint16 cnt)
   \                     HalFlashRead:
    152          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   \   000007   740C         MOV     A,#0xc
   \   000009   12....       LCALL   ?XSTACK_DISP0_8
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   F5..         MOV     ?V0 + 2,A
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   F5..         MOV     ?V0 + 3,A
    153            // Calculate the offset into the containing flash bank as it gets mapped into XDATA.
    154            uint8 *ptr = (uint8 *)(offset + HAL_FLASH_PAGE_MAP) +
    155                         ((pg % HAL_FLASH_PAGE_PER_BANK) * HAL_FLASH_PAGE_SIZE);
   \   000013   740F         MOV     A,#0xf
   \   000015   5E           ANL     A,R6
   \   000016   F5..         MOV     ?V0 + 0,A
   \   000018   75..00       MOV     ?V0 + 1,#0x0
   \   00001B   740B         MOV     A,#0xb
   \   00001D   78..         MOV     R0,#?V0 + 0
   \   00001F   12....       LCALL   ?S_SHL
   \   000022   EA           MOV     A,R2
   \   000023   2400         ADD     A,#0x0
   \   000025   F8           MOV     R0,A
   \   000026   EB           MOV     A,R3
   \   000027   3480         ADDC    A,#-0x80
   \   000029   F9           MOV     R1,A
   \   00002A   E8           MOV     A,R0
   \   00002B   2400         ADD     A,#0x0
   \   00002D   E9           MOV     A,R1
   \   00002E   35..         ADDC    A,?V0 + 1
   \   000030   F9           MOV     R1,A
    156            uint8 memctr = MEMCTR;  // Save to restore.
   \   000031   E5C7         MOV     A,0xc7
   \   000033   FF           MOV     R7,A
    157          
    158          #if !defined HAL_OAD_BOOT_CODE
    159            halIntState_t is;
    160          #endif
    161          
    162            pg /= HAL_FLASH_PAGE_PER_BANK;  // Calculate the flash bank from the flash page.
    163          
    164          #if !defined HAL_OAD_BOOT_CODE
    165            HAL_ENTER_CRITICAL_SECTION(is);
   \   000034   A2AF         MOV     C,0xa8.7
   \   000036   E4           CLR     A
   \   000037   33           RLC     A
   \   000038   F5..         MOV     ?V0 + 0,A
   \   00003A   C2AF         CLR     0xa8.7
    166          #endif
    167          
    168            // Calculate and map the containing flash bank into XDATA.
    169            MEMCTR = (MEMCTR & 0xF8) | pg;
   \   00003C   EE           MOV     A,R6
   \   00003D   C4           SWAP    A
   \   00003E   540F         ANL     A,#0xf
   \   000040   FA           MOV     R2,A
   \   000041   E5C7         MOV     A,0xc7
   \   000043   54F8         ANL     A,#0xf8
   \   000045   4A           ORL     A,R2
   \   000046   F5C7         MOV     0xc7,A
   \   000048   801C         SJMP    ??HalFlashRead_0
    170          
    171            while (cnt--)
    172            {
    173              *buf++ = *ptr++;
   \                     ??HalFlashRead_1:
   \   00004A   8882         MOV     DPL,R0
   \   00004C   8983         MOV     DPH,R1
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   8C82         MOV     DPL,R4
   \   000051   8D83         MOV     DPH,R5
   \   000053   F0           MOVX    @DPTR,A
   \   000054   8882         MOV     DPL,R0
   \   000056   8983         MOV     DPH,R1
   \   000058   A3           INC     DPTR
   \   000059   A882         MOV     R0,DPL
   \   00005B   A983         MOV     R1,DPH
   \   00005D   8C82         MOV     DPL,R4
   \   00005F   8D83         MOV     DPH,R5
   \   000061   A3           INC     DPTR
   \   000062   AC82         MOV     R4,DPL
   \   000064   AD83         MOV     R5,DPH
    174            }
   \                     ??HalFlashRead_0:
   \   000066   AA..         MOV     R2,?V0 + 2
   \   000068   AB..         MOV     R3,?V0 + 3
   \   00006A   EA           MOV     A,R2
   \   00006B   24FF         ADD     A,#-0x1
   \   00006D   F5..         MOV     ?V0 + 2,A
   \   00006F   EB           MOV     A,R3
   \   000070   34FF         ADDC    A,#-0x1
   \   000072   F5..         MOV     ?V0 + 3,A
   \   000074   EA           MOV     A,R2
   \   000075   4B           ORL     A,R3
   \   000076   70D2         JNZ     ??HalFlashRead_1
    175          
    176            MEMCTR = memctr;
   \   000078   8FC7         MOV     0xc7,R7
    177          
    178          #if !defined HAL_OAD_BOOT_CODE
    179            HAL_EXIT_CRITICAL_SECTION(is);
   \   00007A   E5..         MOV     A,?V0 + 0
   \   00007C   A2E0         MOV     C,0xE0 /* A   */.0
   \   00007E   92AF         MOV     0xa8.7,C
    180          #endif
    181          }
   \   000080   7F04         MOV     R7,#0x4
   \   000082   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000085                REQUIRE MEMCTR
   \   000085                REQUIRE _A_IEN0
    182          
    183          /**************************************************************************************************
    184           * @fn          HalFlashWrite
    185           *
    186           * @brief       This function writes 'cnt' bytes to the internal flash.
    187           *
    188           * input parameters
    189           *
    190           * @param       addr - Valid HAL flash write address: actual addr / 4 and quad-aligned.
    191           * @param       buf - Valid buffer space at least as big as 'cnt' X 4.
    192           * @param       cnt - Number of 4-byte blocks to write.
    193           *
    194           * output parameters
    195           *
    196           * None.
    197           *
    198           * @return      None.
    199           **************************************************************************************************
    200           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    201          void HalFlashWrite(uint16 addr, uint8 *buf, uint16 cnt)
   \                     HalFlashWrite:
    202          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   740A         MOV     A,#0xa
   \   000007   12....       LCALL   ?XSTACK_DISP0_8
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   F5..         MOV     ?V0 + 0,A
   \   00000D   A3           INC     DPTR
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   F5..         MOV     ?V0 + 1,A
    203            halDMADesc_t *ch = HAL_NV_DMA_GET_DESC();
    204          
    205            HAL_DMA_SET_SOURCE(ch, buf);
   \   000011   ED           MOV     A,R5
   \   000012   90....       MOV     DPTR,#dmaCh0
   \   000015   F0           MOVX    @DPTR,A
   \   000016   EC           MOV     A,R4
   \   000017   A3           INC     DPTR
   \   000018   F0           MOVX    @DPTR,A
    206            HAL_DMA_SET_DEST(ch, &FWDATA);
   \   000019   A3           INC     DPTR
   \   00001A   7462         MOV     A,#0x62
   \   00001C   F0           MOVX    @DPTR,A
   \   00001D   A3           INC     DPTR
   \   00001E   7473         MOV     A,#0x73
   \   000020   F0           MOVX    @DPTR,A
    207            HAL_DMA_SET_VLEN(ch, HAL_DMA_VLEN_USE_LEN);
   \   000021   A3           INC     DPTR
   \   000022   E0           MOVX    A,@DPTR
   \   000023   541F         ANL     A,#0x1f
   \   000025   F0           MOVX    @DPTR,A
    208            HAL_DMA_SET_LEN(ch, (cnt * HAL_FLASH_WORD_SIZE));
   \   000026   E5..         MOV     A,?V0 + 0
   \   000028   33           RLC     A
   \   000029   33           RLC     A
   \   00002A   54FC         ANL     A,#0xfc
   \   00002C   A3           INC     DPTR
   \   00002D   F0           MOVX    @DPTR,A
   \   00002E   7406         MOV     A,#0x6
   \   000030   78..         MOV     R0,#?V0 + 0
   \   000032   12....       LCALL   ?US_SHR
   \   000035   E5..         MOV     A,?V0 + 0
   \   000037   90....       MOV     DPTR,#dmaCh0 + 4
   \   00003A   F0           MOVX    @DPTR,A
    209            HAL_DMA_SET_WORD_SIZE(ch, HAL_DMA_WORDSIZE_BYTE);
    210            HAL_DMA_SET_TRIG_MODE(ch, HAL_DMA_TMODE_SINGLE);
    211            HAL_DMA_SET_TRIG_SRC(ch, HAL_DMA_TRIG_FLASH);
   \   00003B   90....       MOV     DPTR,#dmaCh0 + 6
   \   00003E   7412         MOV     A,#0x12
   \   000040   F0           MOVX    @DPTR,A
    212            HAL_DMA_SET_SRC_INC(ch, HAL_DMA_SRCINC_1);
    213            HAL_DMA_SET_DST_INC(ch, HAL_DMA_DSTINC_0);
    214            // The DMA is to be polled and shall not issue an IRQ upon completion.
    215            HAL_DMA_SET_IRQ(ch, HAL_DMA_IRQMASK_DISABLE);
    216            HAL_DMA_SET_M8( ch, HAL_DMA_M8_USE_8_BITS);
    217            HAL_DMA_SET_PRIORITY(ch, HAL_DMA_PRI_HIGH);
   \   000041   A3           INC     DPTR
   \   000042   7442         MOV     A,#0x42
   \   000044   F0           MOVX    @DPTR,A
    218            HAL_DMA_CLEAR_IRQ(HAL_NV_DMA_CH);
   \   000045   53D1FE       ANL     0xd1,#0xfe
    219            HAL_DMA_ARM_CH(HAL_NV_DMA_CH);
   \   000048   75D601       MOV     0xd6,#0x1
    220          
    221            FADDRL = (uint8)addr;
   \   00004B   EA           MOV     A,R2
   \   00004C   906271       MOV     DPTR,#0x6271
   \   00004F   F0           MOVX    @DPTR,A
    222            FADDRH = (uint8)(addr >> 8);
   \   000050   EB           MOV     A,R3
   \   000051   A3           INC     DPTR
   \   000052   F0           MOVX    @DPTR,A
    223            HalFlashWriteTrigger();
   \   000053                ; Setup parameters for call to function HalFlashWriteTrigger
   \   000053   12....       LCALL   ??HalFlashWriteTrigger?relay
    224          }
   \   000056   02....       LJMP    ?Subroutine0 & 0xFFFF
   \   000059                REQUIRE DMAIRQ
   \   000059                REQUIRE DMAARM
    225          
    226          /**************************************************************************************************
    227           * @fn          HalFlashErase
    228           *
    229           * @brief       This function erases the specified page of the internal flash.
    230           *
    231           * input parameters
    232           *
    233           * @param       pg - A valid flash page number to erase.
    234           *
    235           * output parameters
    236           *
    237           * None.
    238           *
    239           * @return      None.
    240           **************************************************************************************************
    241           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    242          void HalFlashErase(uint8 pg)
   \                     HalFlashErase:
    243          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    244            FADDRH = pg * (HAL_FLASH_PAGE_SIZE / HAL_FLASH_WORD_SIZE / 256);
   \   000004   E9           MOV     A,R1
   \   000005   C3           CLR     C
   \   000006   33           RLC     A
   \   000007   906272       MOV     DPTR,#0x6272
   \   00000A   F0           MOVX    @DPTR,A
    245            FCTL |= 0x01;
   \   00000B   906270       MOV     DPTR,#0x6270
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   D2E0         SETB    0xE0 /* A   */.0
   \   000011   F0           MOVX    @DPTR,A
    246          }
   \   000012   D083         POP     DPH
   \   000014   D082         POP     DPL
   \   000016   02....       LJMP    ?BRET
    247          
    248          /**************************************************************************************************
    249           * @fn          HalFlashWriteTrigger
    250           *
    251           * @brief       This function must be copied to RAM before running because it triggers and then
    252           *              awaits completion of Flash write, which can only be done from RAM.
    253           *
    254           * input parameters
    255           *
    256           * None.
    257           *
    258           * output parameters
    259           *
    260           * None.
    261           *
    262           * @return      None.
    263           **************************************************************************************************
    264           */
    265          #if defined HAL_OAD_BOOT_CODE
    266          #pragma optimize=medium
    267          static void HalFlashWriteTrigger(void)
    268          #else

   \                                 In  segment RAM_CODE_FLASH, align 1, keep-with-next
    269          static __monitor void HalFlashWriteTrigger(void)
   \                     HalFlashWriteTrigger:
    270          #endif
    271          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   C0A8         PUSH    0xA8 /* IE  */
   \   000006   C2AF         CLR     0xA8 /* IE  */.7
    272            MEMCTR |= 0x08;       // Start the Memory Arbiter running CODE from RAM.
   \   000008   43C708       ORL     0xc7,#0x8
    273            FCTL |= 0x02;         // Trigger the DMA writes.
   \   00000B   906270       MOV     DPTR,#0x6270
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   D2E1         SETB    0xE0 /* A   */.1
   \   000011   F0           MOVX    @DPTR,A
    274            while (FCTL & 0x80);  // Wait until writing is done.
   \                     ??HalFlashWriteTrigger_0:
   \   000012   E0           MOVX    A,@DPTR
   \   000013   A2E7         MOV     C,0xE0 /* A   */.7
   \   000015   40FB         JC      ??HalFlashWriteTrigger_0
    275            MEMCTR &= ~0x08;      // Stop the Memory Arbiter.
   \   000017   53C7F7       ANL     0xc7,#0xf7
    276          }
   \   00001A   D0A8         POP     0xA8 /* IE  */
   \   00001C   D083         POP     DPH
   \   00001E   D082         POP     DPL
   \   000020   02....       LJMP    ?BRET
   \   000023                REQUIRE MEMCTR

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalFlashInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalFlashInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalFlashRead?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalFlashRead

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalFlashWrite?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalFlashWrite

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalFlashErase?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalFlashErase

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalFlashWriteTrigger?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalFlashWriteTrigger
    277          
    278          /**************************************************************************************************
    279          */

   Maximum stack usage in bytes:

     Function                  ISTACK PSTACK XSTACK
     --------                  ------ ------ ------
     HalFlashErase                 2      0      0
     HalFlashInit                  0      0     12
       -> HalFlashRead             0      0     24
     HalFlashRead                  1      0     24
     HalFlashWrite                 0      0     12
       -> HalFlashWriteTrigger     0      0     20
     HalFlashWriteTrigger          3      0     10


   Segment part sizes:

     Function/Label               Bytes
     --------------               -----
     _A_IEN0                         1
     MEMCTR                          1
     DMAIRQ                          1
     DMAARM                          1
     ramCode                        35
     HalFlashInit                   34
     ?Subroutine0                    5
     HalFlashRead                  133
     HalFlashWrite                  89
     HalFlashErase                  25
     HalFlashWriteTrigger           35
     ??HalFlashInit?relay            6
     ??HalFlashRead?relay            6
     ??HalFlashWrite?relay           6
     ??HalFlashErase?relay           6
     ??HalFlashWriteTrigger?relay    6

 
 286 bytes in segment BANKED_CODE
  30 bytes in segment BANK_RELAYS
  35 bytes in segment RAM_CODE_FLASH
  35 bytes in segment RAM_CODE_XDATA
   4 bytes in segment SFR_AN
 
 351 bytes of CODE  memory
   0 bytes of DATA  memory (+ 4 bytes shared)
  35 bytes of XDATA memory

Errors: none
Warnings: none
