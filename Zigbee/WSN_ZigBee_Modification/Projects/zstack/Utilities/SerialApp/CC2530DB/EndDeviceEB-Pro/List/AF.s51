///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.3.10338/W32 for 8051        10/Jul/2018  16:37:25 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Components\stack\af\AF.c                         /
//    Command line       =  -f D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_Ð /
//                          Þ¸Ä\Projects\zstack\Utilities\SerialApp\CC2530DB\ /
//                          ..\..\..\Tools\CC2530DB\f8wEndev.cfg (-DCPU32MHZ  /
//                          -DROOT=__near_func -DBLINK_LEDS) -f               /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\Tools\CC2530DB\f8wConfig.cfg (-DSECURE=0    /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xfFF1                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          "-DCONST=const __code" -DGENERIC=__generic        /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµ /
//                          Ï°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\Components\stack\af\AF.c  /
//                          -D ZIGBEEPRO -D NWK_AUTO_POLL -D HAL_UART=TRUE    /
//                          -D SERIAL_APP_PORT=0 -D LCD_SUPPORTED -D          /
//                          xPOWER_SAVING -lC D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ /
//                          ¼«\WSN_ZigBee_ÐÞ¸Ä\Projects\zstack\Utilities\Seri /
//                          alApp\CC2530DB\EndDeviceEB-Pro\List\ -lA          /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\End /
//                          DeviceEB-Pro\List\ --diag_suppress Pe001,Pa010    /
//                          -o D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_Ð /
//                          Þ¸Ä\Projects\zstack\Utilities\SerialApp\CC2530DB\ /
//                          EndDeviceEB-Pro\Obj\ -e --debug --core=plain      /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 8 -I D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµ /
//                          Ï°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\Projects\zstack\Utilities /
//                          \SerialApp\CC2530DB\ -I                           /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          SOURCE\ -I D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ /
//                          ZigBee_ÐÞ¸Ä\Projects\zstack\Utilities\SerialApp\C /
//                          C2530DB\..\..\..\ZMAIN\TI2530DB\ -I               /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\MT\ -I                     /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\HAL\INCLUDE\ -I            /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\ -I    /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\ -I         /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\OSAL\INCLUDE\ -I           /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\STACK\AF\ -I               /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\STACK\NWK\ -I              /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\STACK\SEC\ -I              /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\STACK\SAPI\ -I             /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\STACK\SYS\ -I              /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\STACK\ZDO\ -I              /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\ZMAC\F8W\ -I               /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\ZMAC\ -I                   /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\SERVICES\SADDR\ -I         /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\SERVICES\SDATA\ -I         /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\MAC\INCLUDE\ -I            /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\ -I         /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\ -I    /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE /
//                          _CHIP\ -Ohz --require_prototypes                  /
//    List file          =  D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\End /
//                          DeviceEB-Pro\List\AF.s51                          /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME AF

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?CALL_IND
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_MOV_X
        EXTERN ?PUSH_XSTACK8_X_TWO
        EXTERN ?PUSH_XSTACK_I_FOUR
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?V0
        EXTERN ?XLOAD_R2345
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTORE_R2345
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC ??AF_DataRequest?relay
        FUNCTION ??AF_DataRequest?relay,0203H
        FUNCTION ??afBuildMSGIncoming?relay,0203H
        PUBLIC ??afCopyAddress?relay
        FUNCTION ??afCopyAddress?relay,0203H
        PUBLIC ??afDataConfirm?relay
        FUNCTION ??afDataConfirm?relay,0203H
        PUBLIC ??afDataReqMTU?relay
        FUNCTION ??afDataReqMTU?relay,0203H
        PUBLIC ??afEndPoints?relay
        FUNCTION ??afEndPoints?relay,0203H
        PUBLIC ??afFindEndPointDesc?relay
        FUNCTION ??afFindEndPointDesc?relay,0203H
        FUNCTION ??afFindEndPointDescList?relay,0203H
        PUBLIC ??afFindSimpleDesc?relay
        FUNCTION ??afFindSimpleDesc?relay,0203H
        PUBLIC ??afGetMatch?relay
        FUNCTION ??afGetMatch?relay,0203H
        PUBLIC ??afIncomingData?relay
        FUNCTION ??afIncomingData?relay,0203H
        PUBLIC ??afInit?relay
        FUNCTION ??afInit?relay,0203H
        PUBLIC ??afNumEndPoints?relay
        FUNCTION ??afNumEndPoints?relay,0203H
        PUBLIC ??afRegister?relay
        FUNCTION ??afRegister?relay,0203H
        PUBLIC ??afRegisterExtended?relay
        FUNCTION ??afRegisterExtended?relay,0203H
        PUBLIC ??afSetMatch?relay
        FUNCTION ??afSetMatch?relay,0203H
        PUBLIC AF_DataRequest
        FUNCTION AF_DataRequest,021203H
        ARGFRAME XSTACK, 9, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 46, STACK
        PUBLIC AF_DataRequestDiscoverRoute
        FUNCTION afBuildMSGIncoming,021203H
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 22, STACK
        PUBLIC afCopyAddress
        FUNCTION afCopyAddress,021203H
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC afDataConfirm
        FUNCTION afDataConfirm,021203H
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC afDataReqMTU
        FUNCTION afDataReqMTU,021203H
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC afEndPoints
        FUNCTION afEndPoints,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 3, STACK
        PUBLIC afFindEndPointDesc
        FUNCTION afFindEndPointDesc,021203H
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        FUNCTION afFindEndPointDescList,0203H
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC afFindSimpleDesc
        FUNCTION afFindSimpleDesc,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC afGetMatch
        FUNCTION afGetMatch,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC afIncomingData
        FUNCTION afIncomingData,021203H
        ARGFRAME XSTACK, 8, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 38, STACK
        PUBLIC afInit
        FUNCTION afInit,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC afNumEndPoints
        FUNCTION afNumEndPoints,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC afRegister
        FUNCTION afRegister,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC afRegisterExtended
        FUNCTION afRegisterExtended,021203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 12, STACK
        PUBLIC afSetMatch
        FUNCTION afSetMatch,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC epList
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
osal_mem_alloc      SYMBOL "osal_mem_alloc"
osal_msg_allocate   SYMBOL "osal_msg_allocate"
osal_msg_send       SYMBOL "osal_msg_send"
aps_FindGroupForEndpoint SYMBOL "aps_FindGroupForEndpoint"
osal_mem_free       SYMBOL "osal_mem_free"
osal_memcpy         SYMBOL "osal_memcpy"
NLME_IsAddressBroadcast SYMBOL "NLME_IsAddressBroadcast"
sAddrExtCpy         SYMBOL "sAddrExtCpy"
APSDE_DataReq       SYMBOL "APSDE_DataReq"
NLME_GetShortAddr   SYMBOL "NLME_GetShortAddr"
APSDE_DataReqMTU    SYMBOL "APSDE_DataReqMTU"
??APSDE_DataReq?relay SYMBOL "?relay", APSDE_DataReq
??APSDE_DataReqMTU?relay SYMBOL "?relay", APSDE_DataReqMTU
??NLME_GetShortAddr?relay SYMBOL "?relay", NLME_GetShortAddr
??NLME_IsAddressBroadcast?relay SYMBOL "?relay", NLME_IsAddressBroadcast
??aps_FindGroupForEndpoint?relay SYMBOL "?relay", aps_FindGroupForEndpoint
??osal_mem_alloc?relay SYMBOL "?relay", osal_mem_alloc
??osal_mem_free?relay SYMBOL "?relay", osal_mem_free
??osal_memcpy?relay SYMBOL "?relay", osal_memcpy
??osal_msg_allocate?relay SYMBOL "?relay", osal_msg_allocate
??osal_msg_send?relay SYMBOL "?relay", osal_msg_send
??sAddrExtCpy?relay SYMBOL "?relay", sAddrExtCpy
AF_DataRequest      SYMBOL "AF_DataRequest"
??AF_DataRequest?relay SYMBOL "?relay", AF_DataRequest
afCopyAddress       SYMBOL "afCopyAddress"
??afCopyAddress?relay SYMBOL "?relay", afCopyAddress
afDataConfirm       SYMBOL "afDataConfirm"
??afDataConfirm?relay SYMBOL "?relay", afDataConfirm
afDataReqMTU        SYMBOL "afDataReqMTU"
??afDataReqMTU?relay SYMBOL "?relay", afDataReqMTU
afEndPoints         SYMBOL "afEndPoints"
??afEndPoints?relay SYMBOL "?relay", afEndPoints
afFindEndPointDesc  SYMBOL "afFindEndPointDesc"
??afFindEndPointDesc?relay SYMBOL "?relay", afFindEndPointDesc
afFindSimpleDesc    SYMBOL "afFindSimpleDesc"
??afFindSimpleDesc?relay SYMBOL "?relay", afFindSimpleDesc
afGetMatch          SYMBOL "afGetMatch"
??afGetMatch?relay  SYMBOL "?relay", afGetMatch
afIncomingData      SYMBOL "afIncomingData"
??afIncomingData?relay SYMBOL "?relay", afIncomingData
afInit              SYMBOL "afInit"
??afInit?relay      SYMBOL "?relay", afInit
afNumEndPoints      SYMBOL "afNumEndPoints"
??afNumEndPoints?relay SYMBOL "?relay", afNumEndPoints
afRegister          SYMBOL "afRegister"
??afRegister?relay  SYMBOL "?relay", afRegister
afRegisterExtended  SYMBOL "afRegisterExtended"
??afRegisterExtended?relay SYMBOL "?relay", afRegisterExtended
afSetMatch          SYMBOL "afSetMatch"
??afSetMatch?relay  SYMBOL "?relay", afSetMatch

        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_allocate
        FUNCTION osal_msg_allocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_send
        FUNCTION osal_msg_send,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN aps_FindGroupForEndpoint
        FUNCTION aps_FindGroupForEndpoint,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_IsAddressBroadcast
        FUNCTION NLME_IsAddressBroadcast,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN sAddrExtCpy
        FUNCTION sAddrExtCpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSDE_DataReq
        FUNCTION APSDE_DataReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetShortAddr
        FUNCTION NLME_GetShortAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSDE_DataReqMTU
        FUNCTION APSDE_DataReqMTU,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??APSDE_DataReq?relay
        FUNCTION ??APSDE_DataReq?relay,00H
        EXTERN ??APSDE_DataReqMTU?relay
        FUNCTION ??APSDE_DataReqMTU?relay,00H
        EXTERN ??NLME_GetShortAddr?relay
        FUNCTION ??NLME_GetShortAddr?relay,00H
        EXTERN ??NLME_IsAddressBroadcast?relay
        FUNCTION ??NLME_IsAddressBroadcast?relay,00H
        EXTERN ??aps_FindGroupForEndpoint?relay
        FUNCTION ??aps_FindGroupForEndpoint?relay,00H
        EXTERN ??osal_mem_alloc?relay
        FUNCTION ??osal_mem_alloc?relay,00H
        EXTERN ??osal_mem_free?relay
        FUNCTION ??osal_mem_free?relay,00H
        EXTERN ??osal_memcpy?relay
        FUNCTION ??osal_memcpy?relay,00H
        EXTERN ??osal_msg_allocate?relay
        FUNCTION ??osal_msg_allocate?relay,00H
        EXTERN ??osal_msg_send?relay
        FUNCTION ??osal_msg_send?relay,00H
        EXTERN ??sAddrExtCpy?relay
        FUNCTION ??sAddrExtCpy?relay,00H
        EXTERN apsfSendFragmented

// D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\Components\stack\af\AF.c
//    1 /**************************************************************************************************
//    2   Filename:       AF.c
//    3   Revised:        $Date: 2009-03-19 13:41:00 -0700 (Thu, 19 Mar 2009) $
//    4   Revision:       $Revision: 19470 $
//    5 
//    6   Description:    Application Framework - Device Description helper functions
//    7 
//    8 
//    9   Copyright 2004-2009 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License").  You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product.  Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 
//   40 /*********************************************************************
//   41  * INCLUDES
//   42  */
//   43 
//   44 #include "OSAL.h"
//   45 #include "AF.h"
//   46 #include "nwk_globals.h"
//   47 #include "nwk_util.h"
//   48 #include "aps_groups.h"
//   49 #include "ZDProfile.h"
//   50 #include "aps_frag.h"
//   51 
//   52 #if defined ( MT_AF_CB_FUNC )
//   53   #include "MT_AF.h"
//   54 #endif
//   55 
//   56 #if defined ( INTER_PAN )
//   57   #include "stub_aps.h"
//   58 #endif
//   59 
//   60 /*********************************************************************
//   61  * MACROS
//   62  */
//   63 
//   64 /*********************************************************************
//   65  * @fn      afSend
//   66  *
//   67  * @brief   Helper macro for V1 API to invoke V2 API.
//   68  *
//   69  * input parameters
//   70  *
//   71  * @param  *dstAddr - Full ZB destination address: Nwk Addr + End Point.
//   72  * @param   srcEP - Origination (i.e. respond to or ack to) End Point.
//   73  * @param   cID - A valid cluster ID as specified by the Profile.
//   74  * @param   len - Number of bytes of data pointed to by next param.
//   75  * @param  *buf - A pointer to the data bytes to send.
//   76  * @param   options - Valid bit mask of AF Tx Options as defined in AF.h.
//   77  * @param  *transID - A pointer to a byte which can be modified and which will
//   78  *                    be used as the transaction sequence number of the msg.
//   79  *
//   80  * output parameters
//   81  *
//   82  * @param  *transID - Incremented by one if the return value is success.
//   83  *
//   84  * @return  afStatus_t - See previous definition of afStatus_... types.
//   85  */
//   86 #define afSend( dstAddr, srcEP, cID, len, buf, transID, options, radius ) \ 
//   87         AF_DataRequest( (dstAddr), afFindEndPointDesc( (srcEP) ), \ 
//   88                           (cID), (len), (buf), (transID), (options), (radius) )
//   89 
//   90 /*********************************************************************
//   91  * CONSTANTS
//   92  */
//   93 
//   94 /*********************************************************************
//   95  * TYPEDEFS
//   96  */
//   97 
//   98 /*********************************************************************
//   99  * GLOBAL VARIABLES
//  100  */
//  101 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  102 epList_t *epList;
epList:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  103 
//  104 /*********************************************************************
//  105  * EXTERNAL VARIABLES
//  106  */
//  107 
//  108 /*********************************************************************
//  109  * EXTERNAL FUNCTIONS
//  110  */
//  111 
//  112 /*********************************************************************
//  113  * LOCAL VARIABLES
//  114  */
//  115 
//  116 /*********************************************************************
//  117  * LOCAL FUNCTIONS
//  118  */
//  119 
//  120 static void afBuildMSGIncoming( aps_FrameFormat_t *aff, endPointDesc_t *epDesc,
//  121                 zAddrType_t *SrcAddress, uint16 SrcPanId, NLDE_Signal_t *sig,
//  122                 byte SecurityUse, uint32 timestamp );
//  123 
//  124 static epList_t *afFindEndPointDescList( byte EndPoint );
//  125 
//  126 static pDescCB afGetDescCB( endPointDesc_t *epDesc );
//  127 
//  128 /*********************************************************************
//  129  * NETWORK LAYER CALLBACKS
//  130  */
//  131 
//  132 /*********************************************************************
//  133  * PUBLIC FUNCTIONS
//  134  */
//  135 
//  136 /*********************************************************************
//  137  * @fn      afInit
//  138  *
//  139  * @brief   Initialization function for the AF.
//  140  *
//  141  * @param   none
//  142  *
//  143  * @return  none
//  144  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  145 void afInit( void )
afInit:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function afInit
        CODE
//  146 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  147   // Start with no endpoint defined
//  148   epList = NULL;
        MOV     DPTR,#epList
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  149 }
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock0
//  150 
//  151 /*********************************************************************
//  152  * @fn      afRegisterExtended
//  153  *
//  154  * @brief   Register an Application's EndPoint description.
//  155  *
//  156  * @param   epDesc - pointer to the Application's endpoint descriptor.
//  157  * @param   descFn - pointer to descriptor callback function
//  158  *
//  159  * NOTE:  The memory that epDesc is pointing to must exist after this call.
//  160  *
//  161  * @return  Pointer to epList_t on success, NULL otherwise.
//  162  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  163 epList_t *afRegisterExtended( endPointDesc_t *epDesc, pDescCB descFn )
afRegisterExtended:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function afRegisterExtended
        CODE
//  164 {
        FUNCALL afRegisterExtended, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
//  165   epList_t *ep;
//  166   epList_t *epSearch;
//  167 
//  168   ep = osal_mem_alloc( sizeof ( epList_t ) );
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0x7
        MOV     R3,#0x0
        LCALL   ??osal_mem_alloc?relay
//  169   if ( ep )
        MOV     A,R2
        ORL     A,R3
        JZ      ??afRegisterExtended_0
//  170   {
//  171     // Fill in the new list entry
//  172     ep->epDesc = epDesc;
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 1
        MOVX    @DPTR,A
//  173 
//  174     // Default to allow Match Descriptor.
//  175     ep->flags = eEP_AllowMatch;
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOV     A,#0x1
        LCALL   ?Subroutine9 & 0xFFFF
//  176     ep->pfnDescCB = descFn;
??CrossCallReturnLabel_7:
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        LCALL   ?Subroutine9 & 0xFFFF
//  177     ep->nextDesc = NULL;
??CrossCallReturnLabel_8:
        INC     DPTR
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  178 
//  179     // Does a list exist?
//  180     if ( epList == NULL )
        MOV     DPTR,#epList
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_16:
        JNZ     ??afRegisterExtended_1
//  181       epList = ep;  // Make this the first entry
        MOV     DPTR,#epList
        SJMP    ??afRegisterExtended_2
//  182     else
//  183     {
//  184       // Look for the end of the list
//  185       epSearch = epList;
??afRegisterExtended_1:
        MOVX    A,@DPTR
        MOV     R1,A
//  186       while( epSearch->nextDesc != NULL )
//  187         epSearch = epSearch->nextDesc;
??afRegisterExtended_3:
        MOV     A,R0
        ADD     A,#0x5
        MOV     R0,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,R0
        MOV     R4,A
        MOV     A,R1
        MOV     R5,A
        MOV     DPL,R4
        MOV     DPH,R5
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_17:
        JNZ     ??afRegisterExtended_3
//  188 
//  189       // Add new entry to end of list
//  190       epSearch->nextDesc = ep;
        MOV     DPL,R4
        MOV     DPH,R5
??afRegisterExtended_2:
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        CFI EndBlock cfiBlock1
//  191     }
//  192   }
//  193 
//  194   return ep;
??afRegisterExtended_0:
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1
//  195 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock2

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
        CFI Block cfiCond3 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_7
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond4 Using cfiCommon0
        CFI (cfiCond4) NoFunction
        CFI (cfiCond4) Conditional ??CrossCallReturnLabel_8
        CFI (cfiCond4) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond4) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond4) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond4) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond4) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond4) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond4) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond4) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond4) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond4) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond4) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond4) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond4) CFA_SP SP+0
        CFI (cfiCond4) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker5 Using cfiCommon1
        CFI (cfiPicker5) NoFunction
        CFI (cfiPicker5) Picker
        MOVX    @DPTR,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond3
        CFI EndBlock cfiCond4
        CFI EndBlock cfiPicker5
//  196 
//  197 /*********************************************************************
//  198  * @fn      afRegister
//  199  *
//  200  * @brief   Register an Application's EndPoint description.
//  201  *
//  202  * @param   epDesc - pointer to the Application's endpoint descriptor.
//  203  *
//  204  * NOTE:  The memory that epDesc is pointing to must exist after this call.
//  205  *
//  206  * @return  afStatus_SUCCESS - Registered
//  207  *          afStatus_MEM_FAIL - not enough memory to add descriptor
//  208  *          afStatus_INVALID_PARAMETER - duplicate endpoint
//  209  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  210 afStatus_t afRegister( endPointDesc_t *epDesc )
afRegister:
        CFI Block cfiBlock6 Using cfiCommon0
        CFI Function afRegister
        CODE
//  211 {
        FUNCALL afRegister, afFindEndPointDescList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afRegister, afRegisterExtended
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  212   epList_t *ep;
//  213   
//  214   // Look for duplicate endpoint
//  215   if ( afFindEndPointDescList( epDesc->endPoint ) )
        ; Setup parameters for call to function afFindEndPointDescList
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??afFindEndPointDescList?relay
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ORL     A,?V0 + 1
        JZ      ??afRegister_0
//  216     return ( afStatus_INVALID_PARAMETER );
        MOV     R1,#0x2
        SJMP    ??afRegister_1
//  217   
//  218   ep = afRegisterExtended( epDesc, NULL );
//  219 
//  220   return ((ep == NULL) ? afStatus_MEM_FAIL : afStatus_SUCCESS);
??afRegister_0:
        ; Setup parameters for call to function afRegisterExtended
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??afRegisterExtended?relay
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ORL     A,?V0 + 1
        JNZ     ??afRegister_2
        MOV     R1,#0x10
        SJMP    ??afRegister_1
??afRegister_2:
        MOV     R1,#0x0
??afRegister_1:
        LJMP    ?Subroutine2 & 0xFFFF
        CFI EndBlock cfiBlock6
//  221 }
//  222 
//  223 
//  224 /*********************************************************************
//  225  * @fn          afDataConfirm
//  226  *
//  227  * @brief       This function will generate the Data Confirm back to
//  228  *              the application.
//  229  *
//  230  * @param       endPoint - confirm end point
//  231  * @param       transID - transaction ID from APSDE_DATA_REQUEST
//  232  * @param       status - status of APSDE_DATA_REQUEST
//  233  *
//  234  * @return      none
//  235  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  236 void afDataConfirm( uint8 endPoint, uint8 transID, ZStatus_t status )
afDataConfirm:
        CFI Block cfiBlock7 Using cfiCommon0
        CFI Function afDataConfirm
        CODE
//  237 {
        FUNCALL afDataConfirm, afFindEndPointDesc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afDataConfirm, osal_msg_allocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afDataConfirm, osal_msg_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
        MOV     A,R2
        MOV     R7,A
        MOV     ?V0 + 0,R3
//  238   endPointDesc_t *epDesc;
//  239   afDataConfirm_t *msgPtr;
//  240 
//  241   // Find the endpoint description
//  242   epDesc = afFindEndPointDesc( endPoint );
        ; Setup parameters for call to function afFindEndPointDesc
        LCALL   ?Subroutine32 & 0xFFFF
//  243   if ( epDesc == NULL )
??CrossCallReturnLabel_57:
        MOV     A,R2
        ORL     A,?V0 + 5
        JZ      ??CrossCallReturnLabel_19
//  244     return;
//  245 
//  246   // Determine the incoming command type
//  247   msgPtr = (afDataConfirm_t *)osal_msg_allocate( sizeof(afDataConfirm_t) );
        ; Setup parameters for call to function osal_msg_allocate
        MOV     R2,#0x4
        MOV     R3,#0x0
        LCALL   ??osal_msg_allocate?relay
//  248   if ( msgPtr )
        MOV     A,R2
        ORL     A,R3
        JZ      ??CrossCallReturnLabel_19
//  249   {
//  250     // Build the Data Confirm message
//  251     msgPtr->hdr.event = AF_DATA_CONFIRM_CMD;
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,#-0x3
        MOVX    @DPTR,A
//  252     msgPtr->hdr.status = status;
        INC     DPTR
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
//  253     msgPtr->endpoint = endPoint;
        MOV     A,R6
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    @DPTR,A
//  254     msgPtr->transID = transID;
        MOV     A,R7
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    @DPTR,A
//  255 
//  256 #if defined ( MT_AF_CB_FUNC )
//  257     /* If MT has subscribed for this callback, don't send as a message. */
//  258     if ( AFCB_CHECK(CB_ID_AF_DATA_CNF,*(epDesc->task_id)) )
//  259     {
//  260       /* Send callback if it's subscribed */
//  261       MT_AfDataConfirm ((void *)msgPtr);
//  262       /* Release the memory. */
//  263       osal_msg_deallocate( (void *)msgPtr );
//  264     }
//  265     else
//  266 #endif
//  267     {
//  268       /* send message through task message */
//  269       osal_msg_send( *(epDesc->task_id), (byte *)msgPtr );
        ; Setup parameters for call to function osal_msg_send
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        LCALL   ?Subroutine14 & 0xFFFF
//  270     }
//  271   }
??CrossCallReturnLabel_19:
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock7
//  272 }
//  273 
//  274 /*********************************************************************
//  275  * @fn          afIncomingData
//  276  *
//  277  * @brief       Transfer a data PDU (ASDU) from the APS sub-layer to the AF.
//  278  *
//  279  * @param       aff  - pointer to APS frame format
//  280  * @param       SrcAddress  - Source address
//  281  * @param       sig - incoming message's link quality
//  282  * @param       SecurityUse - Security enable/disable
//  283  *
//  284  * @return      none
//  285  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  286 void afIncomingData( aps_FrameFormat_t *aff, zAddrType_t *SrcAddress, uint16 SrcPanId,
afIncomingData:
        CFI Block cfiBlock8 Using cfiCommon0
        CFI Function afIncomingData
        CODE
//  287                      NLDE_Signal_t *sig, byte SecurityUse, uint32 timestamp )
//  288 {
        FUNCALL afIncomingData, aps_FindGroupForEndpoint
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afIncomingData, afFindEndPointDesc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afIncomingData, afFindEndPointDescList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afIncomingData, afFindEndPointDesc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afIncomingData, aps_FindGroupForEndpoint
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afIncomingData, afFindEndPointDesc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afIncomingData, afFindEndPointDescList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afIncomingData, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afIncomingData, afBuildMSGIncoming
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 12
        MOV     A,#-0xc
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 28)
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R1
        MOVX    @DPTR,A
        MOV     A,#0x20
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
//  289   endPointDesc_t *epDesc = NULL;
//  290   uint16 epProfileID = 0xFFFF;  // Invalid Profile ID
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  291   epList_t *pList;
//  292 #if !defined ( APS_NO_GROUPS )    
//  293   uint8 grpEp;
//  294 #endif  
//  295 
//  296   if ( ((aff->FrmCtrl & APS_DELIVERYMODE_MASK) == APS_FC_DM_GROUP) )
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ADD     A,#0x2
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine35_0 & 0xFFFF
??CrossCallReturnLabel_65:
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ADD     A,#0x4
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine35_0 & 0xFFFF
??CrossCallReturnLabel_66:
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_21:
        JNZ     ??afIncomingData_0
//  297   {
//  298 #if !defined ( APS_NO_GROUPS )    
//  299     // Find the first endpoint for this group
//  300     grpEp = aps_FindGroupForEndpoint( aff->GroupID, APS_GROUPS_FIND_FIRST );
        ; Setup parameters for call to function aps_FindGroupForEndpoint
        MOV     R1,#-0x2
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine10 & 0xFFFF
//  301     if ( grpEp == APS_GROUPS_EP_NOT_FOUND )
??CrossCallReturnLabel_9:
        JNZ     $+5
        LJMP    ??afIncomingData_1 & 0xFFFF
//  302       return;   // No endpoint found
//  303 
//  304     epDesc = afFindEndPointDesc( grpEp );
        ; Setup parameters for call to function afFindEndPointDesc
        LCALL   ?Subroutine26 & 0xFFFF
//  305     if ( epDesc == NULL )
??CrossCallReturnLabel_44:
        JNZ     $+5
        LJMP    ??afIncomingData_1 & 0xFFFF
//  306       return;   // Endpoint descriptor not found
//  307 
//  308     pList = afFindEndPointDescList( epDesc->endPoint );
??afIncomingData_2:
        ; Setup parameters for call to function afFindEndPointDescList
        LCALL   ?Subroutine23 & 0xFFFF
//  309 #else
//  310     return; // Not supported
//  311 #endif    
//  312   }
??CrossCallReturnLabel_40:
        SJMP    ??afIncomingData_3
//  313   else if ( aff->DstEndPoint == AF_BROADCAST_ENDPOINT )
??afIncomingData_0:
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_23:
        MOV     R1,A
        MOV     A,#-0x1
        XRL     A,R1
        JNZ     ??afIncomingData_4
//  314   {
//  315     // Set the list
//  316     if ( (pList = epList) )
        MOV     DPTR,#epList
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_32:
        JNZ     $+5
        LJMP    ??afIncomingData_1 & 0xFFFF
//  317     {
//  318       epDesc = pList->epDesc;
        SJMP    ??afIncomingData_5
//  319     }
//  320   }
//  321   else if ( (epDesc = afFindEndPointDesc( aff->DstEndPoint )) )
??afIncomingData_4:
        ; Setup parameters for call to function afFindEndPointDesc
        LCALL   ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_58:
        MOV     R0,?V0 + 4
        MOV     R1,?V0 + 5
        MOV     A,R0
        MOV     R6,A
        MOV     A,R1
        MOV     R7,A
        MOV     A,R0
        ORL     A,R1
        JZ      ??afIncomingData_3
        SJMP    ??afIncomingData_2
//  322   {
//  323     pList = afFindEndPointDescList( epDesc->endPoint );
//  324   }
//  325 
//  326   while ( epDesc )
//  327   {
//  328     if ( pList->pfnDescCB )
//  329     {
//  330       uint16 *pID = (uint16 *)(pList->pfnDescCB(
//  331                                  AF_DESCRIPTOR_PROFILE_ID, epDesc->endPoint ));
//  332       if ( pID )
//  333       {
//  334         epProfileID = *pID;
//  335         osal_mem_free( pID );
//  336       }
//  337     }
//  338     else if ( epDesc->simpleDesc )
//  339     {
//  340       epProfileID = epDesc->simpleDesc->AppProfId;
//  341     }
//  342 
//  343     if ( (aff->ProfileID == epProfileID) ||
//  344          ((epDesc->endPoint == ZDO_EP) && (aff->ProfileID == ZDO_PROFILE_ID)) )
//  345     {
//  346       {
//  347         afBuildMSGIncoming( aff, epDesc, SrcAddress, SrcPanId, sig, SecurityUse, timestamp );
//  348       }
//  349     }
//  350 
//  351     if ( ((aff->FrmCtrl & APS_DELIVERYMODE_MASK) == APS_FC_DM_GROUP) )
//  352     {
//  353 #if !defined ( APS_NO_GROUPS )      
//  354       // Find the next endpoint for this group
//  355       grpEp = aps_FindGroupForEndpoint( aff->GroupID, grpEp );
//  356       if ( grpEp == APS_GROUPS_EP_NOT_FOUND )
//  357         return;   // No endpoint found
//  358 
//  359       epDesc = afFindEndPointDesc( grpEp );
//  360       if ( epDesc == NULL )
//  361         return;   // Endpoint descriptor not found
//  362 
//  363       pList = afFindEndPointDescList( epDesc->endPoint );
//  364 #else
//  365       return;
//  366 #endif      
//  367     }
//  368     else if ( aff->DstEndPoint == AF_BROADCAST_ENDPOINT )
//  369     {
//  370       pList = pList->nextDesc;
//  371       if ( pList )
//  372         epDesc = pList->epDesc;
??afIncomingData_5:
        MOV     DPL,?V0 + 6
        MOV     DPH,?V0 + 7
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
??afIncomingData_3:
        MOV     A,R6
        ORL     A,R7
        JNZ     $+5
        LJMP    ??afIncomingData_1 & 0xFFFF
        SJMP    ??CrossCallReturnLabel_41
??afIncomingData_6:
        ; Setup parameters for call to function aps_FindGroupForEndpoint
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_10:
        JNZ     $+5
        LJMP    ??afIncomingData_1 & 0xFFFF
        ; Setup parameters for call to function afFindEndPointDesc
        LCALL   ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_45:
        JNZ     $+5
        LJMP    ??afIncomingData_1 & 0xFFFF
        ; Setup parameters for call to function afFindEndPointDescList
        LCALL   ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_41:
        MOV     DPL,?V0 + 6
        MOV     DPH,?V0 + 7
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_105:
        MOV     A,R0
        MOV     R4,A
        MOV     A,R1
        MOV     R5,A
        MOV     A,R4
        ORL     A,R5
        MOV     DPL,R6
        MOV     DPH,R7
        JZ      ??afIncomingData_7
        ; Setup parameters for indirect call
        LCALL   ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_42:
        LCALL   ?CALL_IND
        MOV     A,R2
        ORL     A,R3
        JZ      ??CrossCallReturnLabel_67
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ??Subroutine34_0 & 0xFFFF
??CrossCallReturnLabel_62:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_5:
        SJMP    ??CrossCallReturnLabel_67
??afIncomingData_7:
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_11:
        JZ      ??CrossCallReturnLabel_67
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_63:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine35_0 & 0xFFFF
??CrossCallReturnLabel_67:
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_35:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_64:
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??afIncomingData_8
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??afIncomingData_8:
        JZ      ??afIncomingData_9
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        JNZ     ??afIncomingData_10
        MOV     A,R0
        ORL     A,R1
        JNZ     ??afIncomingData_10
??afIncomingData_9:
        ; Setup parameters for call to function afBuildMSGIncoming
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_FOUR
        CFI CFA_XSP16 add(XSP16, 32)
        MOV     A,#0x22
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?PUSH_XSTACK8_X_TWO
        CFI CFA_XSP16 add(XSP16, 34)
        MOV     A,#0x22
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?PUSH_XSTACK8_X_TWO
        CFI CFA_XSP16 add(XSP16, 36)
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?PUSH_XSTACK8_X_TWO
        CFI CFA_XSP16 add(XSP16, 38)
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine36_0 & 0xFFFF
??CrossCallReturnLabel_77:
        LCALL   ??afBuildMSGIncoming?relay
        MOV     A,#0xa
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 28)
??afIncomingData_10:
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_22:
        JNZ     $+5
        LJMP    ??afIncomingData_6 & 0xFFFF
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_24:
        CPL     A
        JNZ     ??afIncomingData_1
        MOV     DPL,?V0 + 6
        MOV     DPH,?V0 + 7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_31:
        JZ      $+5
        LJMP    ??afIncomingData_5 & 0xFFFF
//  373       else
//  374         epDesc = NULL;
??afIncomingData_1:
        MOV     A,#0xc
        CFI EndBlock cfiBlock8
        REQUIRE ?Subroutine3
        ; // Fall through to label ?Subroutine3
//  375     }
//  376     else
//  377       epDesc = NULL;
//  378   }
//  379 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiBlock9 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Valid
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock9

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine32:
        CFI Block cfiCond10 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_57
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond11 Using cfiCommon0
        CFI (cfiCond11) NoFunction
        CFI (cfiCond11) Conditional ??CrossCallReturnLabel_58
        CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond11) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond11) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond11) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond11) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond11) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond11) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond11) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond11) CFA_SP SP+0
        CFI (cfiCond11) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond12 Using cfiCommon0
        CFI (cfiCond12) NoFunction
        CFI (cfiCond12) Conditional ??CrossCallReturnLabel_59, ??CrossCallReturnLabel_44
        CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond12) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond12) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond12) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond12) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond12) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond12) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond12) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond12) CFA_SP SP+0
        CFI (cfiCond12) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond13 Using cfiCommon0
        CFI (cfiCond13) NoFunction
        CFI (cfiCond13) Conditional ??CrossCallReturnLabel_59, ??CrossCallReturnLabel_45
        CFI (cfiCond13) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond13) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond13) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond13) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond13) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond13) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond13) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond13) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond13) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond13) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond13) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond13) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond13) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond13) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond13) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond13) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond13) CFA_SP SP+0
        CFI (cfiCond13) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiPicker14 Using cfiCommon1
        CFI (cfiPicker14) NoFunction
        CFI (cfiPicker14) Picker
        LCALL   ??afFindEndPointDesc?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        RET
        CFI EndBlock cfiCond10
        CFI EndBlock cfiCond11
        CFI EndBlock cfiCond12
        CFI EndBlock cfiCond13
        CFI EndBlock cfiPicker14

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine26:
        CFI Block cfiCond15 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_44
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond16 Using cfiCommon0
        CFI (cfiCond16) NoFunction
        CFI (cfiCond16) Conditional ??CrossCallReturnLabel_45
        CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond16) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond16) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond16) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond16) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond16) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond16) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond16) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond16) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond16) CFA_SP SP+0
        CFI (cfiCond16) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiPicker17 Using cfiCommon1
        CFI (cfiPicker17) NoFunction
        CFI (cfiPicker17) Picker
        LCALL   ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_59:
        MOV     R6,?V0 + 4
        MOV     R7,?V0 + 5
        MOV     A,R6
        ORL     A,R7
        RET
        CFI EndBlock cfiCond15
        CFI EndBlock cfiCond16
        CFI EndBlock cfiPicker17

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine23:
        CFI Block cfiCond18 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_40
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond19 Using cfiCommon0
        CFI (cfiCond19) NoFunction
        CFI (cfiCond19) Conditional ??CrossCallReturnLabel_41
        CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond19) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond19) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond19) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond19) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond19) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond19) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond19) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond19) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond19) CFA_SP SP+0
        CFI (cfiCond19) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiPicker20 Using cfiCommon1
        CFI (cfiPicker20) NoFunction
        CFI (cfiPicker20) Picker
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??afFindEndPointDescList?relay
        MOV     ?V0 + 6,R2
        MOV     ?V0 + 7,R3
        RET
        CFI EndBlock cfiCond18
        CFI EndBlock cfiCond19
        CFI EndBlock cfiPicker20

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine18:
        CFI Block cfiCond21 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_63
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond22 Using cfiCommon0
        CFI (cfiCond22) NoFunction
        CFI (cfiCond22) Conditional ??CrossCallReturnLabel_64
        CFI (cfiCond22) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond22) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond22) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond22) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond22) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond22) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond22) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond22) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond22) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond22) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond22) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond22) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond22) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond22) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond22) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond22) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond22) CFA_SP SP+0
        CFI (cfiCond22) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiPicker23 Using cfiCommon1
        CFI (cfiPicker23) NoFunction
        CFI (cfiPicker23) Picker
        INC     DPTR
        CFI EndBlock cfiCond21
        CFI EndBlock cfiCond22
        CFI EndBlock cfiPicker23
        REQUIRE ??Subroutine34_0
        ; // Fall through to label ??Subroutine34_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine34_0:
        CFI Block cfiCond24 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_62
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond25 Using cfiCommon0
        CFI (cfiCond25) NoFunction
        CFI (cfiCond25) Conditional ??CrossCallReturnLabel_63
        CFI (cfiCond25) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond25) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond25) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond25) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond25) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond25) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond25) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond25) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond25) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond25) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond25) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond25) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond25) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond25) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond25) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond25) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond25) CFA_SP SP+0
        CFI (cfiCond25) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond26 Using cfiCommon0
        CFI (cfiCond26) NoFunction
        CFI (cfiCond26) Conditional ??CrossCallReturnLabel_64
        CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond26) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond26) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond26) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond26) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond26) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond26) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond26) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond26) CFA_SP SP+0
        CFI (cfiCond26) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiPicker27 Using cfiCommon1
        CFI (cfiPicker27) NoFunction
        CFI (cfiPicker27) Picker
        LCALL   ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_111:
        MOV     A,#0x3
        RET
        CFI EndBlock cfiCond24
        CFI EndBlock cfiCond25
        CFI EndBlock cfiCond26
        CFI EndBlock cfiPicker27

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine17:
        CFI Block cfiCond28 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_32
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond29 Using cfiCommon0
        CFI (cfiCond29) NoFunction
        CFI (cfiCond29) Conditional ??CrossCallReturnLabel_31
        CFI (cfiCond29) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond29) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond29) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond29) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond29) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond29) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond29) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond29) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond29) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond29) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond29) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond29) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond29) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond29) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond29) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond29) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond29) CFA_SP SP+0
        CFI (cfiCond29) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiPicker30 Using cfiCommon1
        CFI (cfiPicker30) NoFunction
        CFI (cfiPicker30) Picker
        LCALL   ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_54:
        MOV     A,?V0 + 6
        ORL     A,?V0 + 7
        RET
        CFI EndBlock cfiCond28
        CFI EndBlock cfiCond29
        CFI EndBlock cfiPicker30

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine15:
        CFI Block cfiCond31 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_21
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond32 Using cfiCommon0
        CFI (cfiCond32) NoFunction
        CFI (cfiCond32) Conditional ??CrossCallReturnLabel_22
        CFI (cfiCond32) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond32) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond32) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond32) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond32) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond32) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond32) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond32) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond32) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond32) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond32) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond32) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond32) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond32) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond32) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond32) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond32) CFA_SP SP+0
        CFI (cfiCond32) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiPicker33 Using cfiCommon1
        CFI (cfiPicker33) NoFunction
        CFI (cfiPicker33) Picker
        LCALL   ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_50:
        ANL     A,#0xc
        XRL     A,#0xc
        RET
        CFI EndBlock cfiCond31
        CFI EndBlock cfiCond32
        CFI EndBlock cfiPicker33

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
        CFI Block cfiCond34 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_9
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond35 Using cfiCommon0
        CFI (cfiCond35) NoFunction
        CFI (cfiCond35) Conditional ??CrossCallReturnLabel_10
        CFI (cfiCond35) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond35) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond35) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond35) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond35) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond35) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond35) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond35) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond35) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond35) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond35) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond35) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond35) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond35) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond35) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond35) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond35) CFA_SP SP+0
        CFI (cfiCond35) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiPicker36 Using cfiCommon1
        CFI (cfiPicker36) NoFunction
        CFI (cfiPicker36) Picker
        LCALL   ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_48:
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??aps_FindGroupForEndpoint?relay
        MOV     A,R1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
        XRL     A,#0xfe
        RET
        CFI EndBlock cfiCond34
        CFI EndBlock cfiCond35
        CFI EndBlock cfiPicker36
//  380 
//  381 /*********************************************************************
//  382  * @fn          afBuildMSGIncoming
//  383  *
//  384  * @brief       Build the message for the app
//  385  *
//  386  * @param
//  387  *
//  388  * @return      pointer to next in data buffer
//  389  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  390 static void afBuildMSGIncoming( aps_FrameFormat_t *aff, endPointDesc_t *epDesc,
afBuildMSGIncoming:
        CFI Block cfiBlock37 Using cfiCommon0
        CFI Function afBuildMSGIncoming
        CODE
//  391                  zAddrType_t *SrcAddress, uint16 SrcPanId, NLDE_Signal_t *sig, 
//  392                  byte SecurityUse, uint32 timestamp )
//  393 {
        FUNCALL afBuildMSGIncoming, osal_msg_allocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afBuildMSGIncoming, afCopyAddress
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afBuildMSGIncoming, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afBuildMSGIncoming, osal_msg_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 3
        MOV     A,#-0x3
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
        MOV     A,R1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
//  394   afIncomingMSGPacket_t *MSGpkt;
//  395   const byte len = sizeof( afIncomingMSGPacket_t ) + aff->asduLength;
//  396   byte *asdu = aff->asdu;
        MOV     A,R2
        ADD     A,#0xe
        MOV     DPL,A
        MOV     A,R3
        LCALL   ??Subroutine37_0 & 0xFFFF
??CrossCallReturnLabel_84:
        LCALL   ?Subroutine30 & 0xFFFF
//  397   MSGpkt = (afIncomingMSGPacket_t *)osal_msg_allocate( len );
??CrossCallReturnLabel_52:
        MOV     A,R2
        ADD     A,#0x10
        MOV     ?V0 + 2,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     ?V0 + 3,A
        ; Setup parameters for call to function osal_msg_allocate
        MOV     DPL,?V0 + 2
        MOV     DPH,A
        MOVX    A,@DPTR
        ADD     A,#0x23
        MOV     R2,A
        MOV     R3,#0x0
        LCALL   ??osal_msg_allocate?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     R6,?V0 + 4
        MOV     R7,?V0 + 5
//  398 
//  399   if ( MSGpkt == NULL )
        MOV     A,R6
        ORL     A,R7
        JNZ     $+5
        LJMP    ??CrossCallReturnLabel_20 & 0xFFFF
//  400   {
//  401     return;
//  402   }
//  403 
//  404   MSGpkt->hdr.event = AF_INCOMING_MSG_CMD;
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,#0x1a
        LCALL   ?Subroutine5 & 0xFFFF
//  405   MSGpkt->groupId = aff->GroupID;
??CrossCallReturnLabel_0:
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_33:
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        LCALL   ?Subroutine5 & 0xFFFF
//  406   MSGpkt->clusterId = aff->ClusterID;
??CrossCallReturnLabel_1:
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_34:
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine35_0 & 0xFFFF
//  407   afCopyAddress( &MSGpkt->srcAddr, SrcAddress );
??CrossCallReturnLabel_68:
        ; Setup parameters for call to function afCopyAddress
        MOV     A,#0x13
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,R6
        ADD     A,#0x6
        MOV     R2,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ??afCopyAddress?relay
//  408   MSGpkt->srcAddr.endPoint = aff->SrcEndPoint;
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,R6
        ADD     A,#0xf
        LCALL   ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_87:
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  409   MSGpkt->endPoint = epDesc->endPoint;
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_25:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,R6
        ADD     A,#0x14
        LCALL   ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_88:
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  410   MSGpkt->wasBroadcast = aff->wasBroadcast;
        MOV     A,?V0 + 0
        ADD     A,#0xc
        MOV     DPL,A
        MOV     A,?V0 + 1
        LCALL   ??Subroutine37_0 & 0xFFFF
??CrossCallReturnLabel_85:
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,R6
        ADD     A,#0x15
        LCALL   ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_89:
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  411   MSGpkt->LinkQuality = sig->LinkQuality;
        MOV     A,#0x17
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_26:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,R6
        ADD     A,#0x16
        LCALL   ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_90:
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  412   MSGpkt->correlation = sig->correlation;
        MOV     A,#0x17
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_37:
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,R6
        ADD     A,#0x17
        LCALL   ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_91:
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  413   MSGpkt->rssi = sig->rssi;
        MOV     A,#0x17
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_36:
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,R6
        ADD     A,#0x18
        LCALL   ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_92:
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine6 & 0xFFFF
//  414   MSGpkt->SecurityUse = SecurityUse;
??CrossCallReturnLabel_2:
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,R6
        ADD     A,#0x19
        LCALL   ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_93:
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  415   MSGpkt->timestamp = timestamp;
        MOV     A,#0x19
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?XLOAD_R2345
        MOV     A,R6
        ADD     A,#0x1a
        LCALL   ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_94:
        LCALL   ?XSTORE_R2345
//  416   MSGpkt->macDestAddr = aff->macDestAddr;
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_106:
        MOV     A,R6
        ADD     A,#0x12
        LCALL   ?Subroutine8 & 0xFFFF
//  417   MSGpkt->srcAddr.panId = SrcPanId;
??CrossCallReturnLabel_75:
        MOV     A,#0x15
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine39_0 & 0xFFFF
??CrossCallReturnLabel_97:
        MOV     A,R6
        ADD     A,#0x10
        LCALL   ?Subroutine8 & 0xFFFF
//  418   MSGpkt->cmd.TransSeqNumber = 0;
??CrossCallReturnLabel_76:
        MOV     A,R6
        ADD     A,#0x1e
        LCALL   ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_95:
        CLR     A
        MOVX    @DPTR,A
//  419   MSGpkt->cmd.DataLength = aff->asduLength;
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     R5,#0x0
        MOV     A,R6
        ADD     A,#0x1f
        LCALL   ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_96:
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  420 
//  421   if ( MSGpkt->cmd.DataLength )
        MOV     A,R6
        ADD     A,#0x21
        MOV     R0,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        MOV     A,R4
        JZ      ??afBuildMSGIncoming_0
//  422   {
//  423     MSGpkt->cmd.Data = (byte *)(MSGpkt + 1);
        MOV     A,R6
        ADD     A,#0x23
        INC     R0
        INC     R0
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ??Subroutine35_0 & 0xFFFF
//  424     osal_memcpy( MSGpkt->cmd.Data, asdu, MSGpkt->cmd.DataLength );
??CrossCallReturnLabel_69:
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 0,?V0 + 6
        MOV     ?V0 + 1,?V0 + 7
        MOV     ?V0 + 2,R5
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 22)
        LCALL   ?Subroutine13 & 0xFFFF
//  425   }
??CrossCallReturnLabel_82:
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
        SJMP    ??afBuildMSGIncoming_1
//  426   else
//  427   {
//  428     MSGpkt->cmd.Data = NULL;
??afBuildMSGIncoming_0:
        MOV     DPL,R2
        MOV     DPH,R3
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  429   }
//  430 
//  431 #if defined ( MT_AF_CB_FUNC )
//  432   // If ZDO or SAPI have registered for this endpoint, dont intercept it here
//  433   if (AFCB_CHECK(CB_ID_AF_DATA_IND, *(epDesc->task_id)))
//  434   {
//  435     MT_AfIncomingMsg( (void *)MSGpkt );
//  436     // Release the memory.
//  437     osal_msg_deallocate( (void *)MSGpkt );
//  438   }
//  439   else
//  440 #endif
//  441   {
//  442     // Send message through task message.
//  443     osal_msg_send( *(epDesc->task_id), (uint8 *)MSGpkt );
??afBuildMSGIncoming_1:
        ; Setup parameters for call to function osal_msg_send
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine22 & 0xFFFF
//  444   }
??CrossCallReturnLabel_38:
        LCALL   ?Subroutine14 & 0xFFFF
//  445 }
??CrossCallReturnLabel_20:
        MOV     A,#0x3
        LJMP    ?Subroutine3 & 0xFFFF
        CFI EndBlock cfiBlock37

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine30:
        CFI Block cfiCond38 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_54, ??CrossCallReturnLabel_32
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond39 Using cfiCommon0
        CFI (cfiCond39) NoFunction
        CFI (cfiCond39) Conditional ??CrossCallReturnLabel_54, ??CrossCallReturnLabel_31
        CFI (cfiCond39) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond39) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond39) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond39) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond39) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond39) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond39) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond39) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond39) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond39) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond39) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond39) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond39) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond39) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond39) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond39) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond39) CFA_SP SP+0
        CFI (cfiCond39) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond40 Using cfiCommon0
        CFI (cfiCond40) NoFunction
        CFI (cfiCond40) Conditional ??CrossCallReturnLabel_52
        CFI (cfiCond40) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond40) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond40) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond40) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond40) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond40) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond40) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond40) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond40) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond40) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond40) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond40) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond40) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond40) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond40) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond40) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond40) CFA_SP SP+0
        CFI (cfiCond40) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond41 Using cfiCommon0
        CFI (cfiCond41) NoFunction
        CFI (cfiCond41) Conditional ??CrossCallReturnLabel_53
        CFI (cfiCond41) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond41) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond41) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond41) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond41) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond41) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond41) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond41) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond41) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond41) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond41) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond41) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond41) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond41) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond41) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond41) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond41) CFA_SP SP+0
        CFI (cfiCond41) CFA_XSP16 add(XSP16, 46)
        CFI Block cfiPicker42 Using cfiCommon1
        CFI (cfiPicker42) NoFunction
        CFI (cfiPicker42) Picker
        MOVX    A,@DPTR
        MOV     ?V0 + 6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 7,A
        RET
        CFI EndBlock cfiCond38
        CFI EndBlock cfiCond39
        CFI EndBlock cfiCond40
        CFI EndBlock cfiCond41
        CFI EndBlock cfiPicker42

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine21:
        CFI Block cfiCond43 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_35
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond44 Using cfiCommon0
        CFI (cfiCond44) NoFunction
        CFI (cfiCond44) Conditional ??CrossCallReturnLabel_36
        CFI (cfiCond44) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond44) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond44) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond44) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond44) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond44) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond44) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond44) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond44) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond44) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond44) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond44) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond44) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond44) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond44) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond44) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond44) CFA_SP SP+0
        CFI (cfiCond44) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiPicker45 Using cfiCommon1
        CFI (cfiPicker45) NoFunction
        CFI (cfiPicker45) Picker
        LCALL   ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_55:
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond43
        CFI EndBlock cfiCond44
        CFI EndBlock cfiPicker45

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine19:
        CFI Block cfiCond46 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_33
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond47 Using cfiCommon0
        CFI (cfiCond47) NoFunction
        CFI (cfiCond47) Conditional ??CrossCallReturnLabel_34
        CFI (cfiCond47) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond47) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond47) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond47) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond47) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond47) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond47) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond47) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond47) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond47) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond47) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond47) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond47) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond47) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond47) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond47) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond47) CFA_SP SP+0
        CFI (cfiCond47) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiPicker48 Using cfiCommon1
        CFI (cfiPicker48) NoFunction
        CFI (cfiPicker48) Picker
        LCALL   ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_110:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond46
        CFI EndBlock cfiCond47
        CFI EndBlock cfiPicker48

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine14:
        CFI Block cfiCond49 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_19
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond50 Using cfiCommon0
        CFI (cfiCond50) NoFunction
        CFI (cfiCond50) Conditional ??CrossCallReturnLabel_20
        CFI (cfiCond50) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond50) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond50) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond50) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond50) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond50) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond50) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond50) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond50) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond50) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond50) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond50) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond50) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond50) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond50) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond50) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond50) CFA_SP SP+0
        CFI (cfiCond50) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiPicker51 Using cfiCommon1
        CFI (cfiPicker51) NoFunction
        CFI (cfiPicker51) Picker
        INC     DPTR
        LCALL   ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_49:
        MOV     R1,A
        LCALL   ??osal_msg_send?relay
        RET
        CFI EndBlock cfiCond49
        CFI EndBlock cfiCond50
        CFI EndBlock cfiPicker51

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond52 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond53 Using cfiCommon0
        CFI (cfiCond53) NoFunction
        CFI (cfiCond53) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond53) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond53) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond53) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond53) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond53) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond53) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond53) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond53) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond53) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond53) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond53) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond53) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond53) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond53) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond53) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond53) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond53) CFA_SP SP+0
        CFI (cfiCond53) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiPicker54 Using cfiCommon1
        CFI (cfiPicker54) NoFunction
        CFI (cfiPicker54) Picker
        MOVX    @DPTR,A
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond52
        CFI EndBlock cfiCond53
        CFI EndBlock cfiPicker54
//  446 
//  447 /*********************************************************************
//  448  * @fn      AF_DataRequest
//  449  *
//  450  * @brief   Common functionality for invoking APSDE_DataReq() for both
//  451  *          SendMulti and MSG-Send.
//  452  *
//  453  * input parameters
//  454  *
//  455  * @param  *dstAddr - Full ZB destination address: Nwk Addr + End Point.
//  456  * @param  *srcEP - Origination (i.e. respond to or ack to) End Point Descr.
//  457  * @param   cID - A valid cluster ID as specified by the Profile.
//  458  * @param   len - Number of bytes of data pointed to by next param.
//  459  * @param  *buf - A pointer to the data bytes to send.
//  460  * @param  *transID - A pointer to a byte which can be modified and which will
//  461  *                    be used as the transaction sequence number of the msg.
//  462  * @param   options - Valid bit mask of Tx options.
//  463  * @param   radius - Normally set to AF_DEFAULT_RADIUS.
//  464  *
//  465  * output parameters
//  466  *
//  467  * @param  *transID - Incremented by one if the return value is success.
//  468  *
//  469  * @return  afStatus_t - See previous definition of afStatus_... types.
//  470  */

        RSEG XDATA_I:XDATA:NOROOT(0)
//  471 uint8 AF_DataRequestDiscoverRoute = TRUE;
AF_DataRequestDiscoverRoute:
        DATA8
        DS 1
        REQUIRE `?<Initializer for AF_DataRequestDiscoverRoute>`
        REQUIRE __INIT_XDATA_I

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  472 afStatus_t AF_DataRequest( afAddrType_t *dstAddr, endPointDesc_t *srcEP,
AF_DataRequest:
        CFI Block cfiBlock55 Using cfiCommon0
        CFI Function AF_DataRequest
        CODE
//  473                            uint16 cID, uint16 len, uint8 *buf, uint8 *transID,
//  474                            uint8 options, uint8 radius )
//  475 {
        FUNCALL AF_DataRequest, NLME_IsAddressBroadcast
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AF_DataRequest, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AF_DataRequest, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AF_DataRequest, afDataReqMTU
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AF_DataRequest, APSDE_DataReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AF_DataRequest, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AF_DataRequest, afDataConfirm
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 30
        MOV     A,#-0x1e
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 46)
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
        MOV     ?V0 + 4,R1
        MOV     A,#0x30
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_53:
        MOV     A,#0x36
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 5,A
//  476   pDescCB pfnDescCB;
//  477   ZStatus_t stat;
//  478   APSDE_DataReq_t req;
//  479   afDataReqMTU_t mtu;
//  480 
//  481   // Verify source end point
//  482   if ( srcEP == NULL )
        MOV     A,R6
        ORL     A,R7
        JNZ     ??AF_DataRequest_0
//  483   {
//  484     return afStatus_INVALID_PARAMETER;
??AF_DataRequest_1:
        MOV     R1,#0x2
        LJMP    ??AF_DataRequest_2 & 0xFFFF
//  485   }
//  486 
//  487 #if !defined( REFLECTOR )
//  488   if ( dstAddr->addrMode == afAddrNotPresent )
//  489   {
//  490     return afStatus_INVALID_PARAMETER;
//  491   }
//  492 #endif
//  493 
//  494   // Validate broadcasting
//  495   if ( ( dstAddr->addrMode == afAddr16Bit     ) ||
//  496        ( dstAddr->addrMode == afAddrBroadcast )    )
??AF_DataRequest_0:
        MOV     A,R2
        ADD     A,#0x8
        MOV     ?V0 + 0,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
        MOV     DPL,?V0 + 0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,#0x2
        XRL     A,R0
        JZ      ??AF_DataRequest_3
        MOV     A,#0xf
        XRL     A,R0
        JNZ     ??AF_DataRequest_4
//  497   {
//  498     // Check for valid broadcast values
//  499     if( ADDR_NOT_BCAST != NLME_IsAddressBroadcast( dstAddr->addr.shortAddr )  )
??AF_DataRequest_3:
        ; Setup parameters for call to function NLME_IsAddressBroadcast
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_83:
        LCALL   ??NLME_IsAddressBroadcast?relay
        MOV     A,R1
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        JZ      ??AF_DataRequest_5
//  500     {
//  501       // Force mode to broadcast
//  502       dstAddr->addrMode = afAddrBroadcast;
        MOV     A,#0xf
        MOVX    @DPTR,A
        SJMP    ??AF_DataRequest_6
//  503     }
//  504     else
//  505     {
//  506       // Address is not a valid broadcast type
//  507       if ( dstAddr->addrMode == afAddrBroadcast )
??AF_DataRequest_5:
        MOVX    A,@DPTR
        XRL     A,#0xf
        JNZ     ??AF_DataRequest_6
        SJMP    ??AF_DataRequest_1
//  508       {
//  509         return afStatus_INVALID_PARAMETER;
//  510       }
//  511     }
//  512   }
//  513   else if ( dstAddr->addrMode != afAddr64Bit &&
//  514             dstAddr->addrMode != afAddrGroup &&
//  515             dstAddr->addrMode != afAddrNotPresent )
??AF_DataRequest_4:
        MOV     A,#0x3
        XRL     A,R0
        JZ      ??AF_DataRequest_6
        MOV     A,#0x1
        XRL     A,R0
        JZ      ??AF_DataRequest_6
        MOV     A,R0
        JNZ     ??AF_DataRequest_1
//  516   {
//  517     return afStatus_INVALID_PARAMETER;
//  518   }
//  519   
//  520   // Set destination address
//  521   req.dstAddr.addrMode = dstAddr->addrMode;
??AF_DataRequest_6:
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  522   if ( dstAddr->addrMode == afAddr64Bit )
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        XRL     A,#0x3
        JNZ     ??AF_DataRequest_7
//  523     osal_cpyExtAddr( req.dstAddr.addr.extAddr, dstAddr->addr.extAddr );
        ; Setup parameters for call to function sAddrExtCpy
        MOV     R4,?V0 + 2
        MOV     R5,?V0 + 3
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??sAddrExtCpy?relay
        SJMP    ??CrossCallReturnLabel_70
//  524   else
//  525     req.dstAddr.addr.shortAddr = dstAddr->addr.shortAddr;
??AF_DataRequest_7:
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        LCALL   ??Subroutine39_0 & 0xFFFF
??CrossCallReturnLabel_98:
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine35_0 & 0xFFFF
//  526   
//  527   req.profileID = ZDO_PROFILE_ID;
??CrossCallReturnLabel_70:
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  528 
//  529   if ( (pfnDescCB = afGetDescCB( srcEP )) )
        MOV     DPTR,#epList
        SJMP    ??AF_DataRequest_8
??AF_DataRequest_9:
        INC     DPTR
        INC     DPTR
??AF_DataRequest_8:
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_14:
        JZ      ??AF_DataRequest_10
        MOV     DPL,R0
        MOV     DPH,R1
        LCALL   ??Subroutine36_0 & 0xFFFF
??CrossCallReturnLabel_78:
        MOV     A,R6
        XRL     A,R2
        JNZ     ??AF_DataRequest_11
        MOV     A,R7
        XRL     A,R3
??AF_DataRequest_11:
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        JNZ     ??AF_DataRequest_9
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,R4
        ORL     A,R5
        JZ      ??AF_DataRequest_10
//  530   {
//  531     uint16 *pID = (uint16 *)(pfnDescCB(
//  532                                  AF_DESCRIPTOR_PROFILE_ID, srcEP->endPoint ));
        ; Setup parameters for indirect call
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_43:
        LCALL   ?CALL_IND
//  533     if ( pID )
        MOV     A,R2
        ORL     A,R3
        JZ      ??CrossCallReturnLabel_71
//  534     {
//  535       req.profileID = *pID;
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ??Subroutine39_0 & 0xFFFF
//  536       osal_mem_free( pID );
//  537     }
//  538   }
??CrossCallReturnLabel_99:
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_6:
        SJMP    ??CrossCallReturnLabel_71
//  539   else if ( srcEP->simpleDesc )
??AF_DataRequest_10:
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_12:
        JZ      ??CrossCallReturnLabel_71
//  540   {
//  541     req.profileID = srcEP->simpleDesc->AppProfId;
        LCALL   ??Subroutine38_0 & 0xFFFF
//  542   }
??CrossCallReturnLabel_104:
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine35_0 & 0xFFFF
//  543 
//  544   req.txOptions = 0;
??CrossCallReturnLabel_71:
        MOV     A,#0x17
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  545 
//  546   if ( ( options & AF_ACK_REQUEST              ) &&
//  547        ( req.dstAddr.addrMode != AddrBroadcast ) &&
//  548        ( req.dstAddr.addrMode != AddrGroup     )    )
        MOV     A,?V0 + 4
        MOV     C,0xE0 /* A   */.4
        JNC     ??AF_DataRequest_12
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,#0xf
        XRL     A,R0
        JZ      ??AF_DataRequest_12
        MOV     A,#0x1
        XRL     A,R0
        JZ      ??AF_DataRequest_12
//  549   {
//  550     req.txOptions |=  APS_TX_OPTIONS_ACK;
        MOV     A,#0x17
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x4
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  551   }
//  552 
//  553   if ( options & AF_SKIP_ROUTING )
??AF_DataRequest_12:
        MOV     A,?V0 + 4
        MOV     C,0xE0 /* A   */.7
        JNC     ??AF_DataRequest_13
//  554   {
//  555     req.txOptions |=  APS_TX_OPTIONS_SKIP_ROUTING;
        MOV     A,#0x17
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ORL     A,#0x10
        MOVX    @DPTR,A
//  556   }
//  557 
//  558   if ( options & AF_EN_SECURITY )
??AF_DataRequest_13:
        MOV     A,?V0 + 4
        MOV     C,0xE0 /* A   */.6
        JNC     ??AF_DataRequest_14
//  559   {
//  560     req.txOptions |= APS_TX_OPTIONS_SECURITY_ENABLE;
        MOV     A,#0x17
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ORL     A,#0x1
        MOVX    @DPTR,A
//  561     mtu.aps.secure = TRUE;
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        SJMP    ??AF_DataRequest_15
//  562   }
//  563   else
//  564   {
//  565     mtu.aps.secure = FALSE;
??AF_DataRequest_14:
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        CLR     A
//  566   }
??AF_DataRequest_15:
        LCALL   ?Subroutine6 & 0xFFFF
//  567 
//  568   mtu.kvp = FALSE;
??CrossCallReturnLabel_3:
        CLR     A
        MOVX    @DPTR,A
//  569 
//  570   req.transID       = *transID;
        MOV     A,#0x34
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_27:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x19
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  571   req.srcEP         = srcEP->endPoint;
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  572   req.dstEP         = dstAddr->endPoint;
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  573   req.clusterID     = cID;
        MOV     A,#0x2e
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine39_0 & 0xFFFF
??CrossCallReturnLabel_100:
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine35_0 & 0xFFFF
//  574   req.asduLen       = len;
??CrossCallReturnLabel_72:
        MOV     A,#0x13
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 7
        MOVX    @DPTR,A
//  575   req.asdu          = buf;
        MOV     A,#0x32
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine39_0 & 0xFFFF
??CrossCallReturnLabel_101:
        MOV     A,#0x15
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine35_0 & 0xFFFF
//  576   req.discoverRoute = AF_DataRequestDiscoverRoute;//(uint8)((options & AF_DISCV_ROUTE) ? 1 : 0);
??CrossCallReturnLabel_73:
        MOV     DPTR,#AF_DataRequestDiscoverRoute
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x1a
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  577   req.radiusCounter = radius;
        MOV     A,#0x1b
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 5
        LCALL   ?Subroutine6 & 0xFFFF
//  578 #if defined ( INTER_PAN )
//  579   req.dstPanId      = dstAddr->panId;
//  580 
//  581   if ( StubAPS_InterPan( dstAddr->panId, dstAddr->endPoint ) )
//  582   {
//  583     if ( len > INTERP_DataReqMTU() )
//  584     {
//  585       stat = afStatus_INVALID_PARAMETER;
//  586     }
//  587     else
//  588     {
//  589       stat = INTERP_DataReq( &req );
//  590     }
//  591   }
//  592   else
//  593 #endif // INTER_PAN
//  594   {
//  595     if (len > afDataReqMTU( &mtu ) )
??CrossCallReturnLabel_4:
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??afDataReqMTU?relay
        MOV     A,R1
        CLR     C
        SUBB    A,?V0 + 6
        CLR     A
        SUBB    A,?V0 + 7
        JNC     ??AF_DataRequest_16
//  596     {
//  597       if (apsfSendFragmented)
        MOV     DPTR,#apsfSendFragmented
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_18:
        JZ      ??AF_DataRequest_17
//  598       {
//  599         stat = (*apsfSendFragmented)( &req );
        ; Setup parameters for indirect call
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     DPTR,#apsfSendFragmented + 1
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
        SJMP    ??AF_DataRequest_18
//  600       }
//  601       else
//  602       {
//  603         stat = afStatus_INVALID_PARAMETER;
??AF_DataRequest_17:
        MOV     ?V0 + 0,#0x2
        SJMP    ??AF_DataRequest_19
//  604       }
//  605     }
//  606     else
//  607     {
//  608       stat = APSDE_DataReq( &req );
??AF_DataRequest_16:
        ; Setup parameters for call to function APSDE_DataReq
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??APSDE_DataReq?relay
??AF_DataRequest_18:
        MOV     A,R1
        MOV     ?V0 + 0,A
//  609     }
//  610   }
//  611 
//  612   /*
//  613    * If this is an EndPoint-to-EndPoint message on the same device, it will not
//  614    * get added to the NWK databufs. So it will not go OTA and it will not get
//  615    * a MACCB_DATA_CONFIRM_CMD callback. Thus it is necessary to generate the
//  616    * AF_DATA_CONFIRM_CMD here. Note that APSDE_DataConfirm() only generates one
//  617    * message with the first in line TransSeqNumber, even on a multi message.
//  618    * Also note that a reflected msg will not have its confirmation generated
//  619    * here.
//  620    */
//  621   if ( (req.dstAddr.addrMode == Addr16Bit) &&
//  622        (req.dstAddr.addr.shortAddr == NLME_GetShortAddr()) )
??AF_DataRequest_19:
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??AF_DataRequest_20
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   ??NLME_GetShortAddr?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     R0,?V0 + 2
        MOV     R1,?V0 + 3
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??AF_DataRequest_21
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??AF_DataRequest_21:
        JNZ     ??AF_DataRequest_20
//  623   {
//  624     afDataConfirm( srcEP->endPoint, *transID, stat );
        ; Setup parameters for call to function afDataConfirm
        MOV     R3,?V0 + 0
        MOV     A,#0x34
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine16 & 0xFFFF
//  625   }
??CrossCallReturnLabel_28:
        MOV     R2,A
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??afDataConfirm?relay
//  626 
//  627   if ( stat == afStatus_SUCCESS )
??AF_DataRequest_20:
        MOV     A,?V0 + 0
        JNZ     ??AF_DataRequest_22
//  628   {
//  629     (*transID)++;
        MOV     A,#0x34
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine16 & 0xFFFF
//  630   }
??CrossCallReturnLabel_29:
        INC     A
        MOVX    @DPTR,A
//  631 
//  632   return (afStatus_t)stat;
??AF_DataRequest_22:
        MOV     R1,?V0 + 0
??AF_DataRequest_2:
        MOV     A,#0x1e
        LJMP    ?Subroutine3 & 0xFFFF
        CFI EndBlock cfiBlock55
//  633 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine24:
        CFI Block cfiCond56 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_42
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond57 Using cfiCommon0
        CFI (cfiCond57) NoFunction
        CFI (cfiCond57) Conditional ??CrossCallReturnLabel_43
        CFI (cfiCond57) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond57) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond57) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond57) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond57) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond57) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond57) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond57) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond57) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond57) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond57) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond57) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond57) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond57) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond57) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond57) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond57) CFA_SP SP+0
        CFI (cfiCond57) CFA_XSP16 add(XSP16, 46)
        CFI Block cfiPicker58 Using cfiCommon1
        CFI (cfiPicker58) NoFunction
        CFI (cfiPicker58) Picker
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R1,#0x2
        MOV     DPL,R4
        MOV     DPH,R5
        RET
        CFI EndBlock cfiCond56
        CFI EndBlock cfiCond57
        CFI EndBlock cfiPicker58

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine16:
        CFI Block cfiCond59 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_23
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond60 Using cfiCommon0
        CFI (cfiCond60) NoFunction
        CFI (cfiCond60) Conditional ??CrossCallReturnLabel_24
        CFI (cfiCond60) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond60) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond60) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond60) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond60) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond60) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond60) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond60) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond60) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond60) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond60) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond60) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond60) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond60) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond60) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond60) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond60) CFA_SP SP+0
        CFI (cfiCond60) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond61 Using cfiCommon0
        CFI (cfiCond61) NoFunction
        CFI (cfiCond61) Conditional ??CrossCallReturnLabel_25
        CFI (cfiCond61) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond61) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond61) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond61) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond61) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond61) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond61) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond61) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond61) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond61) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond61) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond61) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond61) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond61) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond61) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond61) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond61) CFA_SP SP+0
        CFI (cfiCond61) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond62 Using cfiCommon0
        CFI (cfiCond62) NoFunction
        CFI (cfiCond62) Conditional ??CrossCallReturnLabel_26
        CFI (cfiCond62) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond62) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond62) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond62) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond62) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond62) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond62) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond62) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond62) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond62) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond62) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond62) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond62) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond62) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond62) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond62) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond62) CFA_SP SP+0
        CFI (cfiCond62) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond63 Using cfiCommon0
        CFI (cfiCond63) NoFunction
        CFI (cfiCond63) Conditional ??CrossCallReturnLabel_27
        CFI (cfiCond63) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond63) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond63) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond63) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond63) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond63) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond63) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond63) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond63) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond63) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond63) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond63) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond63) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond63) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond63) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond63) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond63) CFA_SP SP+0
        CFI (cfiCond63) CFA_XSP16 add(XSP16, 46)
        CFI Block cfiCond64 Using cfiCommon0
        CFI (cfiCond64) NoFunction
        CFI (cfiCond64) Conditional ??CrossCallReturnLabel_28
        CFI (cfiCond64) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond64) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond64) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond64) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond64) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond64) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond64) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond64) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond64) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond64) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond64) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond64) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond64) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond64) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond64) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond64) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond64) CFA_SP SP+0
        CFI (cfiCond64) CFA_XSP16 add(XSP16, 46)
        CFI Block cfiCond65 Using cfiCommon0
        CFI (cfiCond65) NoFunction
        CFI (cfiCond65) Conditional ??CrossCallReturnLabel_29
        CFI (cfiCond65) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond65) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond65) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond65) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond65) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond65) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond65) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond65) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond65) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond65) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond65) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond65) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond65) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond65) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond65) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond65) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond65) CFA_SP SP+0
        CFI (cfiCond65) CFA_XSP16 add(XSP16, 46)
        CFI Block cfiCond66 Using cfiCommon0
        CFI (cfiCond66) NoFunction
        CFI (cfiCond66) Conditional ??CrossCallReturnLabel_30
        CFI (cfiCond66) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond66) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond66) CFA_SP SP+-5
        CFI Block cfiPicker67 Using cfiCommon1
        CFI (cfiPicker67) NoFunction
        CFI (cfiPicker67) Picker
        LCALL   ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_51:
        RET
        CFI EndBlock cfiCond59
        CFI EndBlock cfiCond60
        CFI EndBlock cfiCond61
        CFI EndBlock cfiCond62
        CFI EndBlock cfiCond63
        CFI EndBlock cfiCond64
        CFI EndBlock cfiCond65
        CFI EndBlock cfiCond66
        CFI EndBlock cfiPicker67

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine28:
        CFI Block cfiCond68 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_50, ??CrossCallReturnLabel_21
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond69 Using cfiCommon0
        CFI (cfiCond69) NoFunction
        CFI (cfiCond69) Conditional ??CrossCallReturnLabel_50, ??CrossCallReturnLabel_22
        CFI (cfiCond69) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond69) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond69) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond69) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond69) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond69) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond69) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond69) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond69) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond69) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond69) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond69) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond69) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond69) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond69) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond69) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond69) CFA_SP SP+0
        CFI (cfiCond69) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond70 Using cfiCommon0
        CFI (cfiCond70) NoFunction
        CFI (cfiCond70) Conditional ??CrossCallReturnLabel_48, ??CrossCallReturnLabel_9
        CFI (cfiCond70) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond70) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond70) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond70) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond70) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond70) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond70) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond70) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond70) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond70) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond70) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond70) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond70) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond70) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond70) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond70) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond70) CFA_SP SP+0
        CFI (cfiCond70) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond71 Using cfiCommon0
        CFI (cfiCond71) NoFunction
        CFI (cfiCond71) Conditional ??CrossCallReturnLabel_48, ??CrossCallReturnLabel_10
        CFI (cfiCond71) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond71) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond71) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond71) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond71) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond71) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond71) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond71) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond71) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond71) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond71) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond71) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond71) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond71) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond71) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond71) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond71) CFA_SP SP+0
        CFI (cfiCond71) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond72 Using cfiCommon0
        CFI (cfiCond72) NoFunction
        CFI (cfiCond72) Conditional ??CrossCallReturnLabel_49, ??CrossCallReturnLabel_19
        CFI (cfiCond72) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond72) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond72) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond72) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond72) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond72) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond72) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond72) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond72) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond72) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond72) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond72) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond72) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond72) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond72) CFA_SP SP+0
        CFI (cfiCond72) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond73 Using cfiCommon0
        CFI (cfiCond73) NoFunction
        CFI (cfiCond73) Conditional ??CrossCallReturnLabel_49, ??CrossCallReturnLabel_20
        CFI (cfiCond73) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond73) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond73) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond73) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond73) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond73) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond73) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond73) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond73) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond73) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond73) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond73) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond73) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond73) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond73) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond73) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond73) CFA_SP SP+0
        CFI (cfiCond73) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond74 Using cfiCommon0
        CFI (cfiCond74) NoFunction
        CFI (cfiCond74) Conditional ??CrossCallReturnLabel_51, ??CrossCallReturnLabel_23
        CFI (cfiCond74) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond74) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond74) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond74) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond74) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond74) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond74) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond74) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond74) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond74) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond74) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond74) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond74) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond74) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond74) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond74) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond74) CFA_SP SP+0
        CFI (cfiCond74) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond75 Using cfiCommon0
        CFI (cfiCond75) NoFunction
        CFI (cfiCond75) Conditional ??CrossCallReturnLabel_51, ??CrossCallReturnLabel_24
        CFI (cfiCond75) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond75) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond75) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond75) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond75) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond75) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond75) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond75) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond75) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond75) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond75) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond75) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond75) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond75) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond75) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond75) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond75) CFA_SP SP+0
        CFI (cfiCond75) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond76 Using cfiCommon0
        CFI (cfiCond76) NoFunction
        CFI (cfiCond76) Conditional ??CrossCallReturnLabel_51, ??CrossCallReturnLabel_25
        CFI (cfiCond76) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond76) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond76) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond76) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond76) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond76) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond76) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond76) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond76) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond76) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond76) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond76) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond76) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond76) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond76) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond76) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond76) CFA_SP SP+0
        CFI (cfiCond76) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond77 Using cfiCommon0
        CFI (cfiCond77) NoFunction
        CFI (cfiCond77) Conditional ??CrossCallReturnLabel_51, ??CrossCallReturnLabel_26
        CFI (cfiCond77) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond77) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond77) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond77) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond77) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond77) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond77) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond77) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond77) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond77) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond77) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond77) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond77) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond77) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond77) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond77) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond77) CFA_SP SP+0
        CFI (cfiCond77) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond78 Using cfiCommon0
        CFI (cfiCond78) NoFunction
        CFI (cfiCond78) Conditional ??CrossCallReturnLabel_51, ??CrossCallReturnLabel_27
        CFI (cfiCond78) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond78) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond78) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond78) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond78) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond78) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond78) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond78) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond78) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond78) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond78) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond78) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond78) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond78) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond78) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond78) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond78) CFA_SP SP+0
        CFI (cfiCond78) CFA_XSP16 add(XSP16, 46)
        CFI Block cfiCond79 Using cfiCommon0
        CFI (cfiCond79) NoFunction
        CFI (cfiCond79) Conditional ??CrossCallReturnLabel_51, ??CrossCallReturnLabel_28
        CFI (cfiCond79) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond79) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond79) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond79) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond79) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond79) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond79) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond79) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond79) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond79) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond79) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond79) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond79) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond79) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond79) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond79) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond79) CFA_SP SP+0
        CFI (cfiCond79) CFA_XSP16 add(XSP16, 46)
        CFI Block cfiCond80 Using cfiCommon0
        CFI (cfiCond80) NoFunction
        CFI (cfiCond80) Conditional ??CrossCallReturnLabel_51, ??CrossCallReturnLabel_29
        CFI (cfiCond80) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond80) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond80) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond80) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond80) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond80) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond80) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond80) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond80) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond80) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond80) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond80) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond80) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond80) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond80) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond80) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond80) CFA_SP SP+0
        CFI (cfiCond80) CFA_XSP16 add(XSP16, 46)
        CFI Block cfiCond81 Using cfiCommon0
        CFI (cfiCond81) NoFunction
        CFI (cfiCond81) Conditional ??CrossCallReturnLabel_51, ??CrossCallReturnLabel_30
        CFI (cfiCond81) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond81) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond81) CFA_SP SP+-5
        CFI Block cfiPicker82 Using cfiCommon1
        CFI (cfiPicker82) NoFunction
        CFI (cfiPicker82) Picker
        LCALL   ?Subroutine33 & 0xFFFF
??CrossCallReturnLabel_60:
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond68
        CFI EndBlock cfiCond69
        CFI EndBlock cfiCond70
        CFI EndBlock cfiCond71
        CFI EndBlock cfiCond72
        CFI EndBlock cfiCond73
        CFI EndBlock cfiCond74
        CFI EndBlock cfiCond75
        CFI EndBlock cfiCond76
        CFI EndBlock cfiCond77
        CFI EndBlock cfiCond78
        CFI EndBlock cfiCond79
        CFI EndBlock cfiCond80
        CFI EndBlock cfiCond81
        CFI EndBlock cfiPicker82

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
        CFI Block cfiCond83 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_16
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond84 Using cfiCommon0
        CFI (cfiCond84) NoFunction
        CFI (cfiCond84) Conditional ??CrossCallReturnLabel_17
        CFI (cfiCond84) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond84) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond84) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond84) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond84) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond84) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond84) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond84) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond84) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond84) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond84) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond84) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond84) CFA_SP SP+0
        CFI (cfiCond84) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond85 Using cfiCommon0
        CFI (cfiCond85) NoFunction
        CFI (cfiCond85) Conditional ??CrossCallReturnLabel_14
        CFI (cfiCond85) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond85) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond85) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond85) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond85) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond85) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond85) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond85) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond85) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond85) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond85) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond85) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond85) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond85) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond85) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond85) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond85) CFA_SP SP+0
        CFI (cfiCond85) CFA_XSP16 add(XSP16, 46)
        CFI Block cfiCond86 Using cfiCommon0
        CFI (cfiCond86) NoFunction
        CFI (cfiCond86) Conditional ??CrossCallReturnLabel_18
        CFI (cfiCond86) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond86) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond86) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond86) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond86) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond86) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond86) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond86) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond86) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond86) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond86) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond86) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond86) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond86) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond86) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond86) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond86) CFA_SP SP+0
        CFI (cfiCond86) CFA_XSP16 add(XSP16, 46)
        CFI Block cfiCond87 Using cfiCommon0
        CFI (cfiCond87) NoFunction
        CFI (cfiCond87) Conditional ??CrossCallReturnLabel_15
        CFI (cfiCond87) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond87) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond87) CFA_SP SP+-5
        CFI Block cfiPicker88 Using cfiCommon1
        CFI (cfiPicker88) NoFunction
        CFI (cfiPicker88) Picker
        LCALL   ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_109:
        MOV     A,R0
        ORL     A,R1
        RET
        CFI EndBlock cfiCond83
        CFI EndBlock cfiCond84
        CFI EndBlock cfiCond85
        CFI EndBlock cfiCond86
        CFI EndBlock cfiCond87
        CFI EndBlock cfiPicker88

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
        CFI Block cfiCond89 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_11
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond90 Using cfiCommon0
        CFI (cfiCond90) NoFunction
        CFI (cfiCond90) Conditional ??CrossCallReturnLabel_12
        CFI (cfiCond90) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond90) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond90) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond90) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond90) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond90) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond90) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond90) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond90) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond90) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond90) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond90) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond90) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond90) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond90) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond90) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond90) CFA_SP SP+0
        CFI (cfiCond90) CFA_XSP16 add(XSP16, 46)
        CFI Block cfiCond91 Using cfiCommon0
        CFI (cfiCond91) NoFunction
        CFI (cfiCond91) Conditional ??CrossCallReturnLabel_13
        CFI (cfiCond91) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond91) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond91) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond91) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond91) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond91) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond91) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond91) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond91) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond91) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond91) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond91) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond91) CFA_SP SP+0
        CFI (cfiCond91) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker92 Using cfiCommon1
        CFI (cfiPicker92) NoFunction
        CFI (cfiPicker92) Picker
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_108:
        MOV     DPL,R0
        MOV     DPH,R1
        MOV     A,DPL
        ORL     A,DPH
        RET
        CFI EndBlock cfiCond89
        CFI EndBlock cfiCond90
        CFI EndBlock cfiCond91
        CFI EndBlock cfiPicker92

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiCond93 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_75
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond94 Using cfiCommon0
        CFI (cfiCond94) NoFunction
        CFI (cfiCond94) Conditional ??CrossCallReturnLabel_76
        CFI (cfiCond94) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond94) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond94) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond94) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond94) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond94) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond94) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond94) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond94) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond94) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond94) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond94) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond94) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond94) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond94) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond94) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond94) CFA_SP SP+0
        CFI (cfiCond94) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiPicker95 Using cfiCommon1
        CFI (cfiPicker95) NoFunction
        CFI (cfiPicker95) Picker
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        CFI EndBlock cfiCond93
        CFI EndBlock cfiCond94
        CFI EndBlock cfiPicker95
        REQUIRE ??Subroutine35_0
        ; // Fall through to label ??Subroutine35_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine35_0:
        CFI Block cfiCond96 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_65
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond97 Using cfiCommon0
        CFI (cfiCond97) NoFunction
        CFI (cfiCond97) Conditional ??CrossCallReturnLabel_66
        CFI (cfiCond97) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond97) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond97) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond97) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond97) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond97) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond97) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond97) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond97) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond97) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond97) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond97) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond97) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond97) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond97) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond97) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond97) CFA_SP SP+0
        CFI (cfiCond97) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond98 Using cfiCommon0
        CFI (cfiCond98) NoFunction
        CFI (cfiCond98) Conditional ??CrossCallReturnLabel_67
        CFI (cfiCond98) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond98) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond98) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond98) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond98) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond98) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond98) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond98) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond98) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond98) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond98) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond98) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond98) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond98) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond98) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond98) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond98) CFA_SP SP+0
        CFI (cfiCond98) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond99 Using cfiCommon0
        CFI (cfiCond99) NoFunction
        CFI (cfiCond99) Conditional ??CrossCallReturnLabel_68
        CFI (cfiCond99) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond99) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond99) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond99) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond99) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond99) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond99) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond99) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond99) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond99) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond99) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond99) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond99) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond99) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond99) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond99) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond99) CFA_SP SP+0
        CFI (cfiCond99) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond100 Using cfiCommon0
        CFI (cfiCond100) NoFunction
        CFI (cfiCond100) Conditional ??CrossCallReturnLabel_69
        CFI (cfiCond100) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond100) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond100) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond100) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond100) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond100) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond100) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond100) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond100) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond100) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond100) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond100) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond100) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond100) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond100) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond100) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond100) CFA_SP SP+0
        CFI (cfiCond100) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond101 Using cfiCommon0
        CFI (cfiCond101) NoFunction
        CFI (cfiCond101) Conditional ??CrossCallReturnLabel_70
        CFI (cfiCond101) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond101) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond101) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond101) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond101) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond101) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond101) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond101) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond101) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond101) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond101) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond101) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond101) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond101) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond101) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond101) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond101) CFA_SP SP+0
        CFI (cfiCond101) CFA_XSP16 add(XSP16, 46)
        CFI Block cfiCond102 Using cfiCommon0
        CFI (cfiCond102) NoFunction
        CFI (cfiCond102) Conditional ??CrossCallReturnLabel_71
        CFI (cfiCond102) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond102) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond102) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond102) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond102) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond102) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond102) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond102) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond102) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond102) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond102) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond102) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond102) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond102) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond102) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond102) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond102) CFA_SP SP+0
        CFI (cfiCond102) CFA_XSP16 add(XSP16, 46)
        CFI Block cfiCond103 Using cfiCommon0
        CFI (cfiCond103) NoFunction
        CFI (cfiCond103) Conditional ??CrossCallReturnLabel_72
        CFI (cfiCond103) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond103) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond103) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond103) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond103) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond103) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond103) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond103) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond103) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond103) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond103) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond103) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond103) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond103) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond103) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond103) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond103) CFA_SP SP+0
        CFI (cfiCond103) CFA_XSP16 add(XSP16, 46)
        CFI Block cfiCond104 Using cfiCommon0
        CFI (cfiCond104) NoFunction
        CFI (cfiCond104) Conditional ??CrossCallReturnLabel_73
        CFI (cfiCond104) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond104) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond104) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond104) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond104) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond104) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond104) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond104) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond104) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond104) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond104) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond104) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond104) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond104) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond104) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond104) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond104) CFA_SP SP+0
        CFI (cfiCond104) CFA_XSP16 add(XSP16, 46)
        CFI Block cfiCond105 Using cfiCommon0
        CFI (cfiCond105) NoFunction
        CFI (cfiCond105) Conditional ??CrossCallReturnLabel_74
        CFI (cfiCond105) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond105) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond105) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond105) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond105) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond105) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond105) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond105) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond105) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond105) CFA_SP SP+0
        CFI (cfiCond105) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond106 Using cfiCommon0
        CFI (cfiCond106) NoFunction
        CFI (cfiCond106) Conditional ??CrossCallReturnLabel_75
        CFI (cfiCond106) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond106) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond106) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond106) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond106) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond106) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond106) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond106) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond106) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond106) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond106) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond106) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond106) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond106) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond106) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond106) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond106) CFA_SP SP+0
        CFI (cfiCond106) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond107 Using cfiCommon0
        CFI (cfiCond107) NoFunction
        CFI (cfiCond107) Conditional ??CrossCallReturnLabel_76
        CFI (cfiCond107) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond107) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond107) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond107) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond107) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond107) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond107) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond107) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond107) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond107) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond107) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond107) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond107) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond107) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond107) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond107) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond107) CFA_SP SP+0
        CFI (cfiCond107) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiPicker108 Using cfiCommon1
        CFI (cfiPicker108) NoFunction
        CFI (cfiPicker108) Picker
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond96
        CFI EndBlock cfiCond97
        CFI EndBlock cfiCond98
        CFI EndBlock cfiCond99
        CFI EndBlock cfiCond100
        CFI EndBlock cfiCond101
        CFI EndBlock cfiCond102
        CFI EndBlock cfiCond103
        CFI EndBlock cfiCond104
        CFI EndBlock cfiCond105
        CFI EndBlock cfiCond106
        CFI EndBlock cfiCond107
        CFI EndBlock cfiPicker108

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond109 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_5
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond110 Using cfiCommon0
        CFI (cfiCond110) NoFunction
        CFI (cfiCond110) Conditional ??CrossCallReturnLabel_6
        CFI (cfiCond110) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond110) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond110) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond110) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond110) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond110) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond110) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond110) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond110) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond110) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond110) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond110) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond110) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond110) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond110) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond110) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond110) CFA_SP SP+0
        CFI (cfiCond110) CFA_XSP16 add(XSP16, 46)
        CFI Block cfiPicker111 Using cfiCommon1
        CFI (cfiPicker111) NoFunction
        CFI (cfiPicker111) Picker
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        ; Setup parameters for call to function osal_mem_free
        ; Setup parameters for call to function osal_mem_free
        LCALL   ??osal_mem_free?relay
        RET
        CFI EndBlock cfiCond109
        CFI EndBlock cfiCond110
        CFI EndBlock cfiPicker111

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond112 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond113 Using cfiCommon0
        CFI (cfiCond113) NoFunction
        CFI (cfiCond113) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond113) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond113) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond113) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond113) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond113) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond113) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond113) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond113) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond113) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond113) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond113) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond113) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond113) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond113) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond113) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond113) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond113) CFA_SP SP+0
        CFI (cfiCond113) CFA_XSP16 add(XSP16, 46)
        CFI Block cfiCond114 Using cfiCommon0
        CFI (cfiCond114) NoFunction
        CFI (cfiCond114) Conditional ??CrossCallReturnLabel_4
        CFI (cfiCond114) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond114) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond114) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond114) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond114) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond114) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond114) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond114) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond114) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond114) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond114) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond114) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond114) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond114) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond114) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond114) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond114) CFA_SP SP+0
        CFI (cfiCond114) CFA_XSP16 add(XSP16, 46)
        CFI Block cfiPicker115 Using cfiCommon1
        CFI (cfiPicker115) NoFunction
        CFI (cfiPicker115) Picker
        MOVX    @DPTR,A
        ; Setup parameters for call to function afDataReqMTU
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        RET
        CFI EndBlock cfiCond112
        CFI EndBlock cfiCond113
        CFI EndBlock cfiCond114
        CFI EndBlock cfiPicker115
//  634 
//  635 /*********************************************************************
//  636  * @fn      afFindEndPointDescList
//  637  *
//  638  * @brief   Find the endpoint description entry from the endpoint
//  639  *          number.
//  640  *
//  641  * @param   EndPoint - Application Endpoint to look for
//  642  *
//  643  * @return  the address to the endpoint/interface description entry
//  644  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  645 static epList_t *afFindEndPointDescList( byte EndPoint )
afFindEndPointDescList:
        CFI Block cfiBlock116 Using cfiCommon0
        CFI Function afFindEndPointDescList
        CODE
//  646 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  647   epList_t *epSearch;
//  648 
//  649   // Start at the beginning
//  650   epSearch = epList;
        MOV     DPTR,#epList
        SJMP    ??afFindEndPointDescList_0
//  651 
//  652   // Look through the list until the end
//  653   while ( epSearch )
//  654   {
//  655     // Is there a match?
//  656     if ( epSearch->epDesc->endPoint == EndPoint )
//  657     {
//  658       return ( epSearch );
//  659     }
//  660     else
//  661       epSearch = epSearch->nextDesc;  // Next entry
??afFindEndPointDescList_1:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
??afFindEndPointDescList_0:
        LCALL   ??Subroutine36_0 & 0xFFFF
??CrossCallReturnLabel_79:
        MOV     A,R2
        ORL     A,R3
        JZ      ??afFindEndPointDescList_2
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_30:
        XRL     A,R1
        JNZ     ??afFindEndPointDescList_1
        SJMP    ??afFindEndPointDescList_3
//  662   }
//  663 
//  664   return ( (epList_t *)NULL );
??afFindEndPointDescList_2:
        MOV     R2,#0x0
        MOV     R3,#0x0
??afFindEndPointDescList_3:
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock116
//  665 }
//  666 
//  667 /*********************************************************************
//  668  * @fn      afFindEndPointDesc
//  669  *
//  670  * @brief   Find the endpoint description entry from the endpoint
//  671  *          number.
//  672  *
//  673  * @param   EndPoint - Application Endpoint to look for
//  674  *
//  675  * @return  the address to the endpoint/interface description entry
//  676  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  677 endPointDesc_t *afFindEndPointDesc( byte EndPoint )
afFindEndPointDesc:
        CFI Block cfiBlock117 Using cfiCommon0
        CFI Function afFindEndPointDesc
        CODE
//  678 {
        FUNCALL afFindEndPointDesc, afFindEndPointDescList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  679   epList_t *epSearch;
//  680 
//  681   // Look for the endpoint
//  682   epSearch = afFindEndPointDescList( EndPoint );
        ; Setup parameters for call to function afFindEndPointDescList
        LCALL   ?Subroutine27 & 0xFFFF
//  683 
//  684   if ( epSearch )
??CrossCallReturnLabel_46:
        JZ      ??afFindEndPointDesc_0
//  685     return ( epSearch->epDesc );
        LCALL   ??Subroutine36_0 & 0xFFFF
??CrossCallReturnLabel_80:
        SJMP    ??afFindEndPointDesc_1
//  686   else
//  687     return ( (endPointDesc_t *)NULL );
??afFindEndPointDesc_0:
        MOV     R2,#0x0
        MOV     R3,#0x0
??afFindEndPointDesc_1:
        LJMP    ?Subroutine2 & 0xFFFF
        CFI EndBlock cfiBlock117
//  688 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
        CFI Block cfiCond118 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_82
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond119 Using cfiCommon0
        CFI (cfiCond119) NoFunction
        CFI (cfiCond119) Conditional ??CrossCallReturnLabel_83
        CFI (cfiCond119) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond119) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond119) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond119) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond119) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond119) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond119) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond119) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond119) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond119) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond119) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond119) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond119) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond119) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond119) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond119) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond119) CFA_SP SP+0
        CFI (cfiCond119) CFA_XSP16 add(XSP16, 46)
        CFI Block cfiPicker120 Using cfiCommon1
        CFI (cfiPicker120) NoFunction
        CFI (cfiPicker120) Picker
        MOV     DPL,R2
        MOV     DPH,R3
        CFI EndBlock cfiCond118
        CFI EndBlock cfiCond119
        CFI EndBlock cfiPicker120
        REQUIRE ??Subroutine36_0
        ; // Fall through to label ??Subroutine36_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine36_0:
        CFI Block cfiCond121 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_77
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 38)
        CFI Block cfiCond122 Using cfiCommon0
        CFI (cfiCond122) NoFunction
        CFI (cfiCond122) Conditional ??CrossCallReturnLabel_78
        CFI (cfiCond122) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond122) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond122) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond122) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond122) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond122) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond122) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond122) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond122) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond122) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond122) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond122) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond122) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond122) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond122) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond122) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond122) CFA_SP SP+0
        CFI (cfiCond122) CFA_XSP16 add(XSP16, 46)
        CFI Block cfiCond123 Using cfiCommon0
        CFI (cfiCond123) NoFunction
        CFI (cfiCond123) Conditional ??CrossCallReturnLabel_79
        CFI (cfiCond123) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond123) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond123) CFA_SP SP+-5
        CFI Block cfiCond124 Using cfiCommon0
        CFI (cfiCond124) NoFunction
        CFI (cfiCond124) Conditional ??CrossCallReturnLabel_80
        CFI (cfiCond124) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond124) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond124) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond124) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond124) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond124) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond124) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond124) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond124) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond124) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond124) CFA_SP SP+0
        CFI (cfiCond124) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond125 Using cfiCommon0
        CFI (cfiCond125) NoFunction
        CFI (cfiCond125) Conditional ??CrossCallReturnLabel_81
        CFI (cfiCond125) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond125) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond125) CFA_SP SP+-5
        CFI Block cfiCond126 Using cfiCommon0
        CFI (cfiCond126) NoFunction
        CFI (cfiCond126) Conditional ??CrossCallReturnLabel_82
        CFI (cfiCond126) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond126) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond126) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond126) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond126) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond126) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond126) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond126) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond126) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond126) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond126) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond126) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond126) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond126) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond126) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond126) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond126) CFA_SP SP+0
        CFI (cfiCond126) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond127 Using cfiCommon0
        CFI (cfiCond127) NoFunction
        CFI (cfiCond127) Conditional ??CrossCallReturnLabel_83
        CFI (cfiCond127) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond127) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond127) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond127) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond127) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond127) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond127) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond127) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond127) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond127) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond127) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond127) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond127) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond127) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond127) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond127) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond127) CFA_SP SP+0
        CFI (cfiCond127) CFA_XSP16 add(XSP16, 46)
        CFI Block cfiPicker128 Using cfiCommon1
        CFI (cfiPicker128) NoFunction
        CFI (cfiPicker128) Picker
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        RET
        CFI EndBlock cfiCond121
        CFI EndBlock cfiCond122
        CFI EndBlock cfiCond123
        CFI EndBlock cfiCond124
        CFI EndBlock cfiCond125
        CFI EndBlock cfiCond126
        CFI EndBlock cfiCond127
        CFI EndBlock cfiPicker128
//  689 
//  690 /*********************************************************************
//  691  * @fn      afFindSimpleDesc
//  692  *
//  693  * @brief   Find the Simple Descriptor from the endpoint number.
//  694  *
//  695  * @param   EP - Application Endpoint to look for.
//  696  *
//  697  * @return  Non-zero to indicate that the descriptor memory must be freed.
//  698  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  699 byte afFindSimpleDesc( SimpleDescriptionFormat_t **ppDesc, byte EP )
afFindSimpleDesc:
        CFI Block cfiBlock129 Using cfiCommon0
        CFI Function afFindSimpleDesc
        CODE
//  700 {
        FUNCALL afFindSimpleDesc, afFindEndPointDescList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0 + 0,R1
//  701   epList_t *epItem = afFindEndPointDescList( EP );
        ; Setup parameters for call to function afFindEndPointDescList
        LCALL   ??afFindEndPointDescList?relay
//  702   byte rtrn = FALSE;
        MOV     R4,#0x0
//  703 
//  704   if ( epItem )
        MOV     A,R2
        ORL     A,R3
        JZ      ??afFindSimpleDesc_0
//  705   {
//  706     if ( epItem->pfnDescCB )
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_13:
        JZ      ??afFindSimpleDesc_1
//  707     {
//  708       *ppDesc = epItem->pfnDescCB( AF_DESCRIPTOR_SIMPLE, EP );
        ; Setup parameters for indirect call
        MOV     R2,?V0 + 0
        MOV     R1,#0x1
        LCALL   ?CALL_IND
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  709       rtrn = TRUE;
        MOV     R4,#0x1
        SJMP    ??afFindSimpleDesc_2
//  710     }
//  711     else
//  712     {
//  713       *ppDesc = epItem->epDesc->simpleDesc;
??afFindSimpleDesc_1:
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ?Subroutine22 & 0xFFFF
//  714     }
//  715   }
??CrossCallReturnLabel_39:
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_107:
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        SJMP    ??afFindSimpleDesc_3
//  716   else
//  717   {
//  718     *ppDesc = NULL;
??afFindSimpleDesc_0:
        MOV     DPL,R6
        MOV     DPH,R7
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
??afFindSimpleDesc_3:
        MOVX    @DPTR,A
//  719   }
//  720 
//  721   return rtrn;
??afFindSimpleDesc_2:
        MOV     A,R4
        MOV     R1,A
        LJMP    ?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock129
//  722 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine22:
        CFI Block cfiCond130 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_37
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond131 Using cfiCommon0
        CFI (cfiCond131) NoFunction
        CFI (cfiCond131) Conditional ??CrossCallReturnLabel_38
        CFI (cfiCond131) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond131) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond131) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond131) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond131) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond131) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond131) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond131) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond131) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond131) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond131) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond131) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond131) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond131) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond131) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond131) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond131) CFA_SP SP+0
        CFI (cfiCond131) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond132 Using cfiCommon0
        CFI (cfiCond132) NoFunction
        CFI (cfiCond132) Conditional ??CrossCallReturnLabel_39
        CFI (cfiCond132) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond132) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond132) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond132) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond132) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond132) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond132) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond132) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond132) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond132) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond132) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond132) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond132) CFA_SP SP+0
        CFI (cfiCond132) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker133 Using cfiCommon1
        CFI (cfiPicker133) NoFunction
        CFI (cfiPicker133) Picker
        LCALL   ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_56:
        RET
        CFI EndBlock cfiCond130
        CFI EndBlock cfiCond131
        CFI EndBlock cfiCond132
        CFI EndBlock cfiPicker133

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine31:
        CFI Block cfiCond134 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_55, ??CrossCallReturnLabel_35
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond135 Using cfiCommon0
        CFI (cfiCond135) NoFunction
        CFI (cfiCond135) Conditional ??CrossCallReturnLabel_55, ??CrossCallReturnLabel_36
        CFI (cfiCond135) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond135) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond135) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond135) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond135) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond135) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond135) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond135) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond135) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond135) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond135) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond135) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond135) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond135) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond135) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond135) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond135) CFA_SP SP+0
        CFI (cfiCond135) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond136 Using cfiCommon0
        CFI (cfiCond136) NoFunction
        CFI (cfiCond136) Conditional ??CrossCallReturnLabel_56, ??CrossCallReturnLabel_37
        CFI (cfiCond136) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond136) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond136) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond136) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond136) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond136) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond136) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond136) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond136) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond136) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond136) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond136) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond136) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond136) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond136) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond136) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond136) CFA_SP SP+0
        CFI (cfiCond136) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond137 Using cfiCommon0
        CFI (cfiCond137) NoFunction
        CFI (cfiCond137) Conditional ??CrossCallReturnLabel_56, ??CrossCallReturnLabel_38
        CFI (cfiCond137) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond137) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond137) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond137) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond137) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond137) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond137) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond137) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond137) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond137) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond137) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond137) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond137) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond137) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond137) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond137) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond137) CFA_SP SP+0
        CFI (cfiCond137) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond138 Using cfiCommon0
        CFI (cfiCond138) NoFunction
        CFI (cfiCond138) Conditional ??CrossCallReturnLabel_56, ??CrossCallReturnLabel_39
        CFI (cfiCond138) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond138) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond138) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond138) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond138) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond138) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond138) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond138) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond138) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond138) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond138) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond138) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond138) CFA_SP SP+0
        CFI (cfiCond138) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker139 Using cfiCommon1
        CFI (cfiPicker139) NoFunction
        CFI (cfiPicker139) Picker
        LCALL   ?Subroutine33 & 0xFFFF
??CrossCallReturnLabel_61:
        RET
        CFI EndBlock cfiCond134
        CFI EndBlock cfiCond135
        CFI EndBlock cfiCond136
        CFI EndBlock cfiCond137
        CFI EndBlock cfiCond138
        CFI EndBlock cfiPicker139

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine33:
        CFI Block cfiCond140 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_60, ??CrossCallReturnLabel_50, ??CrossCallReturnLabel_21
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond141 Using cfiCommon0
        CFI (cfiCond141) NoFunction
        CFI (cfiCond141) Conditional ??CrossCallReturnLabel_60, ??CrossCallReturnLabel_50, ??CrossCallReturnLabel_22
        CFI (cfiCond141) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond141) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond141) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond141) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond141) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond141) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond141) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond141) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond141) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond141) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond141) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond141) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond141) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond141) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond141) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond141) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond141) CFA_SP SP+0
        CFI (cfiCond141) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond142 Using cfiCommon0
        CFI (cfiCond142) NoFunction
        CFI (cfiCond142) Conditional ??CrossCallReturnLabel_60, ??CrossCallReturnLabel_48, ??CrossCallReturnLabel_9
        CFI (cfiCond142) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond142) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond142) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond142) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond142) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond142) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond142) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond142) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond142) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond142) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond142) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond142) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond142) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond142) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond142) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond142) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond142) CFA_SP SP+0
        CFI (cfiCond142) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond143 Using cfiCommon0
        CFI (cfiCond143) NoFunction
        CFI (cfiCond143) Conditional ??CrossCallReturnLabel_60, ??CrossCallReturnLabel_48, ??CrossCallReturnLabel_10
        CFI (cfiCond143) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond143) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond143) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond143) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond143) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond143) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond143) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond143) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond143) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond143) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond143) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond143) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond143) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond143) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond143) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond143) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond143) CFA_SP SP+0
        CFI (cfiCond143) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond144 Using cfiCommon0
        CFI (cfiCond144) NoFunction
        CFI (cfiCond144) Conditional ??CrossCallReturnLabel_60, ??CrossCallReturnLabel_49, ??CrossCallReturnLabel_19
        CFI (cfiCond144) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond144) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond144) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond144) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond144) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond144) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond144) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond144) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond144) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond144) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond144) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond144) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond144) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond144) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond144) CFA_SP SP+0
        CFI (cfiCond144) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond145 Using cfiCommon0
        CFI (cfiCond145) NoFunction
        CFI (cfiCond145) Conditional ??CrossCallReturnLabel_60, ??CrossCallReturnLabel_49, ??CrossCallReturnLabel_20
        CFI (cfiCond145) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond145) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond145) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond145) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond145) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond145) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond145) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond145) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond145) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond145) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond145) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond145) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond145) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond145) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond145) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond145) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond145) CFA_SP SP+0
        CFI (cfiCond145) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond146 Using cfiCommon0
        CFI (cfiCond146) NoFunction
        CFI (cfiCond146) Conditional ??CrossCallReturnLabel_60, ??CrossCallReturnLabel_51, ??CrossCallReturnLabel_23
        CFI (cfiCond146) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond146) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond146) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond146) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond146) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond146) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond146) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond146) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond146) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond146) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond146) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond146) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond146) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond146) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond146) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond146) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond146) CFA_SP SP+0
        CFI (cfiCond146) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond147 Using cfiCommon0
        CFI (cfiCond147) NoFunction
        CFI (cfiCond147) Conditional ??CrossCallReturnLabel_60, ??CrossCallReturnLabel_51, ??CrossCallReturnLabel_24
        CFI (cfiCond147) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond147) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond147) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond147) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond147) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond147) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond147) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond147) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond147) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond147) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond147) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond147) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond147) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond147) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond147) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond147) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond147) CFA_SP SP+0
        CFI (cfiCond147) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond148 Using cfiCommon0
        CFI (cfiCond148) NoFunction
        CFI (cfiCond148) Conditional ??CrossCallReturnLabel_60, ??CrossCallReturnLabel_51, ??CrossCallReturnLabel_25
        CFI (cfiCond148) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond148) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond148) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond148) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond148) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond148) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond148) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond148) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond148) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond148) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond148) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond148) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond148) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond148) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond148) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond148) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond148) CFA_SP SP+0
        CFI (cfiCond148) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond149 Using cfiCommon0
        CFI (cfiCond149) NoFunction
        CFI (cfiCond149) Conditional ??CrossCallReturnLabel_60, ??CrossCallReturnLabel_51, ??CrossCallReturnLabel_26
        CFI (cfiCond149) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond149) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond149) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond149) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond149) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond149) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond149) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond149) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond149) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond149) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond149) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond149) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond149) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond149) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond149) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond149) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond149) CFA_SP SP+0
        CFI (cfiCond149) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond150 Using cfiCommon0
        CFI (cfiCond150) NoFunction
        CFI (cfiCond150) Conditional ??CrossCallReturnLabel_60, ??CrossCallReturnLabel_51, ??CrossCallReturnLabel_27
        CFI (cfiCond150) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond150) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond150) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond150) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond150) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond150) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond150) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond150) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond150) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond150) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond150) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond150) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond150) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond150) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond150) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond150) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond150) CFA_SP SP+0
        CFI (cfiCond150) CFA_XSP16 add(XSP16, 46)
        CFI Block cfiCond151 Using cfiCommon0
        CFI (cfiCond151) NoFunction
        CFI (cfiCond151) Conditional ??CrossCallReturnLabel_60, ??CrossCallReturnLabel_51, ??CrossCallReturnLabel_28
        CFI (cfiCond151) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond151) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond151) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond151) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond151) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond151) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond151) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond151) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond151) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond151) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond151) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond151) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond151) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond151) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond151) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond151) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond151) CFA_SP SP+0
        CFI (cfiCond151) CFA_XSP16 add(XSP16, 46)
        CFI Block cfiCond152 Using cfiCommon0
        CFI (cfiCond152) NoFunction
        CFI (cfiCond152) Conditional ??CrossCallReturnLabel_60, ??CrossCallReturnLabel_51, ??CrossCallReturnLabel_29
        CFI (cfiCond152) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond152) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond152) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond152) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond152) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond152) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond152) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond152) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond152) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond152) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond152) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond152) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond152) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond152) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond152) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond152) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond152) CFA_SP SP+0
        CFI (cfiCond152) CFA_XSP16 add(XSP16, 46)
        CFI Block cfiCond153 Using cfiCommon0
        CFI (cfiCond153) NoFunction
        CFI (cfiCond153) Conditional ??CrossCallReturnLabel_60, ??CrossCallReturnLabel_51, ??CrossCallReturnLabel_30
        CFI (cfiCond153) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond153) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond153) CFA_SP SP+-5
        CFI Block cfiCond154 Using cfiCommon0
        CFI (cfiCond154) NoFunction
        CFI (cfiCond154) Conditional ??CrossCallReturnLabel_61, ??CrossCallReturnLabel_55, ??CrossCallReturnLabel_35
        CFI (cfiCond154) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond154) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond154) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond154) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond154) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond154) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond154) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond154) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond154) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond154) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond154) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond154) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond154) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond154) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond154) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond154) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond154) CFA_SP SP+0
        CFI (cfiCond154) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond155 Using cfiCommon0
        CFI (cfiCond155) NoFunction
        CFI (cfiCond155) Conditional ??CrossCallReturnLabel_61, ??CrossCallReturnLabel_55, ??CrossCallReturnLabel_36
        CFI (cfiCond155) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond155) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond155) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond155) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond155) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond155) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond155) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond155) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond155) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond155) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond155) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond155) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond155) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond155) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond155) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond155) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond155) CFA_SP SP+0
        CFI (cfiCond155) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond156 Using cfiCommon0
        CFI (cfiCond156) NoFunction
        CFI (cfiCond156) Conditional ??CrossCallReturnLabel_61, ??CrossCallReturnLabel_56, ??CrossCallReturnLabel_37
        CFI (cfiCond156) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond156) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond156) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond156) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond156) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond156) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond156) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond156) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond156) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond156) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond156) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond156) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond156) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond156) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond156) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond156) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond156) CFA_SP SP+0
        CFI (cfiCond156) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond157 Using cfiCommon0
        CFI (cfiCond157) NoFunction
        CFI (cfiCond157) Conditional ??CrossCallReturnLabel_61, ??CrossCallReturnLabel_56, ??CrossCallReturnLabel_38
        CFI (cfiCond157) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond157) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond157) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond157) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond157) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond157) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond157) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond157) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond157) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond157) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond157) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond157) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond157) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond157) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond157) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond157) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond157) CFA_SP SP+0
        CFI (cfiCond157) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond158 Using cfiCommon0
        CFI (cfiCond158) NoFunction
        CFI (cfiCond158) Conditional ??CrossCallReturnLabel_61, ??CrossCallReturnLabel_56, ??CrossCallReturnLabel_39
        CFI (cfiCond158) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond158) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond158) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond158) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond158) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond158) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond158) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond158) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond158) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond158) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond158) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond158) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond158) CFA_SP SP+0
        CFI (cfiCond158) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker159 Using cfiCommon1
        CFI (cfiPicker159) NoFunction
        CFI (cfiPicker159) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        RET
        CFI EndBlock cfiCond140
        CFI EndBlock cfiCond141
        CFI EndBlock cfiCond142
        CFI EndBlock cfiCond143
        CFI EndBlock cfiCond144
        CFI EndBlock cfiCond145
        CFI EndBlock cfiCond146
        CFI EndBlock cfiCond147
        CFI EndBlock cfiCond148
        CFI EndBlock cfiCond149
        CFI EndBlock cfiCond150
        CFI EndBlock cfiCond151
        CFI EndBlock cfiCond152
        CFI EndBlock cfiCond153
        CFI EndBlock cfiCond154
        CFI EndBlock cfiCond155
        CFI EndBlock cfiCond156
        CFI EndBlock cfiCond157
        CFI EndBlock cfiCond158
        CFI EndBlock cfiPicker159
//  723 
//  724 /*********************************************************************
//  725  * @fn      afGetDescCB
//  726  *
//  727  * @brief   Get the Descriptor callback function.
//  728  *
//  729  * @param   epDesc - pointer to the endpoint descriptor
//  730  *
//  731  * @return  function pointer or NULL
//  732  */
//  733 static pDescCB afGetDescCB( endPointDesc_t *epDesc )
//  734 {
//  735   epList_t *epSearch;
//  736 
//  737   // Start at the beginning
//  738   epSearch = epList;
//  739 
//  740   // Look through the list until the end
//  741   while ( epSearch )
//  742   {
//  743     // Is there a match?
//  744     if ( epSearch->epDesc == epDesc )
//  745     {
//  746       return ( epSearch->pfnDescCB );
//  747     }
//  748     else
//  749       epSearch = epSearch->nextDesc;  // Next entry
//  750   }
//  751 
//  752   return ( (pDescCB)NULL );
//  753 }
//  754 
//  755 /*********************************************************************
//  756  * @fn      afDataReqMTU
//  757  *
//  758  * @brief   Get the Data Request MTU(Max Transport Unit).
//  759  *
//  760  * @param   fields - afDataReqMTU_t
//  761  *
//  762  * @return  uint8(MTU)
//  763  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  764 uint8 afDataReqMTU( afDataReqMTU_t* fields )
afDataReqMTU:
        CFI Block cfiBlock160 Using cfiCommon0
        CFI Function afDataReqMTU
        CODE
//  765 {
        FUNCALL afDataReqMTU, APSDE_DataReqMTU
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  766   uint8 len;
//  767   uint8 hdr;
//  768 
//  769   if ( fields->kvp == TRUE )
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??afDataReqMTU_0
//  770   {
//  771     hdr = AF_HDR_KVP_MAX_LEN;
        MOV     R6,#0x8
        SJMP    ??afDataReqMTU_1
//  772   }
//  773   else
//  774   {
//  775     hdr = AF_HDR_V1_1_MAX_LEN;
??afDataReqMTU_0:
        MOV     R6,#0x0
//  776   }
//  777 
//  778   len = (uint8)(APSDE_DataReqMTU(&fields->aps) - hdr);
//  779 
//  780   return len;
??afDataReqMTU_1:
        ; Setup parameters for call to function APSDE_DataReqMTU
        INC     DPTR
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??APSDE_DataReqMTU?relay
        MOV     A,R1
        CLR     C
        SUBB    A,R6
        MOV     R1,A
        CFI EndBlock cfiBlock160
        REQUIRE ?Subroutine4
        ; // Fall through to label ?Subroutine4
//  781 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiBlock161 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock161
//  782 
//  783 /*********************************************************************
//  784  * @fn      afGetMatch
//  785  *
//  786  * @brief   Set the allow response flag.
//  787  *
//  788  * @param   ep - Application Endpoint to look for
//  789  * @param   action - true - allow response, false - no response
//  790  *
//  791  * @return  TRUE allow responses, FALSE no response
//  792  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  793 uint8 afGetMatch( uint8 ep )
afGetMatch:
        CFI Block cfiBlock162 Using cfiCommon0
        CFI Function afGetMatch
        CODE
//  794 {
        FUNCALL afGetMatch, afFindEndPointDescList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  795   epList_t *epSearch;
//  796 
//  797   // Look for the endpoint
//  798   epSearch = afFindEndPointDescList( ep );
        ; Setup parameters for call to function afFindEndPointDescList
        LCALL   ?Subroutine27 & 0xFFFF
//  799 
//  800   if ( epSearch )
??CrossCallReturnLabel_47:
        JZ      ??afGetMatch_0
//  801   {
//  802     if ( epSearch->flags & eEP_AllowMatch )
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.0
        JNC     ??afGetMatch_0
//  803       return ( TRUE );
        MOV     R1,#0x1
        SJMP    ??afGetMatch_1
//  804     else
//  805       return ( FALSE );
??afGetMatch_0:
        MOV     R1,#0x0
        CFI EndBlock cfiBlock162
//  806   }
??afGetMatch_1:
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2
//  807   else
//  808     return ( FALSE );
//  809 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiBlock163 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock163

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine27:
        CFI Block cfiCond164 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_46
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond165 Using cfiCommon0
        CFI (cfiCond165) NoFunction
        CFI (cfiCond165) Conditional ??CrossCallReturnLabel_47
        CFI (cfiCond165) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond165) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond165) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond165) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond165) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond165) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond165) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond165) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond165) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond165) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond165) CFA_SP SP+0
        CFI (cfiCond165) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker166 Using cfiCommon1
        CFI (cfiPicker166) NoFunction
        CFI (cfiPicker166) Picker
        LCALL   ??afFindEndPointDescList?relay
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,DPL
        ORL     A,DPH
        RET
        CFI EndBlock cfiCond164
        CFI EndBlock cfiCond165
        CFI EndBlock cfiPicker166
//  810 
//  811 /*********************************************************************
//  812  * @fn      afSetMatch
//  813  *
//  814  * @brief   Set the allow response flag.
//  815  *
//  816  * @param   ep - Application Endpoint to look for
//  817  * @param   action - true - allow response, false - no response
//  818  *
//  819  * @return  TRUE if success, FALSE if endpoint not found
//  820  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  821 uint8 afSetMatch( uint8 ep, uint8 action )
afSetMatch:
        CFI Block cfiBlock167 Using cfiCommon0
        CFI Function afSetMatch
        CODE
//  822 {
        FUNCALL afSetMatch, afFindEndPointDescList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R2
        MOV     R7,A
//  823   epList_t *epSearch;
//  824 
//  825   // Look for the endpoint
//  826   epSearch = afFindEndPointDescList( ep );
        ; Setup parameters for call to function afFindEndPointDescList
        LCALL   ??afFindEndPointDescList?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R0,?V0 + 0
        MOV     R1,?V0 + 1
//  827 
//  828   if ( epSearch )
        MOV     A,R0
        ORL     A,R1
        JZ      ??afSetMatch_0
//  829   {
//  830     if ( action )
        MOV     A,R0
        ADD     A,#0x2
        MOV     DPL,A
        MOV     A,R1
        LCALL   ??Subroutine37_0 & 0xFFFF
??CrossCallReturnLabel_86:
        MOV     A,R7
        JZ      ??afSetMatch_1
//  831     {
//  832       epSearch->flags |= eEP_AllowMatch;
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.0
        SJMP    ??afSetMatch_2
//  833     }
//  834     else
//  835     {
//  836       epSearch->flags &= (eEP_AllowMatch ^ 0xFFFF);
??afSetMatch_1:
        MOVX    A,@DPTR
        CLR     0xE0 /* A   */.0
??afSetMatch_2:
        MOVX    @DPTR,A
//  837     }
//  838     return ( TRUE );
        MOV     R1,#0x1
        SJMP    ??afSetMatch_3
//  839   }
//  840   else
//  841     return ( FALSE );
??afSetMatch_0:
        MOV     R1,#0x0
??afSetMatch_3:
        SJMP    ?Subroutine2
        CFI EndBlock cfiBlock167
//  842 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine25:
        CFI Block cfiCond168 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_87
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+-1
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond169 Using cfiCommon0
        CFI (cfiCond169) NoFunction
        CFI (cfiCond169) Conditional ??CrossCallReturnLabel_88
        CFI (cfiCond169) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond169) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond169) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond169) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond169) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond169) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond169) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond169) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond169) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond169) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond169) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond169) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond169) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond169) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond169) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond169) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond169) CFA_SP SP+-1
        CFI (cfiCond169) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond170 Using cfiCommon0
        CFI (cfiCond170) NoFunction
        CFI (cfiCond170) Conditional ??CrossCallReturnLabel_89
        CFI (cfiCond170) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond170) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond170) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond170) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond170) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond170) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond170) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond170) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond170) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond170) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond170) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond170) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond170) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond170) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond170) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond170) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond170) CFA_SP SP+-1
        CFI (cfiCond170) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond171 Using cfiCommon0
        CFI (cfiCond171) NoFunction
        CFI (cfiCond171) Conditional ??CrossCallReturnLabel_90
        CFI (cfiCond171) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond171) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond171) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond171) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond171) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond171) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond171) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond171) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond171) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond171) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond171) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond171) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond171) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond171) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond171) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond171) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond171) CFA_SP SP+-1
        CFI (cfiCond171) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond172 Using cfiCommon0
        CFI (cfiCond172) NoFunction
        CFI (cfiCond172) Conditional ??CrossCallReturnLabel_91
        CFI (cfiCond172) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond172) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond172) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond172) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond172) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond172) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond172) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond172) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond172) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond172) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond172) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond172) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond172) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond172) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond172) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond172) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond172) CFA_SP SP+-1
        CFI (cfiCond172) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond173 Using cfiCommon0
        CFI (cfiCond173) NoFunction
        CFI (cfiCond173) Conditional ??CrossCallReturnLabel_92
        CFI (cfiCond173) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond173) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond173) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond173) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond173) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond173) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond173) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond173) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond173) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond173) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond173) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond173) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond173) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond173) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond173) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond173) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond173) CFA_SP SP+-1
        CFI (cfiCond173) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond174 Using cfiCommon0
        CFI (cfiCond174) NoFunction
        CFI (cfiCond174) Conditional ??CrossCallReturnLabel_93
        CFI (cfiCond174) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond174) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond174) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond174) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond174) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond174) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond174) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond174) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond174) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond174) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond174) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond174) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond174) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond174) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond174) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond174) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond174) CFA_SP SP+-1
        CFI (cfiCond174) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond175 Using cfiCommon0
        CFI (cfiCond175) NoFunction
        CFI (cfiCond175) Conditional ??CrossCallReturnLabel_94
        CFI (cfiCond175) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond175) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond175) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond175) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond175) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond175) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond175) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond175) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond175) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond175) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond175) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond175) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond175) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond175) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond175) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond175) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond175) CFA_SP SP+0
        CFI (cfiCond175) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond176 Using cfiCommon0
        CFI (cfiCond176) NoFunction
        CFI (cfiCond176) Conditional ??CrossCallReturnLabel_95
        CFI (cfiCond176) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond176) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond176) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond176) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond176) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond176) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond176) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond176) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond176) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond176) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond176) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond176) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond176) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond176) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond176) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond176) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond176) CFA_SP SP+0
        CFI (cfiCond176) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond177 Using cfiCommon0
        CFI (cfiCond177) NoFunction
        CFI (cfiCond177) Conditional ??CrossCallReturnLabel_96
        CFI (cfiCond177) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond177) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond177) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond177) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond177) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond177) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond177) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond177) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond177) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond177) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond177) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond177) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond177) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond177) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond177) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond177) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond177) CFA_SP SP+0
        CFI (cfiCond177) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiPicker178 Using cfiCommon1
        CFI (cfiPicker178) NoFunction
        CFI (cfiPicker178) Picker
        MOV     DPL,A
        MOV     A,R7
        CFI EndBlock cfiCond168
        CFI EndBlock cfiCond169
        CFI EndBlock cfiCond170
        CFI EndBlock cfiCond171
        CFI EndBlock cfiCond172
        CFI EndBlock cfiCond173
        CFI EndBlock cfiCond174
        CFI EndBlock cfiCond175
        CFI EndBlock cfiCond176
        CFI EndBlock cfiCond177
        CFI EndBlock cfiPicker178
        REQUIRE ??Subroutine37_0
        ; // Fall through to label ??Subroutine37_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine37_0:
        CFI Block cfiCond179 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_84
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond180 Using cfiCommon0
        CFI (cfiCond180) NoFunction
        CFI (cfiCond180) Conditional ??CrossCallReturnLabel_85
        CFI (cfiCond180) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond180) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond180) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond180) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond180) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond180) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond180) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond180) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond180) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond180) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond180) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond180) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond180) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond180) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond180) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond180) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond180) CFA_SP SP+0
        CFI (cfiCond180) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond181 Using cfiCommon0
        CFI (cfiCond181) NoFunction
        CFI (cfiCond181) Conditional ??CrossCallReturnLabel_86
        CFI (cfiCond181) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond181) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond181) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond181) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond181) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond181) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond181) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond181) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond181) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond181) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond181) CFA_SP SP+0
        CFI (cfiCond181) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond182 Using cfiCommon0
        CFI (cfiCond182) NoFunction
        CFI (cfiCond182) Conditional ??CrossCallReturnLabel_87
        CFI (cfiCond182) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond182) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond182) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond182) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond182) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond182) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond182) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond182) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond182) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond182) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond182) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond182) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond182) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond182) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond182) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond182) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond182) CFA_SP SP+-1
        CFI (cfiCond182) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond183 Using cfiCommon0
        CFI (cfiCond183) NoFunction
        CFI (cfiCond183) Conditional ??CrossCallReturnLabel_88
        CFI (cfiCond183) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond183) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond183) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond183) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond183) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond183) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond183) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond183) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond183) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond183) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond183) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond183) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond183) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond183) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond183) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond183) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond183) CFA_SP SP+-1
        CFI (cfiCond183) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond184 Using cfiCommon0
        CFI (cfiCond184) NoFunction
        CFI (cfiCond184) Conditional ??CrossCallReturnLabel_89
        CFI (cfiCond184) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond184) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond184) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond184) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond184) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond184) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond184) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond184) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond184) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond184) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond184) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond184) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond184) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond184) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond184) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond184) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond184) CFA_SP SP+-1
        CFI (cfiCond184) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond185 Using cfiCommon0
        CFI (cfiCond185) NoFunction
        CFI (cfiCond185) Conditional ??CrossCallReturnLabel_90
        CFI (cfiCond185) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond185) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond185) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond185) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond185) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond185) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond185) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond185) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond185) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond185) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond185) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond185) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond185) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond185) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond185) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond185) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond185) CFA_SP SP+-1
        CFI (cfiCond185) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond186 Using cfiCommon0
        CFI (cfiCond186) NoFunction
        CFI (cfiCond186) Conditional ??CrossCallReturnLabel_91
        CFI (cfiCond186) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond186) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond186) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond186) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond186) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond186) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond186) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond186) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond186) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond186) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond186) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond186) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond186) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond186) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond186) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond186) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond186) CFA_SP SP+-1
        CFI (cfiCond186) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond187 Using cfiCommon0
        CFI (cfiCond187) NoFunction
        CFI (cfiCond187) Conditional ??CrossCallReturnLabel_92
        CFI (cfiCond187) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond187) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond187) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond187) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond187) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond187) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond187) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond187) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond187) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond187) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond187) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond187) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond187) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond187) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond187) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond187) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond187) CFA_SP SP+-1
        CFI (cfiCond187) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond188 Using cfiCommon0
        CFI (cfiCond188) NoFunction
        CFI (cfiCond188) Conditional ??CrossCallReturnLabel_93
        CFI (cfiCond188) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond188) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond188) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond188) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond188) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond188) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond188) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond188) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond188) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond188) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond188) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond188) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond188) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond188) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond188) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond188) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond188) CFA_SP SP+-1
        CFI (cfiCond188) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond189 Using cfiCommon0
        CFI (cfiCond189) NoFunction
        CFI (cfiCond189) Conditional ??CrossCallReturnLabel_94
        CFI (cfiCond189) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond189) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond189) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond189) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond189) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond189) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond189) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond189) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond189) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond189) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond189) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond189) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond189) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond189) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond189) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond189) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond189) CFA_SP SP+0
        CFI (cfiCond189) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond190 Using cfiCommon0
        CFI (cfiCond190) NoFunction
        CFI (cfiCond190) Conditional ??CrossCallReturnLabel_95
        CFI (cfiCond190) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond190) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond190) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond190) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond190) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond190) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond190) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond190) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond190) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond190) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond190) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond190) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond190) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond190) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond190) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond190) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond190) CFA_SP SP+0
        CFI (cfiCond190) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond191 Using cfiCommon0
        CFI (cfiCond191) NoFunction
        CFI (cfiCond191) Conditional ??CrossCallReturnLabel_96
        CFI (cfiCond191) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond191) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond191) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond191) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond191) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond191) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond191) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond191) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond191) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond191) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond191) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond191) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond191) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond191) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond191) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond191) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond191) CFA_SP SP+0
        CFI (cfiCond191) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiPicker192 Using cfiCommon1
        CFI (cfiPicker192) NoFunction
        CFI (cfiPicker192) Picker
        ADDC    A,#0x0
        MOV     DPH,A
        RET
        CFI EndBlock cfiCond179
        CFI EndBlock cfiCond180
        CFI EndBlock cfiCond181
        CFI EndBlock cfiCond182
        CFI EndBlock cfiCond183
        CFI EndBlock cfiCond184
        CFI EndBlock cfiCond185
        CFI EndBlock cfiCond186
        CFI EndBlock cfiCond187
        CFI EndBlock cfiCond188
        CFI EndBlock cfiCond189
        CFI EndBlock cfiCond190
        CFI EndBlock cfiCond191
        CFI EndBlock cfiPicker192
//  843 
//  844 /*********************************************************************
//  845  * @fn      afNumEndPoints
//  846  *
//  847  * @brief   Returns the number of endpoints defined (including 0)
//  848  *
//  849  * @param   none
//  850  *
//  851  * @return  number of endpoints
//  852  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  853 byte afNumEndPoints( void )
afNumEndPoints:
        CFI Block cfiBlock193 Using cfiCommon0
        CFI Function afNumEndPoints
        CODE
//  854 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  855   epList_t *epSearch;
//  856   byte endpoints;
//  857 
//  858   // Start at the beginning
//  859   epSearch = epList;
        MOV     DPTR,#epList
        LCALL   ??Subroutine39_0 & 0xFFFF
??CrossCallReturnLabel_102:
        MOV     DPL,R0
        MOV     DPH,R1
//  860   endpoints = 0;
        MOV     R1,#0x0
        SJMP    ??afNumEndPoints_0
//  861 
//  862   while ( epSearch )
//  863   {
//  864     endpoints++;
??afNumEndPoints_1:
        INC     R1
//  865     epSearch = epSearch->nextDesc;
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine36_0 & 0xFFFF
//  866   }
??CrossCallReturnLabel_81:
        MOV     DPL,R2
        MOV     DPH,R3
??afNumEndPoints_0:
        MOV     A,DPL
        ORL     A,DPH
        JNZ     ??afNumEndPoints_1
        CFI EndBlock cfiBlock193
//  867 
//  868   return ( endpoints );
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0
//  869 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock194 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP     DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP    ?BRET
        CFI EndBlock cfiBlock194
//  870 
//  871 /*********************************************************************
//  872  * @fn      afEndPoints
//  873  *
//  874  * @brief   Fills in the passed in buffer with the endpoint (numbers).
//  875  *          Use afNumEndPoints to find out how big a buffer to supply.
//  876  *
//  877  * @param   epBuf - pointer to mem used
//  878  *
//  879  * @return  void
//  880  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  881 void afEndPoints( byte *epBuf, byte skipZDO )
afEndPoints:
        CFI Block cfiBlock195 Using cfiCommon0
        CFI Function afEndPoints
        CODE
//  882 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        MOV     A,R1
        MOV     R4,A
//  883   epList_t *epSearch;
//  884   byte endPoint;
//  885 
//  886   // Start at the beginning
//  887   epSearch = epList;
        MOV     DPTR,#epList
        SJMP    ??afEndPoints_0
//  888 
//  889   while ( epSearch )
//  890   {
//  891     endPoint = epSearch->epDesc->endPoint;
??afEndPoints_1:
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        MOV     R5,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R5
        MOVX    A,@DPTR
        MOV     R5,A
//  892 
//  893     if ( !skipZDO || endPoint != 0 )
        MOV     A,R4
        JZ      ??afEndPoints_2
        MOV     A,R5
        JZ      ??afEndPoints_3
//  894       *epBuf++ = endPoint;
??afEndPoints_2:
        MOV     A,R5
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    @DPTR,A
        INC     DPTR
        MOV     R2,DPL
        MOV     R3,DPH
//  895 
//  896     epSearch = epSearch->nextDesc;
??afEndPoints_3:
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
//  897   }
??afEndPoints_0:
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_15:
        JNZ     ??afEndPoints_1
//  898 }
        SJMP    ?Subroutine0
        CFI EndBlock cfiBlock195
//  899 
//  900 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  901 void afCopyAddress ( afAddrType_t *afAddr, zAddrType_t *zAddr )
afCopyAddress:
        CFI Block cfiBlock196 Using cfiCommon0
        CFI Function afCopyAddress
        CODE
//  902 {
        FUNCALL afCopyAddress, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  903   afAddr->addrMode = (afAddrMode_t)zAddr->addrMode;
        MOV     A,R4
        ADD     A,#0x8
        MOV     R0,A
        MOV     A,R5
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    @DPTR,A
//  904   if ( zAddr->addrMode == Addr64Bit )
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        XRL     A,#0x3
        JNZ     ??afCopyAddress_0
//  905     osal_cpyExtAddr( afAddr->addr.extAddr, zAddr->addr.extAddr );
        ; Setup parameters for call to function sAddrExtCpy
        LCALL   ??sAddrExtCpy?relay
        SJMP    ??CrossCallReturnLabel_74
//  906   else
//  907     afAddr->addr.shortAddr = zAddr->addr.shortAddr;
??afCopyAddress_0:
        MOV     DPL,R4
        MOV     DPH,R5
        LCALL   ??Subroutine39_0 & 0xFFFF
??CrossCallReturnLabel_103:
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ??Subroutine35_0 & 0xFFFF
//  908 }
??CrossCallReturnLabel_74:
        LJMP    ?Subroutine4 & 0xFFFF
        CFI EndBlock cfiBlock196

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine20:
        CFI Block cfiCond197 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_105
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond198 Using cfiCommon0
        CFI (cfiCond198) NoFunction
        CFI (cfiCond198) Conditional ??CrossCallReturnLabel_106
        CFI (cfiCond198) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond198) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond198) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond198) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond198) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond198) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond198) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond198) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond198) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond198) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond198) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond198) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond198) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond198) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond198) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond198) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond198) CFA_SP SP+0
        CFI (cfiCond198) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond199 Using cfiCommon0
        CFI (cfiCond199) NoFunction
        CFI (cfiCond199) Conditional ??CrossCallReturnLabel_107
        CFI (cfiCond199) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond199) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond199) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond199) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond199) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond199) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond199) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond199) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond199) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond199) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond199) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond199) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond199) CFA_SP SP+0
        CFI (cfiCond199) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker200 Using cfiCommon1
        CFI (cfiPicker200) NoFunction
        CFI (cfiPicker200) Picker
        INC     DPTR
        INC     DPTR
        CFI EndBlock cfiCond197
        CFI EndBlock cfiCond198
        CFI EndBlock cfiCond199
        CFI EndBlock cfiPicker200
        REQUIRE ??Subroutine38_0
        ; // Fall through to label ??Subroutine38_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine38_0:
        CFI Block cfiCond201 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_104
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 46)
        CFI Block cfiCond202 Using cfiCommon0
        CFI (cfiCond202) NoFunction
        CFI (cfiCond202) Conditional ??CrossCallReturnLabel_105
        CFI (cfiCond202) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond202) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond202) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond202) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond202) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond202) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond202) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond202) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond202) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond202) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond202) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond202) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond202) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond202) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond202) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond202) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond202) CFA_SP SP+0
        CFI (cfiCond202) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond203 Using cfiCommon0
        CFI (cfiCond203) NoFunction
        CFI (cfiCond203) Conditional ??CrossCallReturnLabel_106
        CFI (cfiCond203) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond203) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond203) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond203) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond203) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond203) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond203) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond203) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond203) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond203) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond203) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond203) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond203) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond203) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond203) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond203) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond203) CFA_SP SP+0
        CFI (cfiCond203) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond204 Using cfiCommon0
        CFI (cfiCond204) NoFunction
        CFI (cfiCond204) Conditional ??CrossCallReturnLabel_107
        CFI (cfiCond204) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond204) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond204) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond204) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond204) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond204) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond204) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond204) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond204) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond204) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond204) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond204) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond204) CFA_SP SP+0
        CFI (cfiCond204) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker205 Using cfiCommon1
        CFI (cfiPicker205) NoFunction
        CFI (cfiPicker205) Picker
        INC     DPTR
        CFI EndBlock cfiCond201
        CFI EndBlock cfiCond202
        CFI EndBlock cfiCond203
        CFI EndBlock cfiCond204
        CFI EndBlock cfiPicker205
        REQUIRE ??Subroutine39_0
        ; // Fall through to label ??Subroutine39_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine39_0:
        CFI Block cfiCond206 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_97
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond207 Using cfiCommon0
        CFI (cfiCond207) NoFunction
        CFI (cfiCond207) Conditional ??CrossCallReturnLabel_98
        CFI (cfiCond207) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond207) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond207) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond207) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond207) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond207) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond207) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond207) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond207) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond207) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond207) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond207) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond207) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond207) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond207) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond207) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond207) CFA_SP SP+0
        CFI (cfiCond207) CFA_XSP16 add(XSP16, 46)
        CFI Block cfiCond208 Using cfiCommon0
        CFI (cfiCond208) NoFunction
        CFI (cfiCond208) Conditional ??CrossCallReturnLabel_99
        CFI (cfiCond208) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond208) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond208) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond208) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond208) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond208) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond208) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond208) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond208) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond208) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond208) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond208) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond208) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond208) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond208) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond208) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond208) CFA_SP SP+0
        CFI (cfiCond208) CFA_XSP16 add(XSP16, 46)
        CFI Block cfiCond209 Using cfiCommon0
        CFI (cfiCond209) NoFunction
        CFI (cfiCond209) Conditional ??CrossCallReturnLabel_100
        CFI (cfiCond209) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond209) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond209) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond209) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond209) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond209) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond209) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond209) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond209) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond209) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond209) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond209) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond209) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond209) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond209) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond209) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond209) CFA_SP SP+0
        CFI (cfiCond209) CFA_XSP16 add(XSP16, 46)
        CFI Block cfiCond210 Using cfiCommon0
        CFI (cfiCond210) NoFunction
        CFI (cfiCond210) Conditional ??CrossCallReturnLabel_101
        CFI (cfiCond210) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond210) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond210) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond210) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond210) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond210) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond210) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond210) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond210) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond210) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond210) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond210) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond210) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond210) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond210) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond210) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond210) CFA_SP SP+0
        CFI (cfiCond210) CFA_XSP16 add(XSP16, 46)
        CFI Block cfiCond211 Using cfiCommon0
        CFI (cfiCond211) NoFunction
        CFI (cfiCond211) Conditional ??CrossCallReturnLabel_102
        CFI (cfiCond211) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond211) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond211) CFA_SP SP+-5
        CFI Block cfiCond212 Using cfiCommon0
        CFI (cfiCond212) NoFunction
        CFI (cfiCond212) Conditional ??CrossCallReturnLabel_103
        CFI (cfiCond212) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond212) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond212) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond212) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond212) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond212) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond212) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond212) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond212) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond212) CFA_SP SP+0
        CFI (cfiCond212) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond213 Using cfiCommon0
        CFI (cfiCond213) NoFunction
        CFI (cfiCond213) Conditional ??CrossCallReturnLabel_104
        CFI (cfiCond213) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond213) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond213) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond213) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond213) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond213) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond213) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond213) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond213) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond213) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond213) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond213) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond213) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond213) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond213) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond213) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond213) CFA_SP SP+0
        CFI (cfiCond213) CFA_XSP16 add(XSP16, 46)
        CFI Block cfiCond214 Using cfiCommon0
        CFI (cfiCond214) NoFunction
        CFI (cfiCond214) Conditional ??CrossCallReturnLabel_105
        CFI (cfiCond214) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond214) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond214) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond214) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond214) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond214) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond214) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond214) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond214) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond214) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond214) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond214) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond214) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond214) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond214) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond214) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond214) CFA_SP SP+0
        CFI (cfiCond214) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond215 Using cfiCommon0
        CFI (cfiCond215) NoFunction
        CFI (cfiCond215) Conditional ??CrossCallReturnLabel_106
        CFI (cfiCond215) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond215) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond215) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond215) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond215) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond215) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond215) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond215) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond215) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond215) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond215) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond215) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond215) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond215) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond215) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond215) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond215) CFA_SP SP+0
        CFI (cfiCond215) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond216 Using cfiCommon0
        CFI (cfiCond216) NoFunction
        CFI (cfiCond216) Conditional ??CrossCallReturnLabel_107
        CFI (cfiCond216) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond216) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond216) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond216) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond216) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond216) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond216) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond216) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond216) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond216) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond216) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond216) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond216) CFA_SP SP+0
        CFI (cfiCond216) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker217 Using cfiCommon1
        CFI (cfiPicker217) NoFunction
        CFI (cfiPicker217) Picker
        LCALL   ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_112:
        RET
        CFI EndBlock cfiCond206
        CFI EndBlock cfiCond207
        CFI EndBlock cfiCond208
        CFI EndBlock cfiCond209
        CFI EndBlock cfiCond210
        CFI EndBlock cfiCond211
        CFI EndBlock cfiCond212
        CFI EndBlock cfiCond213
        CFI EndBlock cfiCond214
        CFI EndBlock cfiCond215
        CFI EndBlock cfiCond216
        CFI EndBlock cfiPicker217

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine29:
        CFI Block cfiCond218 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_111, ??CrossCallReturnLabel_63
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond219 Using cfiCommon0
        CFI (cfiCond219) NoFunction
        CFI (cfiCond219) Conditional ??CrossCallReturnLabel_111, ??CrossCallReturnLabel_64
        CFI (cfiCond219) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond219) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond219) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond219) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond219) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond219) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond219) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond219) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond219) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond219) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond219) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond219) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond219) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond219) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond219) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond219) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond219) CFA_SP SP+0
        CFI (cfiCond219) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond220 Using cfiCommon0
        CFI (cfiCond220) NoFunction
        CFI (cfiCond220) Conditional ??CrossCallReturnLabel_111, ??CrossCallReturnLabel_62
        CFI (cfiCond220) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond220) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond220) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond220) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond220) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond220) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond220) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond220) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond220) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond220) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond220) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond220) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond220) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond220) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond220) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond220) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond220) CFA_SP SP+0
        CFI (cfiCond220) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond221 Using cfiCommon0
        CFI (cfiCond221) NoFunction
        CFI (cfiCond221) Conditional ??CrossCallReturnLabel_110, ??CrossCallReturnLabel_33
        CFI (cfiCond221) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond221) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond221) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond221) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond221) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond221) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond221) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond221) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond221) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond221) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond221) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond221) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond221) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond221) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond221) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond221) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond221) CFA_SP SP+0
        CFI (cfiCond221) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond222 Using cfiCommon0
        CFI (cfiCond222) NoFunction
        CFI (cfiCond222) Conditional ??CrossCallReturnLabel_110, ??CrossCallReturnLabel_34
        CFI (cfiCond222) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond222) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond222) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond222) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond222) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond222) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond222) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond222) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond222) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond222) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond222) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond222) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond222) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond222) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond222) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond222) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond222) CFA_SP SP+0
        CFI (cfiCond222) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond223 Using cfiCommon0
        CFI (cfiCond223) NoFunction
        CFI (cfiCond223) Conditional ??CrossCallReturnLabel_109, ??CrossCallReturnLabel_16
        CFI (cfiCond223) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond223) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond223) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond223) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond223) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond223) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond223) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond223) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond223) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond223) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond223) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond223) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond223) CFA_SP SP+0
        CFI (cfiCond223) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond224 Using cfiCommon0
        CFI (cfiCond224) NoFunction
        CFI (cfiCond224) Conditional ??CrossCallReturnLabel_109, ??CrossCallReturnLabel_17
        CFI (cfiCond224) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond224) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond224) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond224) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond224) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond224) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond224) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond224) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond224) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond224) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond224) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond224) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond224) CFA_SP SP+0
        CFI (cfiCond224) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond225 Using cfiCommon0
        CFI (cfiCond225) NoFunction
        CFI (cfiCond225) Conditional ??CrossCallReturnLabel_109, ??CrossCallReturnLabel_14
        CFI (cfiCond225) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond225) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond225) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond225) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond225) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond225) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond225) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond225) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond225) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond225) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond225) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond225) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond225) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond225) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond225) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond225) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond225) CFA_SP SP+0
        CFI (cfiCond225) CFA_XSP16 add(XSP16, 46)
        CFI Block cfiCond226 Using cfiCommon0
        CFI (cfiCond226) NoFunction
        CFI (cfiCond226) Conditional ??CrossCallReturnLabel_109, ??CrossCallReturnLabel_18
        CFI (cfiCond226) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond226) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond226) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond226) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond226) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond226) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond226) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond226) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond226) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond226) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond226) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond226) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond226) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond226) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond226) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond226) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond226) CFA_SP SP+0
        CFI (cfiCond226) CFA_XSP16 add(XSP16, 46)
        CFI Block cfiCond227 Using cfiCommon0
        CFI (cfiCond227) NoFunction
        CFI (cfiCond227) Conditional ??CrossCallReturnLabel_109, ??CrossCallReturnLabel_15
        CFI (cfiCond227) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond227) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond227) CFA_SP SP+-5
        CFI Block cfiCond228 Using cfiCommon0
        CFI (cfiCond228) NoFunction
        CFI (cfiCond228) Conditional ??CrossCallReturnLabel_108, ??CrossCallReturnLabel_11
        CFI (cfiCond228) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond228) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond228) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond228) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond228) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond228) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond228) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond228) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond228) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond228) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond228) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond228) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond228) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond228) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond228) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond228) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond228) CFA_SP SP+0
        CFI (cfiCond228) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond229 Using cfiCommon0
        CFI (cfiCond229) NoFunction
        CFI (cfiCond229) Conditional ??CrossCallReturnLabel_108, ??CrossCallReturnLabel_12
        CFI (cfiCond229) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond229) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond229) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond229) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond229) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond229) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond229) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond229) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond229) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond229) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond229) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond229) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond229) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond229) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond229) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond229) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond229) CFA_SP SP+0
        CFI (cfiCond229) CFA_XSP16 add(XSP16, 46)
        CFI Block cfiCond230 Using cfiCommon0
        CFI (cfiCond230) NoFunction
        CFI (cfiCond230) Conditional ??CrossCallReturnLabel_108, ??CrossCallReturnLabel_13
        CFI (cfiCond230) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond230) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond230) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond230) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond230) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond230) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond230) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond230) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond230) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond230) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond230) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond230) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond230) CFA_SP SP+0
        CFI (cfiCond230) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond231 Using cfiCommon0
        CFI (cfiCond231) NoFunction
        CFI (cfiCond231) Conditional ??CrossCallReturnLabel_112, ??CrossCallReturnLabel_105
        CFI (cfiCond231) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond231) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond231) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond231) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond231) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond231) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond231) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond231) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond231) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond231) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond231) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond231) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond231) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond231) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond231) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond231) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond231) CFA_SP SP+0
        CFI (cfiCond231) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond232 Using cfiCommon0
        CFI (cfiCond232) NoFunction
        CFI (cfiCond232) Conditional ??CrossCallReturnLabel_112, ??CrossCallReturnLabel_106
        CFI (cfiCond232) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond232) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond232) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond232) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond232) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond232) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond232) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond232) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond232) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond232) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond232) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond232) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond232) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond232) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond232) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond232) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond232) CFA_SP SP+0
        CFI (cfiCond232) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond233 Using cfiCommon0
        CFI (cfiCond233) NoFunction
        CFI (cfiCond233) Conditional ??CrossCallReturnLabel_112, ??CrossCallReturnLabel_107
        CFI (cfiCond233) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond233) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond233) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond233) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond233) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond233) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond233) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond233) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond233) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond233) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond233) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond233) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond233) CFA_SP SP+0
        CFI (cfiCond233) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond234 Using cfiCommon0
        CFI (cfiCond234) NoFunction
        CFI (cfiCond234) Conditional ??CrossCallReturnLabel_112, ??CrossCallReturnLabel_104
        CFI (cfiCond234) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond234) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond234) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond234) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond234) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond234) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond234) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond234) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond234) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond234) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond234) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond234) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond234) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond234) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond234) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond234) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond234) CFA_SP SP+0
        CFI (cfiCond234) CFA_XSP16 add(XSP16, 46)
        CFI Block cfiCond235 Using cfiCommon0
        CFI (cfiCond235) NoFunction
        CFI (cfiCond235) Conditional ??CrossCallReturnLabel_112, ??CrossCallReturnLabel_97
        CFI (cfiCond235) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond235) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond235) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond235) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond235) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond235) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond235) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond235) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond235) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond235) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond235) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond235) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond235) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond235) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond235) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond235) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond235) CFA_SP SP+0
        CFI (cfiCond235) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond236 Using cfiCommon0
        CFI (cfiCond236) NoFunction
        CFI (cfiCond236) Conditional ??CrossCallReturnLabel_112, ??CrossCallReturnLabel_98
        CFI (cfiCond236) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond236) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond236) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond236) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond236) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond236) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond236) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond236) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond236) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond236) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond236) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond236) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond236) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond236) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond236) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond236) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond236) CFA_SP SP+0
        CFI (cfiCond236) CFA_XSP16 add(XSP16, 46)
        CFI Block cfiCond237 Using cfiCommon0
        CFI (cfiCond237) NoFunction
        CFI (cfiCond237) Conditional ??CrossCallReturnLabel_112, ??CrossCallReturnLabel_99
        CFI (cfiCond237) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond237) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond237) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond237) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond237) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond237) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond237) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond237) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond237) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond237) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond237) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond237) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond237) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond237) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond237) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond237) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond237) CFA_SP SP+0
        CFI (cfiCond237) CFA_XSP16 add(XSP16, 46)
        CFI Block cfiCond238 Using cfiCommon0
        CFI (cfiCond238) NoFunction
        CFI (cfiCond238) Conditional ??CrossCallReturnLabel_112, ??CrossCallReturnLabel_100
        CFI (cfiCond238) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond238) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond238) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond238) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond238) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond238) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond238) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond238) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond238) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond238) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond238) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond238) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond238) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond238) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond238) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond238) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond238) CFA_SP SP+0
        CFI (cfiCond238) CFA_XSP16 add(XSP16, 46)
        CFI Block cfiCond239 Using cfiCommon0
        CFI (cfiCond239) NoFunction
        CFI (cfiCond239) Conditional ??CrossCallReturnLabel_112, ??CrossCallReturnLabel_101
        CFI (cfiCond239) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond239) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond239) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond239) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond239) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond239) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond239) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond239) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond239) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond239) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond239) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond239) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond239) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond239) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond239) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond239) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond239) CFA_SP SP+0
        CFI (cfiCond239) CFA_XSP16 add(XSP16, 46)
        CFI Block cfiCond240 Using cfiCommon0
        CFI (cfiCond240) NoFunction
        CFI (cfiCond240) Conditional ??CrossCallReturnLabel_112, ??CrossCallReturnLabel_102
        CFI (cfiCond240) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond240) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond240) CFA_SP SP+-5
        CFI Block cfiCond241 Using cfiCommon0
        CFI (cfiCond241) NoFunction
        CFI (cfiCond241) Conditional ??CrossCallReturnLabel_112, ??CrossCallReturnLabel_103
        CFI (cfiCond241) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond241) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond241) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond241) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond241) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond241) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond241) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond241) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond241) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond241) CFA_SP SP+0
        CFI (cfiCond241) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker242 Using cfiCommon1
        CFI (cfiPicker242) NoFunction
        CFI (cfiPicker242) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        RET
        CFI EndBlock cfiCond218
        CFI EndBlock cfiCond219
        CFI EndBlock cfiCond220
        CFI EndBlock cfiCond221
        CFI EndBlock cfiCond222
        CFI EndBlock cfiCond223
        CFI EndBlock cfiCond224
        CFI EndBlock cfiCond225
        CFI EndBlock cfiCond226
        CFI EndBlock cfiCond227
        CFI EndBlock cfiCond228
        CFI EndBlock cfiCond229
        CFI EndBlock cfiCond230
        CFI EndBlock cfiCond231
        CFI EndBlock cfiCond232
        CFI EndBlock cfiCond233
        CFI EndBlock cfiCond234
        CFI EndBlock cfiCond235
        CFI EndBlock cfiCond236
        CFI EndBlock cfiCond237
        CFI EndBlock cfiCond238
        CFI EndBlock cfiCond239
        CFI EndBlock cfiCond240
        CFI EndBlock cfiCond241
        CFI EndBlock cfiPicker242

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for AF_DataRequestDiscoverRoute>`:
        DATA8
        DB 1

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??afInit?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    afInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??afRegisterExtended?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    afRegisterExtended

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??afRegister?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    afRegister

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??afDataConfirm?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    afDataConfirm

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??afIncomingData?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    afIncomingData

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??afBuildMSGIncoming?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    afBuildMSGIncoming

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??AF_DataRequest?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    AF_DataRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??afFindEndPointDescList?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    afFindEndPointDescList

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??afFindEndPointDesc?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    afFindEndPointDesc

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??afFindSimpleDesc?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    afFindSimpleDesc

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??afDataReqMTU?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    afDataReqMTU

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??afGetMatch?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    afGetMatch

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??afSetMatch?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    afSetMatch

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??afNumEndPoints?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    afNumEndPoints

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??afEndPoints?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    afEndPoints

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??afCopyAddress?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    afCopyAddress

        END
//  909 
//  910 /*********************************************************************
//  911 *********************************************************************/
//  912 
// 
// 2 452 bytes in segment BANKED_CODE
//    96 bytes in segment BANK_RELAYS
//     1 byte  in segment XDATA_I
//     1 byte  in segment XDATA_ID
//     2 bytes in segment XDATA_Z
// 
// 2 549 bytes of CODE  memory
//     3 bytes of XDATA memory
//
//Errors: none
//Warnings: none
