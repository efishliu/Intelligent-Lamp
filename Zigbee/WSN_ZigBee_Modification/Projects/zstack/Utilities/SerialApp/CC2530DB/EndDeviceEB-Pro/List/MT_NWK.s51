///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.3.10338/W32 for 8051        10/Jul/2018  16:37:27 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Components\mt\MT_NWK.c                           /
//    Command line       =  -f D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_Ð /
//                          Þ¸Ä\Projects\zstack\Utilities\SerialApp\CC2530DB\ /
//                          ..\..\..\Tools\CC2530DB\f8wEndev.cfg (-DCPU32MHZ  /
//                          -DROOT=__near_func -DBLINK_LEDS) -f               /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\Tools\CC2530DB\f8wConfig.cfg (-DSECURE=0    /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xfFF1                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          "-DCONST=const __code" -DGENERIC=__generic        /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµ /
//                          Ï°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\Components\mt\MT_NWK.c    /
//                          -D ZIGBEEPRO -D NWK_AUTO_POLL -D HAL_UART=TRUE    /
//                          -D SERIAL_APP_PORT=0 -D LCD_SUPPORTED -D          /
//                          xPOWER_SAVING -lC D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ /
//                          ¼«\WSN_ZigBee_ÐÞ¸Ä\Projects\zstack\Utilities\Seri /
//                          alApp\CC2530DB\EndDeviceEB-Pro\List\ -lA          /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\End /
//                          DeviceEB-Pro\List\ --diag_suppress Pe001,Pa010    /
//                          -o D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_Ð /
//                          Þ¸Ä\Projects\zstack\Utilities\SerialApp\CC2530DB\ /
//                          EndDeviceEB-Pro\Obj\ -e --debug --core=plain      /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 8 -I D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµ /
//                          Ï°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\Projects\zstack\Utilities /
//                          \SerialApp\CC2530DB\ -I                           /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          SOURCE\ -I D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ /
//                          ZigBee_ÐÞ¸Ä\Projects\zstack\Utilities\SerialApp\C /
//                          C2530DB\..\..\..\ZMAIN\TI2530DB\ -I               /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\MT\ -I                     /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\HAL\INCLUDE\ -I            /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\ -I    /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\ -I         /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\OSAL\INCLUDE\ -I           /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\STACK\AF\ -I               /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\STACK\NWK\ -I              /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\STACK\SEC\ -I              /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\STACK\SAPI\ -I             /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\STACK\SYS\ -I              /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\STACK\ZDO\ -I              /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\ZMAC\F8W\ -I               /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\ZMAC\ -I                   /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\SERVICES\SADDR\ -I         /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\SERVICES\SDATA\ -I         /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\MAC\INCLUDE\ -I            /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\ -I         /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\ -I    /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE /
//                          _CHIP\ -Ohz --require_prototypes                  /
//    List file          =  D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\End /
//                          DeviceEB-Pro\List\MT_NWK.s51                      /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME MT_NWK

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN __INIT_XDATA_Z

        PUBLIC _nwkCallbackSub
// D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\Components\mt\MT_NWK.c
//    1 /**************************************************************************************************
//    2   Filename:       MT_NWK.c
//    3   Revised:        $Date: 2008-03-14 12:54:09 -0700 (Fri, 14 Mar 2008) $
//    4   Revision:       $Revision: 16592 $
//    5 
//    6 
//    7     Description:    MonitorTest functions for the NWK layer.
//    8 
//    9     Copyright 2007 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11     IMPORTANT: Your use of this Software is limited to those specific rights
//   12     granted under the terms of a software license agreement between the user
//   13     who downloaded the software, his/her employer (which must be your employer)
//   14     and Texas Instruments Incorporated (the "License").  You may not use this
//   15     Software unless you agree to abide by the terms of the License. The License
//   16     limits your use, and you acknowledge, that the Software may not be modified,
//   17     copied or distributed unless embedded on a Texas Instruments microcontroller
//   18     or used solely and exclusively in conjunction with a Texas Instruments radio
//   19     frequency transceiver, which is integrated into your product.  Other than for
//   20     the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21     works of, modify, distribute, perform, display or sell this Software and/or
//   22     its documentation for any purpose.
//   23 
//   24     YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25     PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26     INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27     NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28     TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29     NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30     LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31     INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32     OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33     OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34     (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36     Should you have any questions regarding your right to use this Software,
//   37     contact Texas Instruments Incorporated at www.TI.com.
//   38 
//   39 **************************************************************************************************/
//   40 
//   41 /***************************************************************************************************
//   42  * INCLUDES
//   43  ***************************************************************************************************/
//   44 #include "ZComDef.h"
//   45 #include "OSAL.h"
//   46 #include "MT.h"
//   47 #include "NLMEDE.h"
//   48 #include "nwk.h"
//   49 #include "ZDApp.h"
//   50 #include "nwk_globals.h"
//   51 #include "MT_NWK.h"
//   52 
//   53 #if !defined( WIN32 )
//   54   #include "OnBoard.h"
//   55 #endif
//   56 
//   57 /***************************************************************************************************
//   58  * GLOBAL VARIABLES
//   59  ***************************************************************************************************/

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//   60 uint16 _nwkCallbackSub;
_nwkCallbackSub:
        DS 2
        REQUIRE __INIT_XDATA_Z

        END
//   61 
//   62 /*********************************************************************
//   63  * TYPEDEFS
//   64  */
//   65 
//   66 /***************************************************************************************************
//   67  * LOCAL FUNCTIONS
//   68  ***************************************************************************************************/
//   69 #if defined (MT_NWK_FUNC)
//   70 void MT_NldeDataRequest(uint8 *pBuf);
//   71 void MT_NlmeNetworkFormationRequest(uint8 *pBuf);
//   72 void MT_NlmePermitJoiningRequest(uint8 *pBuf);
//   73 void MT_NlmeStartRouterRequest(uint8 *pBuf);
//   74 void MT_NlmeJoinRequest(uint8 *pBuf);
//   75 void MT_NlmeLeaveRequest(uint8 *pBuf);
//   76 void MT_NlmeResetRequest(uint8 *pBuf);
//   77 void MT_NlmeGetRequest(uint8 *pBuf);
//   78 void MT_NlmeSetRequest(uint8 *pBuf);
//   79 void MT_NlmeNetworkDiscoveryRequest(uint8 *pBuf);
//   80 void MT_NlmeRouteDiscoveryRequest(uint8 *pBuf);
//   81 void MT_NlmeDirectJoinRequest(uint8 *pBuf);
//   82 void MT_NlmeOrphanJoinRequest(uint8 *pBuf);
//   83 
//   84 uint8 MT_Nwk_DataRequest( uint16 dstAddr, uint8 nsduLen, uint8* nsdu,
//   85                          uint8 nsduHandle, uint16 nsduHandleOptions,
//   86                          uint8 secure, uint8 discoverRoute,
//   87                          uint8 radius);
//   88 #endif /* MT_NWK_FUNC */
//   89 
//   90 #if defined (MT_NWK_FUNC)
//   91 /***************************************************************************************************
//   92  * @fn      MT_NwkCommandProcessing
//   93  *
//   94  * @brief
//   95  *
//   96  *   Process all the NWK commands that are issued by test tool
//   97  *
//   98  * @param   cmd_id - Command ID
//   99  * @param   len    - Length of received SPI data message
//  100  * @param   pData  - pointer to received SPI data message
//  101  *
//  102  * @return  status
//  103  ***************************************************************************************************/
//  104 uint8 MT_NwkCommandProcessing(uint8 *pBuf)
//  105 {
//  106   uint8 status = MT_RPC_SUCCESS;
//  107 
//  108   switch (pBuf[MT_RPC_POS_CMD1])
//  109   {
//  110     case MT_NWK_INIT:
//  111       nwk_init(NWK_TaskID);
//  112       break;
//  113 
//  114     case MT_NLDE_DATA_REQ:
//  115       MT_NldeDataRequest(pBuf);
//  116       break;
//  117 
//  118     case MT_NLME_NETWORK_FORMATION_REQ:
//  119       MT_NlmeNetworkFormationRequest(pBuf);
//  120       break;
//  121 
//  122     case MT_NLME_PERMIT_JOINING_REQ:
//  123        MT_NlmePermitJoiningRequest(pBuf);
//  124       break;
//  125 
//  126      case MT_NLME_JOIN_REQ:
//  127        MT_NlmeJoinRequest(pBuf);
//  128        break;
//  129 
//  130      case MT_NLME_LEAVE_REQ:
//  131        MT_NlmeLeaveRequest(pBuf);
//  132        break;
//  133 
//  134      case MT_NLME_RESET_REQ:
//  135        MT_NlmeResetRequest(pBuf);
//  136        break;
//  137 
//  138      case MT_NLME_GET_REQ:
//  139        MT_NlmeGetRequest(pBuf);
//  140        break;
//  141 
//  142      case MT_NLME_SET_REQ:
//  143        MT_NlmeSetRequest(pBuf);
//  144        break;
//  145 
//  146      case MT_NLME_NETWORK_DISCOVERY_REQ:
//  147        MT_NlmeNetworkDiscoveryRequest(pBuf);
//  148        break;
//  149 
//  150      case MT_NLME_ROUTE_DISCOVERY_REQ:
//  151        MT_NlmeRouteDiscoveryRequest(pBuf);
//  152        break;
//  153 
//  154      case MT_NLME_DIRECT_JOIN_REQ:
//  155        MT_NlmeDirectJoinRequest(pBuf);
//  156        break;
//  157 
//  158      case MT_NLME_ORPHAN_JOIN_REQ:
//  159        MT_NlmeOrphanJoinRequest(pBuf);
//  160        break;
//  161 
//  162     case MT_NLME_START_ROUTER_REQ:
//  163       MT_NlmeStartRouterRequest(pBuf);
//  164       break;
//  165 
//  166     default:
//  167       status = MT_RPC_ERR_COMMAND_ID;
//  168       break;
//  169   }
//  170 
//  171   return status;
//  172 }
//  173 
//  174 /***************************************************************************************************
//  175  * @fn      MT_NldeDataReq
//  176  *
//  177  * @brief   Process NLDE Data Request commands
//  178  *
//  179  * @param   pBuf - pointer to received buffer
//  180  *
//  181  * @return  void
//  182  ***************************************************************************************************/
//  183 void MT_NldeDataRequest(uint8 *pBuf)
//  184 {
//  185   uint8 retValue = ZFailure;
//  186   uint16 dstAddr;
//  187   uint8 dataLen = 0;
//  188   uint8 *dataPtr;
//  189   uint8 cmdId;
//  190 
//  191   /* parse header */
//  192   cmdId = pBuf[MT_RPC_POS_CMD1];
//  193   pBuf += MT_RPC_FRAME_HDR_SZ;
//  194 
//  195   /* First read the DstAddr */
//  196   dstAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
//  197   pBuf += sizeof( dstAddr );
//  198 
//  199   /* Get the NSDU details */
//  200   dataLen = *pBuf++;
//  201   dataPtr = pBuf;
//  202 
//  203   /* Skip a length of ZTEST_DEFAULT_DATA_LEN */
//  204   pBuf += ZTEST_DEFAULT_DATA_LEN;
//  205 
//  206   /* Send out Data Request */
//  207   retValue = MT_Nwk_DataRequest(dstAddr, dataLen, dataPtr, pBuf[0], BUILD_UINT16(pBuf[1], pBuf[2]),
//  208                                 pBuf[3], pBuf[4], pBuf[5]);
//  209 
//  210   /* Build and send back the response */
//  211   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_NWK), cmdId, 1, &retValue);
//  212 }
//  213 
//  214 
//  215 /***************************************************************************************************
//  216  * @fn      MT_NlmeNetworkFormationRequest
//  217  *
//  218  * @brief   Network Formation Request
//  219  *
//  220  * @param   pBuf - pointer to the received buffer
//  221  *
//  222  * @return  void
//  223  ***************************************************************************************************/
//  224 void MT_NlmeNetworkFormationRequest(uint8 *pBuf)
//  225 {
//  226   uint8 retValue = ZFailure;
//  227 	uint16 panId;
//  228   uint32 channelList;
//  229   uint8 cmdId;
//  230 
//  231   /* parse header */
//  232   cmdId = pBuf[MT_RPC_POS_CMD1];
//  233   pBuf += MT_RPC_FRAME_HDR_SZ;
//  234 
//  235   /* Build panId */
//  236   panId = BUILD_UINT16( pBuf[0], pBuf[1]);
//  237   pBuf += sizeof(uint16);
//  238 			
//  239   /* Build the channel list */
//  240   channelList = osal_build_uint32(pBuf, 4);
//  241   pBuf += sizeof(uint32);
//  242 
//  243   if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
//  244   {
//  245     retValue = NLME_NetworkFormationRequest( panId, NULL, channelList, pBuf[0], pBuf[1], pBuf[2], pBuf[3] );
//  246   }
//  247   else
//  248   {
//  249     retValue = ZUnsupportedMode;
//  250   }
//  251 
//  252   /* Build and send back the response */
//  253   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_NWK), cmdId, 1, &retValue);
//  254 }
//  255 
//  256 /***************************************************************************************************
//  257  * @fn      MT_NlmePermitJoiningRequest
//  258  *
//  259  * @brief   Permit Joining Request
//  260  *
//  261  * @param   pBuf - pointer to the received buffer
//  262  *
//  263  * @return  void
//  264  ***************************************************************************************************/
//  265 void MT_NlmePermitJoiningRequest(uint8 *pBuf)
//  266 {
//  267   uint8 retValue = ZFailure;
//  268   uint8 cmdId;
//  269 
//  270   /* parse header */
//  271   cmdId = pBuf[MT_RPC_POS_CMD1];
//  272   pBuf += MT_RPC_FRAME_HDR_SZ;
//  273 
//  274   if (ZSTACK_ROUTER_BUILD)
//  275   {
//  276     retValue = NLME_PermitJoiningRequest(*pBuf);
//  277   }
//  278   else
//  279   {
//  280     retValue = ZUnsupportedMode;
//  281   }
//  282 
//  283   /* Build and send back the response */
//  284   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_NWK), cmdId, 1, &retValue);
//  285 }
//  286 
//  287 /***************************************************************************************************
//  288  * @fn      MT_NlmeStartRouterRequest
//  289  *
//  290  * @brief   Start Router Request
//  291  *
//  292  * @param   pBuf - pointer to the received buffer
//  293  *
//  294  * @return  void
//  295  ***************************************************************************************************/
//  296 void MT_NlmeStartRouterRequest(uint8 *pBuf)
//  297 {
//  298   uint8 retValue = ZFailure;
//  299   uint8 cmdId;
//  300 
//  301   /* parse header */
//  302   cmdId = pBuf[MT_RPC_POS_CMD1];
//  303   pBuf += MT_RPC_FRAME_HDR_SZ;
//  304 
//  305   if ( ZSTACK_ROUTER_BUILD )
//  306   {
//  307     retValue = (byte)NLME_StartRouterRequest(pBuf[0], pBuf[1], pBuf[2]);
//  308   }
//  309   else
//  310   {
//  311     retValue = ZUnsupportedMode;
//  312   }
//  313 
//  314   /* Build and send back the response */
//  315   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_NWK), cmdId, 1, &retValue);
//  316 }
//  317 
//  318 /***************************************************************************************************
//  319  * @fn      MT_NlmeJoinRequest
//  320  *
//  321  * @brief   Join Request
//  322  *
//  323  * @param   pBuf - pointer to the received buffer
//  324  *
//  325  * @return  void
//  326  ***************************************************************************************************/
//  327 void MT_NlmeJoinRequest(uint8 *pBuf)
//  328 {
//  329   uint8 retValue = ZFailure;
//  330   uint8 dummyExPANID[Z_EXTADDR_LEN] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
//  331   uint8 cmdId;
//  332 
//  333   /* parse header */
//  334   cmdId = pBuf[MT_RPC_POS_CMD1];
//  335   pBuf += MT_RPC_FRAME_HDR_SZ;
//  336 
//  337 	retValue = NLME_JoinRequest(dummyExPANID, BUILD_UINT16(pBuf[0], pBuf[1]), pBuf[2], pBuf[3]);
//  338 
//  339   if ( pBuf[6] & CAPINFO_RCVR_ON_IDLE )
//  340   {
//  341     /* The receiver is on, turn network layer polling off. */
//  342     NLME_SetPollRate( 0 );
//  343     NLME_SetQueuedPollRate( 0 );
//  344     NLME_SetResponseRate( 0 );
//  345   }
//  346 
//  347   /* Build and send back the response */
//  348   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_NWK), cmdId, 1, &retValue);
//  349 }
//  350 
//  351 /***************************************************************************************************
//  352  * @fn      MT_NlmeLeaveRequest
//  353  *
//  354  * @brief   Leave Request
//  355  *
//  356  * @param   pBuf - pointer to the received buffer
//  357  *
//  358  * @return  void
//  359  ***************************************************************************************************/
//  360 void MT_NlmeLeaveRequest(uint8 *pBuf)
//  361 {
//  362   NLME_LeaveReq_t req;
//  363   uint8 retValue = ZFailure;
//  364   uint8 index, cmdId;
//  365 
//  366   /* parse header */
//  367   cmdId = pBuf[MT_RPC_POS_CMD1];
//  368   pBuf += MT_RPC_FRAME_HDR_SZ;
//  369 
//  370   /* If extAddr is all zeros, it means null pointer */
//  371   for(index=0;((index < Z_EXTADDR_LEN) && (pBuf[index] == 0));index++);
//  372 
//  373   if (index == Z_EXTADDR_LEN)
//  374   {
//  375     req.extAddr = NULL;
//  376   }
//  377   else
//  378   {
//  379     req.extAddr = pBuf;
//  380   }
//  381 
//  382   /* Increment the pointer */
//  383   pBuf += Z_EXTADDR_LEN;
//  384 
//  385   req.removeChildren = FALSE;
//  386   req.rejoin         = FALSE;
//  387   req.silent         = FALSE;
//  388 
//  389   retValue = NLME_LeaveReq(&req);
//  390 
//  391   /* Build and send back the response */
//  392   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_NWK), cmdId, 1, &retValue);
//  393 }
//  394 
//  395 
//  396 /***************************************************************************************************
//  397  * @fn      MT_NlmeResetRequest
//  398  *
//  399  * @brief   Leave Request
//  400  *
//  401  * @param   pBuf - pointer to the received buffer
//  402  *
//  403  * @return  void
//  404  ***************************************************************************************************/
//  405 void MT_NlmeResetRequest(uint8 *pBuf)
//  406 {
//  407   uint8 retValue = NLME_ResetRequest();
//  408 
//  409   /* Build and send back the response */
//  410   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_NWK), MT_NLME_RESET_REQ, 1, &retValue);
//  411 }
//  412 
//  413 /***************************************************************************************************
//  414  * @fn      MT_NlmeGetRequest
//  415  *
//  416  * @brief   Get Request
//  417  *
//  418  * @param   pBuf - pointer to the received buffer
//  419  *
//  420  * @return  void
//  421  ***************************************************************************************************/
//  422 void MT_NlmeGetRequest(uint8 *pBuf)
//  423 {
//  424   uint8 dataBuf[11];
//  425   uint8 attr, index, cmdId;
//  426 
//  427   /* parse header */
//  428   cmdId = pBuf[MT_RPC_POS_CMD1];
//  429   pBuf += MT_RPC_FRAME_HDR_SZ;
//  430 
//  431   attr = *pBuf++;
//  432   index = *pBuf;
//  433 
//  434   dataBuf[0] = NLME_GetRequest((ZNwkAttributes_t )attr, index, &dataBuf[1]);
//  435 
//  436   /* Build and send back the response */
//  437   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_NWK), cmdId,
//  438                                11, dataBuf );
//  439 }
//  440 
//  441 /***************************************************************************************************
//  442  * @fn      MT_NlmeSetRequest
//  443  *
//  444  * @brief   Set Request
//  445  *
//  446  * @param   pBuf - pointer to the received buffer
//  447  *
//  448  * @return  void
//  449  ***************************************************************************************************/
//  450 void MT_NlmeSetRequest(uint8 *pBuf)
//  451 {
//  452   uint8 retValue = ZFailure;
//  453   uint8 cmdId;
//  454 
//  455   /* parse header */
//  456   cmdId = pBuf[MT_RPC_POS_CMD1];
//  457   pBuf += MT_RPC_FRAME_HDR_SZ;
//  458 
//  459   retValue = NLME_SetRequest((ZNwkAttributes_t)pBuf[0], pBuf[1], &pBuf[2]);
//  460 
//  461   /* Update NV */
//  462   ZDApp_NVUpdate();
//  463 
//  464   /* Build and send back the response */
//  465   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_NWK), cmdId, 1, &retValue );
//  466 }
//  467 
//  468 /***************************************************************************************************
//  469  * @fn      MT_NlmeNetworkDiscoveryRequest
//  470  *
//  471  * @brief   Network Discovery Request
//  472  *
//  473  * @param   pBuf - pointer to the received buffer
//  474  *
//  475  * @return  void
//  476  ***************************************************************************************************/
//  477 void MT_NlmeNetworkDiscoveryRequest(uint8 *pBuf)
//  478 {
//  479   uint8 retValue = ZFailure;
//  480   uint8 cmdId;
//  481   uint32 scanChannels;
//  482 
//  483   /* parse header */
//  484   cmdId = pBuf[MT_RPC_POS_CMD1];
//  485   pBuf += MT_RPC_FRAME_HDR_SZ;
//  486 
//  487   /* Scan channels */
//  488   scanChannels = osal_build_uint32(pBuf, 4);
//  489   pBuf += sizeof(uint32);
//  490 
//  491   retValue = NLME_NetworkDiscoveryRequest(scanChannels, *pBuf);
//  492 
//  493   /* Build and send back the response */
//  494   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_NWK), cmdId, 1, &retValue );
//  495 }
//  496 
//  497 /***************************************************************************************************
//  498  * @fn      MT_NlmeRouteDiscoveryRequest
//  499  *
//  500  * @brief   Route Discovery Request
//  501  *
//  502  * @param   pBuf - pointer to the received buffer
//  503  *
//  504  * @return  void
//  505  ***************************************************************************************************/
//  506 void MT_NlmeRouteDiscoveryRequest(uint8 *pBuf)
//  507 {
//  508   uint8 retValue = ZFailure;
//  509   uint8 cmdId;
//  510 
//  511   /* parse header */
//  512   cmdId = pBuf[MT_RPC_POS_CMD1];
//  513   pBuf += MT_RPC_FRAME_HDR_SZ;
//  514 
//  515   if ( ZSTACK_ROUTER_BUILD )
//  516   {
//  517     retValue = NLME_RouteDiscoveryRequest(BUILD_UINT16(pBuf[0], pBuf[1]), 0, pBuf[2]);
//  518   }
//  519   else
//  520   {
//  521     retValue = ZUnsupportedMode;
//  522   }
//  523 
//  524   /* Build and send back the response */
//  525   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_NWK), cmdId, 1, &retValue);
//  526 }
//  527 
//  528 /***************************************************************************************************
//  529  * @fn      MT_NlmeDirectJoinRequest
//  530  *
//  531  * @brief   Direct Join Request
//  532  *
//  533  * @param   pBuf - pointer to the received buffer
//  534  *
//  535  * @return  void
//  536  ***************************************************************************************************/
//  537 void MT_NlmeDirectJoinRequest(uint8 *pBuf)
//  538 {
//  539   uint8 retValue = ZFailure;
//  540   uint8 cmdId;
//  541 
//  542   /* parse header */
//  543   cmdId = pBuf[MT_RPC_POS_CMD1];
//  544   pBuf += MT_RPC_FRAME_HDR_SZ;
//  545 
//  546   if ( ZSTACK_ROUTER_BUILD )
//  547   {
//  548     retValue = NLME_DirectJoinRequest( pBuf, pBuf[8] );
//  549   }
//  550   else
//  551   {
//  552     retValue = ZUnsupportedMode;
//  553   }
//  554 
//  555   /* Build and send back the response */
//  556   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_NWK), cmdId, 1, &retValue);
//  557 }
//  558 
//  559 /***************************************************************************************************
//  560  * @fn      MT_NlmeOrphanJoinRequest
//  561  *
//  562  * @brief   Orphan Join Request
//  563  *
//  564  * @param   pBuf - pointer to the received buffer
//  565  *
//  566  * @return  void
//  567  ***************************************************************************************************/
//  568 void MT_NlmeOrphanJoinRequest(uint8 *pBuf)
//  569 {
//  570   uint8 i, j, attr;
//  571   uint8 retValue = ZFailure;
//  572   uint32 channelList;
//  573   uint8 cmdId;
//  574 
//  575   if ( ZSTACK_END_DEVICE_BUILD )
//  576   {
//  577     /* parse header */
//  578     cmdId = pBuf[MT_RPC_POS_CMD1];
//  579     pBuf += MT_RPC_FRAME_HDR_SZ;
//  580 
//  581     /* Channel list bit mask */
//  582     channelList = osal_build_uint32(pBuf, 4);
//  583     pBuf += sizeof(uint32);
//  584 
//  585     /* Count number of channels */
//  586     j = attr = 0;
//  587 
//  588     for (i = 0; i < ED_SCAN_MAXCHANNELS; i++)
//  589     {
//  590       if (channelList & (1 << i))
//  591       {
//  592         j++;
//  593         attr = i;
//  594       }
//  595     }
//  596 
//  597     /* If only one channel specified */
//  598     if (j == 1)
//  599     {
//  600       _NIB.scanDuration = *pBuf;
//  601       _NIB.nwkLogicalChannel = attr;
//  602       _NIB.channelList = channelList;
//  603       if ( !_NIB.CapabilityInfo )
//  604       {
//  605         _NIB.CapabilityInfo = ZDO_Config_Node_Descriptor.CapabilityFlags;
//  606       }
//  607 
//  608       devState = DEV_NWK_ORPHAN;
//  609       retValue = (byte)NLME_OrphanJoinRequest(channelList, *pBuf);
//  610     }
//  611     else
//  612     {
//  613       retValue = ZNwkInvalidParam;
//  614     }
//  615    }
//  616    else
//  617    {
//  618      retValue = ZUnsupportedMode;
//  619    }
//  620 
//  621   /* Build and send back the response */
//  622   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_NWK), cmdId, 1, &retValue);
//  623 }
//  624 
//  625 /***************************************************************************************************
//  626  * @fn      MT_Nwk_DataRequest
//  627  *
//  628  * @brief   Nwk Data Request
//  629  *
//  630  * @param   dstAddr, nsduLen, nsdu, nsduHandle, nsduHandleOptions, secure, discoverRoute, radius
//  631  *
//  632  * @return  void
//  633  ***************************************************************************************************/
//  634 uint8 MT_Nwk_DataRequest(uint16 dstAddr, uint8 nsduLen, uint8* nsdu,
//  635                          uint8 nsduHandle, uint16 nsduHandleOptions,
//  636                          uint8 secure, uint8 discoverRoute,
//  637                          uint8 radius)
//  638 {
//  639     uint8               status;
//  640     NLDE_DataReqAlloc_t dra;
//  641     NLDE_DataReq_t*     req;
//  642 
//  643 
//  644     dra.overhead = sizeof(NLDE_DataReq_t);
//  645     dra.nsduLen  = nsduLen;
//  646     dra.secure   = secure;
//  647 
//  648     req = NLDE_DataReqAlloc(&dra);
//  649 
//  650     if ( req != NULL )
//  651     {
//  652       osal_memcpy(req->nfd.nsdu, nsdu, nsduLen);
//  653 
//  654       req->nfd.dstAddr           = dstAddr;
//  655       req->nfd.nsduHandleOptions = nsduHandleOptions;
//  656       req->nfd.discoverRoute     = discoverRoute;
//  657       req->nfd.radius            = radius;
//  658 
//  659       status = NLDE_DataReq( req );
//  660     }
//  661     else
//  662     {
//  663       status = ZMemError;
//  664     }
//  665 
//  666     return status;
//  667 }
//  668 #endif /* MT_NWK_FUNC */
//  669 
//  670 #if defined ( MT_NWK_CB_FUNC )             //NWK callback commands
//  671 /***************************************************************************************************
//  672  * @fn          nwk_MTCallbackSubDataConfirm
//  673  *
//  674  * @brief       Process the callback subscription for NLDE-DATA.confirm
//  675  *
//  676  * @param       nsduHandle  - APS handle
//  677  * @param       Status      - result of data request
//  678  *
//  679  * @return      none
//  680  ***************************************************************************************************/
//  681 void nwk_MTCallbackSubDataConfirm(byte nsduHandle, ZStatus_t status)
//  682 {
//  683   byte buf[2];
//  684 
//  685   buf[0] = nsduHandle;
//  686   buf[1] = (byte)status;
//  687 
//  688   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_NWK), MT_NLDE_DATA_CONF, 2, buf );
//  689 }
//  690 
//  691 /***************************************************************************************************
//  692  * @fn          nwk_MTCallbackSubDataIndication
//  693  *
//  694  * @brief       Process the callback subscription for NLDE-DATA.indication
//  695  *
//  696  * @param       SrcAddress      - 16 bit address
//  697  * @param       nsduLength      - Length of incoming data
//  698  * @param       nsdu            - Pointer to incoming data
//  699  * @param       LinkQuality     - Link quality measured during
//  700  *                                reception.
//  701  *
//  702  * @return      none
//  703  ***************************************************************************************************/
//  704 void nwk_MTCallbackSubDataIndication(uint16 SrcAddress, int16 nsduLength, byte *nsdu, byte LinkQuality)
//  705 {
//  706   byte *msgPtr;
//  707   byte *msg;
//  708   byte msgLen;
//  709 
//  710   msgLen = sizeof( uint16 ) + sizeof( uint8 ) + ZTEST_DEFAULT_DATA_LEN
//  711             + sizeof( byte);
//  712 
//  713   msgPtr = osal_mem_alloc( msgLen );
//  714   if ( msgPtr )
//  715   {
//  716     //Fill up the data bytes
//  717     msg = msgPtr;
//  718 
//  719     //First fill in details
//  720     *msg++ = LO_UINT16( SrcAddress );
//  721     *msg++ = HI_UINT16( SrcAddress );
//  722 
//  723     //Since the max packet size is less than 255 bytes, a byte is enough
//  724     //to represent nsdu length
//  725     *msg++ = ( uint8 ) nsduLength;
//  726 
//  727     osal_memset( msg, NULL, ZTEST_DEFAULT_DATA_LEN ); // Clear the mem
//  728     osal_memcpy( msg, nsdu, nsduLength );
//  729     msg += ZTEST_DEFAULT_DATA_LEN;
//  730 
//  731     *msg++ = LinkQuality;
//  732 
//  733     MT_BuildAndSendZToolResponse( ((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_NWK), MT_NLDE_DATA_IND, msgLen, msgPtr );
//  734 
//  735     osal_mem_free( msgPtr );
//  736   }
//  737 }
//  738 
//  739 /***************************************************************************************************
//  740  * @fn          nwk_MTCallbackSubInitCoordConfirm
//  741  *
//  742  * @brief       Process the callback subscription for NLME-INIT-COORD.confirm
//  743  *
//  744  * @param       Status - Result of NLME_InitCoordinatorRequest()
//  745  *
//  746  * @return      none
//  747  ***************************************************************************************************/
//  748 void nwk_MTCallbackSubInitCoordConfirm( ZStatus_t Status )
//  749 {
//  750   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_NWK), MT_NLME_NETWORK_FORMATION_CONF,
//  751                           sizeof(byte), (byte*)&Status);
//  752 }
//  753 
//  754 /***************************************************************************************************
//  755  * @fn          nwk_MTCallbackSubStartRouterConfirm
//  756  *
//  757  * @brief       Process the callback subscription for NLME-START-ROUTER.confirm
//  758  *
//  759  * @param       Status - Result of NLME_StartRouterRequest()
//  760  *
//  761  * @return      none
//  762  ***************************************************************************************************/
//  763 void nwk_MTCallbackSubStartRouterConfirm( ZStatus_t Status )
//  764 {
//  765   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_NWK), MT_NLME_START_ROUTER_CONF,
//  766                           sizeof(byte), (byte*)&Status);
//  767 }
//  768 
//  769 /***************************************************************************************************
//  770  * @fn          nwk_MTCallbackSubJoinConfirm
//  771  *
//  772  * @brief       Process the callback subscription for NLME-JOIN.confirm
//  773  *
//  774  * @param       Status - Result of NLME_JoinRequest()
//  775  *
//  776  * @return      none
//  777  ***************************************************************************************************/
//  778 void nwk_MTCallbackSubJoinConfirm(uint16 PanId, ZStatus_t Status)
//  779 {
//  780   byte msg[Z_EXTADDR_LEN + 3];
//  781 
//  782   /* This device's 64-bit address */
//  783   ZMacGetReq( ZMacExtAddr, msg );
//  784 
//  785   msg[Z_EXTADDR_LEN + 0] = LO_UINT16(PanId);
//  786   msg[Z_EXTADDR_LEN + 1] = HI_UINT16(PanId);
//  787   msg[Z_EXTADDR_LEN + 2] = (byte)Status;
//  788 
//  789   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_NWK), MT_NLME_JOIN_CONF, Z_EXTADDR_LEN + 3, msg );
//  790 }
//  791 /***************************************************************************************************
//  792  * @fn          nwk_MTCallbackSubNetworkDiscoveryConfirm
//  793  *
//  794  * @brief       Process the callback subscription for NLME-NWK_DISC.confirm
//  795  *
//  796  * @param       ResultCount			- number of networks discovered
//  797  * @param				NetworkList			- pointer to list of network descriptors
//  798  *
//  799  * @return      void
//  800  ***************************************************************************************************/
//  801 void nwk_MTCallbackSubNetworkDiscoveryConfirm( byte ResultCount, networkDesc_t *NetworkList )
//  802 {
//  803 	byte len;
//  804 	byte *msgPtr;
//  805 	byte *msg;
//  806 	byte i;
//  807 
//  808   // The message cannot be bigger then SPI_TX_BUFF_MAX.  Reduce resultCount if necessary
//  809   if (ResultCount * sizeof(networkDesc_t) > MT_UART_TX_BUFF_MAX - (1 + SPI_0DATA_MSG_LEN))
//  810   {
//  811     ResultCount = (MT_UART_TX_BUFF_MAX - (1 + SPI_0DATA_MSG_LEN)) / sizeof(networkDesc_t);
//  812   }
//  813 
//  814 	len = 1 + ResultCount * sizeof(networkDesc_t);
//  815   msgPtr = osal_mem_alloc( len );
//  816 	if ( msgPtr )
//  817 	{
//  818 	  /* Fill up the data bytes */
//  819     msg = msgPtr;
//  820 
//  821 		*msg++ = ResultCount;
//  822 
//  823 		for ( i = 0; i < ResultCount; i++ )
//  824 		{
//  825 		  *msg++ = LO_UINT16( NetworkList->panId );
//  826 		  *msg++ = HI_UINT16( NetworkList->panId );
//  827 		  *msg++ = NetworkList->logicalChannel;
//  828 		  *msg++ = NetworkList->beaconOrder;
//  829 		  *msg++ = NetworkList->superFrameOrder;
//  830 		  *msg++ = NetworkList->routerCapacity;
//  831 		  *msg++ = NetworkList->deviceCapacity;
//  832 		  *msg++ = NetworkList->version;
//  833 		  *msg++ = NetworkList->stackProfile;
//  834 		  //*msg++ = NetworkList->securityLevel;
//  835 		
//  836 			NetworkList = (networkDesc_t*)NetworkList->nextDesc;
//  837 		}
//  838 
//  839     MT_BuildAndSendZToolResponse (((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_NWK), MT_NLME_NETWORK_DISCOVERY_CONF, len, msgPtr);
//  840 
//  841     osal_mem_free( msgPtr );
//  842 	}
//  843 }
//  844 /***************************************************************************************************
//  845  * @fn          nwk_MTCallbackSubJoinIndication
//  846  *
//  847  * @brief       Process the callback subscription for NLME-INIT-COORD.indication
//  848  *
//  849  * @param       ShortAddress - 16-bit address
//  850  * @param       ExtendedAddress - IEEE (64-bit) address
//  851  * @param       CapabilityInformation - Association Capability Information
//  852  *
//  853  * @return      ZStatus_t
//  854  ***************************************************************************************************/
//  855 void nwk_MTCallbackSubJoinIndication( uint16 ShortAddress, byte *ExtendedAddress,
//  856                                       byte CapabilityInformation )
//  857 {
//  858   byte *msgPtr;
//  859   byte *msg;
//  860   byte len;
//  861 
//  862   len = sizeof( uint16 ) + Z_EXTADDR_LEN + sizeof( byte );
//  863   msgPtr = osal_mem_alloc( len );
//  864 
//  865   if ( msgPtr )
//  866   {
//  867     /* Fill up the data bytes */
//  868     msg = msgPtr;
//  869 
//  870     /* First fill in details */
//  871     *msg++ = LO_UINT16( ShortAddress );
//  872     *msg++ = HI_UINT16( ShortAddress );
//  873 
//  874     osal_cpyExtAddr( msg, ExtendedAddress );
//  875     msg += Z_EXTADDR_LEN;
//  876 
//  877     *msg = CapabilityInformation;
//  878 
//  879     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_NWK), MT_NLME_JOIN_IND, len, msgPtr );
//  880 
//  881     osal_mem_free( msgPtr );
//  882   }
//  883 }
//  884 
//  885 /***************************************************************************************************
//  886  * @fn          nwk_MTCallbackSubLeaveConfirm
//  887  *
//  888  * @brief       Process the callback subscription for NLME-LEAVE.confirm
//  889  *
//  890  * @param       DeviceAddress - IEEE (64-bit) address
//  891  * @param       Status - Result of NLME_LeaveRequest()
//  892  *
//  893  * @return      none
//  894  ***************************************************************************************************/
//  895 void nwk_MTCallbackSubLeaveConfirm( byte *DeviceAddress, ZStatus_t Status )
//  896 {
//  897   byte *msgPtr;
//  898   byte *msg;
//  899 
//  900   msgPtr = osal_mem_alloc( Z_EXTADDR_LEN + sizeof( byte ) );
//  901   if ( msgPtr )
//  902   {
//  903     /* Fill up the data bytes */
//  904     msg = msgPtr;
//  905 
//  906     /* First fill in details */
//  907     osal_cpyExtAddr( msg, DeviceAddress );
//  908     msg += Z_EXTADDR_LEN;
//  909 
//  910     *msg = (byte)Status;
//  911 
//  912     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_NWK), MT_NLME_LEAVE_CONF,
//  913                             Z_EXTADDR_LEN + sizeof( byte ), msgPtr );
//  914 
//  915     osal_mem_free( msgPtr );
//  916   }
//  917 }
//  918 /***************************************************************************************************
//  919  * @fn          nwk_MTCallbackSubLeaveIndication
//  920  *
//  921  * @brief       Process the callback subscription for NLME-LEAVE.indication
//  922  *
//  923  * @param       DeviceAddress - IEEE (64-bit) address
//  924  *
//  925  * @return      NULL
//  926  ***************************************************************************************************/
//  927 void nwk_MTCallbackSubLeaveIndication( byte *DeviceAddress )
//  928 {
//  929   byte msg[Z_EXTADDR_LEN+1];
//  930 
//  931   /* First fill in details */
//  932   if ( DeviceAddress )
//  933   {
//  934     osal_cpyExtAddr( msg, DeviceAddress );
//  935   }
//  936   else
//  937   {
//  938     osal_memset( msg, 0, Z_EXTADDR_LEN );
//  939   }
//  940 
//  941   /* Status, assume good if we get this far */
//  942   msg[Z_EXTADDR_LEN] = 0;
//  943 
//  944   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_NWK), MT_NLME_LEAVE_IND, Z_EXTADDR_LEN+1, msg );
//  945 }
//  946 /***************************************************************************************************
//  947  * @fn          nwk_MTCallbackSubSyncIndication
//  948  *
//  949  * @brief       Process the callback subscription for NLME-SYNC.indication
//  950  *
//  951  * @param       none
//  952  *
//  953  * @return      none
//  954  ***************************************************************************************************/
//  955 void nwk_MTCallbackSubSyncIndication( void )
//  956 {
//  957   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_NWK), MT_NLME_SYNC_IND, 0, NULL );
//  958 }
//  959 
//  960 /***************************************************************************************************
//  961  * @fn          nwk_MTCallbackSubPollConfirm
//  962  *
//  963  * @brief       Process the callback subscription for NLME-POLL.confirm
//  964  *
//  965  * @param       status - status of the poll operation
//  966  *
//  967  * @return      none
//  968  ***************************************************************************************************/
//  969 void nwk_MTCallbackSubPollConfirm( byte status )
//  970 {
//  971   byte msg = status;
//  972 
//  973   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_NWK), MT_NLME_POLL_CONF, 1, &msg );
//  974 }
//  975 
//  976 #endif /* NWK Callback commands */
//  977 
//  978 /***************************************************************************************************
//  979  ***************************************************************************************************/
//  980 
// 
// 2 bytes in segment XDATA_Z
// 
// 2 bytes of XDATA memory
//
//Errors: none
//Warnings: none
