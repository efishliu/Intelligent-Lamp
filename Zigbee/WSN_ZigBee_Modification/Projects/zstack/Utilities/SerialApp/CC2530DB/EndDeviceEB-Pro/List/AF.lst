###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         10/Jul/2018  16:37:25 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Components\stack\af\AF.c                           #
#    Command line       =  -f D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ #
#                          ¸Ä\Projects\zstack\Utilities\SerialApp\CC2530DB\.. #
#                          \..\..\Tools\CC2530DB\f8wEndev.cfg (-DCPU32MHZ     #
#                          -DROOT=__near_func -DBLINK_LEDS) -f                #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\Tools\CC2530DB\f8wConfig.cfg (-DSECURE=0       #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xfFF1                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Components\stack\af\AF.c -D ZIGBEEPRO -D           #
#                          NWK_AUTO_POLL -D HAL_UART=TRUE -D                  #
#                          SERIAL_APP_PORT=0 -D LCD_SUPPORTED -D              #
#                          xPOWER_SAVING -lC D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼ #
#                          «\WSN_ZigBee_ÐÞ¸Ä\Projects\zstack\Utilities\Serial #
#                          App\CC2530DB\EndDeviceEB-Pro\List\ -lA             #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\EndDe #
#                          viceEB-Pro\List\ --diag_suppress Pe001,Pa010 -o    #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\EndDe #
#                          viceEB-Pro\Obj\ -e --debug --core=plain            #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 8 -I D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ #
#                          °\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\Projects\zstack\Utilities\S #
#                          erialApp\CC2530DB\ -I D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ° #
#                          \ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\Projects\zstack\Utilities\Se #
#                          rialApp\CC2530DB\..\SOURCE\ -I                     #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\ZMAIN\TI2530DB\ -I D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ #
#                          °\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\Projects\zstack\Utilities\S #
#                          erialApp\CC2530DB\..\..\..\..\..\COMPONENTS\MT\    #
#                          -I D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ #
#                          ¸Ä\Projects\zstack\Utilities\SerialApp\CC2530DB\.. #
#                          \..\..\..\..\COMPONENTS\HAL\INCLUDE\ -I            #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\ -I       #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\OSAL\MCU\CCSOC\ -I            #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\OSAL\INCLUDE\ -I              #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\STACK\AF\ -I                  #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\STACK\NWK\ -I                 #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\STACK\SEC\ -I                 #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\STACK\SAPI\ -I                #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\STACK\SYS\ -I                 #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\STACK\ZDO\ -I                 #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\ZMAC\F8W\ -I                  #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\ZMAC\ -I                      #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\SERVICES\SADDR\ -I            #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\SERVICES\SDATA\ -I            #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\MAC\INCLUDE\ -I               #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\MAC\HIGH_LEVEL\ -I            #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\ -I       #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CH #
#                          IP\ -Ohz --require_prototypes                      #
#    List file          =  D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\EndDe #
#                          viceEB-Pro\List\AF.lst                             #
#    Object file        =  D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\EndDe #
#                          viceEB-Pro\Obj\AF.r51                              #
#                                                                             #
#                                                                             #
###############################################################################

D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\Components\stack\af\AF.c
      1          /**************************************************************************************************
      2            Filename:       AF.c
      3            Revised:        $Date: 2009-03-19 13:41:00 -0700 (Thu, 19 Mar 2009) $
      4            Revision:       $Revision: 19470 $
      5          
      6            Description:    Application Framework - Device Description helper functions
      7          
      8          
      9            Copyright 2004-2009 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          
     44          #include "OSAL.h"
     45          #include "AF.h"
     46          #include "nwk_globals.h"
     47          #include "nwk_util.h"
     48          #include "aps_groups.h"
     49          #include "ZDProfile.h"
     50          #include "aps_frag.h"
     51          
     52          #if defined ( MT_AF_CB_FUNC )
     53            #include "MT_AF.h"
     54          #endif
     55          
     56          #if defined ( INTER_PAN )
     57            #include "stub_aps.h"
     58          #endif
     59          
     60          /*********************************************************************
     61           * MACROS
     62           */
     63          
     64          /*********************************************************************
     65           * @fn      afSend
     66           *
     67           * @brief   Helper macro for V1 API to invoke V2 API.
     68           *
     69           * input parameters
     70           *
     71           * @param  *dstAddr - Full ZB destination address: Nwk Addr + End Point.
     72           * @param   srcEP - Origination (i.e. respond to or ack to) End Point.
     73           * @param   cID - A valid cluster ID as specified by the Profile.
     74           * @param   len - Number of bytes of data pointed to by next param.
     75           * @param  *buf - A pointer to the data bytes to send.
     76           * @param   options - Valid bit mask of AF Tx Options as defined in AF.h.
     77           * @param  *transID - A pointer to a byte which can be modified and which will
     78           *                    be used as the transaction sequence number of the msg.
     79           *
     80           * output parameters
     81           *
     82           * @param  *transID - Incremented by one if the return value is success.
     83           *
     84           * @return  afStatus_t - See previous definition of afStatus_... types.
     85           */
     86          #define afSend( dstAddr, srcEP, cID, len, buf, transID, options, radius ) \
     87                  AF_DataRequest( (dstAddr), afFindEndPointDesc( (srcEP) ), \
     88                                    (cID), (len), (buf), (transID), (options), (radius) )
     89          
     90          /*********************************************************************
     91           * CONSTANTS
     92           */
     93          
     94          /*********************************************************************
     95           * TYPEDEFS
     96           */
     97          
     98          /*********************************************************************
     99           * GLOBAL VARIABLES
    100           */
    101          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    102          epList_t *epList;
   \                     epList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    103          
    104          /*********************************************************************
    105           * EXTERNAL VARIABLES
    106           */
    107          
    108          /*********************************************************************
    109           * EXTERNAL FUNCTIONS
    110           */
    111          
    112          /*********************************************************************
    113           * LOCAL VARIABLES
    114           */
    115          
    116          /*********************************************************************
    117           * LOCAL FUNCTIONS
    118           */
    119          
    120          static void afBuildMSGIncoming( aps_FrameFormat_t *aff, endPointDesc_t *epDesc,
    121                          zAddrType_t *SrcAddress, uint16 SrcPanId, NLDE_Signal_t *sig,
    122                          byte SecurityUse, uint32 timestamp );
    123          
    124          static epList_t *afFindEndPointDescList( byte EndPoint );
    125          
    126          static pDescCB afGetDescCB( endPointDesc_t *epDesc );
    127          
    128          /*********************************************************************
    129           * NETWORK LAYER CALLBACKS
    130           */
    131          
    132          /*********************************************************************
    133           * PUBLIC FUNCTIONS
    134           */
    135          
    136          /*********************************************************************
    137           * @fn      afInit
    138           *
    139           * @brief   Initialization function for the AF.
    140           *
    141           * @param   none
    142           *
    143           * @return  none
    144           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    145          void afInit( void )
   \                     afInit:
    146          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    147            // Start with no endpoint defined
    148            epList = NULL;
   \   000004   90....       MOV     DPTR,#epList
   \   000007   E4           CLR     A
   \   000008   F0           MOVX    @DPTR,A
   \   000009   A3           INC     DPTR
   \   00000A   F0           MOVX    @DPTR,A
    149          }
   \   00000B   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    150          
    151          /*********************************************************************
    152           * @fn      afRegisterExtended
    153           *
    154           * @brief   Register an Application's EndPoint description.
    155           *
    156           * @param   epDesc - pointer to the Application's endpoint descriptor.
    157           * @param   descFn - pointer to descriptor callback function
    158           *
    159           * NOTE:  The memory that epDesc is pointing to must exist after this call.
    160           *
    161           * @return  Pointer to epList_t on success, NULL otherwise.
    162           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    163          epList_t *afRegisterExtended( endPointDesc_t *epDesc, pDescCB descFn )
   \                     afRegisterExtended:
    164          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   \   000009   EC           MOV     A,R4
   \   00000A   FE           MOV     R6,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FF           MOV     R7,A
    165            epList_t *ep;
    166            epList_t *epSearch;
    167          
    168            ep = osal_mem_alloc( sizeof ( epList_t ) );
   \   00000D                ; Setup parameters for call to function osal_mem_alloc
   \   00000D   7A07         MOV     R2,#0x7
   \   00000F   7B00         MOV     R3,#0x0
   \   000011   12....       LCALL   ??osal_mem_alloc?relay
    169            if ( ep )
   \   000014   EA           MOV     A,R2
   \   000015   4B           ORL     A,R3
   \   000016   6050         JZ      ??afRegisterExtended_0
    170            {
    171              // Fill in the new list entry
    172              ep->epDesc = epDesc;
   \   000018   8A82         MOV     DPL,R2
   \   00001A   8B83         MOV     DPH,R3
   \   00001C   E5..         MOV     A,?V0 + 0
   \   00001E   F0           MOVX    @DPTR,A
   \   00001F   A3           INC     DPTR
   \   000020   E5..         MOV     A,?V0 + 1
   \   000022   F0           MOVX    @DPTR,A
    173          
    174              // Default to allow Match Descriptor.
    175              ep->flags = eEP_AllowMatch;
   \   000023   8A82         MOV     DPL,R2
   \   000025   8B83         MOV     DPH,R3
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   7401         MOV     A,#0x1
   \   00002B   12....       LCALL   ?Subroutine9 & 0xFFFF
    176              ep->pfnDescCB = descFn;
   \                     ??CrossCallReturnLabel_7:
   \   00002E   EE           MOV     A,R6
   \   00002F   F0           MOVX    @DPTR,A
   \   000030   A3           INC     DPTR
   \   000031   EF           MOV     A,R7
   \   000032   12....       LCALL   ?Subroutine9 & 0xFFFF
    177              ep->nextDesc = NULL;
   \                     ??CrossCallReturnLabel_8:
   \   000035   A3           INC     DPTR
   \   000036   A3           INC     DPTR
   \   000037   E4           CLR     A
   \   000038   F0           MOVX    @DPTR,A
   \   000039   A3           INC     DPTR
   \   00003A   F0           MOVX    @DPTR,A
    178          
    179              // Does a list exist?
    180              if ( epList == NULL )
   \   00003B   90....       MOV     DPTR,#epList
   \   00003E   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   000041   7005         JNZ     ??afRegisterExtended_1
    181                epList = ep;  // Make this the first entry
   \   000043   90....       MOV     DPTR,#epList
   \   000046   801B         SJMP    ??afRegisterExtended_2
    182              else
    183              {
    184                // Look for the end of the list
    185                epSearch = epList;
   \                     ??afRegisterExtended_1:
   \   000048   E0           MOVX    A,@DPTR
   \   000049   F9           MOV     R1,A
    186                while( epSearch->nextDesc != NULL )
    187                  epSearch = epSearch->nextDesc;
   \                     ??afRegisterExtended_3:
   \   00004A   E8           MOV     A,R0
   \   00004B   2405         ADD     A,#0x5
   \   00004D   F8           MOV     R0,A
   \   00004E   E9           MOV     A,R1
   \   00004F   3400         ADDC    A,#0x0
   \   000051   F9           MOV     R1,A
   \   000052   E8           MOV     A,R0
   \   000053   FC           MOV     R4,A
   \   000054   E9           MOV     A,R1
   \   000055   FD           MOV     R5,A
   \   000056   8C82         MOV     DPL,R4
   \   000058   8D83         MOV     DPH,R5
   \   00005A   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   00005D   70EB         JNZ     ??afRegisterExtended_3
    188          
    189                // Add new entry to end of list
    190                epSearch->nextDesc = ep;
   \   00005F   8C82         MOV     DPL,R4
   \   000061   8D83         MOV     DPH,R5
   \                     ??afRegisterExtended_2:
   \   000063   EA           MOV     A,R2
   \   000064   F0           MOVX    @DPTR,A
   \   000065   A3           INC     DPTR
   \   000066   EB           MOV     A,R3
   \   000067   F0           MOVX    @DPTR,A
    191              }
    192            }
    193          
    194            return ep;
   \                     ??afRegisterExtended_0:
   \   000068                REQUIRE ?Subroutine1
   \   000068                ; // Fall through to label ?Subroutine1
    195          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_109:
   \   000003   E8           MOV     A,R0
   \   000004   49           ORL     A,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET
    196          
    197          /*********************************************************************
    198           * @fn      afRegister
    199           *
    200           * @brief   Register an Application's EndPoint description.
    201           *
    202           * @param   epDesc - pointer to the Application's endpoint descriptor.
    203           *
    204           * NOTE:  The memory that epDesc is pointing to must exist after this call.
    205           *
    206           * @return  afStatus_SUCCESS - Registered
    207           *          afStatus_MEM_FAIL - not enough memory to add descriptor
    208           *          afStatus_INVALID_PARAMETER - duplicate endpoint
    209           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    210          afStatus_t afRegister( endPointDesc_t *epDesc )
   \                     afRegister:
    211          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    212            epList_t *ep;
    213            
    214            // Look for duplicate endpoint
    215            if ( afFindEndPointDescList( epDesc->endPoint ) )
   \   000009                ; Setup parameters for call to function afFindEndPointDescList
   \   000009   8E82         MOV     DPL,R6
   \   00000B   8F83         MOV     DPH,R7
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   F9           MOV     R1,A
   \   00000F   12....       LCALL   ??afFindEndPointDescList?relay
   \   000012   8B..         MOV     ?V0 + 1,R3
   \   000014   EA           MOV     A,R2
   \   000015   45..         ORL     A,?V0 + 1
   \   000017   6004         JZ      ??afRegister_0
    216              return ( afStatus_INVALID_PARAMETER );
   \   000019   7902         MOV     R1,#0x2
   \   00001B   8018         SJMP    ??afRegister_1
    217            
    218            ep = afRegisterExtended( epDesc, NULL );
    219          
    220            return ((ep == NULL) ? afStatus_MEM_FAIL : afStatus_SUCCESS);
   \                     ??afRegister_0:
   \   00001D                ; Setup parameters for call to function afRegisterExtended
   \   00001D   7C00         MOV     R4,#0x0
   \   00001F   7D00         MOV     R5,#0x0
   \   000021   EE           MOV     A,R6
   \   000022   FA           MOV     R2,A
   \   000023   EF           MOV     A,R7
   \   000024   FB           MOV     R3,A
   \   000025   12....       LCALL   ??afRegisterExtended?relay
   \   000028   8B..         MOV     ?V0 + 1,R3
   \   00002A   EA           MOV     A,R2
   \   00002B   45..         ORL     A,?V0 + 1
   \   00002D   7004         JNZ     ??afRegister_2
   \   00002F   7910         MOV     R1,#0x10
   \   000031   8002         SJMP    ??afRegister_1
   \                     ??afRegister_2:
   \   000033   7900         MOV     R1,#0x0
   \                     ??afRegister_1:
   \   000035   02....       LJMP    ?Subroutine2 & 0xFFFF
    221          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    222          
    223          
    224          /*********************************************************************
    225           * @fn          afDataConfirm
    226           *
    227           * @brief       This function will generate the Data Confirm back to
    228           *              the application.
    229           *
    230           * @param       endPoint - confirm end point
    231           * @param       transID - transaction ID from APSDE_DATA_REQUEST
    232           * @param       status - status of APSDE_DATA_REQUEST
    233           *
    234           * @return      none
    235           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    236          void afDataConfirm( uint8 endPoint, uint8 transID, ZStatus_t status )
   \                     afDataConfirm:
    237          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   \   000007   EA           MOV     A,R2
   \   000008   FF           MOV     R7,A
   \   000009   8B..         MOV     ?V0 + 0,R3
    238            endPointDesc_t *epDesc;
    239            afDataConfirm_t *msgPtr;
    240          
    241            // Find the endpoint description
    242            epDesc = afFindEndPointDesc( endPoint );
   \   00000B                ; Setup parameters for call to function afFindEndPointDesc
   \   00000B   12....       LCALL   ?Subroutine32 & 0xFFFF
    243            if ( epDesc == NULL )
   \                     ??CrossCallReturnLabel_57:
   \   00000E   EA           MOV     A,R2
   \   00000F   45..         ORL     A,?V0 + 5
   \   000011   6030         JZ      ??CrossCallReturnLabel_19
    244              return;
    245          
    246            // Determine the incoming command type
    247            msgPtr = (afDataConfirm_t *)osal_msg_allocate( sizeof(afDataConfirm_t) );
   \   000013                ; Setup parameters for call to function osal_msg_allocate
   \   000013   7A04         MOV     R2,#0x4
   \   000015   7B00         MOV     R3,#0x0
   \   000017   12....       LCALL   ??osal_msg_allocate?relay
    248            if ( msgPtr )
   \   00001A   EA           MOV     A,R2
   \   00001B   4B           ORL     A,R3
   \   00001C   6025         JZ      ??CrossCallReturnLabel_19
    249            {
    250              // Build the Data Confirm message
    251              msgPtr->hdr.event = AF_DATA_CONFIRM_CMD;
   \   00001E   8A82         MOV     DPL,R2
   \   000020   8B83         MOV     DPH,R3
   \   000022   74FD         MOV     A,#-0x3
   \   000024   F0           MOVX    @DPTR,A
    252              msgPtr->hdr.status = status;
   \   000025   A3           INC     DPTR
   \   000026   E5..         MOV     A,?V0 + 0
   \   000028   F0           MOVX    @DPTR,A
    253              msgPtr->endpoint = endPoint;
   \   000029   EE           MOV     A,R6
   \   00002A   8A82         MOV     DPL,R2
   \   00002C   8B83         MOV     DPH,R3
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   F0           MOVX    @DPTR,A
    254              msgPtr->transID = transID;
   \   000031   EF           MOV     A,R7
   \   000032   8A82         MOV     DPL,R2
   \   000034   8B83         MOV     DPH,R3
   \   000036   A3           INC     DPTR
   \   000037   A3           INC     DPTR
   \   000038   A3           INC     DPTR
   \   000039   F0           MOVX    @DPTR,A
    255          
    256          #if defined ( MT_AF_CB_FUNC )
    257              /* If MT has subscribed for this callback, don't send as a message. */
    258              if ( AFCB_CHECK(CB_ID_AF_DATA_CNF,*(epDesc->task_id)) )
    259              {
    260                /* Send callback if it's subscribed */
    261                MT_AfDataConfirm ((void *)msgPtr);
    262                /* Release the memory. */
    263                osal_msg_deallocate( (void *)msgPtr );
    264              }
    265              else
    266          #endif
    267              {
    268                /* send message through task message */
    269                osal_msg_send( *(epDesc->task_id), (byte *)msgPtr );
   \   00003A                ; Setup parameters for call to function osal_msg_send
   \   00003A   85..82       MOV     DPL,?V0 + 4
   \   00003D   85..83       MOV     DPH,?V0 + 5
   \   000040   12....       LCALL   ?Subroutine14 & 0xFFFF
    270              }
    271            }
   \                     ??CrossCallReturnLabel_19:
   \   000043   7F06         MOV     R7,#0x6
   \   000045   02....       LJMP    ?BANKED_LEAVE_XDATA
    272          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   12....       LCALL   ??afFindEndPointDesc?relay
   \   000003   8A..         MOV     ?V0 + 4,R2
   \   000005   8B..         MOV     ?V0 + 5,R3
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   A3           INC     DPTR
   \   000001   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   000004   F9           MOV     R1,A
   \   000005   12....       LCALL   ??osal_msg_send?relay
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8882         MOV     DPL,R0
   \   000008   22           RET
    273          
    274          /*********************************************************************
    275           * @fn          afIncomingData
    276           *
    277           * @brief       Transfer a data PDU (ASDU) from the APS sub-layer to the AF.
    278           *
    279           * @param       aff  - pointer to APS frame format
    280           * @param       SrcAddress  - Source address
    281           * @param       sig - incoming message's link quality
    282           * @param       SecurityUse - Security enable/disable
    283           *
    284           * @return      none
    285           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    286          void afIncomingData( aps_FrameFormat_t *aff, zAddrType_t *SrcAddress, uint16 SrcPanId,
   \                     afIncomingData:
    287                               NLDE_Signal_t *sig, byte SecurityUse, uint32 timestamp )
    288          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7401         MOV     A,#0x1
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   EA           MOV     A,R2
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   EB           MOV     A,R3
   \   000013   F0           MOVX    @DPTR,A
   \   000014   740A         MOV     A,#0xa
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   EC           MOV     A,R4
   \   00001A   F0           MOVX    @DPTR,A
   \   00001B   A3           INC     DPTR
   \   00001C   ED           MOV     A,R5
   \   00001D   F0           MOVX    @DPTR,A
   \   00001E   7405         MOV     A,#0x5
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   E9           MOV     A,R1
   \   000024   F0           MOVX    @DPTR,A
   \   000025   7420         MOV     A,#0x20
   \   000027   12....       LCALL   ?XSTACK_DISP0_8
   \   00002A   78..         MOV     R0,#?V0 + 0
   \   00002C   12....       LCALL   ?L_MOV_X
    289            endPointDesc_t *epDesc = NULL;
    290            uint16 epProfileID = 0xFFFF;  // Invalid Profile ID
   \   00002F   7403         MOV     A,#0x3
   \   000031   12....       LCALL   ?XSTACK_DISP0_8
   \   000034   74FF         MOV     A,#-0x1
   \   000036   F0           MOVX    @DPTR,A
   \   000037   A3           INC     DPTR
   \   000038   F0           MOVX    @DPTR,A
    291            epList_t *pList;
    292          #if !defined ( APS_NO_GROUPS )    
    293            uint8 grpEp;
    294          #endif  
    295          
    296            if ( ((aff->FrmCtrl & APS_DELIVERYMODE_MASK) == APS_FC_DM_GROUP) )
   \   000039   7401         MOV     A,#0x1
   \   00003B   12....       LCALL   ?XSTACK_DISP0_8
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   2402         ADD     A,#0x2
   \   000041   F8           MOV     R0,A
   \   000042   A3           INC     DPTR
   \   000043   E0           MOVX    A,@DPTR
   \   000044   3400         ADDC    A,#0x0
   \   000046   F9           MOV     R1,A
   \   000047   7408         MOV     A,#0x8
   \   000049   12....       LCALL   ?XSTACK_DISP0_8
   \   00004C   12....       LCALL   ??Subroutine35_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   00004F   7401         MOV     A,#0x1
   \   000051   12....       LCALL   ?XSTACK_DISP0_8
   \   000054   E0           MOVX    A,@DPTR
   \   000055   2404         ADD     A,#0x4
   \   000057   F8           MOV     R0,A
   \   000058   A3           INC     DPTR
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   3400         ADDC    A,#0x0
   \   00005C   F9           MOV     R1,A
   \   00005D   7406         MOV     A,#0x6
   \   00005F   12....       LCALL   ?XSTACK_DISP0_8
   \   000062   12....       LCALL   ??Subroutine35_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   000065   7401         MOV     A,#0x1
   \   000067   12....       LCALL   ?XSTACK_DISP0_8
   \   00006A   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   00006D   701C         JNZ     ??afIncomingData_0
    297            {
    298          #if !defined ( APS_NO_GROUPS )    
    299              // Find the first endpoint for this group
    300              grpEp = aps_FindGroupForEndpoint( aff->GroupID, APS_GROUPS_FIND_FIRST );
   \   00006F                ; Setup parameters for call to function aps_FindGroupForEndpoint
   \   00006F   79FE         MOV     R1,#-0x2
   \   000071   7406         MOV     A,#0x6
   \   000073   12....       LCALL   ?XSTACK_DISP0_8
   \   000076   12....       LCALL   ?Subroutine10 & 0xFFFF
    301              if ( grpEp == APS_GROUPS_EP_NOT_FOUND )
   \                     ??CrossCallReturnLabel_9:
   \   000079   7003         JNZ     $+5
   \   00007B   02....       LJMP    ??afIncomingData_1 & 0xFFFF
    302                return;   // No endpoint found
    303          
    304              epDesc = afFindEndPointDesc( grpEp );
   \   00007E                ; Setup parameters for call to function afFindEndPointDesc
   \   00007E   12....       LCALL   ?Subroutine26 & 0xFFFF
    305              if ( epDesc == NULL )
   \                     ??CrossCallReturnLabel_44:
   \   000081   7003         JNZ     $+5
   \   000083   02....       LJMP    ??afIncomingData_1 & 0xFFFF
    306                return;   // Endpoint descriptor not found
    307          
    308              pList = afFindEndPointDescList( epDesc->endPoint );
   \                     ??afIncomingData_2:
   \   000086                ; Setup parameters for call to function afFindEndPointDescList
   \   000086   12....       LCALL   ?Subroutine23 & 0xFFFF
    309          #else
    310              return; // Not supported
    311          #endif    
    312            }
   \                     ??CrossCallReturnLabel_40:
   \   000089   8037         SJMP    ??afIncomingData_3
    313            else if ( aff->DstEndPoint == AF_BROADCAST_ENDPOINT )
   \                     ??afIncomingData_0:
   \   00008B   7408         MOV     A,#0x8
   \   00008D   12....       LCALL   ?XSTACK_DISP0_8
   \   000090   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   000093   F9           MOV     R1,A
   \   000094   74FF         MOV     A,#-0x1
   \   000096   69           XRL     A,R1
   \   000097   700D         JNZ     ??afIncomingData_4
    314            {
    315              // Set the list
    316              if ( (pList = epList) )
   \   000099   90....       MOV     DPTR,#epList
   \   00009C   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   00009F   7003         JNZ     $+5
   \   0000A1   02....       LJMP    ??afIncomingData_1 & 0xFFFF
    317              {
    318                epDesc = pList->epDesc;
   \   0000A4   8011         SJMP    ??afIncomingData_5
    319              }
    320            }
    321            else if ( (epDesc = afFindEndPointDesc( aff->DstEndPoint )) )
   \                     ??afIncomingData_4:
   \   0000A6                ; Setup parameters for call to function afFindEndPointDesc
   \   0000A6   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   0000A9   A8..         MOV     R0,?V0 + 4
   \   0000AB   A9..         MOV     R1,?V0 + 5
   \   0000AD   E8           MOV     A,R0
   \   0000AE   FE           MOV     R6,A
   \   0000AF   E9           MOV     A,R1
   \   0000B0   FF           MOV     R7,A
   \   0000B1   E8           MOV     A,R0
   \   0000B2   49           ORL     A,R1
   \   0000B3   600D         JZ      ??afIncomingData_3
   \   0000B5   80CF         SJMP    ??afIncomingData_2
    322            {
    323              pList = afFindEndPointDescList( epDesc->endPoint );
    324            }
    325          
    326            while ( epDesc )
    327            {
    328              if ( pList->pfnDescCB )
    329              {
    330                uint16 *pID = (uint16 *)(pList->pfnDescCB(
    331                                           AF_DESCRIPTOR_PROFILE_ID, epDesc->endPoint ));
    332                if ( pID )
    333                {
    334                  epProfileID = *pID;
    335                  osal_mem_free( pID );
    336                }
    337              }
    338              else if ( epDesc->simpleDesc )
    339              {
    340                epProfileID = epDesc->simpleDesc->AppProfId;
    341              }
    342          
    343              if ( (aff->ProfileID == epProfileID) ||
    344                   ((epDesc->endPoint == ZDO_EP) && (aff->ProfileID == ZDO_PROFILE_ID)) )
    345              {
    346                {
    347                  afBuildMSGIncoming( aff, epDesc, SrcAddress, SrcPanId, sig, SecurityUse, timestamp );
    348                }
    349              }
    350          
    351              if ( ((aff->FrmCtrl & APS_DELIVERYMODE_MASK) == APS_FC_DM_GROUP) )
    352              {
    353          #if !defined ( APS_NO_GROUPS )      
    354                // Find the next endpoint for this group
    355                grpEp = aps_FindGroupForEndpoint( aff->GroupID, grpEp );
    356                if ( grpEp == APS_GROUPS_EP_NOT_FOUND )
    357                  return;   // No endpoint found
    358          
    359                epDesc = afFindEndPointDesc( grpEp );
    360                if ( epDesc == NULL )
    361                  return;   // Endpoint descriptor not found
    362          
    363                pList = afFindEndPointDescList( epDesc->endPoint );
    364          #else
    365                return;
    366          #endif      
    367              }
    368              else if ( aff->DstEndPoint == AF_BROADCAST_ENDPOINT )
    369              {
    370                pList = pList->nextDesc;
    371                if ( pList )
    372                  epDesc = pList->epDesc;
   \                     ??afIncomingData_5:
   \   0000B7   85..82       MOV     DPL,?V0 + 6
   \   0000BA   85..83       MOV     DPH,?V0 + 7
   \   0000BD   E0           MOVX    A,@DPTR
   \   0000BE   FE           MOV     R6,A
   \   0000BF   A3           INC     DPTR
   \   0000C0   E0           MOVX    A,@DPTR
   \   0000C1   FF           MOV     R7,A
   \                     ??afIncomingData_3:
   \   0000C2   EE           MOV     A,R6
   \   0000C3   4F           ORL     A,R7
   \   0000C4   7003         JNZ     $+5
   \   0000C6   02....       LJMP    ??afIncomingData_1 & 0xFFFF
   \   0000C9   8020         SJMP    ??CrossCallReturnLabel_41
   \                     ??afIncomingData_6:
   \   0000CB                ; Setup parameters for call to function aps_FindGroupForEndpoint
   \   0000CB   85..82       MOV     DPL,?XSP + 0
   \   0000CE   85..83       MOV     DPH,?XSP + 1
   \   0000D1   E0           MOVX    A,@DPTR
   \   0000D2   F9           MOV     R1,A
   \   0000D3   7406         MOV     A,#0x6
   \   0000D5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D8   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   0000DB   7003         JNZ     $+5
   \   0000DD   02....       LJMP    ??afIncomingData_1 & 0xFFFF
   \   0000E0                ; Setup parameters for call to function afFindEndPointDesc
   \   0000E0   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   0000E3   7003         JNZ     $+5
   \   0000E5   02....       LJMP    ??afIncomingData_1 & 0xFFFF
   \   0000E8                ; Setup parameters for call to function afFindEndPointDescList
   \   0000E8   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   0000EB   85..82       MOV     DPL,?V0 + 6
   \   0000EE   85..83       MOV     DPH,?V0 + 7
   \   0000F1   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   0000F4   E8           MOV     A,R0
   \   0000F5   FC           MOV     R4,A
   \   0000F6   E9           MOV     A,R1
   \   0000F7   FD           MOV     R5,A
   \   0000F8   EC           MOV     A,R4
   \   0000F9   4D           ORL     A,R5
   \   0000FA   8E82         MOV     DPL,R6
   \   0000FC   8F83         MOV     DPH,R7
   \   0000FE   6019         JZ      ??afIncomingData_7
   \   000100                ; Setup parameters for indirect call
   \   000100   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   000103   12....       LCALL   ?CALL_IND
   \   000106   EA           MOV     A,R2
   \   000107   4B           ORL     A,R3
   \   000108   601D         JZ      ??CrossCallReturnLabel_67
   \   00010A   8A82         MOV     DPL,R2
   \   00010C   8B83         MOV     DPH,R3
   \   00010E   12....       LCALL   ??Subroutine34_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   000111   12....       LCALL   ?XSTACK_DISP0_8
   \   000114   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000117   800E         SJMP    ??CrossCallReturnLabel_67
   \                     ??afIncomingData_7:
   \   000119   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   00011C   6009         JZ      ??CrossCallReturnLabel_67
   \   00011E   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   000121   12....       LCALL   ?XSTACK_DISP0_8
   \   000124   12....       LCALL   ??Subroutine35_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   000127   7401         MOV     A,#0x1
   \   000129   12....       LCALL   ?XSTACK_DISP0_8
   \   00012C   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   00012F   A3           INC     DPTR
   \   000130   A3           INC     DPTR
   \   000131   A3           INC     DPTR
   \   000132   A3           INC     DPTR
   \   000133   A3           INC     DPTR
   \   000134   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   000137   12....       LCALL   ?XSTACK_DISP0_8
   \   00013A   E0           MOVX    A,@DPTR
   \   00013B   68           XRL     A,R0
   \   00013C   7003         JNZ     ??afIncomingData_8
   \   00013E   A3           INC     DPTR
   \   00013F   E0           MOVX    A,@DPTR
   \   000140   69           XRL     A,R1
   \                     ??afIncomingData_8:
   \   000141   600B         JZ      ??afIncomingData_9
   \   000143   8E82         MOV     DPL,R6
   \   000145   8F83         MOV     DPH,R7
   \   000147   E0           MOVX    A,@DPTR
   \   000148   703C         JNZ     ??afIncomingData_10
   \   00014A   E8           MOV     A,R0
   \   00014B   49           ORL     A,R1
   \   00014C   7038         JNZ     ??afIncomingData_10
   \                     ??afIncomingData_9:
   \   00014E                ; Setup parameters for call to function afBuildMSGIncoming
   \   00014E   78..         MOV     R0,#?V0 + 0
   \   000150   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000153   7422         MOV     A,#0x22
   \   000155   12....       LCALL   ?XSTACK_DISP0_8
   \   000158   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00015B   7422         MOV     A,#0x22
   \   00015D   12....       LCALL   ?XSTACK_DISP0_8
   \   000160   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000163   7412         MOV     A,#0x12
   \   000165   12....       LCALL   ?XSTACK_DISP0_8
   \   000168   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00016B   740F         MOV     A,#0xf
   \   00016D   12....       LCALL   ?XSTACK_DISP0_8
   \   000170   E0           MOVX    A,@DPTR
   \   000171   F9           MOV     R1,A
   \   000172   EE           MOV     A,R6
   \   000173   FC           MOV     R4,A
   \   000174   EF           MOV     A,R7
   \   000175   FD           MOV     R5,A
   \   000176   740B         MOV     A,#0xb
   \   000178   12....       LCALL   ?XSTACK_DISP0_8
   \   00017B   12....       LCALL   ??Subroutine36_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   00017E   12....       LCALL   ??afBuildMSGIncoming?relay
   \   000181   740A         MOV     A,#0xa
   \   000183   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??afIncomingData_10:
   \   000186   7401         MOV     A,#0x1
   \   000188   12....       LCALL   ?XSTACK_DISP0_8
   \   00018B   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   00018E   7003         JNZ     $+5
   \   000190   02....       LJMP    ??afIncomingData_6 & 0xFFFF
   \   000193   7408         MOV     A,#0x8
   \   000195   12....       LCALL   ?XSTACK_DISP0_8
   \   000198   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   00019B   F4           CPL     A
   \   00019C   7013         JNZ     ??afIncomingData_1
   \   00019E   85..82       MOV     DPL,?V0 + 6
   \   0001A1   85..83       MOV     DPH,?V0 + 7
   \   0001A4   A3           INC     DPTR
   \   0001A5   A3           INC     DPTR
   \   0001A6   A3           INC     DPTR
   \   0001A7   A3           INC     DPTR
   \   0001A8   A3           INC     DPTR
   \   0001A9   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   0001AC   6003         JZ      $+5
   \   0001AE   02....       LJMP    ??afIncomingData_5 & 0xFFFF
    373                else
    374                  epDesc = NULL;
   \                     ??afIncomingData_1:
   \   0001B1   740C         MOV     A,#0xc
   \   0001B3                REQUIRE ?Subroutine3
   \   0001B3                ; // Fall through to label ?Subroutine3
    375              }
    376              else
    377                epDesc = NULL;
    378            }
    379          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F08         MOV     R7,#0x8
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   000003   AE..         MOV     R6,?V0 + 4
   \   000005   AF..         MOV     R7,?V0 + 5
   \   000007   EE           MOV     A,R6
   \   000008   4F           ORL     A,R7
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F9           MOV     R1,A
   \   000006   12....       LCALL   ??afFindEndPointDescList?relay
   \   000009   8A..         MOV     ?V0 + 6,R2
   \   00000B   8B..         MOV     ?V0 + 7,R3
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine34_0
   \   000001                ; // Fall through to label ??Subroutine34_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine34_0:
   \   000000   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_111:
   \   000003   7403         MOV     A,#0x3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   000003   E5..         MOV     A,?V0 + 6
   \   000005   45..         ORL     A,?V0 + 7
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   000003   540C         ANL     A,#0xc
   \   000005   640C         XRL     A,#0xc
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   000003   FA           MOV     R2,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   FB           MOV     R3,A
   \   000007   12....       LCALL   ??aps_FindGroupForEndpoint?relay
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   64FE         XRL     A,#0xfe
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 6,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 7,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   7902         MOV     R1,#0x2
   \   000004   8C82         MOV     DPL,R4
   \   000006   8D83         MOV     DPH,R5
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   000006   8882         MOV     DPL,R0
   \   000008   8983         MOV     DPH,R1
   \   00000A   E582         MOV     A,DPL
   \   00000C   4583         ORL     A,DPH
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine35_0:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005                ; Setup parameters for call to function osal_mem_free
   \   000005                ; Setup parameters for call to function osal_mem_free
   \   000005   12....       LCALL   ??osal_mem_free?relay
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine36_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine38_0
   \   000002                ; // Fall through to label ??Subroutine38_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine38_0:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine39_0
   \   000001                ; // Fall through to label ??Subroutine39_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine39_0:
   \   000000   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_112:
   \   000003   22           RET
    380          
    381          /*********************************************************************
    382           * @fn          afBuildMSGIncoming
    383           *
    384           * @brief       Build the message for the app
    385           *
    386           * @param
    387           *
    388           * @return      pointer to next in data buffer
    389           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    390          static void afBuildMSGIncoming( aps_FrameFormat_t *aff, endPointDesc_t *epDesc,
   \                     afBuildMSGIncoming:
    391                           zAddrType_t *SrcAddress, uint16 SrcPanId, NLDE_Signal_t *sig, 
    392                           byte SecurityUse, uint32 timestamp )
    393          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7401         MOV     A,#0x1
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   EC           MOV     A,R4
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   ED           MOV     A,R5
   \   000013   F0           MOVX    @DPTR,A
   \   000014   E9           MOV     A,R1
   \   000015   85..82       MOV     DPL,?XSP + 0
   \   000018   85..83       MOV     DPH,?XSP + 1
   \   00001B   F0           MOVX    @DPTR,A
   \   00001C   8A..         MOV     ?V0 + 0,R2
   \   00001E   8B..         MOV     ?V0 + 1,R3
    394            afIncomingMSGPacket_t *MSGpkt;
    395            const byte len = sizeof( afIncomingMSGPacket_t ) + aff->asduLength;
    396            byte *asdu = aff->asdu;
   \   000020   EA           MOV     A,R2
   \   000021   240E         ADD     A,#0xe
   \   000023   F582         MOV     DPL,A
   \   000025   EB           MOV     A,R3
   \   000026   12....       LCALL   ??Subroutine37_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   000029   12....       LCALL   ?Subroutine30 & 0xFFFF
    397            MSGpkt = (afIncomingMSGPacket_t *)osal_msg_allocate( len );
   \                     ??CrossCallReturnLabel_52:
   \   00002C   EA           MOV     A,R2
   \   00002D   2410         ADD     A,#0x10
   \   00002F   F5..         MOV     ?V0 + 2,A
   \   000031   EB           MOV     A,R3
   \   000032   3400         ADDC    A,#0x0
   \   000034   F5..         MOV     ?V0 + 3,A
   \   000036                ; Setup parameters for call to function osal_msg_allocate
   \   000036   85..82       MOV     DPL,?V0 + 2
   \   000039   F583         MOV     DPH,A
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   2423         ADD     A,#0x23
   \   00003E   FA           MOV     R2,A
   \   00003F   7B00         MOV     R3,#0x0
   \   000041   12....       LCALL   ??osal_msg_allocate?relay
   \   000044   8A..         MOV     ?V0 + 4,R2
   \   000046   8B..         MOV     ?V0 + 5,R3
   \   000048   AE..         MOV     R6,?V0 + 4
   \   00004A   AF..         MOV     R7,?V0 + 5
    398          
    399            if ( MSGpkt == NULL )
   \   00004C   EE           MOV     A,R6
   \   00004D   4F           ORL     A,R7
   \   00004E   7003         JNZ     $+5
   \   000050   02....       LJMP    ??CrossCallReturnLabel_20 & 0xFFFF
    400            {
    401              return;
    402            }
    403          
    404            MSGpkt->hdr.event = AF_INCOMING_MSG_CMD;
   \   000053   8E82         MOV     DPL,R6
   \   000055   8F83         MOV     DPH,R7
   \   000057   741A         MOV     A,#0x1a
   \   000059   12....       LCALL   ?Subroutine5 & 0xFFFF
    405            MSGpkt->groupId = aff->GroupID;
   \                     ??CrossCallReturnLabel_0:
   \   00005C   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   00005F   E8           MOV     A,R0
   \   000060   F0           MOVX    @DPTR,A
   \   000061   A3           INC     DPTR
   \   000062   E9           MOV     A,R1
   \   000063   12....       LCALL   ?Subroutine5 & 0xFFFF
    406            MSGpkt->clusterId = aff->ClusterID;
   \                     ??CrossCallReturnLabel_1:
   \   000066   A3           INC     DPTR
   \   000067   A3           INC     DPTR
   \   000068   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   00006B   A3           INC     DPTR
   \   00006C   A3           INC     DPTR
   \   00006D   12....       LCALL   ??Subroutine35_0 & 0xFFFF
    407            afCopyAddress( &MSGpkt->srcAddr, SrcAddress );
   \                     ??CrossCallReturnLabel_68:
   \   000070                ; Setup parameters for call to function afCopyAddress
   \   000070   7413         MOV     A,#0x13
   \   000072   12....       LCALL   ?XSTACK_DISP0_8
   \   000075   E0           MOVX    A,@DPTR
   \   000076   FC           MOV     R4,A
   \   000077   A3           INC     DPTR
   \   000078   E0           MOVX    A,@DPTR
   \   000079   FD           MOV     R5,A
   \   00007A   EE           MOV     A,R6
   \   00007B   2406         ADD     A,#0x6
   \   00007D   FA           MOV     R2,A
   \   00007E   EF           MOV     A,R7
   \   00007F   3400         ADDC    A,#0x0
   \   000081   FB           MOV     R3,A
   \   000082   12....       LCALL   ??afCopyAddress?relay
    408            MSGpkt->srcAddr.endPoint = aff->SrcEndPoint;
   \   000085   85..82       MOV     DPL,?V0 + 0
   \   000088   85..83       MOV     DPH,?V0 + 1
   \   00008B   A3           INC     DPTR
   \   00008C   A3           INC     DPTR
   \   00008D   A3           INC     DPTR
   \   00008E   E0           MOVX    A,@DPTR
   \   00008F   C0E0         PUSH    A
   \   000091   EE           MOV     A,R6
   \   000092   240F         ADD     A,#0xf
   \   000094   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   000097   D0E0         POP     A
   \   000099   F0           MOVX    @DPTR,A
    409            MSGpkt->endPoint = epDesc->endPoint;
   \   00009A   7401         MOV     A,#0x1
   \   00009C   12....       LCALL   ?XSTACK_DISP0_8
   \   00009F   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   0000A2   C0E0         PUSH    A
   \   0000A4   EE           MOV     A,R6
   \   0000A5   2414         ADD     A,#0x14
   \   0000A7   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   0000AA   D0E0         POP     A
   \   0000AC   F0           MOVX    @DPTR,A
    410            MSGpkt->wasBroadcast = aff->wasBroadcast;
   \   0000AD   E5..         MOV     A,?V0 + 0
   \   0000AF   240C         ADD     A,#0xc
   \   0000B1   F582         MOV     DPL,A
   \   0000B3   E5..         MOV     A,?V0 + 1
   \   0000B5   12....       LCALL   ??Subroutine37_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   0000B8   E0           MOVX    A,@DPTR
   \   0000B9   C0E0         PUSH    A
   \   0000BB   EE           MOV     A,R6
   \   0000BC   2415         ADD     A,#0x15
   \   0000BE   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   0000C1   D0E0         POP     A
   \   0000C3   F0           MOVX    @DPTR,A
    411            MSGpkt->LinkQuality = sig->LinkQuality;
   \   0000C4   7417         MOV     A,#0x17
   \   0000C6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C9   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   0000CC   C0E0         PUSH    A
   \   0000CE   EE           MOV     A,R6
   \   0000CF   2416         ADD     A,#0x16
   \   0000D1   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   0000D4   D0E0         POP     A
   \   0000D6   F0           MOVX    @DPTR,A
    412            MSGpkt->correlation = sig->correlation;
   \   0000D7   7417         MOV     A,#0x17
   \   0000D9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DC   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   0000DF   A3           INC     DPTR
   \   0000E0   E0           MOVX    A,@DPTR
   \   0000E1   C0E0         PUSH    A
   \   0000E3   EE           MOV     A,R6
   \   0000E4   2417         ADD     A,#0x17
   \   0000E6   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   0000E9   D0E0         POP     A
   \   0000EB   F0           MOVX    @DPTR,A
    413            MSGpkt->rssi = sig->rssi;
   \   0000EC   7417         MOV     A,#0x17
   \   0000EE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F1   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   0000F4   E0           MOVX    A,@DPTR
   \   0000F5   C0E0         PUSH    A
   \   0000F7   EE           MOV     A,R6
   \   0000F8   2418         ADD     A,#0x18
   \   0000FA   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   0000FD   D0E0         POP     A
   \   0000FF   12....       LCALL   ?Subroutine6 & 0xFFFF
    414            MSGpkt->SecurityUse = SecurityUse;
   \                     ??CrossCallReturnLabel_2:
   \   000102   E0           MOVX    A,@DPTR
   \   000103   C0E0         PUSH    A
   \   000105   EE           MOV     A,R6
   \   000106   2419         ADD     A,#0x19
   \   000108   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   00010B   D0E0         POP     A
   \   00010D   F0           MOVX    @DPTR,A
    415            MSGpkt->timestamp = timestamp;
   \   00010E   7419         MOV     A,#0x19
   \   000110   12....       LCALL   ?XSTACK_DISP0_8
   \   000113   12....       LCALL   ?XLOAD_R2345
   \   000116   EE           MOV     A,R6
   \   000117   241A         ADD     A,#0x1a
   \   000119   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   00011C   12....       LCALL   ?XSTORE_R2345
    416            MSGpkt->macDestAddr = aff->macDestAddr;
   \   00011F   85..82       MOV     DPL,?V0 + 0
   \   000122   85..83       MOV     DPH,?V0 + 1
   \   000125   A3           INC     DPTR
   \   000126   A3           INC     DPTR
   \   000127   A3           INC     DPTR
   \   000128   A3           INC     DPTR
   \   000129   A3           INC     DPTR
   \   00012A   A3           INC     DPTR
   \   00012B   A3           INC     DPTR
   \   00012C   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   00012F   EE           MOV     A,R6
   \   000130   2412         ADD     A,#0x12
   \   000132   12....       LCALL   ?Subroutine8 & 0xFFFF
    417            MSGpkt->srcAddr.panId = SrcPanId;
   \                     ??CrossCallReturnLabel_75:
   \   000135   7415         MOV     A,#0x15
   \   000137   12....       LCALL   ?XSTACK_DISP0_8
   \   00013A   12....       LCALL   ??Subroutine39_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   00013D   EE           MOV     A,R6
   \   00013E   2410         ADD     A,#0x10
   \   000140   12....       LCALL   ?Subroutine8 & 0xFFFF
    418            MSGpkt->cmd.TransSeqNumber = 0;
   \                     ??CrossCallReturnLabel_76:
   \   000143   EE           MOV     A,R6
   \   000144   241E         ADD     A,#0x1e
   \   000146   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   000149   E4           CLR     A
   \   00014A   F0           MOVX    @DPTR,A
    419            MSGpkt->cmd.DataLength = aff->asduLength;
   \   00014B   85..82       MOV     DPL,?V0 + 2
   \   00014E   85..83       MOV     DPH,?V0 + 3
   \   000151   E0           MOVX    A,@DPTR
   \   000152   FC           MOV     R4,A
   \   000153   7D00         MOV     R5,#0x0
   \   000155   EE           MOV     A,R6
   \   000156   241F         ADD     A,#0x1f
   \   000158   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   00015B   EC           MOV     A,R4
   \   00015C   F0           MOVX    @DPTR,A
   \   00015D   A3           INC     DPTR
   \   00015E   E4           CLR     A
   \   00015F   F0           MOVX    @DPTR,A
    420          
    421            if ( MSGpkt->cmd.DataLength )
   \   000160   EE           MOV     A,R6
   \   000161   2421         ADD     A,#0x21
   \   000163   F8           MOV     R0,A
   \   000164   EF           MOV     A,R7
   \   000165   3400         ADDC    A,#0x0
   \   000167   F9           MOV     R1,A
   \   000168   E8           MOV     A,R0
   \   000169   FA           MOV     R2,A
   \   00016A   E9           MOV     A,R1
   \   00016B   FB           MOV     R3,A
   \   00016C   EC           MOV     A,R4
   \   00016D   602A         JZ      ??afBuildMSGIncoming_0
    422            {
    423              MSGpkt->cmd.Data = (byte *)(MSGpkt + 1);
   \   00016F   EE           MOV     A,R6
   \   000170   2423         ADD     A,#0x23
   \   000172   08           INC     R0
   \   000173   08           INC     R0
   \   000174   EF           MOV     A,R7
   \   000175   3400         ADDC    A,#0x0
   \   000177   F9           MOV     R1,A
   \   000178   8A82         MOV     DPL,R2
   \   00017A   8B83         MOV     DPH,R3
   \   00017C   12....       LCALL   ??Subroutine35_0 & 0xFFFF
    424              osal_memcpy( MSGpkt->cmd.Data, asdu, MSGpkt->cmd.DataLength );
   \                     ??CrossCallReturnLabel_69:
   \   00017F                ; Setup parameters for call to function osal_memcpy
   \   00017F   85....       MOV     ?V0 + 0,?V0 + 6
   \   000182   85....       MOV     ?V0 + 1,?V0 + 7
   \   000185   8D..         MOV     ?V0 + 2,R5
   \   000187   78..         MOV     R0,#?V0 + 0
   \   000189   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00018C   12....       LCALL   ?Subroutine13 & 0xFFFF
    425            }
   \                     ??CrossCallReturnLabel_82:
   \   00018F   12....       LCALL   ??osal_memcpy?relay
   \   000192   7403         MOV     A,#0x3
   \   000194   12....       LCALL   ?DEALLOC_XSTACK8
   \   000197   8008         SJMP    ??afBuildMSGIncoming_1
    426            else
    427            {
    428              MSGpkt->cmd.Data = NULL;
   \                     ??afBuildMSGIncoming_0:
   \   000199   8A82         MOV     DPL,R2
   \   00019B   8B83         MOV     DPH,R3
   \   00019D   E4           CLR     A
   \   00019E   F0           MOVX    @DPTR,A
   \   00019F   A3           INC     DPTR
   \   0001A0   F0           MOVX    @DPTR,A
    429            }
    430          
    431          #if defined ( MT_AF_CB_FUNC )
    432            // If ZDO or SAPI have registered for this endpoint, dont intercept it here
    433            if (AFCB_CHECK(CB_ID_AF_DATA_IND, *(epDesc->task_id)))
    434            {
    435              MT_AfIncomingMsg( (void *)MSGpkt );
    436              // Release the memory.
    437              osal_msg_deallocate( (void *)MSGpkt );
    438            }
    439            else
    440          #endif
    441            {
    442              // Send message through task message.
    443              osal_msg_send( *(epDesc->task_id), (uint8 *)MSGpkt );
   \                     ??afBuildMSGIncoming_1:
   \   0001A1                ; Setup parameters for call to function osal_msg_send
   \   0001A1   EE           MOV     A,R6
   \   0001A2   FA           MOV     R2,A
   \   0001A3   EF           MOV     A,R7
   \   0001A4   FB           MOV     R3,A
   \   0001A5   7401         MOV     A,#0x1
   \   0001A7   12....       LCALL   ?XSTACK_DISP0_8
   \   0001AA   12....       LCALL   ?Subroutine22 & 0xFFFF
    444            }
   \                     ??CrossCallReturnLabel_38:
   \   0001AD   12....       LCALL   ?Subroutine14 & 0xFFFF
    445          }
   \                     ??CrossCallReturnLabel_20:
   \   0001B0   7403         MOV     A,#0x3
   \   0001B2   02....       LJMP    ?Subroutine3 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_110:
   \   000003   8E82         MOV     DPL,R6
   \   000005   8F83         MOV     DPH,R7
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   85..82       MOV     DPL,?V0 + 0
   \   000004   85..83       MOV     DPH,?V0 + 1
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   F582         MOV     DPL,A
   \   000002   EF           MOV     A,R7
   \   000003   3400         ADDC    A,#0x0
   \   000005   F583         MOV     DPH,A
   \   000007                REQUIRE ??Subroutine35_0
   \   000007                ; // Fall through to label ??Subroutine35_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function afDataReqMTU
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004                REQUIRE ??Subroutine36_0
   \   000004                ; // Fall through to label ??Subroutine36_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   F582         MOV     DPL,A
   \   000002   EF           MOV     A,R7
   \   000003                REQUIRE ??Subroutine37_0
   \   000003                ; // Fall through to label ??Subroutine37_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine37_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F583         MOV     DPH,A
   \   000004   22           RET
    446          
    447          /*********************************************************************
    448           * @fn      AF_DataRequest
    449           *
    450           * @brief   Common functionality for invoking APSDE_DataReq() for both
    451           *          SendMulti and MSG-Send.
    452           *
    453           * input parameters
    454           *
    455           * @param  *dstAddr - Full ZB destination address: Nwk Addr + End Point.
    456           * @param  *srcEP - Origination (i.e. respond to or ack to) End Point Descr.
    457           * @param   cID - A valid cluster ID as specified by the Profile.
    458           * @param   len - Number of bytes of data pointed to by next param.
    459           * @param  *buf - A pointer to the data bytes to send.
    460           * @param  *transID - A pointer to a byte which can be modified and which will
    461           *                    be used as the transaction sequence number of the msg.
    462           * @param   options - Valid bit mask of Tx options.
    463           * @param   radius - Normally set to AF_DEFAULT_RADIUS.
    464           *
    465           * output parameters
    466           *
    467           * @param  *transID - Incremented by one if the return value is success.
    468           *
    469           * @return  afStatus_t - See previous definition of afStatus_... types.
    470           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
    471          uint8 AF_DataRequestDiscoverRoute = TRUE;
   \                     AF_DataRequestDiscoverRoute:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for AF_DataRequestDiscoverRoute>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    472          afStatus_t AF_DataRequest( afAddrType_t *dstAddr, endPointDesc_t *srcEP,
   \                     AF_DataRequest:
    473                                     uint16 cID, uint16 len, uint8 *buf, uint8 *transID,
    474                                     uint8 options, uint8 radius )
    475          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 30
   \   000005   74E2         MOV     A,#-0x1e
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 2,R2
   \   00000C   8B..         MOV     ?V0 + 3,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   FE           MOV     R6,A
   \   000010   ED           MOV     A,R5
   \   000011   FF           MOV     R7,A
   \   000012   89..         MOV     ?V0 + 4,R1
   \   000014   7430         MOV     A,#0x30
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   00001C   7436         MOV     A,#0x36
   \   00001E   12....       LCALL   ?XSTACK_DISP0_8
   \   000021   E0           MOVX    A,@DPTR
   \   000022   F5..         MOV     ?V0 + 5,A
    476            pDescCB pfnDescCB;
    477            ZStatus_t stat;
    478            APSDE_DataReq_t req;
    479            afDataReqMTU_t mtu;
    480          
    481            // Verify source end point
    482            if ( srcEP == NULL )
   \   000024   EE           MOV     A,R6
   \   000025   4F           ORL     A,R7
   \   000026   7005         JNZ     ??AF_DataRequest_0
    483            {
    484              return afStatus_INVALID_PARAMETER;
   \                     ??AF_DataRequest_1:
   \   000028   7902         MOV     R1,#0x2
   \   00002A   02....       LJMP    ??AF_DataRequest_2 & 0xFFFF
    485            }
    486          
    487          #if !defined( REFLECTOR )
    488            if ( dstAddr->addrMode == afAddrNotPresent )
    489            {
    490              return afStatus_INVALID_PARAMETER;
    491            }
    492          #endif
    493          
    494            // Validate broadcasting
    495            if ( ( dstAddr->addrMode == afAddr16Bit     ) ||
    496                 ( dstAddr->addrMode == afAddrBroadcast )    )
   \                     ??AF_DataRequest_0:
   \   00002D   EA           MOV     A,R2
   \   00002E   2408         ADD     A,#0x8
   \   000030   F5..         MOV     ?V0 + 0,A
   \   000032   EB           MOV     A,R3
   \   000033   3400         ADDC    A,#0x0
   \   000035   F5..         MOV     ?V0 + 1,A
   \   000037   85..82       MOV     DPL,?V0 + 0
   \   00003A   F583         MOV     DPH,A
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   F8           MOV     R0,A
   \   00003E   7402         MOV     A,#0x2
   \   000040   68           XRL     A,R0
   \   000041   6005         JZ      ??AF_DataRequest_3
   \   000043   740F         MOV     A,#0xf
   \   000045   68           XRL     A,R0
   \   000046   701B         JNZ     ??AF_DataRequest_4
    497            {
    498              // Check for valid broadcast values
    499              if( ADDR_NOT_BCAST != NLME_IsAddressBroadcast( dstAddr->addr.shortAddr )  )
   \                     ??AF_DataRequest_3:
   \   000048                ; Setup parameters for call to function NLME_IsAddressBroadcast
   \   000048   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   00004B   12....       LCALL   ??NLME_IsAddressBroadcast?relay
   \   00004E   E9           MOV     A,R1
   \   00004F   85..82       MOV     DPL,?V0 + 0
   \   000052   85..83       MOV     DPH,?V0 + 1
   \   000055   6005         JZ      ??AF_DataRequest_5
    500              {
    501                // Force mode to broadcast
    502                dstAddr->addrMode = afAddrBroadcast;
   \   000057   740F         MOV     A,#0xf
   \   000059   F0           MOVX    @DPTR,A
   \   00005A   8014         SJMP    ??AF_DataRequest_6
    503              }
    504              else
    505              {
    506                // Address is not a valid broadcast type
    507                if ( dstAddr->addrMode == afAddrBroadcast )
   \                     ??AF_DataRequest_5:
   \   00005C   E0           MOVX    A,@DPTR
   \   00005D   640F         XRL     A,#0xf
   \   00005F   700F         JNZ     ??AF_DataRequest_6
   \   000061   80C5         SJMP    ??AF_DataRequest_1
    508                {
    509                  return afStatus_INVALID_PARAMETER;
    510                }
    511              }
    512            }
    513            else if ( dstAddr->addrMode != afAddr64Bit &&
    514                      dstAddr->addrMode != afAddrGroup &&
    515                      dstAddr->addrMode != afAddrNotPresent )
   \                     ??AF_DataRequest_4:
   \   000063   7403         MOV     A,#0x3
   \   000065   68           XRL     A,R0
   \   000066   6008         JZ      ??AF_DataRequest_6
   \   000068   7401         MOV     A,#0x1
   \   00006A   68           XRL     A,R0
   \   00006B   6003         JZ      ??AF_DataRequest_6
   \   00006D   E8           MOV     A,R0
   \   00006E   70B8         JNZ     ??AF_DataRequest_1
    516            {
    517              return afStatus_INVALID_PARAMETER;
    518            }
    519            
    520            // Set destination address
    521            req.dstAddr.addrMode = dstAddr->addrMode;
   \                     ??AF_DataRequest_6:
   \   000070   E0           MOVX    A,@DPTR
   \   000071   C0E0         PUSH    A
   \   000073   740A         MOV     A,#0xa
   \   000075   12....       LCALL   ?XSTACK_DISP0_8
   \   000078   D0E0         POP     A
   \   00007A   F0           MOVX    @DPTR,A
    522            if ( dstAddr->addrMode == afAddr64Bit )
   \   00007B   85..82       MOV     DPL,?V0 + 0
   \   00007E   85..83       MOV     DPH,?V0 + 1
   \   000081   E0           MOVX    A,@DPTR
   \   000082   6403         XRL     A,#0x3
   \   000084   7012         JNZ     ??AF_DataRequest_7
    523              osal_cpyExtAddr( req.dstAddr.addr.extAddr, dstAddr->addr.extAddr );
   \   000086                ; Setup parameters for call to function sAddrExtCpy
   \   000086   AC..         MOV     R4,?V0 + 2
   \   000088   AD..         MOV     R5,?V0 + 3
   \   00008A   7402         MOV     A,#0x2
   \   00008C   12....       LCALL   ?XSTACK_DISP0_8
   \   00008F   AA82         MOV     R2,DPL
   \   000091   AB83         MOV     R3,DPH
   \   000093   12....       LCALL   ??sAddrExtCpy?relay
   \   000096   8011         SJMP    ??CrossCallReturnLabel_70
    524            else
    525              req.dstAddr.addr.shortAddr = dstAddr->addr.shortAddr;
   \                     ??AF_DataRequest_7:
   \   000098   85..82       MOV     DPL,?V0 + 2
   \   00009B   85..83       MOV     DPH,?V0 + 3
   \   00009E   12....       LCALL   ??Subroutine39_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   0000A1   7402         MOV     A,#0x2
   \   0000A3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A6   12....       LCALL   ??Subroutine35_0 & 0xFFFF
    526            
    527            req.profileID = ZDO_PROFILE_ID;
   \                     ??CrossCallReturnLabel_70:
   \   0000A9   7411         MOV     A,#0x11
   \   0000AB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AE   E4           CLR     A
   \   0000AF   F0           MOVX    @DPTR,A
   \   0000B0   A3           INC     DPTR
   \   0000B1   F0           MOVX    @DPTR,A
    528          
    529            if ( (pfnDescCB = afGetDescCB( srcEP )) )
   \   0000B2   90....       MOV     DPTR,#epList
   \   0000B5   8002         SJMP    ??AF_DataRequest_8
   \                     ??AF_DataRequest_9:
   \   0000B7   A3           INC     DPTR
   \   0000B8   A3           INC     DPTR
   \                     ??AF_DataRequest_8:
   \   0000B9   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   0000BC   603E         JZ      ??AF_DataRequest_10
   \   0000BE   8882         MOV     DPL,R0
   \   0000C0   8983         MOV     DPH,R1
   \   0000C2   12....       LCALL   ??Subroutine36_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   0000C5   EE           MOV     A,R6
   \   0000C6   6A           XRL     A,R2
   \   0000C7   7002         JNZ     ??AF_DataRequest_11
   \   0000C9   EF           MOV     A,R7
   \   0000CA   6B           XRL     A,R3
   \                     ??AF_DataRequest_11:
   \   0000CB   8882         MOV     DPL,R0
   \   0000CD   8983         MOV     DPH,R1
   \   0000CF   A3           INC     DPTR
   \   0000D0   A3           INC     DPTR
   \   0000D1   A3           INC     DPTR
   \   0000D2   70E3         JNZ     ??AF_DataRequest_9
   \   0000D4   E0           MOVX    A,@DPTR
   \   0000D5   FC           MOV     R4,A
   \   0000D6   A3           INC     DPTR
   \   0000D7   E0           MOVX    A,@DPTR
   \   0000D8   FD           MOV     R5,A
   \   0000D9   EC           MOV     A,R4
   \   0000DA   4D           ORL     A,R5
   \   0000DB   601F         JZ      ??AF_DataRequest_10
    530            {
    531              uint16 *pID = (uint16 *)(pfnDescCB(
    532                                           AF_DESCRIPTOR_PROFILE_ID, srcEP->endPoint ));
   \   0000DD                ; Setup parameters for indirect call
   \   0000DD   8E82         MOV     DPL,R6
   \   0000DF   8F83         MOV     DPH,R7
   \   0000E1   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   0000E4   12....       LCALL   ?CALL_IND
    533              if ( pID )
   \   0000E7   EA           MOV     A,R2
   \   0000E8   4B           ORL     A,R3
   \   0000E9   6025         JZ      ??CrossCallReturnLabel_71
    534              {
    535                req.profileID = *pID;
   \   0000EB   8A82         MOV     DPL,R2
   \   0000ED   8B83         MOV     DPH,R3
   \   0000EF   12....       LCALL   ??Subroutine39_0 & 0xFFFF
    536                osal_mem_free( pID );
    537              }
    538            }
   \                     ??CrossCallReturnLabel_99:
   \   0000F2   7411         MOV     A,#0x11
   \   0000F4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F7   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   0000FA   8014         SJMP    ??CrossCallReturnLabel_71
    539            else if ( srcEP->simpleDesc )
   \                     ??AF_DataRequest_10:
   \   0000FC   8E82         MOV     DPL,R6
   \   0000FE   8F83         MOV     DPH,R7
   \   000100   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000103   600B         JZ      ??CrossCallReturnLabel_71
    540            {
    541              req.profileID = srcEP->simpleDesc->AppProfId;
   \   000105   12....       LCALL   ??Subroutine38_0 & 0xFFFF
    542            }
   \                     ??CrossCallReturnLabel_104:
   \   000108   7411         MOV     A,#0x11
   \   00010A   12....       LCALL   ?XSTACK_DISP0_8
   \   00010D   12....       LCALL   ??Subroutine35_0 & 0xFFFF
    543          
    544            req.txOptions = 0;
   \                     ??CrossCallReturnLabel_71:
   \   000110   7417         MOV     A,#0x17
   \   000112   12....       LCALL   ?XSTACK_DISP0_8
   \   000115   E4           CLR     A
   \   000116   F0           MOVX    @DPTR,A
   \   000117   A3           INC     DPTR
   \   000118   F0           MOVX    @DPTR,A
    545          
    546            if ( ( options & AF_ACK_REQUEST              ) &&
    547                 ( req.dstAddr.addrMode != AddrBroadcast ) &&
    548                 ( req.dstAddr.addrMode != AddrGroup     )    )
   \   000119   E5..         MOV     A,?V0 + 4
   \   00011B   A2E4         MOV     C,0xE0 /* A   */.4
   \   00011D   501C         JNC     ??AF_DataRequest_12
   \   00011F   740A         MOV     A,#0xa
   \   000121   12....       LCALL   ?XSTACK_DISP0_8
   \   000124   E0           MOVX    A,@DPTR
   \   000125   F8           MOV     R0,A
   \   000126   740F         MOV     A,#0xf
   \   000128   68           XRL     A,R0
   \   000129   6010         JZ      ??AF_DataRequest_12
   \   00012B   7401         MOV     A,#0x1
   \   00012D   68           XRL     A,R0
   \   00012E   600B         JZ      ??AF_DataRequest_12
    549            {
    550              req.txOptions |=  APS_TX_OPTIONS_ACK;
   \   000130   7417         MOV     A,#0x17
   \   000132   12....       LCALL   ?XSTACK_DISP0_8
   \   000135   7404         MOV     A,#0x4
   \   000137   F0           MOVX    @DPTR,A
   \   000138   A3           INC     DPTR
   \   000139   E4           CLR     A
   \   00013A   F0           MOVX    @DPTR,A
    551            }
    552          
    553            if ( options & AF_SKIP_ROUTING )
   \                     ??AF_DataRequest_12:
   \   00013B   E5..         MOV     A,?V0 + 4
   \   00013D   A2E7         MOV     C,0xE0 /* A   */.7
   \   00013F   5009         JNC     ??AF_DataRequest_13
    554            {
    555              req.txOptions |=  APS_TX_OPTIONS_SKIP_ROUTING;
   \   000141   7417         MOV     A,#0x17
   \   000143   12....       LCALL   ?XSTACK_DISP0_8
   \   000146   E0           MOVX    A,@DPTR
   \   000147   4410         ORL     A,#0x10
   \   000149   F0           MOVX    @DPTR,A
    556            }
    557          
    558            if ( options & AF_EN_SECURITY )
   \                     ??AF_DataRequest_13:
   \   00014A   E5..         MOV     A,?V0 + 4
   \   00014C   A2E6         MOV     C,0xE0 /* A   */.6
   \   00014E   5012         JNC     ??AF_DataRequest_14
    559            {
    560              req.txOptions |= APS_TX_OPTIONS_SECURITY_ENABLE;
   \   000150   7417         MOV     A,#0x17
   \   000152   12....       LCALL   ?XSTACK_DISP0_8
   \   000155   E0           MOVX    A,@DPTR
   \   000156   4401         ORL     A,#0x1
   \   000158   F0           MOVX    @DPTR,A
    561              mtu.aps.secure = TRUE;
   \   000159   7401         MOV     A,#0x1
   \   00015B   12....       LCALL   ?XSTACK_DISP0_8
   \   00015E   7401         MOV     A,#0x1
   \   000160   8006         SJMP    ??AF_DataRequest_15
    562            }
    563            else
    564            {
    565              mtu.aps.secure = FALSE;
   \                     ??AF_DataRequest_14:
   \   000162   7401         MOV     A,#0x1
   \   000164   12....       LCALL   ?XSTACK_DISP0_8
   \   000167   E4           CLR     A
    566            }
   \                     ??AF_DataRequest_15:
   \   000168   12....       LCALL   ?Subroutine6 & 0xFFFF
    567          
    568            mtu.kvp = FALSE;
   \                     ??CrossCallReturnLabel_3:
   \   00016B   E4           CLR     A
   \   00016C   F0           MOVX    @DPTR,A
    569          
    570            req.transID       = *transID;
   \   00016D   7434         MOV     A,#0x34
   \   00016F   12....       LCALL   ?XSTACK_DISP0_8
   \   000172   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   000175   C0E0         PUSH    A
   \   000177   7419         MOV     A,#0x19
   \   000179   12....       LCALL   ?XSTACK_DISP0_8
   \   00017C   D0E0         POP     A
   \   00017E   F0           MOVX    @DPTR,A
    571            req.srcEP         = srcEP->endPoint;
   \   00017F   8E82         MOV     DPL,R6
   \   000181   8F83         MOV     DPH,R7
   \   000183   E0           MOVX    A,@DPTR
   \   000184   C0E0         PUSH    A
   \   000186   740B         MOV     A,#0xb
   \   000188   12....       LCALL   ?XSTACK_DISP0_8
   \   00018B   D0E0         POP     A
   \   00018D   F0           MOVX    @DPTR,A
    572            req.dstEP         = dstAddr->endPoint;
   \   00018E   85..82       MOV     DPL,?V0 + 2
   \   000191   85..83       MOV     DPH,?V0 + 3
   \   000194   A3           INC     DPTR
   \   000195   A3           INC     DPTR
   \   000196   A3           INC     DPTR
   \   000197   A3           INC     DPTR
   \   000198   A3           INC     DPTR
   \   000199   A3           INC     DPTR
   \   00019A   A3           INC     DPTR
   \   00019B   A3           INC     DPTR
   \   00019C   A3           INC     DPTR
   \   00019D   E0           MOVX    A,@DPTR
   \   00019E   C0E0         PUSH    A
   \   0001A0   740C         MOV     A,#0xc
   \   0001A2   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A5   D0E0         POP     A
   \   0001A7   F0           MOVX    @DPTR,A
    573            req.clusterID     = cID;
   \   0001A8   742E         MOV     A,#0x2e
   \   0001AA   12....       LCALL   ?XSTACK_DISP0_8
   \   0001AD   12....       LCALL   ??Subroutine39_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   0001B0   740F         MOV     A,#0xf
   \   0001B2   12....       LCALL   ?XSTACK_DISP0_8
   \   0001B5   12....       LCALL   ??Subroutine35_0 & 0xFFFF
    574            req.asduLen       = len;
   \                     ??CrossCallReturnLabel_72:
   \   0001B8   7413         MOV     A,#0x13
   \   0001BA   12....       LCALL   ?XSTACK_DISP0_8
   \   0001BD   E5..         MOV     A,?V0 + 6
   \   0001BF   F0           MOVX    @DPTR,A
   \   0001C0   A3           INC     DPTR
   \   0001C1   E5..         MOV     A,?V0 + 7
   \   0001C3   F0           MOVX    @DPTR,A
    575            req.asdu          = buf;
   \   0001C4   7432         MOV     A,#0x32
   \   0001C6   12....       LCALL   ?XSTACK_DISP0_8
   \   0001C9   12....       LCALL   ??Subroutine39_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   0001CC   7415         MOV     A,#0x15
   \   0001CE   12....       LCALL   ?XSTACK_DISP0_8
   \   0001D1   12....       LCALL   ??Subroutine35_0 & 0xFFFF
    576            req.discoverRoute = AF_DataRequestDiscoverRoute;//(uint8)((options & AF_DISCV_ROUTE) ? 1 : 0);
   \                     ??CrossCallReturnLabel_73:
   \   0001D4   90....       MOV     DPTR,#AF_DataRequestDiscoverRoute
   \   0001D7   E0           MOVX    A,@DPTR
   \   0001D8   C0E0         PUSH    A
   \   0001DA   741A         MOV     A,#0x1a
   \   0001DC   12....       LCALL   ?XSTACK_DISP0_8
   \   0001DF   D0E0         POP     A
   \   0001E1   F0           MOVX    @DPTR,A
    577            req.radiusCounter = radius;
   \   0001E2   741B         MOV     A,#0x1b
   \   0001E4   12....       LCALL   ?XSTACK_DISP0_8
   \   0001E7   E5..         MOV     A,?V0 + 5
   \   0001E9   12....       LCALL   ?Subroutine6 & 0xFFFF
    578          #if defined ( INTER_PAN )
    579            req.dstPanId      = dstAddr->panId;
    580          
    581            if ( StubAPS_InterPan( dstAddr->panId, dstAddr->endPoint ) )
    582            {
    583              if ( len > INTERP_DataReqMTU() )
    584              {
    585                stat = afStatus_INVALID_PARAMETER;
    586              }
    587              else
    588              {
    589                stat = INTERP_DataReq( &req );
    590              }
    591            }
    592            else
    593          #endif // INTER_PAN
    594            {
    595              if (len > afDataReqMTU( &mtu ) )
   \                     ??CrossCallReturnLabel_4:
   \   0001EC   AA82         MOV     R2,DPL
   \   0001EE   AB83         MOV     R3,DPH
   \   0001F0   12....       LCALL   ??afDataReqMTU?relay
   \   0001F3   E9           MOV     A,R1
   \   0001F4   C3           CLR     C
   \   0001F5   95..         SUBB    A,?V0 + 6
   \   0001F7   E4           CLR     A
   \   0001F8   95..         SUBB    A,?V0 + 7
   \   0001FA   5023         JNC     ??AF_DataRequest_16
    596              {
    597                if (apsfSendFragmented)
   \   0001FC   90....       MOV     DPTR,#apsfSendFragmented
   \   0001FF   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   000202   6016         JZ      ??AF_DataRequest_17
    598                {
    599                  stat = (*apsfSendFragmented)( &req );
   \   000204                ; Setup parameters for indirect call
   \   000204   7402         MOV     A,#0x2
   \   000206   12....       LCALL   ?XSTACK_DISP0_8
   \   000209   AA82         MOV     R2,DPL
   \   00020B   AB83         MOV     R3,DPH
   \   00020D   90....       MOV     DPTR,#apsfSendFragmented + 1
   \   000210   E0           MOVX    A,@DPTR
   \   000211   F583         MOV     DPH,A
   \   000213   8882         MOV     DPL,R0
   \   000215   12....       LCALL   ?CALL_IND
   \   000218   8011         SJMP    ??AF_DataRequest_18
    600                }
    601                else
    602                {
    603                  stat = afStatus_INVALID_PARAMETER;
   \                     ??AF_DataRequest_17:
   \   00021A   75..02       MOV     ?V0 + 0,#0x2
   \   00021D   800F         SJMP    ??AF_DataRequest_19
    604                }
    605              }
    606              else
    607              {
    608                stat = APSDE_DataReq( &req );
   \                     ??AF_DataRequest_16:
   \   00021F                ; Setup parameters for call to function APSDE_DataReq
   \   00021F   7402         MOV     A,#0x2
   \   000221   12....       LCALL   ?XSTACK_DISP0_8
   \   000224   AA82         MOV     R2,DPL
   \   000226   AB83         MOV     R3,DPH
   \   000228   12....       LCALL   ??APSDE_DataReq?relay
   \                     ??AF_DataRequest_18:
   \   00022B   E9           MOV     A,R1
   \   00022C   F5..         MOV     ?V0 + 0,A
    609              }
    610            }
    611          
    612            /*
    613             * If this is an EndPoint-to-EndPoint message on the same device, it will not
    614             * get added to the NWK databufs. So it will not go OTA and it will not get
    615             * a MACCB_DATA_CONFIRM_CMD callback. Thus it is necessary to generate the
    616             * AF_DATA_CONFIRM_CMD here. Note that APSDE_DataConfirm() only generates one
    617             * message with the first in line TransSeqNumber, even on a multi message.
    618             * Also note that a reflected msg will not have its confirmation generated
    619             * here.
    620             */
    621            if ( (req.dstAddr.addrMode == Addr16Bit) &&
    622                 (req.dstAddr.addr.shortAddr == NLME_GetShortAddr()) )
   \                     ??AF_DataRequest_19:
   \   00022E   740A         MOV     A,#0xa
   \   000230   12....       LCALL   ?XSTACK_DISP0_8
   \   000233   E0           MOVX    A,@DPTR
   \   000234   6402         XRL     A,#0x2
   \   000236   702D         JNZ     ??AF_DataRequest_20
   \   000238                ; Setup parameters for call to function NLME_GetShortAddr
   \   000238   12....       LCALL   ??NLME_GetShortAddr?relay
   \   00023B   8A..         MOV     ?V0 + 2,R2
   \   00023D   8B..         MOV     ?V0 + 3,R3
   \   00023F   A8..         MOV     R0,?V0 + 2
   \   000241   A9..         MOV     R1,?V0 + 3
   \   000243   7402         MOV     A,#0x2
   \   000245   12....       LCALL   ?XSTACK_DISP0_8
   \   000248   E0           MOVX    A,@DPTR
   \   000249   68           XRL     A,R0
   \   00024A   7003         JNZ     ??AF_DataRequest_21
   \   00024C   A3           INC     DPTR
   \   00024D   E0           MOVX    A,@DPTR
   \   00024E   69           XRL     A,R1
   \                     ??AF_DataRequest_21:
   \   00024F   7014         JNZ     ??AF_DataRequest_20
    623            {
    624              afDataConfirm( srcEP->endPoint, *transID, stat );
   \   000251                ; Setup parameters for call to function afDataConfirm
   \   000251   AB..         MOV     R3,?V0 + 0
   \   000253   7434         MOV     A,#0x34
   \   000255   12....       LCALL   ?XSTACK_DISP0_8
   \   000258   12....       LCALL   ?Subroutine16 & 0xFFFF
    625            }
   \                     ??CrossCallReturnLabel_28:
   \   00025B   FA           MOV     R2,A
   \   00025C   8E82         MOV     DPL,R6
   \   00025E   8F83         MOV     DPH,R7
   \   000260   E0           MOVX    A,@DPTR
   \   000261   F9           MOV     R1,A
   \   000262   12....       LCALL   ??afDataConfirm?relay
    626          
    627            if ( stat == afStatus_SUCCESS )
   \                     ??AF_DataRequest_20:
   \   000265   E5..         MOV     A,?V0 + 0
   \   000267   700A         JNZ     ??AF_DataRequest_22
    628            {
    629              (*transID)++;
   \   000269   7434         MOV     A,#0x34
   \   00026B   12....       LCALL   ?XSTACK_DISP0_8
   \   00026E   12....       LCALL   ?Subroutine16 & 0xFFFF
    630            }
   \                     ??CrossCallReturnLabel_29:
   \   000271   04           INC     A
   \   000272   F0           MOVX    @DPTR,A
    631          
    632            return (afStatus_t)stat;
   \                     ??AF_DataRequest_22:
   \   000273   A9..         MOV     R1,?V0 + 0
   \                     ??AF_DataRequest_2:
   \   000275   741E         MOV     A,#0x1e
   \   000277   02....       LJMP    ?Subroutine3 & 0xFFFF
    633          }
    634          
    635          /*********************************************************************
    636           * @fn      afFindEndPointDescList
    637           *
    638           * @brief   Find the endpoint description entry from the endpoint
    639           *          number.
    640           *
    641           * @param   EndPoint - Application Endpoint to look for
    642           *
    643           * @return  the address to the endpoint/interface description entry
    644           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    645          static epList_t *afFindEndPointDescList( byte EndPoint )
   \                     afFindEndPointDescList:
    646          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    647            epList_t *epSearch;
    648          
    649            // Start at the beginning
    650            epSearch = epList;
   \   000004   90....       MOV     DPTR,#epList
   \   000007   8009         SJMP    ??afFindEndPointDescList_0
    651          
    652            // Look through the list until the end
    653            while ( epSearch )
    654            {
    655              // Is there a match?
    656              if ( epSearch->epDesc->endPoint == EndPoint )
    657              {
    658                return ( epSearch );
    659              }
    660              else
    661                epSearch = epSearch->nextDesc;  // Next entry
   \                     ??afFindEndPointDescList_1:
   \   000009   8A82         MOV     DPL,R2
   \   00000B   8B83         MOV     DPH,R3
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \                     ??afFindEndPointDescList_0:
   \   000012   12....       LCALL   ??Subroutine36_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   000015   EA           MOV     A,R2
   \   000016   4B           ORL     A,R3
   \   000017   600C         JZ      ??afFindEndPointDescList_2
   \   000019   8A82         MOV     DPL,R2
   \   00001B   8B83         MOV     DPH,R3
   \   00001D   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   000020   69           XRL     A,R1
   \   000021   70E6         JNZ     ??afFindEndPointDescList_1
   \   000023   8004         SJMP    ??afFindEndPointDescList_3
    662            }
    663          
    664            return ( (epList_t *)NULL );
   \                     ??afFindEndPointDescList_2:
   \   000025   7A00         MOV     R2,#0x0
   \   000027   7B00         MOV     R3,#0x0
   \                     ??afFindEndPointDescList_3:
   \   000029   02....       LJMP    ?Subroutine0 & 0xFFFF
    665          }
    666          
    667          /*********************************************************************
    668           * @fn      afFindEndPointDesc
    669           *
    670           * @brief   Find the endpoint description entry from the endpoint
    671           *          number.
    672           *
    673           * @param   EndPoint - Application Endpoint to look for
    674           *
    675           * @return  the address to the endpoint/interface description entry
    676           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    677          endPointDesc_t *afFindEndPointDesc( byte EndPoint )
   \                     afFindEndPointDesc:
    678          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    679            epList_t *epSearch;
    680          
    681            // Look for the endpoint
    682            epSearch = afFindEndPointDescList( EndPoint );
   \   000005                ; Setup parameters for call to function afFindEndPointDescList
   \   000005   12....       LCALL   ?Subroutine27 & 0xFFFF
    683          
    684            if ( epSearch )
   \                     ??CrossCallReturnLabel_46:
   \   000008   6005         JZ      ??afFindEndPointDesc_0
    685              return ( epSearch->epDesc );
   \   00000A   12....       LCALL   ??Subroutine36_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   00000D   8004         SJMP    ??afFindEndPointDesc_1
    686            else
    687              return ( (endPointDesc_t *)NULL );
   \                     ??afFindEndPointDesc_0:
   \   00000F   7A00         MOV     R2,#0x0
   \   000011   7B00         MOV     R3,#0x0
   \                     ??afFindEndPointDesc_1:
   \   000013   02....       LJMP    ?Subroutine2 & 0xFFFF
    688          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   12....       LCALL   ??afFindEndPointDescList?relay
   \   000003   8A82         MOV     DPL,R2
   \   000005   8B83         MOV     DPH,R3
   \   000007   E582         MOV     A,DPL
   \   000009   4583         ORL     A,DPH
   \   00000B   22           RET
    689          
    690          /*********************************************************************
    691           * @fn      afFindSimpleDesc
    692           *
    693           * @brief   Find the Simple Descriptor from the endpoint number.
    694           *
    695           * @param   EP - Application Endpoint to look for.
    696           *
    697           * @return  Non-zero to indicate that the descriptor memory must be freed.
    698           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    699          byte afFindSimpleDesc( SimpleDescriptionFormat_t **ppDesc, byte EP )
   \                     afFindSimpleDesc:
    700          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   89..         MOV     ?V0 + 0,R1
    701            epList_t *epItem = afFindEndPointDescList( EP );
   \   00000B                ; Setup parameters for call to function afFindEndPointDescList
   \   00000B   12....       LCALL   ??afFindEndPointDescList?relay
    702            byte rtrn = FALSE;
   \   00000E   7C00         MOV     R4,#0x0
    703          
    704            if ( epItem )
   \   000010   EA           MOV     A,R2
   \   000011   4B           ORL     A,R3
   \   000012   6031         JZ      ??afFindSimpleDesc_0
    705            {
    706              if ( epItem->pfnDescCB )
   \   000014   8A82         MOV     DPL,R2
   \   000016   8B83         MOV     DPH,R3
   \   000018   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   00001B   6014         JZ      ??afFindSimpleDesc_1
    707              {
    708                *ppDesc = epItem->pfnDescCB( AF_DESCRIPTOR_SIMPLE, EP );
   \   00001D                ; Setup parameters for indirect call
   \   00001D   AA..         MOV     R2,?V0 + 0
   \   00001F   7901         MOV     R1,#0x1
   \   000021   12....       LCALL   ?CALL_IND
   \   000024   8E82         MOV     DPL,R6
   \   000026   8F83         MOV     DPH,R7
   \   000028   EA           MOV     A,R2
   \   000029   F0           MOVX    @DPTR,A
   \   00002A   A3           INC     DPTR
   \   00002B   EB           MOV     A,R3
   \   00002C   F0           MOVX    @DPTR,A
    709                rtrn = TRUE;
   \   00002D   7C01         MOV     R4,#0x1
   \   00002F   801C         SJMP    ??afFindSimpleDesc_2
    710              }
    711              else
    712              {
    713                *ppDesc = epItem->epDesc->simpleDesc;
   \                     ??afFindSimpleDesc_1:
   \   000031   8A82         MOV     DPL,R2
   \   000033   8B83         MOV     DPH,R3
   \   000035   12....       LCALL   ?Subroutine22 & 0xFFFF
    714              }
    715            }
   \                     ??CrossCallReturnLabel_39:
   \   000038   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   00003B   8E82         MOV     DPL,R6
   \   00003D   8F83         MOV     DPH,R7
   \   00003F   E8           MOV     A,R0
   \   000040   F0           MOVX    @DPTR,A
   \   000041   A3           INC     DPTR
   \   000042   E9           MOV     A,R1
   \   000043   8007         SJMP    ??afFindSimpleDesc_3
    716            else
    717            {
    718              *ppDesc = NULL;
   \                     ??afFindSimpleDesc_0:
   \   000045   8E82         MOV     DPL,R6
   \   000047   8F83         MOV     DPH,R7
   \   000049   E4           CLR     A
   \   00004A   F0           MOVX    @DPTR,A
   \   00004B   A3           INC     DPTR
   \                     ??afFindSimpleDesc_3:
   \   00004C   F0           MOVX    @DPTR,A
    719            }
    720          
    721            return rtrn;
   \                     ??afFindSimpleDesc_2:
   \   00004D   EC           MOV     A,R4
   \   00004E   F9           MOV     R1,A
   \   00004F   02....       LJMP    ?Subroutine1 & 0xFFFF
    722          }
    723          
    724          /*********************************************************************
    725           * @fn      afGetDescCB
    726           *
    727           * @brief   Get the Descriptor callback function.
    728           *
    729           * @param   epDesc - pointer to the endpoint descriptor
    730           *
    731           * @return  function pointer or NULL
    732           */
    733          static pDescCB afGetDescCB( endPointDesc_t *epDesc )
    734          {
    735            epList_t *epSearch;
    736          
    737            // Start at the beginning
    738            epSearch = epList;
    739          
    740            // Look through the list until the end
    741            while ( epSearch )
    742            {
    743              // Is there a match?
    744              if ( epSearch->epDesc == epDesc )
    745              {
    746                return ( epSearch->pfnDescCB );
    747              }
    748              else
    749                epSearch = epSearch->nextDesc;  // Next entry
    750            }
    751          
    752            return ( (pDescCB)NULL );
    753          }
    754          
    755          /*********************************************************************
    756           * @fn      afDataReqMTU
    757           *
    758           * @brief   Get the Data Request MTU(Max Transport Unit).
    759           *
    760           * @param   fields - afDataReqMTU_t
    761           *
    762           * @return  uint8(MTU)
    763           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    764          uint8 afDataReqMTU( afDataReqMTU_t* fields )
   \                     afDataReqMTU:
    765          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    766            uint8 len;
    767            uint8 hdr;
    768          
    769            if ( fields->kvp == TRUE )
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   6401         XRL     A,#0x1
   \   00000C   7004         JNZ     ??afDataReqMTU_0
    770            {
    771              hdr = AF_HDR_KVP_MAX_LEN;
   \   00000E   7E08         MOV     R6,#0x8
   \   000010   8002         SJMP    ??afDataReqMTU_1
    772            }
    773            else
    774            {
    775              hdr = AF_HDR_V1_1_MAX_LEN;
   \                     ??afDataReqMTU_0:
   \   000012   7E00         MOV     R6,#0x0
    776            }
    777          
    778            len = (uint8)(APSDE_DataReqMTU(&fields->aps) - hdr);
    779          
    780            return len;
   \                     ??afDataReqMTU_1:
   \   000014                ; Setup parameters for call to function APSDE_DataReqMTU
   \   000014   A3           INC     DPTR
   \   000015   AA82         MOV     R2,DPL
   \   000017   AB83         MOV     R3,DPH
   \   000019   12....       LCALL   ??APSDE_DataReqMTU?relay
   \   00001C   E9           MOV     A,R1
   \   00001D   C3           CLR     C
   \   00001E   9E           SUBB    A,R6
   \   00001F   F9           MOV     R1,A
   \   000020                REQUIRE ?Subroutine4
   \   000020                ; // Fall through to label ?Subroutine4
    781          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    782          
    783          /*********************************************************************
    784           * @fn      afGetMatch
    785           *
    786           * @brief   Set the allow response flag.
    787           *
    788           * @param   ep - Application Endpoint to look for
    789           * @param   action - true - allow response, false - no response
    790           *
    791           * @return  TRUE allow responses, FALSE no response
    792           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    793          uint8 afGetMatch( uint8 ep )
   \                     afGetMatch:
    794          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    795            epList_t *epSearch;
    796          
    797            // Look for the endpoint
    798            epSearch = afFindEndPointDescList( ep );
   \   000005                ; Setup parameters for call to function afFindEndPointDescList
   \   000005   12....       LCALL   ?Subroutine27 & 0xFFFF
    799          
    800            if ( epSearch )
   \                     ??CrossCallReturnLabel_47:
   \   000008   600B         JZ      ??afGetMatch_0
    801            {
    802              if ( epSearch->flags & eEP_AllowMatch )
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   A2E0         MOV     C,0xE0 /* A   */.0
   \   00000F   5004         JNC     ??afGetMatch_0
    803                return ( TRUE );
   \   000011   7901         MOV     R1,#0x1
   \   000013   8002         SJMP    ??afGetMatch_1
    804              else
    805                return ( FALSE );
   \                     ??afGetMatch_0:
   \   000015   7900         MOV     R1,#0x0
    806            }
   \                     ??afGetMatch_1:
   \   000017                REQUIRE ?Subroutine2
   \   000017                ; // Fall through to label ?Subroutine2
    807            else
    808              return ( FALSE );
    809          }
    810          
    811          /*********************************************************************
    812           * @fn      afSetMatch
    813           *
    814           * @brief   Set the allow response flag.
    815           *
    816           * @param   ep - Application Endpoint to look for
    817           * @param   action - true - allow response, false - no response
    818           *
    819           * @return  TRUE if success, FALSE if endpoint not found
    820           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    821          uint8 afSetMatch( uint8 ep, uint8 action )
   \                     afSetMatch:
    822          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FF           MOV     R7,A
    823            epList_t *epSearch;
    824          
    825            // Look for the endpoint
    826            epSearch = afFindEndPointDescList( ep );
   \   000007                ; Setup parameters for call to function afFindEndPointDescList
   \   000007   12....       LCALL   ??afFindEndPointDescList?relay
   \   00000A   8A..         MOV     ?V0 + 0,R2
   \   00000C   8B..         MOV     ?V0 + 1,R3
   \   00000E   A8..         MOV     R0,?V0 + 0
   \   000010   A9..         MOV     R1,?V0 + 1
    827          
    828            if ( epSearch )
   \   000012   E8           MOV     A,R0
   \   000013   49           ORL     A,R1
   \   000014   6019         JZ      ??afSetMatch_0
    829            {
    830              if ( action )
   \   000016   E8           MOV     A,R0
   \   000017   2402         ADD     A,#0x2
   \   000019   F582         MOV     DPL,A
   \   00001B   E9           MOV     A,R1
   \   00001C   12....       LCALL   ??Subroutine37_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   00001F   EF           MOV     A,R7
   \   000020   6005         JZ      ??afSetMatch_1
    831              {
    832                epSearch->flags |= eEP_AllowMatch;
   \   000022   E0           MOVX    A,@DPTR
   \   000023   D2E0         SETB    0xE0 /* A   */.0
   \   000025   8003         SJMP    ??afSetMatch_2
    833              }
    834              else
    835              {
    836                epSearch->flags &= (eEP_AllowMatch ^ 0xFFFF);
   \                     ??afSetMatch_1:
   \   000027   E0           MOVX    A,@DPTR
   \   000028   C2E0         CLR     0xE0 /* A   */.0
   \                     ??afSetMatch_2:
   \   00002A   F0           MOVX    @DPTR,A
    837              }
    838              return ( TRUE );
   \   00002B   7901         MOV     R1,#0x1
   \   00002D   8002         SJMP    ??afSetMatch_3
    839            }
    840            else
    841              return ( FALSE );
   \                     ??afSetMatch_0:
   \   00002F   7900         MOV     R1,#0x0
   \                     ??afSetMatch_3:
   \   000031   80..         SJMP    ?Subroutine2
    842          }
    843          
    844          /*********************************************************************
    845           * @fn      afNumEndPoints
    846           *
    847           * @brief   Returns the number of endpoints defined (including 0)
    848           *
    849           * @param   none
    850           *
    851           * @return  number of endpoints
    852           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    853          byte afNumEndPoints( void )
   \                     afNumEndPoints:
    854          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    855            epList_t *epSearch;
    856            byte endpoints;
    857          
    858            // Start at the beginning
    859            epSearch = epList;
   \   000004   90....       MOV     DPTR,#epList
   \   000007   12....       LCALL   ??Subroutine39_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   00000A   8882         MOV     DPL,R0
   \   00000C   8983         MOV     DPH,R1
    860            endpoints = 0;
   \   00000E   7900         MOV     R1,#0x0
   \   000010   800D         SJMP    ??afNumEndPoints_0
    861          
    862            while ( epSearch )
    863            {
    864              endpoints++;
   \                     ??afNumEndPoints_1:
   \   000012   09           INC     R1
    865              epSearch = epSearch->nextDesc;
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   12....       LCALL   ??Subroutine36_0 & 0xFFFF
    866            }
   \                     ??CrossCallReturnLabel_81:
   \   00001B   8A82         MOV     DPL,R2
   \   00001D   8B83         MOV     DPH,R3
   \                     ??afNumEndPoints_0:
   \   00001F   E582         MOV     A,DPL
   \   000021   4583         ORL     A,DPH
   \   000023   70ED         JNZ     ??afNumEndPoints_1
    867          
    868            return ( endpoints );
   \   000025                REQUIRE ?Subroutine0
   \   000025                ; // Fall through to label ?Subroutine0
    869          }
    870          
    871          /*********************************************************************
    872           * @fn      afEndPoints
    873           *
    874           * @brief   Fills in the passed in buffer with the endpoint (numbers).
    875           *          Use afNumEndPoints to find out how big a buffer to supply.
    876           *
    877           * @param   epBuf - pointer to mem used
    878           *
    879           * @return  void
    880           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    881          void afEndPoints( byte *epBuf, byte skipZDO )
   \                     afEndPoints:
    882          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV     A,R1
   \   000005   FC           MOV     R4,A
    883            epList_t *epSearch;
    884            byte endPoint;
    885          
    886            // Start at the beginning
    887            epSearch = epList;
   \   000006   90....       MOV     DPTR,#epList
   \   000009   8028         SJMP    ??afEndPoints_0
    888          
    889            while ( epSearch )
    890            {
    891              endPoint = epSearch->epDesc->endPoint;
   \                     ??afEndPoints_1:
   \   00000B   8882         MOV     DPL,R0
   \   00000D   8983         MOV     DPH,R1
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   FD           MOV     R5,A
   \   000011   A3           INC     DPTR
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F583         MOV     DPH,A
   \   000015   8D82         MOV     DPL,R5
   \   000017   E0           MOVX    A,@DPTR
   \   000018   FD           MOV     R5,A
    892          
    893              if ( !skipZDO || endPoint != 0 )
   \   000019   EC           MOV     A,R4
   \   00001A   6003         JZ      ??afEndPoints_2
   \   00001C   ED           MOV     A,R5
   \   00001D   600B         JZ      ??afEndPoints_3
    894                *epBuf++ = endPoint;
   \                     ??afEndPoints_2:
   \   00001F   ED           MOV     A,R5
   \   000020   8A82         MOV     DPL,R2
   \   000022   8B83         MOV     DPH,R3
   \   000024   F0           MOVX    @DPTR,A
   \   000025   A3           INC     DPTR
   \   000026   AA82         MOV     R2,DPL
   \   000028   AB83         MOV     R3,DPH
    895          
    896              epSearch = epSearch->nextDesc;
   \                     ??afEndPoints_3:
   \   00002A   8882         MOV     DPL,R0
   \   00002C   8983         MOV     DPH,R1
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   A3           INC     DPTR
    897            }
   \                     ??afEndPoints_0:
   \   000033   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000036   70D3         JNZ     ??afEndPoints_1
    898          }
   \   000038   80..         SJMP    ?Subroutine0
    899          
    900          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    901          void afCopyAddress ( afAddrType_t *afAddr, zAddrType_t *zAddr )
   \                     afCopyAddress:
    902          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    903            afAddr->addrMode = (afAddrMode_t)zAddr->addrMode;
   \   000005   EC           MOV     A,R4
   \   000006   2408         ADD     A,#0x8
   \   000008   F8           MOV     R0,A
   \   000009   ED           MOV     A,R5
   \   00000A   3400         ADDC    A,#0x0
   \   00000C   F9           MOV     R1,A
   \   00000D   8882         MOV     DPL,R0
   \   00000F   8983         MOV     DPH,R1
   \   000011   E0           MOVX    A,@DPTR
   \   000012   8A82         MOV     DPL,R2
   \   000014   8B83         MOV     DPH,R3
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   F0           MOVX    @DPTR,A
    904            if ( zAddr->addrMode == Addr64Bit )
   \   00001F   8882         MOV     DPL,R0
   \   000021   8983         MOV     DPH,R1
   \   000023   E0           MOVX    A,@DPTR
   \   000024   6403         XRL     A,#0x3
   \   000026   7005         JNZ     ??afCopyAddress_0
    905              osal_cpyExtAddr( afAddr->addr.extAddr, zAddr->addr.extAddr );
   \   000028                ; Setup parameters for call to function sAddrExtCpy
   \   000028   12....       LCALL   ??sAddrExtCpy?relay
   \   00002B   800E         SJMP    ??CrossCallReturnLabel_74
    906            else
    907              afAddr->addr.shortAddr = zAddr->addr.shortAddr;
   \                     ??afCopyAddress_0:
   \   00002D   8C82         MOV     DPL,R4
   \   00002F   8D83         MOV     DPH,R5
   \   000031   12....       LCALL   ??Subroutine39_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   000034   8A82         MOV     DPL,R2
   \   000036   8B83         MOV     DPH,R3
   \   000038   12....       LCALL   ??Subroutine35_0 & 0xFFFF
    908          }
   \                     ??CrossCallReturnLabel_74:
   \   00003B   02....       LJMP    ?Subroutine4 & 0xFFFF

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for AF_DataRequestDiscoverRoute>`:
   \   000000   01           DB 1

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afRegisterExtended?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afRegisterExtended

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afRegister?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afRegister

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afDataConfirm?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afDataConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afIncomingData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afIncomingData

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afBuildMSGIncoming?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afBuildMSGIncoming

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??AF_DataRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AF_DataRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afFindEndPointDescList?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afFindEndPointDescList

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afFindEndPointDesc?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afFindEndPointDesc

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afFindSimpleDesc?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afFindSimpleDesc

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afDataReqMTU?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afDataReqMTU

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afGetMatch?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afGetMatch

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afSetMatch?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afSetMatch

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afNumEndPoints?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afNumEndPoints

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afEndPoints?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afEndPoints

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afCopyAddress?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afCopyAddress
    909          
    910          /*********************************************************************
    911          *********************************************************************/
    912          

   Maximum stack usage in bytes:

     Function                      ISTACK PSTACK XSTACK
     --------                      ------ ------ ------
     AF_DataRequest                    1      0     55
       -> NLME_IsAddressBroadcast      0      0     92
       -> sAddrExtCpy                  0      0     92
       -> osal_mem_free                0      0     92
       -> afDataReqMTU                 0      0     92
       -> APSDE_DataReq                0      0     92
       -> NLME_GetShortAddr            0      0     92
       -> afDataConfirm                0      0     92
     afBuildMSGIncoming                1      0     60
       -> osal_msg_allocate            0      0     38
       -> afCopyAddress                0      0     38
       -> osal_memcpy                  0      0     44
       -> osal_msg_send                0      0     38
     afCopyAddress                     1      0     28
       -> sAddrExtCpy                  0      0     18
     afDataConfirm                     1      0     60
       -> afFindEndPointDesc           0      0     28
       -> osal_msg_allocate            0      0     28
       -> osal_msg_send                0      0     28
     afDataReqMTU                      0      0     55
       -> APSDE_DataReqMTU             0      0     18
     afEndPoints                       3      0      0
     afFindEndPointDesc                0      0     38
       -> afFindEndPointDescList       0      0     20
     afFindEndPointDescList            2      0     28
     afFindSimpleDesc                  0      0     12
       -> afFindEndPointDescList       0      0     24
     afGetMatch                        0      0     10
       -> afFindEndPointDescList       0      0     20
     afIncomingData                    1      0     46
       -> aps_FindGroupForEndpoint     0      0     56
       -> afFindEndPointDesc           0      0     56
       -> afFindEndPointDescList       0      0     56
       -> afFindEndPointDesc           0      0     56
       -> aps_FindGroupForEndpoint     0      0     56
       -> afFindEndPointDesc           0      0     56
       -> afFindEndPointDescList       0      0     56
       -> osal_mem_free                0      0     56
       -> afBuildMSGIncoming           0      0     76
     afInit                            2      0      0
     afNumEndPoints                    2      0      0
     afRegister                        0      0     10
       -> afFindEndPointDescList       0      0     20
       -> afRegisterExtended           0      0     20
     afRegisterExtended                0      0     22
       -> osal_mem_alloc               0      0     24
     afSetMatch                        0      0     10
       -> afFindEndPointDescList       0      0     20


   Segment part sizes:

     Function/Label                                 Bytes
     --------------                                 -----
     epList                                            2
     afInit                                           14
     ?Subroutine0                                      7
     afRegisterExtended                              104
     ?Subroutine1                                      5
     ?Subroutine9                                      9
     ?Subroutine12                                     6
     ?Subroutine29                                     6
     afRegister                                       56
     ?Subroutine2                                      5
     afDataConfirm                                    72
     ?Subroutine32                                     8
     ?Subroutine14                                     9
     ?Subroutine28                                     5
     ?Subroutine33                                     9
     afIncomingData                                  435
     ?Subroutine3                                      8
     ?Subroutine26                                    10
     ?Subroutine23                                    14
     ?Subroutine18                                     1
     ??Subroutine34_0                                  6
     ?Subroutine17                                     8
     ?Subroutine15                                     8
     ?Subroutine10                                    21
     ?Subroutine30                                     8
     ?Subroutine21                                     6
     ?Subroutine24                                     9
     ?Subroutine16                                     4
     ?Subroutine11                                    15
     ??Subroutine35_0                                  6
     ?Subroutine7                                      9
     ??Subroutine36_0                                  6
     ?Subroutine31                                     4
     ?Subroutine20                                     2
     ??Subroutine38_0                                  1
     ??Subroutine39_0                                  4
     afBuildMSGIncoming                              437
     ?Subroutine19                                    10
     ?Subroutine5                                     12
     ?Subroutine8                                      7
     ?Subroutine6                                      8
     ?Subroutine13                                     4
     ?Subroutine22                                     4
     ?Subroutine25                                     3
     ??Subroutine37_0                                  5
     AF_DataRequestDiscoverRoute                       1
     AF_DataRequest                                  634
     afFindEndPointDescList                           44
     afFindEndPointDesc                               22
     ?Subroutine27                                    12
     afFindSimpleDesc                                 82
     afDataReqMTU                                     32
     ?Subroutine4                                      5
     afGetMatch                                       23
     afSetMatch                                       51
     afNumEndPoints                                   37
     afEndPoints                                      58
     afCopyAddress                                    62
     ?<Initializer for AF_DataRequestDiscoverRoute>    1
     ??afInit?relay                                    6
     ??afRegisterExtended?relay                        6
     ??afRegister?relay                                6
     ??afDataConfirm?relay                             6
     ??afIncomingData?relay                            6
     ??afBuildMSGIncoming?relay                        6
     ??AF_DataRequest?relay                            6
     ??afFindEndPointDescList?relay                    6
     ??afFindEndPointDesc?relay                        6
     ??afFindSimpleDesc?relay                          6
     ??afDataReqMTU?relay                              6
     ??afGetMatch?relay                                6
     ??afSetMatch?relay                                6
     ??afNumEndPoints?relay                            6
     ??afEndPoints?relay                               6
     ??afCopyAddress?relay                             6

 
 2 452 bytes in segment BANKED_CODE
    96 bytes in segment BANK_RELAYS
     1 byte  in segment XDATA_I
     1 byte  in segment XDATA_ID
     2 bytes in segment XDATA_Z
 
 2 549 bytes of CODE  memory
     3 bytes of XDATA memory

Errors: none
Warnings: none
