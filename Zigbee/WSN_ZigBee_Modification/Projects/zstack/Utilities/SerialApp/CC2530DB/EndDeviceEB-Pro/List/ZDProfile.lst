###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         10/Jul/2018  16:37:38 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Components\stack\zdo\ZDProfile.c                   #
#    Command line       =  -f D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ #
#                          ¸Ä\Projects\zstack\Utilities\SerialApp\CC2530DB\.. #
#                          \..\..\Tools\CC2530DB\f8wEndev.cfg (-DCPU32MHZ     #
#                          -DROOT=__near_func -DBLINK_LEDS) -f                #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\Tools\CC2530DB\f8wConfig.cfg (-DSECURE=0       #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xfFF1                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Components\stack\zdo\ZDProfile.c -D ZIGBEEPRO -D   #
#                          NWK_AUTO_POLL -D HAL_UART=TRUE -D                  #
#                          SERIAL_APP_PORT=0 -D LCD_SUPPORTED -D              #
#                          xPOWER_SAVING -lC D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼ #
#                          «\WSN_ZigBee_ÐÞ¸Ä\Projects\zstack\Utilities\Serial #
#                          App\CC2530DB\EndDeviceEB-Pro\List\ -lA             #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\EndDe #
#                          viceEB-Pro\List\ --diag_suppress Pe001,Pa010 -o    #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\EndDe #
#                          viceEB-Pro\Obj\ -e --debug --core=plain            #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 8 -I D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ #
#                          °\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\Projects\zstack\Utilities\S #
#                          erialApp\CC2530DB\ -I D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ° #
#                          \ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\Projects\zstack\Utilities\Se #
#                          rialApp\CC2530DB\..\SOURCE\ -I                     #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\ZMAIN\TI2530DB\ -I D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ #
#                          °\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\Projects\zstack\Utilities\S #
#                          erialApp\CC2530DB\..\..\..\..\..\COMPONENTS\MT\    #
#                          -I D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ #
#                          ¸Ä\Projects\zstack\Utilities\SerialApp\CC2530DB\.. #
#                          \..\..\..\..\COMPONENTS\HAL\INCLUDE\ -I            #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\ -I       #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\OSAL\MCU\CCSOC\ -I            #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\OSAL\INCLUDE\ -I              #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\STACK\AF\ -I                  #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\STACK\NWK\ -I                 #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\STACK\SEC\ -I                 #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\STACK\SAPI\ -I                #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\STACK\SYS\ -I                 #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\STACK\ZDO\ -I                 #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\ZMAC\F8W\ -I                  #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\ZMAC\ -I                      #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\SERVICES\SADDR\ -I            #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\SERVICES\SDATA\ -I            #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\MAC\INCLUDE\ -I               #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\MAC\HIGH_LEVEL\ -I            #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\ -I       #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CH #
#                          IP\ -Ohz --require_prototypes                      #
#    List file          =  D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\EndDe #
#                          viceEB-Pro\List\ZDProfile.lst                      #
#    Object file        =  D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\EndDe #
#                          viceEB-Pro\Obj\ZDProfile.r51                       #
#                                                                             #
#                                                                             #
###############################################################################

D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\Components\stack\zdo\ZDProfile.c
      1          /**************************************************************************************************
      2            Filename:       ZDProfile.c
      3            Revised:        $Date: 2009-03-12 16:25:22 -0700 (Thu, 12 Mar 2009) $
      4            Revision:       $Revision: 19404 $
      5          
      6            Description:    This is the Zigbee Device Profile.
      7          
      8          
      9            Copyright 2004-2009 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          #include "ZComdef.h"
     44          #include "OSAL.h"
     45          #include "AF.h"
     46          #include "NLMEDE.h"
     47          #include "nwk_util.h"
     48          #include "APS.h"
     49          
     50          #include "AddrMgr.h"
     51          #include "ZDConfig.h"
     52          #include "ZDProfile.h"
     53          #include "ZDObject.h"
     54          #include "ZDNwkMgr.h"
     55          
     56          #if defined( LCD_SUPPORTED )
     57            #include "OnBoard.h"
     58          #endif
     59          
     60          #include "nwk_util.h"
     61          
     62          #if defined( MT_ZDO_FUNC )
     63            #include "MT_ZDO.h"
     64          #endif
     65          
     66          /*********************************************************************
     67           * MACROS
     68           */
     69          
     70          #define ZADDR_TO_AFADDR( pZADDR, AFADDR ) {                            \
     71            (AFADDR).endPoint = ZDP_AF_ENDPOINT;                                 \
     72            (AFADDR).addrMode = (afAddrMode_t)(pZADDR)->addrMode;                \
     73            (AFADDR).addr.shortAddr = (pZADDR)->addr.shortAddr;                  \
     74          }
     75          
     76          #define FillAndSendBuffer( TRANSSEQ, ADDR, ID, LEN, BUF ) {     \
     77            afStatus_t stat;                                    \
     78            ZDP_TmpBuf = (BUF)+1;                               \
     79            stat = fillAndSend( (TRANSSEQ), (ADDR), (ID), (LEN) );          \
     80            osal_mem_free( (BUF) );                             \
     81            ZDP_TmpBuf = ZDP_Buf+1;                             \
     82            return stat;                                        \
     83          }
     84          
     85          #define FillAndSendTxOptions( TRANSSEQ, ADDR, ID, LEN, TxO ) {  \
     86            afStatus_t stat;                                    \
     87            ZDP_TxOptions = (TxO);                              \
     88            stat = fillAndSend( (TRANSSEQ), (ADDR), (ID), (LEN) );          \
     89            ZDP_TxOptions = AF_TX_OPTIONS_NONE;                 \
     90            return stat;                                        \
     91          }
     92          
     93          #define FillAndSendBufferTxOptions( TRANSSEQ, ADDR, ID, LEN, BUF, TxO ) { \
     94            afStatus_t stat;                                    \
     95            ZDP_TmpBuf = (BUF)+1;                               \
     96            ZDP_TxOptions = (TxO);                              \
     97            stat = fillAndSend( (TRANSSEQ), (ADDR), (ID), (LEN) );          \
     98            osal_mem_free( (BUF) );                             \
     99            ZDP_TmpBuf = ZDP_Buf+1;                             \
    100            ZDP_TxOptions = AF_TX_OPTIONS_NONE;                 \
    101            return stat;                                        \
    102          }
    103          
    104          /*********************************************************************
    105           * CONSTANTS
    106           */
    107          
    108          #define ZDP_BUF_SZ          80
    109          

   \                                 In  segment CODE_C, align 1
    110          CONST byte ZDP_AF_ENDPOINT = 0;
   \                     ZDP_AF_ENDPOINT:
   \   000000   00           DB 0
    111          
    112          /*********************************************************************
    113           * TYPEDEFS
    114           */
    115          typedef struct
    116          {
    117            void *next;
    118            uint8 taskID;
    119            uint16 clusterID;
    120          } ZDO_MsgCB_t;
    121          
    122          
    123          /*********************************************************************
    124           * GLOBAL VARIABLES
    125           */
    126          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    127          byte ZDP_TransID = 0;
   \                     ZDP_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    128          
    129          /*********************************************************************
    130           * EXTERNAL VARIABLES
    131           */
    132          
    133          extern endPointDesc_t ZDApp_epDesc;
    134          
    135          /*********************************************************************
    136           * EXTERNAL FUNCTIONS
    137           */
    138          
    139          /*********************************************************************
    140           * LOCAL FUNCTIONS
    141           */
    142          
    143          static afStatus_t fillAndSend( uint8 *transSeq, zAddrType_t *addr, cId_t clusterID, byte len );
    144          uint8 ZDO_SendMsgCBs( zdoIncomingMsg_t *inMsg );
    145          void zdpProcessAddrReq( zdoIncomingMsg_t *inMsg );
    146          
    147          /*********************************************************************
    148           * LOCAL VARIABLES
    149           */
    150          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    151          static uint8  ZDP_Buf[ ZDP_BUF_SZ ];
   \                     ZDP_Buf:
   \   000000                DS 80
   \   000050                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    152          static uint8 *ZDP_TmpBuf = ZDP_Buf+1;
   \                     ZDP_TmpBuf:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for ZDP_TmpBuf>`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    153          static byte ZDP_TxOptions = AF_TX_OPTIONS_NONE;
   \                     ZDP_TxOptions:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    154          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    155          ZDO_MsgCB_t *zdoMsgCBs = (ZDO_MsgCB_t *)NULL;
   \                     zdoMsgCBs:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    156          
    157          /*********************************************************************
    158           * ZDO Message Processing table
    159           */
    160          
    161          typedef void (*pfnZDPMsgProcessor)( zdoIncomingMsg_t *inMsg );
    162          
    163          typedef struct
    164          {
    165            uint16                clusterID;
    166            pfnZDPMsgProcessor    pFn;
    167          } zdpMsgProcItem_t;
    168          

   \                                 In  segment CODE_C, align 1
    169          CONST zdpMsgProcItem_t zdpMsgProcs[] =
   \                     zdpMsgProcs:
   \   000000   0100         DW 1
   \   000002   ....         DW ??zdpProcessAddrReq?relay
   \   000004   0200         DW 2
   \   000006   ....         DW ??ZDO_ProcessNodeDescReq?relay
   \   000008   0300         DW 3
   \   00000A   ....         DW ??ZDO_ProcessPowerDescReq?relay
   \   00000C   0400         DW 4
   \   00000E   ....         DW ??ZDO_ProcessSimpleDescReq?relay
   \   000010   0500         DW 5
   \   000012   ....         DW ??ZDO_ProcessActiveEPReq?relay
   \   000014   0600         DW 6
   \   000016   ....         DW ??ZDO_ProcessMatchDescReq?relay
   \   000018   FFFF         DW 65535
   \   00001A   0000         DW 0H
    170          {
    171          #if ( RFD_RCVC_ALWAYS_ON==TRUE ) || ( ZG_BUILD_RTR_TYPE )
    172            // These aren't processed by sleeping end devices.
    173            { NWK_addr_req,           zdpProcessAddrReq },
    174            { Device_annce,           ZDO_ProcessDeviceAnnce },
    175          #endif  
    176            { IEEE_addr_req,          zdpProcessAddrReq },
    177            { Node_Desc_req,          ZDO_ProcessNodeDescReq },
    178            { Power_Desc_req,         ZDO_ProcessPowerDescReq },
    179            { Simple_Desc_req,        ZDO_ProcessSimpleDescReq },
    180            { Active_EP_req,          ZDO_ProcessActiveEPReq },
    181            { Match_Desc_req,         ZDO_ProcessMatchDescReq },
    182          #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
    183            { Mgmt_NWK_Disc_req,      ZDO_ProcessMgmtNwkDiscReq },
    184          #endif
    185          #if defined ( ZDO_MGMT_LQI_RESPONSE ) && ( ZG_BUILD_RTR_TYPE )
    186            { Mgmt_Lqi_req,           ZDO_ProcessMgmtLqiReq },
    187          #endif
    188          #if defined ( ZDO_MGMT_RTG_RESPONSE ) && ( ZG_BUILD_RTR_TYPE )
    189            { Mgmt_Rtg_req,           ZDO_ProcessMgmtRtgReq },
    190          #endif
    191          #if defined ( ZDO_MGMT_BIND_RESPONSE ) && defined ( REFLECTOR )
    192            { Mgmt_Bind_req,          ZDO_ProcessMgmtBindReq },
    193          #endif
    194          #if defined ( ZDO_MGMT_JOINDIRECT_RESPONSE ) && ( ZG_BUILD_RTR_TYPE )
    195            { Mgmt_Direct_Join_req,   ZDO_ProcessMgmtDirectJoinReq },
    196          #endif
    197          #if defined ( ZDO_MGMT_LEAVE_RESPONSE )
    198            { Mgmt_Leave_req,         ZDO_ProcessMgmtLeaveReq },
    199          #endif
    200          #if defined ( ZDO_MGMT_PERMIT_JOIN_RESPONSE )  && ( ZG_BUILD_RTR_TYPE )
    201            { Mgmt_Permit_Join_req,   ZDO_ProcessMgmtPermitJoinReq },
    202          #endif
    203          #if defined ( ZDO_USERDESC_RESPONSE )
    204            { User_Desc_req,          ZDO_ProcessUserDescReq },
    205          #endif
    206          #if defined ( ZDO_USERDESCSET_RESPONSE )
    207            { User_Desc_set,          ZDO_ProcessUserDescSet },
    208          #endif
    209          #if defined ( ZDO_SERVERDISC_RESPONSE )
    210            { Server_Discovery_req,   ZDO_ProcessServerDiscReq },
    211          #endif
    212            {0xFFFF, NULL} // Last
    213          };
    214          
    215          /*********************************************************************
    216           * @fn          fillAndSend
    217           *
    218           * @brief       Combined to reduce space
    219           *
    220           * @param
    221           * @param
    222           *
    223           * @return      afStatus_t
    224           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    225          static afStatus_t fillAndSend( uint8 *transSeq, zAddrType_t *addr, cId_t clusterID, byte len )
   \                     fillAndSend:
    226          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 4,R2
   \   00000C   8B..         MOV     ?V0 + 5,R3
   \   00000E   8C..         MOV     ?V0 + 2,R4
   \   000010   8D..         MOV     ?V0 + 3,R5
   \   000012   89..         MOV     ?V0 + 0,R1
   \   000014   741A         MOV     A,#0x1a
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   12....       LCALL   ?Subroutine17 & 0xFFFF
    227            afAddrType_t afAddr;
    228            
    229            osal_memset( &afAddr, 0, sizeof(afAddrType_t) );
   \                     ??CrossCallReturnLabel_12:
   \   00001C                ; Setup parameters for call to function osal_memset
   \   00001C   7C0C         MOV     R4,#0xc
   \   00001E   7D00         MOV     R5,#0x0
   \   000020   7900         MOV     R1,#0x0
   \   000022   85..82       MOV     DPL,?XSP + 0
   \   000025   85..83       MOV     DPH,?XSP + 1
   \   000028   AA82         MOV     R2,DPL
   \   00002A   AB83         MOV     R3,DPH
   \   00002C   12....       LCALL   ??osal_memset?relay
    230            ZADDR_TO_AFADDR( addr, afAddr );
   \   00002F   7409         MOV     A,#0x9
   \   000031   12....       LCALL   ?XSTACK_DISP0_8
   \   000034   E4           CLR     A
   \   000035   12....       LCALL   ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   000038   A3           INC     DPTR
   \   000039   A3           INC     DPTR
   \   00003A   A3           INC     DPTR
   \   00003B   A3           INC     DPTR
   \   00003C   A3           INC     DPTR
   \   00003D   A3           INC     DPTR
   \   00003E   A3           INC     DPTR
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   C0E0         PUSH    A
   \   000042   7408         MOV     A,#0x8
   \   000044   12....       LCALL   ?XSTACK_DISP0_8
   \   000047   D0E0         POP     A
   \   000049   F0           MOVX    @DPTR,A
   \   00004A   85..82       MOV     DPL,?V0 + 2
   \   00004D   85..83       MOV     DPH,?V0 + 3
   \   000050   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   000053   F0           MOVX    @DPTR,A
    231          
    232            *(ZDP_TmpBuf-1) = *transSeq;
   \   000054   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000057   E0           MOVX    A,@DPTR
   \   000058   24FF         ADD     A,#-0x1
   \   00005A   F5..         MOV     ?V0 + 2,A
   \   00005C   A3           INC     DPTR
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   34FF         ADDC    A,#-0x1
   \   000060   F5..         MOV     ?V0 + 3,A
   \   000062   85..82       MOV     DPL,?V0 + 4
   \   000065   85..83       MOV     DPH,?V0 + 5
   \   000068   12....       LCALL   ?Subroutine48 & 0xFFFF
    233          
    234            return AF_DataRequest( &afAddr, &ZDApp_epDesc, clusterID,
    235                                     (uint16)(len+1), (uint8*)(ZDP_TmpBuf-1),
    236                                     transSeq, ZDP_TxOptions,  AF_DEFAULT_RADIUS );
   \                     ??CrossCallReturnLabel_76:
   \   00006B                ; Setup parameters for call to function AF_DataRequest
   \   00006B   75..1E       MOV     ?V0 + 1,#0x1e
   \   00006E   78..         MOV     R0,#?V0 + 1
   \   000070   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000073   78..         MOV     R0,#?V0 + 4
   \   000075   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000078   78..         MOV     R0,#?V0 + 2
   \   00007A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007D   85....       MOV     ?V0 + 2,?V0 + 0
   \   000080   E5..         MOV     A,?V0 + 2
   \   000082   2401         ADD     A,#0x1
   \   000084   F5..         MOV     ?V0 + 2,A
   \   000086   E4           CLR     A
   \   000087   3400         ADDC    A,#0x0
   \   000089   F5..         MOV     ?V0 + 3,A
   \   00008B   78..         MOV     R0,#?V0 + 2
   \   00008D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000090   8E..         MOV     ?V0 + 2,R6
   \   000092   8F..         MOV     ?V0 + 3,R7
   \   000094   78..         MOV     R0,#?V0 + 2
   \   000096   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000099   90....       MOV     DPTR,#ZDP_TxOptions
   \   00009C   E0           MOVX    A,@DPTR
   \   00009D   F9           MOV     R1,A
   \   00009E   7C..         MOV     R4,#ZDApp_epDesc & 0xff
   \   0000A0   7D..         MOV     R5,#(ZDApp_epDesc >> 8) & 0xff
   \   0000A2   7409         MOV     A,#0x9
   \   0000A4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A7   AA82         MOV     R2,DPL
   \   0000A9   AB83         MOV     R3,DPH
   \   0000AB   12....       LCALL   ??AF_DataRequest?relay
   \   0000AE   7409         MOV     A,#0x9
   \   0000B0   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000B3   740C         MOV     A,#0xc
   \   0000B5   02....       LJMP    ?Subroutine0 & 0xFFFF
    237          
    238          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine62:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   85..82       MOV     DPL,?V0 + 2
   \   000004   85..83       MOV     DPH,?V0 + 3
   \   000007   A3           INC     DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   12....       LCALL   ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_304:
   \   000003   85..82       MOV     DPL,?XSP + 0
   \   000006   85..83       MOV     DPH,?XSP + 1
   \   000009   E8           MOV     A,R0
   \   00000A   F0           MOVX    @DPTR,A
   \   00000B   A3           INC     DPTR
   \   00000C   E9           MOV     A,R1
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   12....       LCALL   ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_112:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine78:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   85..82       MOV     DPL,?V0 + 2
   \   000004   85..83       MOV     DPH,?V0 + 3
   \   000007   F0           MOVX    @DPTR,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FE           MOV     R6,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FF           MOV     R7,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine117_0
   \   000003                ; // Fall through to label ??Subroutine117_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine117_0:
   \   000000   7F06         MOV     R7,#0x6
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine76:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET
    239          
    240          /*********************************************************************
    241           * @fn          ZDP_SendData
    242           *
    243           * @brief       This builds and send a request message that has
    244           *              NWKAddrOfInterest as its only parameter.
    245           *
    246           * @param       dstAddr - destination address
    247           * @param       cmd - clusterID
    248           * @param       dataLen - number of bytes of data
    249           * @param       data - pointer to the data
    250           * @param       SecurityEnable - Security Options
    251           *
    252           * @return      afStatus_t
    253           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    254          afStatus_t ZDP_SendData( uint8 *TransSeq, zAddrType_t *dstAddr, uint16 cmd,
   \                     ZDP_SendData:
    255                                  byte len, uint8 *buf, byte SecurityEnable )
    256          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 0,R1
   \   000007   740E         MOV     A,#0xe
   \   000009   12....       LCALL   ?XSTACK_DISP0_8
   \   00000C   12....       LCALL   ??Subroutine124_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_294:
   \   00000F   7410         MOV     A,#0x10
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   12....       LCALL   ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   000017   12....       LCALL   ?XSTACK_DISP0_8
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F5..         MOV     ?V0 + 1,A
    257            uint8 *pBuf = ZDP_TmpBuf;
   \   00001D   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000020   12....       LCALL   ?Subroutine18 & 0xFFFF
    258            byte cnt = len;
   \                     ??CrossCallReturnLabel_21:
   \   000023   AE..         MOV     R6,?V0 + 0
   \   000025   8023         SJMP    ??ZDP_SendData_0
    259          
    260            while ( cnt-- )
    261            {
    262              *pBuf++ = *buf++;
   \                     ??ZDP_SendData_1:
   \   000027   85..82       MOV     DPL,?V0 + 2
   \   00002A   85..83       MOV     DPH,?V0 + 3
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   85..82       MOV     DPL,?V0 + 4
   \   000031   85..83       MOV     DPH,?V0 + 5
   \   000034   12....       LCALL   ?Subroutine62 & 0xFFFF
    263            }
   \                     ??CrossCallReturnLabel_100:
   \   000037   8582..       MOV     ?V0 + 2,DPL
   \   00003A   8583..       MOV     ?V0 + 3,DPH
   \   00003D   85..82       MOV     DPL,?V0 + 4
   \   000040   85..83       MOV     DPH,?V0 + 5
   \   000043   A3           INC     DPTR
   \   000044   8582..       MOV     ?V0 + 4,DPL
   \   000047   8583..       MOV     ?V0 + 5,DPH
   \                     ??ZDP_SendData_0:
   \   00004A   EE           MOV     A,R6
   \   00004B   FF           MOV     R7,A
   \   00004C   74FF         MOV     A,#-0x1
   \   00004E   2F           ADD     A,R7
   \   00004F   1E           DEC     R6
   \   000050   04           INC     A
   \   000051   70D4         JNZ     ??ZDP_SendData_1
    264          
    265            FillAndSendTxOptions( TransSeq, dstAddr, cmd, len,
    266                         (AF_DEFAULT_RADIUS | ((SecurityEnable) ? AF_EN_SECURITY : 0)) );
   \   000053   E5..         MOV     A,?V0 + 1
   \   000055   6005         JZ      ??ZDP_SendData_2
   \   000057   75..40       MOV     ?V0 + 2,#0x40
   \   00005A   8003         SJMP    ??ZDP_SendData_3
   \                     ??ZDP_SendData_2:
   \   00005C   75..00       MOV     ?V0 + 2,#0x0
   \                     ??ZDP_SendData_3:
   \   00005F   E5..         MOV     A,?V0 + 2
   \   000061   441E         ORL     A,#0x1e
   \   000063   90....       MOV     DPTR,#ZDP_TxOptions
   \   000066   F0           MOVX    @DPTR,A
   \   000067                ; Setup parameters for call to function fillAndSend
   \   000067   88..         MOV     ?V0 + 2,R0
   \   000069   89..         MOV     ?V0 + 3,R1
   \   00006B   78..         MOV     R0,#?V0 + 2
   \   00006D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000070   A9..         MOV     R1,?V0 + 0
   \   000072   12....       LCALL   ??Subroutine96_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_138:
   \   000075   12....       LCALL   ?DEALLOC_XSTACK8
   \   000078   90....       MOV     DPTR,#ZDP_TxOptions
   \   00007B   E4           CLR     A
   \   00007C   F0           MOVX    @DPTR,A
   \   00007D   02....       LJMP    ??Subroutine117_0 & 0xFFFF
    267          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   12....       LCALL   ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_110:
   \   000003   7412         MOV     A,#0x12
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 4,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 5,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine73:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 2,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 3,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine96_0:
   \   000000   12....       LCALL   ??fillAndSend?relay
   \   000003   7402         MOV     A,#0x2
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine124_0:
   \   000000   12....       LCALL   ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_307:
   \   000003   22           RET
    268          
    269          /*********************************************************************
    270           * @fn          ZDP_NWKAddrOfInterestReq
    271           *
    272           * @brief       This builds and send a request message that has
    273           *              NWKAddrOfInterest as its only parameter.
    274           *
    275           * @param       dstAddr - destination address
    276           * @param       nwkAddr - 16 bit address
    277           * @param       SecurityEnable - Security Options
    278           *
    279           * @return      afStatus_t
    280           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    281          afStatus_t ZDP_NWKAddrOfInterestReq( zAddrType_t *dstAddr, uint16 nwkAddr,
   \                     ZDP_NWKAddrOfInterestReq:
    282                                               byte cmd, byte SecurityEnable )
    283          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    284            (void)SecurityEnable;  // Intentionally unreferenced parameter
    285            
    286            ZDP_TmpBuf[0] = LO_UINT16( nwkAddr );
   \   000007   12....       LCALL   ?Subroutine14 & 0xFFFF
    287            ZDP_TmpBuf[1] = HI_UINT16( nwkAddr );
    288          
    289            return fillAndSend( &ZDP_TransID, dstAddr, cmd, 2 );
   \                     ??CrossCallReturnLabel_8:
   \   00000A                ; Setup parameters for call to function fillAndSend
   \   00000A   8E..         MOV     ?V0 + 0,R6
   \   00000C   02....       LJMP    ?Subroutine1 & 0xFFFF
    290          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   75..00       MOV     ?V0 + 1,#0x0
   \   000003   78..         MOV     R0,#?V0 + 0
   \   000005   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000008   7902         MOV     R1,#0x2
   \   00000A                REQUIRE ??Subroutine87_0
   \   00000A                ; // Fall through to label ??Subroutine87_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine87_0:
   \   000000   EA           MOV     A,R2
   \   000001   FC           MOV     R4,A
   \   000002   EB           MOV     A,R3
   \   000003   FD           MOV     R5,A
   \   000004   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   000006   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   000008                REQUIRE ??Subroutine88_0
   \   000008                ; // Fall through to label ??Subroutine88_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine88_0:
   \   000000   12....       LCALL   ??Subroutine96_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_141:
   \   000003                REQUIRE ??Subroutine89_0
   \   000003                ; // Fall through to label ??Subroutine89_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine89_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F02         MOV     R7,#0x2
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000003   12....       LCALL   ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_152:
   \   000006   EC           MOV     A,R4
   \   000007   F0           MOVX    @DPTR,A
   \   000008   12....       LCALL   ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_116:
   \   00000B   ED           MOV     A,R5
   \   00000C   F0           MOVX    @DPTR,A
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine72:
   \   000000   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000003   12....       LCALL   ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_154:
   \   000006   A3           INC     DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine77:
   \   000000   12....       LCALL   ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_155:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine84:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8882         MOV     DPL,R0
   \   000008   22           RET
    291          
    292          /*********************************************************************
    293           * Address Requests
    294           */
    295          
    296          /*********************************************************************
    297           * @fn          ZDP_NwkAddrReq
    298           *
    299           * @brief       This builds and send a NWK_addr_req message.  This
    300           *              function sends a broadcast message looking for a 16
    301           *              bit address with a 64 bit address as bait.
    302           *
    303           * @param       IEEEAddress - looking for this device
    304           * @param       SecurityEnable - Security Options
    305           *
    306           * @return      afStatus_t
    307           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    308          afStatus_t ZDP_NwkAddrReq( uint8 *IEEEAddress, byte ReqType,
   \                     ZDP_NwkAddrReq:
    309                                     byte StartIndex, byte SecurityEnable )
    310          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 0,R2
   \   00000C   8B..         MOV     ?V0 + 1,R3
   \   00000E   89..         MOV     ?V0 + 3,R1
   \   000010   8C..         MOV     ?V0 + 2,R4
    311            uint8 *pBuf = ZDP_TmpBuf;
   \   000012   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000015   12....       LCALL   ?Subroutine17 & 0xFFFF
    312            byte len = Z_EXTADDR_LEN + 1 + 1;  // IEEEAddress + ReqType + StartIndex.
    313            zAddrType_t dstAddr;
    314          
    315            (void)SecurityEnable;  // Intentionally unreferenced parameter
    316            
    317            if ( osal_ExtAddrEqual( saveExtAddr, IEEEAddress ) == FALSE )
   \                     ??CrossCallReturnLabel_13:
   \   000018                ; Setup parameters for call to function sAddrExtCmp
   \   000018   AC..         MOV     R4,?V0 + 0
   \   00001A   AD..         MOV     R5,?V0 + 1
   \   00001C   7A..         MOV     R2,#saveExtAddr & 0xff
   \   00001E   7B..         MOV     R3,#(saveExtAddr >> 8) & 0xff
   \   000020   12....       LCALL   ??sAddrExtCmp?relay
   \   000023   E9           MOV     A,R1
   \   000024   7012         JNZ     ??ZDP_NwkAddrReq_0
    318            {
    319              dstAddr.addrMode = AddrBroadcast;
   \   000026   7408         MOV     A,#0x8
   \   000028   12....       LCALL   ?XSTACK_DISP0_8
   \   00002B   740F         MOV     A,#0xf
   \   00002D   12....       LCALL   ?Subroutine56 & 0xFFFF
    320              dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
    321            }
   \                     ??CrossCallReturnLabel_88:
   \   000030   74FD         MOV     A,#-0x3
   \   000032   F0           MOVX    @DPTR,A
   \   000033   A3           INC     DPTR
   \   000034   74FF         MOV     A,#-0x1
   \   000036   800E         SJMP    ??CrossCallReturnLabel_36
    322            else
    323            {
    324              dstAddr.addrMode = Addr16Bit;
   \                     ??ZDP_NwkAddrReq_0:
   \   000038   7408         MOV     A,#0x8
   \   00003A   12....       LCALL   ?XSTACK_DISP0_8
   \   00003D   7402         MOV     A,#0x2
   \   00003F   F0           MOVX    @DPTR,A
    325              dstAddr.addr.shortAddr = ZDAppNwkAddr.addr.shortAddr;
   \   000040   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000043   12....       LCALL   ?Subroutine25 & 0xFFFF
    326            }
   \                     ??CrossCallReturnLabel_36:
   \   000046   F0           MOVX    @DPTR,A
    327          
    328            pBuf = osal_cpyExtAddr( pBuf, IEEEAddress );
   \   000047                ; Setup parameters for call to function sAddrExtCpy
   \   000047   AC..         MOV     R4,?V0 + 0
   \   000049   AD..         MOV     R5,?V0 + 1
   \   00004B   EE           MOV     A,R6
   \   00004C   FA           MOV     R2,A
   \   00004D   EF           MOV     A,R7
   \   00004E   FB           MOV     R3,A
   \   00004F   12....       LCALL   ??sAddrExtCpy?relay
   \   000052   8A..         MOV     ?V0 + 0,R2
   \   000054   8B..         MOV     ?V0 + 1,R3
   \   000056   AE..         MOV     R6,?V0 + 0
   \   000058   AF..         MOV     R7,?V0 + 1
    329          
    330            *pBuf++ = ReqType;
   \   00005A   8E82         MOV     DPL,R6
   \   00005C   8F83         MOV     DPH,R7
   \   00005E   E5..         MOV     A,?V0 + 3
   \   000060   F0           MOVX    @DPTR,A
   \   000061   A3           INC     DPTR
    331            *pBuf++ = StartIndex;
   \   000062   E5..         MOV     A,?V0 + 2
   \   000064   F0           MOVX    @DPTR,A
    332          
    333            return fillAndSend( &ZDP_TransID, &dstAddr, NWK_addr_req, len );
   \   000065                ; Setup parameters for call to function fillAndSend
   \   000065   E4           CLR     A
   \   000066   F5..         MOV     ?V0 + 0,A
   \   000068   F5..         MOV     ?V0 + 1,A
   \   00006A   78..         MOV     R0,#?V0 + 0
   \   00006C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006F   790A         MOV     R1,#0xa
   \   000071   7402         MOV     A,#0x2
   \   000073   12....       LCALL   ?XSTACK_DISP0_8
   \   000076   AC82         MOV     R4,DPL
   \   000078   AD83         MOV     R5,DPH
   \   00007A   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   00007C   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   00007E   12....       LCALL   ??Subroutine96_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_139:
   \   000081   12....       LCALL   ?DEALLOC_XSTACK8
   \   000084   7409         MOV     A,#0x9
   \   000086   02....       LJMP    ??Subroutine95_0 & 0xFFFF
    334          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function ZDO_SendMsgCBs
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine95_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F04         MOV     R7,#0x4
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA
    335          
    336          /*********************************************************************
    337           * @fn          ZDP_IEEEAddrReq
    338           *
    339           * @brief       This builds and send a IEEE_addr_req message.  This
    340           *              function sends a unicast message looking for a 64
    341           *              bit IEEE address with a 16 bit address as bait.
    342           *
    343           * @param       ReqType - ZDP_IEEEADDR_REQTYPE_SINGLE or
    344           *                        ZDP_IEEEADDR_REQTYPE_EXTENDED
    345           * @param       SecurityEnable - Security Options
    346           *
    347           * @return      afStatus_t
    348           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    349          afStatus_t ZDP_IEEEAddrReq( uint16 shortAddr, byte ReqType,
   \                     ZDP_IEEEAddrReq:
    350                                      byte StartIndex, byte SecurityEnable )
    351          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FF           MOV     R7,A
   \   00000C   EC           MOV     A,R4
   \   00000D   12....       LCALL   ?Subroutine37 & 0xFFFF
    352            uint8 *pBuf = ZDP_TmpBuf;
    353            byte len = 2 + 1 + 1;  // shortAddr + ReqType + StartIndex.
    354            zAddrType_t dstAddr;
    355          
    356            (void)SecurityEnable;  // Intentionally unreferenced parameter
    357            
    358            dstAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \                     ??CrossCallReturnLabel_292:
   \   000010   7408         MOV     A,#0x8
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   7402         MOV     A,#0x2
   \   000017   12....       LCALL   ?Subroutine56 & 0xFFFF
    359            dstAddr.addr.shortAddr = shortAddr;
   \                     ??CrossCallReturnLabel_89:
   \   00001A   12....       LCALL   ??Subroutine108_0 & 0xFFFF
    360          
    361            *pBuf++ = LO_UINT16( shortAddr );
   \                     ??CrossCallReturnLabel_203:
   \   00001D   EA           MOV     A,R2
   \   00001E   8882         MOV     DPL,R0
   \   000020   8983         MOV     DPH,R1
   \   000022   12....       LCALL   ??Subroutine109_0 & 0xFFFF
    362            *pBuf++ = HI_UINT16( shortAddr );
   \                     ??CrossCallReturnLabel_201:
   \   000025   A3           INC     DPTR
    363          
    364            *pBuf++ = ReqType;
   \   000026   EF           MOV     A,R7
   \   000027   F0           MOVX    @DPTR,A
   \   000028   A3           INC     DPTR
    365            *pBuf++ = StartIndex;
   \   000029   EE           MOV     A,R6
   \   00002A   F0           MOVX    @DPTR,A
    366          
    367            return fillAndSend( &ZDP_TransID, &dstAddr, IEEE_addr_req, len );
   \   00002B                ; Setup parameters for call to function fillAndSend
   \   00002B   75..01       MOV     ?V0 + 0,#0x1
   \   00002E   75..00       MOV     ?V0 + 1,#0x0
   \   000031   78..         MOV     R0,#?V0 + 0
   \   000033   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000036   7904         MOV     R1,#0x4
   \   000038                REQUIRE ?Subroutine4
   \   000038                ; // Fall through to label ?Subroutine4
    368          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7402         MOV     A,#0x2
   \   000002   12....       LCALL   ?XSTACK_DISP0_8
   \   000005   AC82         MOV     R4,DPL
   \   000007   AD83         MOV     R5,DPH
   \   000009   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   00000B   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   00000D   12....       LCALL   ??Subroutine96_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_140:
   \   000010   12....       LCALL   ?DEALLOC_XSTACK8
   \   000013                REQUIRE ??Subroutine86_0
   \   000013                ; // Fall through to label ??Subroutine86_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine86_0:
   \   000000   7409         MOV     A,#0x9
   \   000002   80..         SJMP    ??Subroutine89_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine108_0:
   \   000000   EA           MOV     A,R2
   \   000001                REQUIRE ??Subroutine109_0
   \   000001                ; // Fall through to label ??Subroutine109_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine109_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   EB           MOV     A,R3
   \   000003   F0           MOVX    @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   FE           MOV     R6,A
   \   000001                REQUIRE ??Subroutine123_0
   \   000001                ; // Fall through to label ??Subroutine123_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine123_0:
   \   000000   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000003                REQUIRE ??Subroutine124_0
   \   000003                ; // Fall through to label ??Subroutine124_0
    369          
    370          /*********************************************************************
    371           * @fn          ZDP_MatchDescReq
    372           *
    373           * @brief       This builds and send a Match_Desc_req message.  This
    374           *              function sends a broadcast or unicast message
    375           *              requesting the list of endpoint/interfaces that
    376           *              match profile ID and cluster IDs.
    377           *
    378           * @param       dstAddr - destination address
    379           * @param       ProfileID - Profile ID
    380           * @param       NumInClusters - number of input clusters
    381           * @param       InClusterList - input cluster ID list
    382           * @param       NumOutClusters - number of output clusters
    383           * @param       OutClusterList - output cluster ID list
    384           * @param       SecurityEnable - Security Options
    385           *
    386           * @return      afStatus_t
    387           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    388          afStatus_t ZDP_MatchDescReq( zAddrType_t *dstAddr, uint16 nwkAddr,
   \                     ZDP_MatchDescReq:
    389                                          uint16 ProfileID,
    390                                          byte NumInClusters, cId_t *InClusterList,
    391                                          byte NumOutClusters, cId_t *OutClusterList,
    392                                          byte SecurityEnable )
    393          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 6,R2
   \   000007   8B..         MOV     ?V0 + 7,R3
   \   000009   8C..         MOV     ?V0 + 0,R4
   \   00000B   8D..         MOV     ?V0 + 1,R5
   \   00000D   E9           MOV     A,R1
   \   00000E   FE           MOV     R6,A
   \   00000F   7410         MOV     A,#0x10
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   12....       LCALL   ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   000017   12....       LCALL   ?XSTACK_DISP0_8
   \   00001A   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   00001D   7414         MOV     A,#0x14
   \   00001F   12....       LCALL   ?XSTACK_DISP0_8
   \   000022   E0           MOVX    A,@DPTR
   \   000023   FB           MOV     R3,A
   \   000024   7415         MOV     A,#0x15
   \   000026   12....       LCALL   ?XSTACK_DISP0_8
   \   000029   12....       LCALL   ?Subroutine35 & 0xFFFF
    394            uint8 *pBuf = ZDP_TmpBuf;
   \                     ??CrossCallReturnLabel_53:
   \   00002C   12....       LCALL   ??Subroutine123_0 & 0xFFFF
    395            // nwkAddr+ProfileID+NumInClusters+NumOutClusters.
    396            byte i, len = 2 + 2 + 1 + 1;  // nwkAddr+ProfileID+NumInClusters+NumOutClusters.
    397          
    398            (void)SecurityEnable;  // Intentionally unreferenced parameter
    399            
    400            len += (NumInClusters + NumOutClusters) * sizeof(uint16);
   \                     ??CrossCallReturnLabel_302:
   \   00002F   EE           MOV     A,R6
   \   000030   2B           ADD     A,R3
   \   000031   C3           CLR     C
   \   000032   33           RLC     A
   \   000033   2406         ADD     A,#0x6
   \   000035   FA           MOV     R2,A
    401          
    402            if ( len >= ZDP_BUF_SZ-1 )
   \   000036   C3           CLR     C
   \   000037   944F         SUBB    A,#0x4f
   \   000039   4004         JC      ??ZDP_MatchDescReq_0
    403            {
    404              return afStatus_MEM_FAIL;
   \   00003B   7910         MOV     R1,#0x10
   \   00003D   806C         SJMP    ??ZDP_MatchDescReq_1
    405            }
    406          
    407            *pBuf++ = LO_UINT16( nwkAddr );   // NWKAddrOfInterest
   \                     ??ZDP_MatchDescReq_0:
   \   00003F   8882         MOV     DPL,R0
   \   000041   8983         MOV     DPH,R1
   \   000043   E5..         MOV     A,?V0 + 0
   \   000045   F0           MOVX    @DPTR,A
   \   000046   A3           INC     DPTR
    408            *pBuf++ = HI_UINT16( nwkAddr );
   \   000047   E5..         MOV     A,?V0 + 1
   \   000049   12....       LCALL   ?Subroutine58 & 0xFFFF
    409          
    410            *pBuf++ = LO_UINT16( ProfileID );   // Profile ID
    411            *pBuf++ = HI_UINT16( ProfileID );
   \                     ??CrossCallReturnLabel_91:
   \   00004C   E5..         MOV     A,?V0 + 3
   \   00004E   F0           MOVX    @DPTR,A
   \   00004F   A3           INC     DPTR
    412          
    413            *pBuf++ = NumInClusters; // Input cluster list
   \   000050   EE           MOV     A,R6
   \   000051   12....       LCALL   ?Subroutine55 & 0xFFFF
    414            if ( NumInClusters )
   \                     ??CrossCallReturnLabel_84:
   \   000054   6019         JZ      ??ZDP_MatchDescReq_2
    415            {
    416              for (i=0; i<NumInClusters; ++i)  {
   \   000056   7F00         MOV     R7,#0x0
    417                *pBuf++ = LO_UINT16( InClusterList[i] );
   \                     ??ZDP_MatchDescReq_3:
   \   000058   EF           MOV     A,R7
   \   000059   C3           CLR     C
   \   00005A   33           RLC     A
   \   00005B   F5..         MOV     ?V0 + 0,A
   \   00005D   E4           CLR     A
   \   00005E   33           RLC     A
   \   00005F   F5..         MOV     ?V0 + 1,A
   \   000061   E5..         MOV     A,?V0 + 4
   \   000063   25..         ADD     A,?V0 + 0
   \   000065   F5..         MOV     ?V0 + 2,A
   \   000067   E5..         MOV     A,?V0 + 5
   \   000069   12....       LCALL   ?Subroutine11 & 0xFFFF
    418                *pBuf++ = HI_UINT16( InClusterList[i] );
    419              }
    420            }
   \                     ??CrossCallReturnLabel_4:
   \   00006C   9E           SUBB    A,R6
   \   00006D   40E9         JC      ??ZDP_MatchDescReq_3
    421          
    422            *pBuf++ = NumOutClusters; // Output cluster list
   \                     ??ZDP_MatchDescReq_2:
   \   00006F   EB           MOV     A,R3
   \   000070   8882         MOV     DPL,R0
   \   000072   8983         MOV     DPH,R1
   \   000074   12....       LCALL   ?Subroutine55 & 0xFFFF
    423            if ( NumOutClusters )
   \                     ??CrossCallReturnLabel_85:
   \   000077   6017         JZ      ??ZDP_MatchDescReq_4
    424            {
    425              for (i=0; i<NumOutClusters; ++i)  {
   \   000079   7F00         MOV     R7,#0x0
    426                *pBuf++ = LO_UINT16( OutClusterList[i] );
   \                     ??ZDP_MatchDescReq_5:
   \   00007B   EF           MOV     A,R7
   \   00007C   C3           CLR     C
   \   00007D   33           RLC     A
   \   00007E   F5..         MOV     ?V0 + 0,A
   \   000080   E4           CLR     A
   \   000081   33           RLC     A
   \   000082   F5..         MOV     ?V0 + 1,A
   \   000084   EC           MOV     A,R4
   \   000085   25..         ADD     A,?V0 + 0
   \   000087   F5..         MOV     ?V0 + 2,A
   \   000089   ED           MOV     A,R5
   \   00008A   12....       LCALL   ?Subroutine11 & 0xFFFF
    427                *pBuf++ = HI_UINT16( OutClusterList[i] );
    428              }
    429            }
   \                     ??CrossCallReturnLabel_5:
   \   00008D   9B           SUBB    A,R3
   \   00008E   40EB         JC      ??ZDP_MatchDescReq_5
    430          
    431            return fillAndSend( &ZDP_TransID, dstAddr, Match_Desc_req, len );
   \                     ??ZDP_MatchDescReq_4:
   \   000090                ; Setup parameters for call to function fillAndSend
   \   000090   75..06       MOV     ?V0 + 0,#0x6
   \   000093   75..00       MOV     ?V0 + 1,#0x0
   \   000096   78..         MOV     R0,#?V0 + 0
   \   000098   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00009B   EA           MOV     A,R2
   \   00009C   F9           MOV     R1,A
   \   00009D   AC..         MOV     R4,?V0 + 6
   \   00009F   AD..         MOV     R5,?V0 + 7
   \   0000A1   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   0000A3   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   0000A5   12....       LCALL   ??Subroutine96_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_142:
   \   0000A8   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??ZDP_MatchDescReq_1:
   \   0000AB   02....       LJMP    ??Subroutine101_0 & 0xFFFF
    432          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   35..         ADDC    A,?V0 + 1
   \   000002   F5..         MOV     ?V0 + 3,A
   \   000004   85..82       MOV     DPL,?V0 + 2
   \   000007   F583         MOV     DPH,A
   \   000009   12....       LCALL   ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_225:
   \   00000C   A882         MOV     R0,DPL
   \   00000E   A983         MOV     R1,DPH
   \   000010   85..82       MOV     DPL,?V0 + 2
   \   000013   85..83       MOV     DPH,?V0 + 3
   \   000016   12....       LCALL   ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_220:
   \   000019   0F           INC     R7
   \   00001A   EF           MOV     A,R7
   \   00001B   C3           CLR     C
   \   00001C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine71:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine90_0
   \   000001                ; // Fall through to label ??Subroutine90_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine90_0:
   \   000000   12....       LCALL   ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_224:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine82:
   \   000000   12....       LCALL   ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_227:
   \   000003   08           INC     R0
   \   000004   A983         MOV     R1,DPH
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E5..         MOV     A,?V0 + 2
   \   000004   F0           MOVX    @DPTR,A
   \   000005   A3           INC     DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   A882         MOV     R0,DPL
   \   000004   A983         MOV     R1,DPH
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine101_0:
   \   000000   7F08         MOV     R7,#0x8
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine85:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   22           RET
    433          
    434          /*********************************************************************
    435           * @fn          ZDP_SimpleDescReq
    436           *
    437           * @brief       This builds and send a NWK_Simple_Desc_req
    438           *              message.  This function sends unicast message to the
    439           *              destination device.
    440           *
    441           * @param       dstAddr - destination address
    442           * @param       nwkAddr - 16 bit address
    443           * @param       epIntf - endpoint/interface
    444           * @param       SecurityEnable - Security Options
    445           *
    446           * @return      afStatus_t
    447           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    448          afStatus_t ZDP_SimpleDescReq( zAddrType_t *dstAddr, uint16 nwkAddr,
   \                     ZDP_SimpleDescReq:
    449                                              byte endPoint, byte SecurityEnable )
    450          
    451          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    452            (void)SecurityEnable;  // Intentionally unreferenced parameter
    453            
    454            ZDP_TmpBuf[0] = LO_UINT16( nwkAddr );
   \   000005   12....       LCALL   ?Subroutine14 & 0xFFFF
    455            ZDP_TmpBuf[1] = HI_UINT16( nwkAddr );
    456            ZDP_TmpBuf[2] = endPoint;
   \                     ??CrossCallReturnLabel_9:
   \   000008   12....       LCALL   ?Subroutine29 & 0xFFFF
    457          
    458            return fillAndSend( &ZDP_TransID, dstAddr, Simple_Desc_req, 3 );
   \                     ??CrossCallReturnLabel_46:
   \   00000B                ; Setup parameters for call to function fillAndSend
   \   00000B   75..04       MOV     ?V0 + 0,#0x4
   \   00000E   75..00       MOV     ?V0 + 1,#0x0
   \   000011   78..         MOV     R0,#?V0 + 0
   \   000013   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000016   7903         MOV     R1,#0x3
   \   000018   02....       LJMP    ??Subroutine87_0 & 0xFFFF
    459          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   12....       LCALL   ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_118:
   \   000003   A3           INC     DPTR
   \   000004   E9           MOV     A,R1
   \   000005   F0           MOVX    @DPTR,A
   \   000006   22           RET
    460          
    461          /*********************************************************************
    462           * @fn          ZDP_UserDescSet
    463           *
    464           * @brief       This builds and send a User_Desc_set message to set
    465           *              the user descriptor.  This function sends unicast
    466           *              message to the destination device.
    467           *
    468           * @param       dstAddr - destination address
    469           * @param       nwkAddr - 16 bit address
    470           * @param       UserDescriptor - user descriptor
    471           * @param       SecurityEnable - Security Options
    472           *
    473           * @return      afStatus_t
    474           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    475          afStatus_t ZDP_UserDescSet( zAddrType_t *dstAddr, uint16 nwkAddr,
   \                     ZDP_UserDescSet:
    476                                    UserDescriptorFormat_t *UserDescriptor,
    477                                    byte SecurityEnable )
    478          {
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_209:
   \   00000D   7411         MOV     A,#0x11
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   12....       LCALL   ??Subroutine124_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_295:
   \   000015   E8           MOV     A,R0
   \   000016   FA           MOV     R2,A
   \   000017   E9           MOV     A,R1
   \   000018   FB           MOV     R3,A
    479            uint8 *pBuf = ZDP_TmpBuf;
   \   000019   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00001C   12....       LCALL   ??Subroutine98_0 & 0xFFFF
    480            byte len = (UserDescriptor->len < AF_MAX_USER_DESCRIPTOR_LEN) ?
    481                        UserDescriptor->len : AF_MAX_USER_DESCRIPTOR_LEN;
   \                     ??CrossCallReturnLabel_156:
   \   00001F   8A82         MOV     DPL,R2
   \   000021   8B83         MOV     DPH,R3
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F8           MOV     R0,A
   \   000025   C3           CLR     C
   \   000026   9410         SUBB    A,#0x10
   \   000028   5004         JNC     ??ZDP_UserDescSet_0
   \   00002A   88..         MOV     ?V0 + 2,R0
   \   00002C   8003         SJMP    ??ZDP_UserDescSet_1
   \                     ??ZDP_UserDescSet_0:
   \   00002E   75..10       MOV     ?V0 + 2,#0x10
    482            byte addrLen = 2;
    483          
    484            (void)SecurityEnable;  // Intentionally unreferenced parameter
    485            
    486            *pBuf++ = LO_UINT16( nwkAddr );
   \                     ??ZDP_UserDescSet_1:
   \   000031   EC           MOV     A,R4
   \   000032   85..82       MOV     DPL,?V0 + 0
   \   000035   85..83       MOV     DPH,?V0 + 1
   \   000038   F0           MOVX    @DPTR,A
   \   000039   A3           INC     DPTR
    487            *pBuf++ = HI_UINT16( nwkAddr );
   \   00003A   ED           MOV     A,R5
   \   00003B   12....       LCALL   ?Subroutine58 & 0xFFFF
    488          
    489            *pBuf++ = len;
   \                     ??CrossCallReturnLabel_92:
   \   00003E   8582..       MOV     ?V0 + 0,DPL
   \   000041   8583..       MOV     ?V0 + 1,DPH
    490            addrLen = 3;
    491          
    492            pBuf = osal_memcpy( pBuf, UserDescriptor->desc, len );
    493            osal_memset( pBuf, AF_USER_DESCRIPTOR_FILL, AF_MAX_USER_DESCRIPTOR_LEN-len );
   \   000044                ; Setup parameters for call to function osal_memset
   \   000044   F5..         MOV     ?V0 + 4,A
   \   000046   7410         MOV     A,#0x10
   \   000048   C3           CLR     C
   \   000049   95..         SUBB    A,?V0 + 4
   \   00004B   FC           MOV     R4,A
   \   00004C   95E0         SUBB    A,0xE0 /* A   */
   \   00004E   FD           MOV     R5,A
   \   00004F   7920         MOV     R1,#0x20
   \   000051   E9           MOV     A,R1
   \   000052   C0E0         PUSH    A
   \   000054   EC           MOV     A,R4
   \   000055   FE           MOV     R6,A
   \   000056   ED           MOV     A,R5
   \   000057   FF           MOV     R7,A
   \   000058                ; Setup parameters for call to function osal_memcpy
   \   000058   8A82         MOV     DPL,R2
   \   00005A   8B83         MOV     DPH,R3
   \   00005C   A3           INC     DPTR
   \   00005D   A982         MOV     R1,DPL
   \   00005F   AA83         MOV     R2,DPH
   \   000061   89..         MOV     ?V0 + 4,R1
   \   000063   8A..         MOV     ?V0 + 5,R2
   \   000065   75..00       MOV     ?V0 + 6,#0x0
   \   000068   78..         MOV     R0,#?V0 + 4
   \   00006A   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00006D   85....       MOV     ?V0 + 4,?V0 + 2
   \   000070   AC..         MOV     R4,?V0 + 4
   \   000072   7D00         MOV     R5,#0x0
   \   000074   AA..         MOV     R2,?V0 + 0
   \   000076   AB..         MOV     R3,?V0 + 1
   \   000078   12....       LCALL   ??Subroutine119_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_265:
   \   00007B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00007E   EE           MOV     A,R6
   \   00007F   FC           MOV     R4,A
   \   000080   EF           MOV     A,R7
   \   000081   FD           MOV     R5,A
   \   000082   D0E0         POP     A
   \   000084   F9           MOV     R1,A
   \   000085   12....       LCALL   ??osal_memset?relay
    494          
    495            return fillAndSend( &ZDP_TransID, dstAddr, User_Desc_set, (AF_MAX_USER_DESCRIPTOR_LEN + addrLen) );
   \   000088                ; Setup parameters for call to function fillAndSend
   \   000088   75..14       MOV     ?V0 + 0,#0x14
   \   00008B   75..00       MOV     ?V0 + 1,#0x0
   \   00008E   78..         MOV     R0,#?V0 + 0
   \   000090   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000093   7913         MOV     R1,#0x13
   \   000095   7402         MOV     A,#0x2
   \   000097   12....       LCALL   ?XSTACK_DISP0_8
   \   00009A   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   00009D   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A0   7402         MOV     A,#0x2
   \   0000A2   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A5   7F07         MOV     R7,#0x7
   \   0000A7   02....       LJMP    ?BANKED_LEAVE_XDATA
    496          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   000007   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   000009   12....       LCALL   ??fillAndSend?relay
   \   00000C   7402         MOV     A,#0x2
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine98_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 0,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 1,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine60:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine108_0
   \   000006                ; // Fall through to label ??Subroutine108_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine119_0:
   \   000000   12....       LCALL   ??osal_memcpy?relay
   \   000003   7403         MOV     A,#0x3
   \   000005   22           RET
    497          
    498          /*********************************************************************
    499           * @fn          ZDP_ServerDiscReq
    500           *
    501           * @brief       Build and send a Server_Discovery_req request message.
    502           *
    503           * @param       serverMask - 16-bit bit-mask of server services being sought.
    504           * @param       SecurityEnable - Security Options
    505           *
    506           * @return      afStatus_t
    507           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    508          afStatus_t ZDP_ServerDiscReq( uint16 serverMask, byte SecurityEnable )
   \                     ZDP_ServerDiscReq:
    509          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   12....       LCALL   ?Subroutine37 & 0xFFFF
    510            uint8 *pBuf = ZDP_TmpBuf;
    511            zAddrType_t dstAddr;
    512          
    513            dstAddr.addrMode = AddrBroadcast;
   \                     ??CrossCallReturnLabel_293:
   \   00000E   7408         MOV     A,#0x8
   \   000010   12....       LCALL   ?XSTACK_DISP0_8
   \   000013   12....       LCALL   ?Subroutine53 & 0xFFFF
    514            dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
    515          
    516            *pBuf++ = LO_UINT16( serverMask );
   \                     ??CrossCallReturnLabel_80:
   \   000016   EA           MOV     A,R2
   \   000017   8882         MOV     DPL,R0
   \   000019   8983         MOV     DPH,R1
   \   00001B   12....       LCALL   ??Subroutine109_0 & 0xFFFF
    517            *pBuf = HI_UINT16( serverMask );
    518          
    519            FillAndSendTxOptions( &ZDP_TransID, &dstAddr, Server_Discovery_req, 2,
    520                       ((SecurityEnable) ? AF_EN_SECURITY : AF_TX_OPTIONS_NONE) );
   \                     ??CrossCallReturnLabel_202:
   \   00001E   EE           MOV     A,R6
   \   00001F   90....       MOV     DPTR,#ZDP_TxOptions
   \   000022   6004         JZ      ??ZDP_ServerDiscReq_0
   \   000024   7440         MOV     A,#0x40
   \   000026   8001         SJMP    ??ZDP_ServerDiscReq_1
   \                     ??ZDP_ServerDiscReq_0:
   \   000028   E4           CLR     A
   \                     ??ZDP_ServerDiscReq_1:
   \   000029   F0           MOVX    @DPTR,A
   \   00002A                ; Setup parameters for call to function fillAndSend
   \   00002A   75..15       MOV     ?V0 + 0,#0x15
   \   00002D   75..00       MOV     ?V0 + 1,#0x0
   \   000030   78..         MOV     R0,#?V0 + 0
   \   000032   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000035   7902         MOV     R1,#0x2
   \   000037   E9           MOV     A,R1
   \   000038   12....       LCALL   ?XSTACK_DISP0_8
   \   00003B   AC82         MOV     R4,DPL
   \   00003D   AD83         MOV     R5,DPH
   \   00003F   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   000041   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   000043   12....       LCALL   ??Subroutine96_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_143:
   \   000046   12....       LCALL   ?DEALLOC_XSTACK8
   \   000049   90....       MOV     DPTR,#ZDP_TxOptions
   \   00004C   E4           CLR     A
   \   00004D   F0           MOVX    @DPTR,A
   \   00004E   02....       LJMP    ??Subroutine86_0 & 0xFFFF
    521          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000   740F         MOV     A,#0xf
   \   000002   F0           MOVX    @DPTR,A
   \   000003   85..82       MOV     DPL,?XSP + 0
   \   000006   85..83       MOV     DPH,?XSP + 1
   \   000009   74FD         MOV     A,#-0x3
   \   00000B   F0           MOVX    @DPTR,A
   \   00000C   A3           INC     DPTR
   \   00000D   74FF         MOV     A,#-0x1
   \   00000F   F0           MOVX    @DPTR,A
   \   000010   22           RET
    522          
    523          /*********************************************************************
    524           * @fn          ZDP_DeviceAnnce
    525           *
    526           * @brief       This builds and send a Device_Annce message.  This
    527           *              function sends a broadcast message.
    528           *
    529           * @param       nwkAddr - 16 bit address of the device
    530           * @param       IEEEAddr - 64 bit address of the device
    531           * @param       capabilities - device capabilities.  This field is only
    532           *                 sent for v1.1 networks.
    533           * @param       SecurityEnable - Security Options
    534           *
    535           * @return      afStatus_t
    536           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    537          afStatus_t ZDP_DeviceAnnce( uint16 nwkAddr, uint8 *IEEEAddr,
   \                     ZDP_DeviceAnnce:
    538                                        byte capabilities, byte SecurityEnable )
    539          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
    540            zAddrType_t dstAddr;
    541            uint8 len;
    542          
    543            (void)SecurityEnable;  // Intentionally unreferenced parameter
    544            
    545            dstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   00000C   7408         MOV     A,#0x8
   \   00000E   12....       LCALL   ?XSTACK_DISP0_8
   \   000011   12....       LCALL   ?Subroutine53 & 0xFFFF
    546            dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
    547          
    548            ZDP_TmpBuf[0] = LO_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_81:
   \   000014   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_149:
   \   000017   EA           MOV     A,R2
   \   000018   12....       LCALL   ?Subroutine30 & 0xFFFF
    549            ZDP_TmpBuf[1] = HI_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_113:
   \   00001B   EB           MOV     A,R3
   \   00001C   F0           MOVX    @DPTR,A
    550            osal_cpyExtAddr( &ZDP_TmpBuf[2], IEEEAddr );
   \   00001D                ; Setup parameters for call to function sAddrExtCpy
   \   00001D   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000020   E0           MOVX    A,@DPTR
   \   000021   2402         ADD     A,#0x2
   \   000023   FA           MOV     R2,A
   \   000024   A3           INC     DPTR
   \   000025   E0           MOVX    A,@DPTR
   \   000026   3400         ADDC    A,#0x0
   \   000028   12....       LCALL   ?Subroutine24 & 0xFFFF
    551            len = 2 + Z_EXTADDR_LEN;
    552          
    553            ZDP_TmpBuf[10] = capabilities;
   \                     ??CrossCallReturnLabel_33:
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   EE           MOV     A,R6
   \   00002E   F0           MOVX    @DPTR,A
    554            len++;
    555          
    556            return fillAndSend( &ZDP_TransID, &dstAddr, Device_annce, len );
   \   00002F                ; Setup parameters for call to function fillAndSend
   \   00002F   75..13       MOV     ?V0 + 0,#0x13
   \   000032   75..00       MOV     ?V0 + 1,#0x0
   \   000035   78..         MOV     R0,#?V0 + 0
   \   000037   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003A   790B         MOV     R1,#0xb
   \   00003C   02....       LJMP    ?Subroutine4 & 0xFFFF
    557          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                REQUIRE ??Subroutine91_0
   \   000001                ; // Fall through to label ??Subroutine91_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine91_0:
   \   000000   12....       LCALL   ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_119:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   FB           MOV     R3,A
   \   000001   12....       LCALL   ??sAddrExtCpy?relay
   \   000004   12....       LCALL   ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   A3           INC     DPTR
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000003                REQUIRE ??Subroutine97_0
   \   000003                ; // Fall through to label ??Subroutine97_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine97_0:
   \   000000   12....       LCALL   ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_153:
   \   000003   22           RET
    558          
    559          /*********************************************************************
    560           * Address Responses
    561           */
    562          
    563          /*********************************************************************
    564           * @fn      zdpProcessAddrReq
    565           *
    566           * @brief   Process an incoming NWK_addr_req or IEEE_addr_req message and then
    567           *          build and send a corresponding NWK_addr_rsp or IEEE_addr_rsp msg.
    568           *
    569           * @param   inMsg - incoming message
    570           *
    571           * @return  none
    572           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    573          void zdpProcessAddrReq( zdoIncomingMsg_t *inMsg )
   \                     zdpProcessAddrReq:
    574          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 4,R2
   \   000007   8B..         MOV     ?V0 + 5,R3
    575            associated_devices_t *pAssoc;
    576            uint8 reqType;
    577            uint16 aoi = INVALID_NODE_ADDR;
    578            uint8 *ieee = NULL;
   \   000009   75..00       MOV     ?V0 + 0,#0x0
   \   00000C   75..00       MOV     ?V0 + 1,#0x0
    579          
    580            reqType = inMsg->asdu[(inMsg->clusterID == NWK_addr_req) ? Z_EXTADDR_LEN : sizeof( uint16 ) ];
   \   00000F   EA           MOV     A,R2
   \   000010   240C         ADD     A,#0xc
   \   000012   F5..         MOV     ?V0 + 6,A
   \   000014   EB           MOV     A,R3
   \   000015   3400         ADDC    A,#0x0
   \   000017   F5..         MOV     ?V0 + 7,A
   \   000019   85..82       MOV     DPL,?V0 + 6
   \   00001C   F583         MOV     DPH,A
   \   00001E   12....       LCALL   ??Subroutine120_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_266:
   \   000021   EA           MOV     A,R2
   \   000022   4B           ORL     A,R3
   \   000023   7004         JNZ     ??zdpProcessAddrReq_0
   \   000025   7C08         MOV     R4,#0x8
   \   000027   8002         SJMP    ??zdpProcessAddrReq_1
   \                     ??zdpProcessAddrReq_0:
   \   000029   7C02         MOV     R4,#0x2
   \                     ??zdpProcessAddrReq_1:
   \   00002B   E5..         MOV     A,?V0 + 4
   \   00002D   2413         ADD     A,#0x13
   \   00002F   F582         MOV     DPL,A
   \   000031   E5..         MOV     A,?V0 + 5
   \   000033   12....       LCALL   ??Subroutine121_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_276:
   \   000036   12....       LCALL   ??Subroutine124_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_296:
   \   000039   E8           MOV     A,R0
   \   00003A   2C           ADD     A,R4
   \   00003B   F582         MOV     DPL,A
   \   00003D   E9           MOV     A,R1
   \   00003E   12....       LCALL   ??Subroutine103_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_168:
   \   000041   F5..         MOV     ?V0 + 2,A
    581          
    582            if ( inMsg->clusterID == NWK_addr_req )
   \   000043   EA           MOV     A,R2
   \   000044   4B           ORL     A,R3
   \   000045   701D         JNZ     ??zdpProcessAddrReq_2
    583          
    584            {
    585              ieee = inMsg->asdu;
   \   000047   88..         MOV     ?V0 + 0,R0
   \   000049   89..         MOV     ?V0 + 1,R1
    586          
    587              if ( osal_ExtAddrEqual( saveExtAddr, ieee ) )
   \   00004B                ; Setup parameters for call to function sAddrExtCmp
   \   00004B   AC..         MOV     R4,?V0 + 0
   \   00004D   AD..         MOV     R5,?V0 + 1
   \   00004F   7A..         MOV     R2,#saveExtAddr & 0xff
   \   000051   7B..         MOV     R3,#(saveExtAddr >> 8) & 0xff
   \   000053   12....       LCALL   ??sAddrExtCmp?relay
   \   000056   E9           MOV     A,R1
   \   000057   7003         JNZ     $+5
   \   000059   02....       LJMP    ??zdpProcessAddrReq_3 & 0xFFFF
    588              {
    589                aoi = ZDAppNwkAddr.addr.shortAddr;
   \   00005C   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00005F   12....       LCALL   ?Subroutine17 & 0xFFFF
    590              }
    591              // Handle response for sleeping end devices
    592              else if ( (ZSTACK_ROUTER_BUILD)
    593                && (((pAssoc = AssocGetWithExt( ieee )) != NULL)
    594                       && (pAssoc->nodeRelation == CHILD_RFD)) )
    595              {
    596                aoi = pAssoc->shortAddr;
    597                if ( reqType != ZDP_ADDR_REQTYPE_SINGLE )
    598                  reqType = 0xFF; // Force Invalid
    599              }
    600            }
   \                     ??CrossCallReturnLabel_14:
   \   000062   8022         SJMP    ??zdpProcessAddrReq_4
    601            else  // if ( inMsg->clusterID == IEEE_addr_req )
    602            {
    603              aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \                     ??zdpProcessAddrReq_2:
   \   000064   8882         MOV     DPL,R0
   \   000066   8983         MOV     DPH,R1
   \   000068   E0           MOVX    A,@DPTR
   \   000069   FA           MOV     R2,A
   \   00006A   A3           INC     DPTR
   \   00006B   E0           MOVX    A,@DPTR
   \   00006C   F9           MOV     R1,A
   \   00006D   EA           MOV     A,R2
   \   00006E   2400         ADD     A,#0x0
   \   000070   FE           MOV     R6,A
   \   000071   E4           CLR     A
   \   000072   39           ADDC    A,R1
   \   000073   FF           MOV     R7,A
    604          
    605              if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \   000074   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000077   E0           MOVX    A,@DPTR
   \   000078   6E           XRL     A,R6
   \   000079   7003         JNZ     ??zdpProcessAddrReq_5
   \   00007B   A3           INC     DPTR
   \   00007C   E0           MOVX    A,@DPTR
   \   00007D   6F           XRL     A,R7
   \                     ??zdpProcessAddrReq_5:
   \   00007E   7006         JNZ     ??zdpProcessAddrReq_4
    606              {
    607                ieee = saveExtAddr;
   \   000080   75....       MOV     ?V0 + 0,#saveExtAddr & 0xff
   \   000083   75....       MOV     ?V0 + 1,#(saveExtAddr >> 8) & 0xff
    608              }
    609              else if ( (ZSTACK_ROUTER_BUILD)
    610                && (((pAssoc = AssocGetWithShort( aoi )) != NULL)
    611                       && (pAssoc->nodeRelation == CHILD_RFD)) )
    612              {
    613                AddrMgrEntry_t addrEntry;
    614                addrEntry.user = ADDRMGR_USER_DEFAULT;
    615                addrEntry.index = pAssoc->addrIdx;
    616                if ( AddrMgrEntryGet( &addrEntry ) )
    617                {
    618                  ieee = addrEntry.extAddr;
    619                }
    620          
    621                if ( reqType != ZDP_ADDR_REQTYPE_SINGLE )
    622                  reqType = 0xFF; // Force Invalid
    623              }
    624            }
    625          
    626            if ( (aoi != INVALID_NODE_ADDR) && (ieee != NULL) )
   \                     ??zdpProcessAddrReq_4:
   \   000086   74FE         MOV     A,#-0x2
   \   000088   6E           XRL     A,R6
   \   000089   7003         JNZ     ??zdpProcessAddrReq_6
   \   00008B   74FF         MOV     A,#-0x1
   \   00008D   6F           XRL     A,R7
   \                     ??zdpProcessAddrReq_6:
   \   00008E   607B         JZ      ??zdpProcessAddrReq_3
   \   000090   E5..         MOV     A,?V0 + 0
   \   000092   45..         ORL     A,?V0 + 1
   \   000094   6075         JZ      ??zdpProcessAddrReq_3
    627            {
    628              uint8 *pBuf = ZDP_TmpBuf;
   \   000096   12....       LCALL   ?Subroutine44 & 0xFFFF
    629              // Status + IEEE-Addr + Nwk-Addr.
    630              byte len = 1 + Z_EXTADDR_LEN + 2;
    631          
    632              byte stat = ((reqType == ZDP_ADDR_REQTYPE_SINGLE) ||
    633                        (reqType == ZDP_ADDR_REQTYPE_EXTENDED) ||
    634                    ((reqType == ZDP_ADDR_REQTYPE_MEMBERSHIP) && (inMsg->clusterID == NWK_addr_req)) ) ?
    635                ZDP_SUCCESS : ZDP_INVALID_REQTYPE;
   \                     ??CrossCallReturnLabel_272:
   \   000099   E5..         MOV     A,?V0 + 2
   \   00009B   6017         JZ      ??zdpProcessAddrReq_7
   \   00009D   7401         MOV     A,#0x1
   \   00009F   65..         XRL     A,?V0 + 2
   \   0000A1   6011         JZ      ??zdpProcessAddrReq_7
   \   0000A3   7402         MOV     A,#0x2
   \   0000A5   65..         XRL     A,?V0 + 2
   \   0000A7   700E         JNZ     ??zdpProcessAddrReq_8
   \   0000A9   85..82       MOV     DPL,?V0 + 6
   \   0000AC   85..83       MOV     DPH,?V0 + 7
   \   0000AF   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   0000B2   7003         JNZ     ??zdpProcessAddrReq_8
   \                     ??zdpProcessAddrReq_7:
   \   0000B4   E4           CLR     A
   \   0000B5   8002         SJMP    ??zdpProcessAddrReq_9
   \                     ??zdpProcessAddrReq_8:
   \   0000B7   7480         MOV     A,#-0x80
    636          
    637              *pBuf++ = stat;
   \                     ??zdpProcessAddrReq_9:
   \   0000B9   8A82         MOV     DPL,R2
   \   0000BB   8B83         MOV     DPH,R3
   \   0000BD   12....       LCALL   ??Subroutine114_0 & 0xFFFF
    638          
    639              pBuf = osal_cpyExtAddr( pBuf, ieee );
   \                     ??CrossCallReturnLabel_230:
   \   0000C0                ; Setup parameters for call to function sAddrExtCpy
   \   0000C0   AC..         MOV     R4,?V0 + 0
   \   0000C2   AD..         MOV     R5,?V0 + 1
   \   0000C4   12....       LCALL   ??sAddrExtCpy?relay
    640          
    641              *pBuf++ = LO_UINT16( aoi );
   \   0000C7   EE           MOV     A,R6
   \   0000C8   8A82         MOV     DPL,R2
   \   0000CA   8B83         MOV     DPH,R3
   \   0000CC   F0           MOVX    @DPTR,A
   \   0000CD   A3           INC     DPTR
    642              *pBuf++ = HI_UINT16( aoi );
   \   0000CE   EF           MOV     A,R7
   \   0000CF   F0           MOVX    @DPTR,A
    643          
    644              if ( ZSTACK_ROUTER_BUILD )
    645              {
    646                if ( (reqType == ZDP_ADDR_REQTYPE_EXTENDED) &&
    647                     (aoi == ZDAppNwkAddr.addr.shortAddr) )
    648                {
    649                  byte cnt = 0;
    650                  uint16 *list = AssocMakeList( &cnt );
    651          
    652                  if ( list != NULL )
    653                  {
    654                    byte idx = inMsg->asdu[(((inMsg->clusterID == NWK_addr_req) ? Z_EXTADDR_LEN : sizeof( uint16 )) + 1)];
    655                    uint16 *pList = list + idx;
    656          
    657                    // NumAssocDev field is only present on success.
    658                    if ( cnt > idx )
    659                    {
    660                      cnt -= idx;
    661                      len += (cnt * sizeof( uint16 ));
    662                    }
    663                    else
    664                    {
    665                      cnt = 0;
    666                    }
    667                    *pBuf++ = cnt;
    668                    len++;
    669          
    670                    // StartIndex field is only present if NumAssocDev field is non-zero.
    671                    *pBuf++ = idx;
    672                    len++;
    673          
    674                    while ( cnt != 0 )
    675                    {
    676                      *pBuf++ = LO_UINT16( *pList );
    677                      *pBuf++ = HI_UINT16( *pList );
    678                      pList++;
    679                      cnt--;
    680                    }
    681          
    682                    osal_mem_free( (uint8 *)list );
    683                  }
    684                  else
    685                  {
    686                    // NumAssocDev field is only present on success.
    687                    *pBuf++ = 0;
    688                    len++;
    689                  }
    690                }
    691              }
    692          
    693              ZDP_TxOptions = AF_MSG_ACK_REQUEST;
   \   0000D0   90....       MOV     DPTR,#ZDP_TxOptions
   \   0000D3   7410         MOV     A,#0x10
   \   0000D5   F0           MOVX    @DPTR,A
    694              fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), (cId_t)(inMsg->clusterID | ZDO_RESPONSE_BIT), len );
   \   0000D6                ; Setup parameters for call to function fillAndSend
   \   0000D6   85..82       MOV     DPL,?V0 + 6
   \   0000D9   85..83       MOV     DPH,?V0 + 7
   \   0000DC   E0           MOVX    A,@DPTR
   \   0000DD   F5..         MOV     ?V0 + 0,A
   \   0000DF   A3           INC     DPTR
   \   0000E0   E0           MOVX    A,@DPTR
   \   0000E1   4480         ORL     A,#0x80
   \   0000E3   F5..         MOV     ?V0 + 1,A
   \   0000E5   78..         MOV     R0,#?V0 + 0
   \   0000E7   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000EA   790B         MOV     R1,#0xb
   \   0000EC   E5..         MOV     A,?V0 + 4
   \   0000EE   2402         ADD     A,#0x2
   \   0000F0   FC           MOV     R4,A
   \   0000F1   E5..         MOV     A,?V0 + 5
   \   0000F3   3400         ADDC    A,#0x0
   \   0000F5   FD           MOV     R5,A
   \   0000F6   E5..         MOV     A,?V0 + 4
   \   0000F8   240F         ADD     A,#0xf
   \   0000FA   FA           MOV     R2,A
   \   0000FB   E5..         MOV     A,?V0 + 5
   \   0000FD   3400         ADDC    A,#0x0
   \   0000FF   FB           MOV     R3,A
   \   000100   12....       LCALL   ??Subroutine96_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_144:
   \   000103   12....       LCALL   ?DEALLOC_XSTACK8
    695              ZDP_TxOptions = AF_TX_OPTIONS_NONE;
   \   000106   90....       MOV     DPTR,#ZDP_TxOptions
   \   000109   E4           CLR     A
   \   00010A   F0           MOVX    @DPTR,A
    696            }
    697          }
   \                     ??zdpProcessAddrReq_3:
   \   00010B   02....       LJMP    ??Subroutine101_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine103_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F583         MOV     DPH,A
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine114_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   AA82         MOV     R2,DPL
   \   000004   AB83         MOV     R3,DPH
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   12....       LCALL   ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_305:
   \   000003   E8           MOV     A,R0
   \   000004   49           ORL     A,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000003                REQUIRE ??Subroutine120_0
   \   000003                ; // Fall through to label ??Subroutine120_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine120_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine121_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F583         MOV     DPH,A
   \   000004   22           RET
    698          
    699          /*********************************************************************
    700           * @fn          ZDP_NodeDescMsg
    701           *
    702           * @brief       Builds and sends a Node Descriptor message, unicast to the
    703           *              specified device.
    704           *
    705           * @param       inMsg - incoming message
    706           * @param       nwkAddr - 16 bit network address for device
    707           * @param       pNodeDesc - pointer to the node descriptor
    708           *
    709           * @return      afStatus_t
    710           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    711          afStatus_t ZDP_NodeDescMsg( zdoIncomingMsg_t *inMsg,
   \                     ZDP_NodeDescMsg:
    712                                     uint16 nwkAddr, NodeDescriptorFormat_t *pNodeDesc )
    713          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   740A         MOV     A,#0xa
   \   000007   12....       LCALL   ?XSTACK_DISP0_8
   \   00000A   12....       LCALL   ?Subroutine17 & 0xFFFF
    714            uint8 *pBuf = ZDP_TmpBuf;
   \                     ??CrossCallReturnLabel_15:
   \   00000D   12....       LCALL   ??Subroutine123_0 & 0xFFFF
    715            byte len;
    716          
    717            len = 1 + 2 + 13;  // Status + nwkAddr + Node descriptor
    718          
    719            *pBuf++ = ZDP_SUCCESS;
   \                     ??CrossCallReturnLabel_303:
   \   000010   8882         MOV     DPL,R0
   \   000012   8983         MOV     DPH,R1
   \   000014   12....       LCALL   ?Subroutine79 & 0xFFFF
    720          
    721            *pBuf++ = LO_UINT16( nwkAddr );
    722            *pBuf++ = HI_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_120:
   \   000017   12....       LCALL   ?Subroutine55 & 0xFFFF
    723          
    724            *pBuf++ = (byte)((pNodeDesc->ComplexDescAvail << 3) |
    725                               (pNodeDesc->UserDescAvail << 4) |
    726                               (pNodeDesc->LogicalType & 0x07));
   \                     ??CrossCallReturnLabel_86:
   \   00001A   8E82         MOV     DPL,R6
   \   00001C   8F83         MOV     DPH,R7
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   541F         ANL     A,#0x1f
   \   000021   8882         MOV     DPL,R0
   \   000023   8983         MOV     DPH,R1
   \   000025   F0           MOVX    @DPTR,A
   \   000026   A3           INC     DPTR
   \   000027   08           INC     R0
   \   000028   12....       LCALL   ?Subroutine21 & 0xFFFF
    727          
    728            *pBuf++ = (byte)((pNodeDesc->FrequencyBand << 3) | (pNodeDesc->APSFlags & 0x07));
    729            *pBuf++ = pNodeDesc->CapabilityFlags;
   \                     ??CrossCallReturnLabel_211:
   \   00002B   A3           INC     DPTR
   \   00002C   12....       LCALL   ?Subroutine20 & 0xFFFF
    730            *pBuf++ = pNodeDesc->ManufacturerCode[0];
   \                     ??CrossCallReturnLabel_123:
   \   00002F   12....       LCALL   ??Subroutine93_0 & 0xFFFF
    731            *pBuf++ = pNodeDesc->ManufacturerCode[1];
   \                     ??CrossCallReturnLabel_125:
   \   000032   A3           INC     DPTR
   \   000033   12....       LCALL   ?Subroutine19 & 0xFFFF
    732            *pBuf++ = pNodeDesc->MaxBufferSize;
   \                     ??CrossCallReturnLabel_26:
   \   000036   12....       LCALL   ?Subroutine19 & 0xFFFF
    733            *pBuf++ = pNodeDesc->MaxInTransferSize[0];
   \                     ??CrossCallReturnLabel_27:
   \   000039   12....       LCALL   ??Subroutine110_0 & 0xFFFF
    734            *pBuf++ = pNodeDesc->MaxInTransferSize[1];
   \                     ??CrossCallReturnLabel_213:
   \   00003C   12....       LCALL   ?Subroutine10 & 0xFFFF
    735          
    736            *pBuf++ = LO_UINT16( pNodeDesc->ServerMask );
   \                     ??CrossCallReturnLabel_214:
   \   00003F   2408         ADD     A,#0x8
   \   000041   FC           MOV     R4,A
   \   000042   EF           MOV     A,R7
   \   000043   3400         ADDC    A,#0x0
   \   000045   FD           MOV     R5,A
   \   000046   8C82         MOV     DPL,R4
   \   000048   8D83         MOV     DPH,R5
   \   00004A   12....       LCALL   ?Subroutine22 & 0xFFFF
    737            *pBuf++ = HI_UINT16( pNodeDesc->ServerMask );
   \                     ??CrossCallReturnLabel_28:
   \   00004D   8C82         MOV     DPL,R4
   \   00004F   8D83         MOV     DPH,R5
   \   000051   12....       LCALL   ?Subroutine20 & 0xFFFF
    738            *pBuf++ = pNodeDesc->MaxOutTransferSize[0];
   \                     ??CrossCallReturnLabel_124:
   \   000054   12....       LCALL   ?Subroutine10 & 0xFFFF
    739            *pBuf++ = pNodeDesc->MaxOutTransferSize[1];
   \                     ??CrossCallReturnLabel_215:
   \   000057   240B         ADD     A,#0xb
   \   000059   12....       LCALL   ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_281:
   \   00005C   12....       LCALL   ??Subroutine113_0 & 0xFFFF
    740            *pBuf = pNodeDesc->DescriptorCapability;
   \                     ??CrossCallReturnLabel_218:
   \   00005F   240C         ADD     A,#0xc
   \   000061   F582         MOV     DPL,A
   \   000063   EF           MOV     A,R7
   \   000064   12....       LCALL   ??Subroutine103_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_169:
   \   000067   8882         MOV     DPL,R0
   \   000069   8983         MOV     DPH,R1
   \   00006B   F0           MOVX    @DPTR,A
    741          
    742            return fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), Node_Desc_rsp, len );
   \   00006C                ; Setup parameters for call to function fillAndSend
   \   00006C   75..02       MOV     ?V0 + 0,#0x2
   \   00006F   75..80       MOV     ?V0 + 1,#-0x80
   \   000072   78..         MOV     R0,#?V0 + 0
   \   000074   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000077   7910         MOV     R1,#0x10
   \   000079   EA           MOV     A,R2
   \   00007A   2402         ADD     A,#0x2
   \   00007C   FC           MOV     R4,A
   \   00007D   EB           MOV     A,R3
   \   00007E   3400         ADDC    A,#0x0
   \   000080   FD           MOV     R5,A
   \   000081   EA           MOV     A,R2
   \   000082   240F         ADD     A,#0xf
   \   000084   FA           MOV     R2,A
   \   000085   EB           MOV     A,R3
   \   000086                REQUIRE ?Subroutine5
   \   000086                ; // Fall through to label ?Subroutine5
    743          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   3400         ADDC    A,#0x0
   \   000002   FB           MOV     R3,A
   \   000003   02....       LJMP    ??Subroutine88_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine79:
   \   000000   E4           CLR     A
   \   000001                REQUIRE ??Subroutine92_0
   \   000001                ; // Fall through to label ??Subroutine92_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine92_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   EC           MOV     A,R4
   \   000003   F0           MOVX    @DPTR,A
   \   000004   A3           INC     DPTR
   \   000005   ED           MOV     A,R5
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine93_0
   \   000001                ; // Fall through to label ??Subroutine93_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine93_0:
   \   000000   12....       LCALL   ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_126:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine70:
   \   000000   12....       LCALL   ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_223:
   \   000003   8E82         MOV     DPL,R6
   \   000005   8F83         MOV     DPH,R7
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   12....       LCALL   ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_127:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   12....       LCALL   ??Subroutine90_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_219:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   A983         MOV     R1,DPH
   \   000002   8E82         MOV     DPL,R6
   \   000004   8F83         MOV     DPH,R7
   \   000006                REQUIRE ??Subroutine110_0
   \   000006                ; // Fall through to label ??Subroutine110_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine110_0:
   \   000000   12....       LCALL   ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_221:
   \   000003   8E82         MOV     DPL,R6
   \   000005   8F83         MOV     DPH,R7
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine111_0
   \   000002                ; // Fall through to label ??Subroutine111_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine111_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004                REQUIRE ??Subroutine112_0
   \   000004                ; // Fall through to label ??Subroutine112_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine112_0:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine113_0
   \   000001                ; // Fall through to label ??Subroutine113_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine113_0:
   \   000000   12....       LCALL   ??Subroutine90_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_222:
   \   000003   EE           MOV     A,R6
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine68:
   \   000000   F582         MOV     DPL,A
   \   000002   EF           MOV     A,R7
   \   000003                REQUIRE ??Subroutine121_0
   \   000003                ; // Fall through to label ??Subroutine121_0
    744          
    745          /*********************************************************************
    746           * @fn          ZDP_PowerDescMsg
    747           *
    748           * @brief       Builds and sends a Power Descriptor message, unicast to the
    749           *              specified device.
    750           *
    751           * @param       inMsg - incoming message (request)
    752           * @param       nwkAddr - 16 bit network address for device
    753           * @param       pPowerDesc - pointer to the node descriptor
    754           *
    755           * @return      afStatus_t
    756           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    757          afStatus_t ZDP_PowerDescMsg( zdoIncomingMsg_t *inMsg,
   \                     ZDP_PowerDescMsg:
    758                               uint16 nwkAddr, NodePowerDescriptorFormat_t *pPowerDesc )
    759          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   740A         MOV     A,#0xa
   \   00000B   12....       LCALL   ?XSTACK_DISP0_8
   \   00000E   12....       LCALL   ?Subroutine36 & 0xFFFF
    760            uint8 *pBuf = ZDP_TmpBuf;
   \                     ??CrossCallReturnLabel_60:
   \   000011   12....       LCALL   ??Subroutine120_0 & 0xFFFF
    761            byte len = 1 + 2 + 2;  // Status + nwkAddr + Node Power descriptor.
    762          
    763            *pBuf++ = ZDP_SUCCESS;
   \                     ??CrossCallReturnLabel_267:
   \   000014   12....       LCALL   ?Subroutine51 & 0xFFFF
    764          
    765            *pBuf++ = LO_UINT16( nwkAddr );
    766            *pBuf++ = HI_UINT16( nwkAddr );
    767          
    768            *pBuf++ = (byte)((pPowerDesc->AvailablePowerSources << 4)
    769                              | (pPowerDesc->PowerMode & 0x0F));
   \                     ??CrossCallReturnLabel_228:
   \   000017   12....       LCALL   ?Subroutine40 & 0xFFFF
    770            *pBuf++ = (byte)((pPowerDesc->CurrentPowerSourceLevel << 4)
    771                              | (pPowerDesc->CurrentPowerSource & 0x0F));
   \                     ??CrossCallReturnLabel_254:
   \   00001A   8882         MOV     DPL,R0
   \   00001C   8983         MOV     DPH,R1
   \   00001E   12....       LCALL   ??Subroutine98_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_157:
   \   000021   540F         ANL     A,#0xf
   \   000023   F9           MOV     R1,A
   \   000024   740C         MOV     A,#0xc
   \   000026   78..         MOV     R0,#?V0 + 0
   \   000028   12....       LCALL   ?US_SHR
   \   00002B   E5..         MOV     A,?V0 + 0
   \   00002D   C4           SWAP    A
   \   00002E   49           ORL     A,R1
   \   00002F   8A82         MOV     DPL,R2
   \   000031   8B83         MOV     DPH,R3
   \   000033   F0           MOVX    @DPTR,A
    772          
    773            return fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), Power_Desc_rsp, len );
   \   000034                ; Setup parameters for call to function fillAndSend
   \   000034   75..03       MOV     ?V0 + 0,#0x3
   \   000037   75..80       MOV     ?V0 + 1,#-0x80
   \   00003A   78..         MOV     R0,#?V0 + 0
   \   00003C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003F   7905         MOV     R1,#0x5
   \   000041   EE           MOV     A,R6
   \   000042   2402         ADD     A,#0x2
   \   000044   FC           MOV     R4,A
   \   000045   EF           MOV     A,R7
   \   000046   3400         ADDC    A,#0x0
   \   000048   FD           MOV     R5,A
   \   000049   EE           MOV     A,R6
   \   00004A   240F         ADD     A,#0xf
   \   00004C   FA           MOV     R2,A
   \   00004D   EF           MOV     A,R7
   \   00004E   80..         SJMP    ?Subroutine5
    774          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine94_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   0A           INC     R2
   \   000008   AB83         MOV     R3,DPH
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   12....       LCALL   ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_306:
   \   000003   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   12....       LCALL   ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_121:
   \   000007                REQUIRE ??Subroutine114_0
   \   000007                ; // Fall through to label ??Subroutine114_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   8882         MOV     DPL,R0
   \   000002   8983         MOV     DPH,R1
   \   000004                REQUIRE ??Subroutine118_0
   \   000004                ; // Fall through to label ??Subroutine118_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine118_0:
   \   000000   12....       LCALL   ??Subroutine94_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_261:
   \   000003   22           RET
    775          
    776          /*********************************************************************
    777           * @fn          ZDP_SimpleDescMsg
    778           *
    779           * @brief       Builds and sends a Simple Descriptor message, unicast to the
    780           *              specified device.
    781           *
    782           * @param       inMsg - incoming message (request)
    783           * @param       Status - message status (ZDP_SUCCESS or other)
    784           * @param       pSimpleDesc - pointer to the node descriptor
    785           *
    786           * @return      afStatus_t
    787           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    788          afStatus_t ZDP_SimpleDescMsg( zdoIncomingMsg_t *inMsg, byte Status,
   \                     ZDP_SimpleDescMsg:
    789                                        SimpleDescriptionFormat_t *pSimpleDesc )
    790          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7401         MOV     A,#0x1
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   12....       LCALL   ??Subroutine108_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_204:
   \   000012   E9           MOV     A,R1
   \   000013   85..82       MOV     DPL,?XSP + 0
   \   000016   85..83       MOV     DPH,?XSP + 1
   \   000019   F0           MOVX    @DPTR,A
    791            uint8 *pBuf = ZDP_TmpBuf;
   \   00001A   12....       LCALL   ?Subroutine44 & 0xFFFF
    792            uint8 i, len;
    793          
    794            if ( Status == ZDP_SUCCESS && pSimpleDesc )
   \                     ??CrossCallReturnLabel_273:
   \   00001D   EC           MOV     A,R4
   \   00001E   2409         ADD     A,#0x9
   \   000020   F5..         MOV     ?V0 + 4,A
   \   000022   ED           MOV     A,R5
   \   000023   3400         ADDC    A,#0x0
   \   000025   F5..         MOV     ?V0 + 5,A
   \   000027   EC           MOV     A,R4
   \   000028   2406         ADD     A,#0x6
   \   00002A   F5..         MOV     ?V0 + 2,A
   \   00002C   ED           MOV     A,R5
   \   00002D   3400         ADDC    A,#0x0
   \   00002F   F5..         MOV     ?V0 + 3,A
   \   000031   85..82       MOV     DPL,?XSP + 0
   \   000034   85..83       MOV     DPH,?XSP + 1
   \   000037   E0           MOVX    A,@DPTR
   \   000038   702B         JNZ     ??ZDP_SimpleDescMsg_0
   \   00003A   EC           MOV     A,R4
   \   00003B   4D           ORL     A,R5
   \   00003C   6027         JZ      ??ZDP_SimpleDescMsg_0
    795            {
    796              // Status + NWKAddrOfInterest + desc length + empty simple descriptor.
    797              len = 1 + 2 + 1 + 8;
    798              len += (pSimpleDesc->AppNumInClusters + pSimpleDesc->AppNumOutClusters) * sizeof ( uint16 );
   \   00003E   85..82       MOV     DPL,?V0 + 4
   \   000041   85..83       MOV     DPH,?V0 + 5
   \   000044   C082         PUSH    DPL
   \   000046   C083         PUSH    DPH
   \   000048   85..82       MOV     DPL,?V0 + 2
   \   00004B   85..83       MOV     DPH,?V0 + 3
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   D083         POP     DPH
   \   000051   D082         POP     DPL
   \   000053   F8           MOV     R0,A
   \   000054   E0           MOVX    A,@DPTR
   \   000055   28           ADD     A,R0
   \   000056   C3           CLR     C
   \   000057   33           RLC     A
   \   000058   240C         ADD     A,#0xc
   \   00005A   F9           MOV     R1,A
    799            }
    800            else
    801            {
    802              len = 1 + 2 + 1; // Status + desc length
    803            }
    804            if ( len >= ZDP_BUF_SZ-1 )
   \   00005B   C3           CLR     C
   \   00005C   944F         SUBB    A,#0x4f
   \   00005E   4007         JC      ??ZDP_SimpleDescMsg_1
    805            {
    806              return afStatus_MEM_FAIL;
   \   000060   7910         MOV     R1,#0x10
   \   000062   02....       LJMP    ??ZDP_SimpleDescMsg_2 & 0xFFFF
    807            }
   \                     ??ZDP_SimpleDescMsg_0:
   \   000065   7904         MOV     R1,#0x4
    808          
    809            *pBuf++ = Status;
   \                     ??ZDP_SimpleDescMsg_1:
   \   000067   85..82       MOV     DPL,?XSP + 0
   \   00006A   85..83       MOV     DPH,?XSP + 1
   \   00006D   12....       LCALL   ??Subroutine116_0 & 0xFFFF
    810          
    811            *pBuf++ = LO_UINT16( ZDAppNwkAddr.addr.shortAddr );
   \                     ??CrossCallReturnLabel_240:
   \   000070   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000073   12....       LCALL   ??Subroutine118_0 & 0xFFFF
    812            *pBuf++ = HI_UINT16( ZDAppNwkAddr.addr.shortAddr );
   \                     ??CrossCallReturnLabel_249:
   \   000076   90....       MOV     DPTR,#ZDAppNwkAddr + 1
   \   000079   12....       LCALL   ??Subroutine115_0 & 0xFFFF
    813          
    814            if ( len > 4 )
   \                     ??CrossCallReturnLabel_235:
   \   00007C   E9           MOV     A,R1
   \   00007D   C3           CLR     C
   \   00007E   9405         SUBB    A,#0x5
   \   000080   5003         JNC     $+5
   \   000082   02....       LJMP    ??ZDP_SimpleDescMsg_3 & 0xFFFF
    815            {
    816              *pBuf++ = len - 4;   // Simple descriptor length
   \   000085   74FC         MOV     A,#-0x4
   \   000087   29           ADD     A,R1
   \   000088   F0           MOVX    @DPTR,A
   \   000089   A3           INC     DPTR
   \   00008A   0A           INC     R2
   \   00008B   0A           INC     R2
   \   00008C   AB83         MOV     R3,DPH
    817          
    818              *pBuf++ = pSimpleDesc->EndPoint;
   \   00008E   8C82         MOV     DPL,R4
   \   000090   8D83         MOV     DPH,R5
   \   000092   12....       LCALL   ??Subroutine118_0 & 0xFFFF
    819              *pBuf++ = LO_UINT16( pSimpleDesc->AppProfId );
   \                     ??CrossCallReturnLabel_250:
   \   000095   8C82         MOV     DPL,R4
   \   000097   8D83         MOV     DPH,R5
   \   000099   A3           INC     DPTR
   \   00009A   AE82         MOV     R6,DPL
   \   00009C   AF83         MOV     R7,DPH
   \   00009E   12....       LCALL   ?Subroutine13 & 0xFFFF
    820              *pBuf++ = HI_UINT16( pSimpleDesc->AppProfId );
    821              *pBuf++ = LO_UINT16( pSimpleDesc->AppDeviceId );
   \                     ??CrossCallReturnLabel_6:
   \   0000A1   EC           MOV     A,R4
   \   0000A2   2403         ADD     A,#0x3
   \   0000A4   FE           MOV     R6,A
   \   0000A5   ED           MOV     A,R5
   \   0000A6   3400         ADDC    A,#0x0
   \   0000A8   FF           MOV     R7,A
   \   0000A9   8E82         MOV     DPL,R6
   \   0000AB   8F83         MOV     DPH,R7
   \   0000AD   12....       LCALL   ?Subroutine13 & 0xFFFF
    822              *pBuf++ = HI_UINT16( pSimpleDesc->AppDeviceId );
    823          
    824              *pBuf++ = (byte)(pSimpleDesc->AppDevVer << 4);
   \                     ??CrossCallReturnLabel_7:
   \   0000B0   8C82         MOV     DPL,R4
   \   0000B2   8D83         MOV     DPH,R5
   \   0000B4   A3           INC     DPTR
   \   0000B5   A3           INC     DPTR
   \   0000B6   A3           INC     DPTR
   \   0000B7   A3           INC     DPTR
   \   0000B8   A3           INC     DPTR
   \   0000B9   E0           MOVX    A,@DPTR
   \   0000BA   C4           SWAP    A
   \   0000BB   54F0         ANL     A,#0xf0
   \   0000BD   8A82         MOV     DPL,R2
   \   0000BF   8B83         MOV     DPH,R3
   \   0000C1   F0           MOVX    @DPTR,A
   \   0000C2   A3           INC     DPTR
   \   0000C3   0A           INC     R2
   \   0000C4   AB83         MOV     R3,DPH
    825          
    826              *pBuf++ = pSimpleDesc->AppNumInClusters;
   \   0000C6   85..82       MOV     DPL,?V0 + 2
   \   0000C9   85..83       MOV     DPH,?V0 + 3
   \   0000CC   12....       LCALL   ??Subroutine118_0 & 0xFFFF
    827              if ( pSimpleDesc->AppNumInClusters )
   \                     ??CrossCallReturnLabel_251:
   \   0000CF   85..82       MOV     DPL,?V0 + 2
   \   0000D2   85..83       MOV     DPH,?V0 + 3
   \   0000D5   E0           MOVX    A,@DPTR
   \   0000D6   6042         JZ      ??ZDP_SimpleDescMsg_4
    828              {
    829                for (i=0; i<pSimpleDesc->AppNumInClusters; ++i)
   \   0000D8   7800         MOV     R0,#0x0
   \   0000DA   EC           MOV     A,R4
   \   0000DB   2407         ADD     A,#0x7
   \   0000DD   F5..         MOV     ?V0 + 6,A
   \   0000DF   ED           MOV     A,R5
   \   0000E0   3400         ADDC    A,#0x0
   \   0000E2   F5..         MOV     ?V0 + 7,A
   \   0000E4   8027         SJMP    ??CrossCallReturnLabel_66
    830                {
    831                  *pBuf++ = LO_UINT16( pSimpleDesc->pAppInClusterList[i] );
   \                     ??ZDP_SimpleDescMsg_5:
   \   0000E6   E8           MOV     A,R0
   \   0000E7   C3           CLR     C
   \   0000E8   33           RLC     A
   \   0000E9   FE           MOV     R6,A
   \   0000EA   E4           CLR     A
   \   0000EB   33           RLC     A
   \   0000EC   FF           MOV     R7,A
   \   0000ED   85..82       MOV     DPL,?V0 + 6
   \   0000F0   85..83       MOV     DPH,?V0 + 7
   \   0000F3   E0           MOVX    A,@DPTR
   \   0000F4   2E           ADD     A,R6
   \   0000F5   F5..         MOV     ?V0 + 0,A
   \   0000F7   A3           INC     DPTR
   \   0000F8   E0           MOVX    A,@DPTR
   \   0000F9   3F           ADDC    A,R7
   \   0000FA   12....       LCALL   ?Subroutine8 & 0xFFFF
    832                  *pBuf++ = HI_UINT16( pSimpleDesc->pAppInClusterList[i] );
   \                     ??CrossCallReturnLabel_244:
   \   0000FD   85..82       MOV     DPL,?V0 + 6
   \   000100   85..83       MOV     DPH,?V0 + 7
   \   000103   E0           MOVX    A,@DPTR
   \   000104   2E           ADD     A,R6
   \   000105   F5..         MOV     ?V0 + 0,A
   \   000107   A3           INC     DPTR
   \   000108   E0           MOVX    A,@DPTR
   \   000109   3F           ADDC    A,R7
   \   00010A   12....       LCALL   ?Subroutine39 & 0xFFFF
    833                }
   \                     ??CrossCallReturnLabel_66:
   \   00010D   85..82       MOV     DPL,?V0 + 2
   \   000110   85..83       MOV     DPH,?V0 + 3
   \   000113   E0           MOVX    A,@DPTR
   \   000114   FE           MOV     R6,A
   \   000115   E8           MOV     A,R0
   \   000116   C3           CLR     C
   \   000117   9E           SUBB    A,R6
   \   000118   40CC         JC      ??ZDP_SimpleDescMsg_5
    834              }
    835          
    836              *pBuf++ = pSimpleDesc->AppNumOutClusters;
   \                     ??ZDP_SimpleDescMsg_4:
   \   00011A   85..82       MOV     DPL,?V0 + 4
   \   00011D   85..83       MOV     DPH,?V0 + 5
   \   000120   12....       LCALL   ??Subroutine116_0 & 0xFFFF
    837              if ( pSimpleDesc->AppNumOutClusters )
   \                     ??CrossCallReturnLabel_241:
   \   000123   85..82       MOV     DPL,?V0 + 4
   \   000126   85..83       MOV     DPH,?V0 + 5
   \   000129   E0           MOVX    A,@DPTR
   \   00012A   6042         JZ      ??ZDP_SimpleDescMsg_6
    838              {
    839                for (i=0; i<pSimpleDesc->AppNumOutClusters; ++i)
   \   00012C   7800         MOV     R0,#0x0
   \   00012E   EC           MOV     A,R4
   \   00012F   240A         ADD     A,#0xa
   \   000131   FC           MOV     R4,A
   \   000132   ED           MOV     A,R5
   \   000133   3400         ADDC    A,#0x0
   \   000135   FD           MOV     R5,A
   \   000136   EC           MOV     A,R4
   \   000137   FE           MOV     R6,A
   \   000138   ED           MOV     A,R5
   \   000139   FF           MOV     R7,A
   \                     ??ZDP_SimpleDescMsg_7:
   \   00013A   85..82       MOV     DPL,?V0 + 4
   \   00013D   85..83       MOV     DPH,?V0 + 5
   \   000140   E0           MOVX    A,@DPTR
   \   000141   FC           MOV     R4,A
   \   000142   E8           MOV     A,R0
   \   000143   C3           CLR     C
   \   000144   9C           SUBB    A,R4
   \   000145   5027         JNC     ??ZDP_SimpleDescMsg_6
    840                {
    841                  *pBuf++ = LO_UINT16( pSimpleDesc->pAppOutClusterList[i] );
   \   000147   E8           MOV     A,R0
   \   000148   C3           CLR     C
   \   000149   33           RLC     A
   \   00014A   FC           MOV     R4,A
   \   00014B   E4           CLR     A
   \   00014C   33           RLC     A
   \   00014D   FD           MOV     R5,A
   \   00014E   8E82         MOV     DPL,R6
   \   000150   8F83         MOV     DPH,R7
   \   000152   E0           MOVX    A,@DPTR
   \   000153   2C           ADD     A,R4
   \   000154   F5..         MOV     ?V0 + 0,A
   \   000156   A3           INC     DPTR
   \   000157   E0           MOVX    A,@DPTR
   \   000158   3D           ADDC    A,R5
   \   000159   12....       LCALL   ?Subroutine8 & 0xFFFF
    842                  *pBuf++ = HI_UINT16( pSimpleDesc->pAppOutClusterList[i] );
   \                     ??CrossCallReturnLabel_245:
   \   00015C   8E82         MOV     DPL,R6
   \   00015E   8F83         MOV     DPH,R7
   \   000160   E0           MOVX    A,@DPTR
   \   000161   2C           ADD     A,R4
   \   000162   F5..         MOV     ?V0 + 0,A
   \   000164   A3           INC     DPTR
   \   000165   E0           MOVX    A,@DPTR
   \   000166   3D           ADDC    A,R5
   \   000167   12....       LCALL   ?Subroutine39 & 0xFFFF
    843                }
    844              }
    845            }
   \                     ??CrossCallReturnLabel_67:
   \   00016A   80CE         SJMP    ??ZDP_SimpleDescMsg_7
    846          
    847            else
    848            {
    849              *pBuf = 0; // Description Length = 0;
   \                     ??ZDP_SimpleDescMsg_3:
   \   00016C   E4           CLR     A
   \   00016D   F0           MOVX    @DPTR,A
    850            }
    851          
    852            return fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), Simple_Desc_rsp, len );
   \                     ??ZDP_SimpleDescMsg_6:
   \   00016E                ; Setup parameters for call to function fillAndSend
   \   00016E   75..04       MOV     ?V0 + 0,#0x4
   \   000171   75..80       MOV     ?V0 + 1,#-0x80
   \   000174   78..         MOV     R0,#?V0 + 0
   \   000176   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000179   7403         MOV     A,#0x3
   \   00017B   12....       LCALL   ?XSTACK_DISP0_8
   \   00017E   E0           MOVX    A,@DPTR
   \   00017F   2402         ADD     A,#0x2
   \   000181   FC           MOV     R4,A
   \   000182   A3           INC     DPTR
   \   000183   E0           MOVX    A,@DPTR
   \   000184   3400         ADDC    A,#0x0
   \   000186   FD           MOV     R5,A
   \   000187   7403         MOV     A,#0x3
   \   000189   12....       LCALL   ?XSTACK_DISP0_8
   \   00018C   E0           MOVX    A,@DPTR
   \   00018D   240F         ADD     A,#0xf
   \   00018F   FA           MOV     R2,A
   \   000190   A3           INC     DPTR
   \   000191   E0           MOVX    A,@DPTR
   \   000192   3400         ADDC    A,#0x0
   \   000194   FB           MOV     R3,A
   \   000195   12....       LCALL   ??Subroutine96_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_145:
   \   000198   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??ZDP_SimpleDescMsg_2:
   \   00019B   02....       LJMP    ?Subroutine3 & 0xFFFF
    853          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   85..82       MOV     DPL,?V0 + 0
   \   000003   F583         MOV     DPH,A
   \   000005   12....       LCALL   ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_260:
   \   000008   08           INC     R0
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   12....       LCALL   ??Subroutine94_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_256:
   \   000003   8E82         MOV     DPL,R6
   \   000005   8F83         MOV     DPH,R7
   \   000007   12....       LCALL   ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_259:
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine69:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine94_0
   \   000001                ; // Fall through to label ??Subroutine94_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7403         MOV     A,#0x3
   \   000002                REQUIRE ??Subroutine100_0
   \   000002                ; // Fall through to label ??Subroutine100_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine100_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine101_0
   \   000003                ; // Fall through to label ??Subroutine101_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine115_0:
   \   000000   12....       LCALL   ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_247:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine74:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   85..82       MOV     DPL,?V0 + 0
   \   000003   F583         MOV     DPH,A
   \   000005                REQUIRE ??Subroutine116_0
   \   000005                ; // Fall through to label ??Subroutine116_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine116_0:
   \   000000   12....       LCALL   ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_248:
   \   000003   AA82         MOV     R2,DPL
   \   000005   AB83         MOV     R3,DPH
   \   000007   22           RET
    854          
    855          /*********************************************************************
    856           * @fn          ZDP_EPRsp
    857           *
    858           * @brief       This builds and send an endpoint list. Used in
    859           *              Active_EP_rsp and Match_Desc_Rsp
    860           *              message.  This function sends unicast message to the
    861           *              requesting device.
    862           *
    863           * @param       MsgType - either Active_EP_rsp or Match_Desc_Rsp
    864           * @param       dstAddr - destination address
    865           * @param       Status - message status (ZDP_SUCCESS or other)
    866           * @param       nwkAddr - Device's short address that this response describes
    867           * @param       Count - number of endpoint/interfaces in list
    868           * @param       pEPIntfList - Array of Endpoint/Interfaces
    869           * @param       SecurityEnable - Security Options
    870           *
    871           * @return      afStatus_t
    872           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    873          afStatus_t ZDP_EPRsp( uint16 MsgType, byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_EPRsp:
    874                                  byte Status, uint16 nwkAddr, byte Count,
    875                                  uint8 *pEPList,
    876                                  byte SecurityEnable )
    877          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   EA           MOV     A,R2
   \   000013   FE           MOV     R6,A
   \   000014   EB           MOV     A,R3
   \   000015   FF           MOV     R7,A
   \   000016   8C..         MOV     ?V0 + 6,R4
   \   000018   8D..         MOV     ?V0 + 7,R5
   \   00001A   7411         MOV     A,#0x11
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F8           MOV     R0,A
   \   000021   7412         MOV     A,#0x12
   \   000023   12....       LCALL   ?XSTACK_DISP0_8
   \   000026   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   000029   7414         MOV     A,#0x14
   \   00002B   12....       LCALL   ?XSTACK_DISP0_8
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   F9           MOV     R1,A
   \   000030   7415         MOV     A,#0x15
   \   000032   12....       LCALL   ?XSTACK_DISP0_8
   \   000035   E0           MOVX    A,@DPTR
   \   000036   F5..         MOV     ?V0 + 0,A
   \   000038   A3           INC     DPTR
   \   000039   12....       LCALL   ?Subroutine32 & 0xFFFF
    878            uint8 *pBuf = ZDP_TmpBuf;
    879            byte len = 1 + 2 + 1;  // Status + nwkAddr + endpoint/interface count.
   \                     ??CrossCallReturnLabel_48:
   \   00003C   75..04       MOV     ?V0 + 4,#0x4
    880            byte txOptions;
    881          
    882            (void)SecurityEnable;  // Intentionally unreferenced parameter
    883            
    884            if ( MsgType == Match_Desc_rsp )
   \   00003F   7406         MOV     A,#0x6
   \   000041   6E           XRL     A,R6
   \   000042   7003         JNZ     ??ZDP_EPRsp_0
   \   000044   7480         MOV     A,#-0x80
   \   000046   6F           XRL     A,R7
   \                     ??ZDP_EPRsp_0:
   \   000047   7005         JNZ     ??ZDP_EPRsp_1
    885              txOptions = AF_MSG_ACK_REQUEST;
   \   000049   75..10       MOV     ?V0 + 3,#0x10
   \   00004C   8003         SJMP    ??ZDP_EPRsp_2
    886            else
    887              txOptions = 0;
   \                     ??ZDP_EPRsp_1:
   \   00004E   75..00       MOV     ?V0 + 3,#0x0
    888          
    889              *pBuf++ = Status;
   \                     ??ZDP_EPRsp_2:
   \   000051   E8           MOV     A,R0
   \   000052   8A82         MOV     DPL,R2
   \   000054   8B83         MOV     DPH,R3
   \   000056   12....       LCALL   ??Subroutine92_0 & 0xFFFF
    890            *pBuf++ = LO_UINT16( nwkAddr );
    891            *pBuf++ = HI_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_122:
   \   000059   F0           MOVX    @DPTR,A
   \   00005A   A3           INC     DPTR
    892          
    893            *pBuf++ = Count;   // Endpoint/Interface count
   \   00005B   E9           MOV     A,R1
   \   00005C   12....       LCALL   ??Subroutine114_0 & 0xFFFF
    894          
    895            if ( Count )
   \                     ??CrossCallReturnLabel_231:
   \   00005F   6017         JZ      ??ZDP_EPRsp_3
    896            {
    897              len += Count;
   \   000061   7404         MOV     A,#0x4
   \   000063   29           ADD     A,R1
   \   000064   F5..         MOV     ?V0 + 4,A
    898              osal_memcpy( pBuf, pEPList, Count );
   \   000066                ; Setup parameters for call to function osal_memcpy
   \   000066   75..00       MOV     ?V0 + 2,#0x0
   \   000069   78..         MOV     R0,#?V0 + 0
   \   00006B   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00006E   89..         MOV     ?V0 + 0,R1
   \   000070   AC..         MOV     R4,?V0 + 0
   \   000072   12....       LCALL   ?Subroutine80 & 0xFFFF
    899            }
   \                     ??CrossCallReturnLabel_262:
   \   000075   12....       LCALL   ?DEALLOC_XSTACK8
    900          
    901            FillAndSendTxOptions( &TransSeq, dstAddr, MsgType, len, txOptions );
   \                     ??ZDP_EPRsp_3:
   \   000078   E5..         MOV     A,?V0 + 3
   \   00007A   90....       MOV     DPTR,#ZDP_TxOptions
   \   00007D   F0           MOVX    @DPTR,A
   \   00007E                ; Setup parameters for call to function fillAndSend
   \   00007E   8E..         MOV     ?V0 + 0,R6
   \   000080   8F..         MOV     ?V0 + 1,R7
   \   000082   78..         MOV     R0,#?V0 + 0
   \   000084   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000087   A9..         MOV     R1,?V0 + 4
   \   000089   AC..         MOV     R4,?V0 + 6
   \   00008B   AD..         MOV     R5,?V0 + 7
   \   00008D   7402         MOV     A,#0x2
   \   00008F   12....       LCALL   ?XSTACK_DISP0_8
   \   000092   12....       LCALL   ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_128:
   \   000095   12....       LCALL   ?DEALLOC_XSTACK8
   \   000098   90....       MOV     DPTR,#ZDP_TxOptions
   \   00009B   E4           CLR     A
   \   00009C   F0           MOVX    @DPTR,A
   \   00009D   04           INC     A
   \   00009E   02....       LJMP    ??Subroutine100_0 & 0xFFFF
    902          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine64:
   \   000000   AA82         MOV     R2,DPL
   \   000002   AB83         MOV     R3,DPH
   \   000004                REQUIRE ??Subroutine96_0
   \   000004                ; // Fall through to label ??Subroutine96_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 1,A
   \   000003                ; Setup parameters for call to function sAddrExtCpy
   \   000003   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000006   E0           MOVX    A,@DPTR
   \   000007   FA           MOV     R2,A
   \   000008   A3           INC     DPTR
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   FB           MOV     R3,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine80:
   \   000000   7D00         MOV     R5,#0x0
   \   000002                REQUIRE ??Subroutine119_0
   \   000002                ; // Fall through to label ??Subroutine119_0
    903          
    904          /*********************************************************************
    905           * @fn          ZDP_UserDescRsp
    906           *
    907           * @brief       Build and send the User Decriptor Response.
    908           *
    909           *
    910           * @param       dstAddr - destination address
    911           * @param       nwkAddrOfInterest -
    912           * @param       userDesc -
    913           * @param       SecurityEnable - Security Options
    914           *
    915           * @return      ZStatus_t
    916           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    917          ZStatus_t ZDP_UserDescRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_UserDescRsp:
    918                          uint16 nwkAddrOfInterest, UserDescriptorFormat_t *userDesc,
    919                          byte SecurityEnable )
    920          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   8A..         MOV     ?V0 + 6,R2
   \   000014   8B..         MOV     ?V0 + 7,R3
   \   000016   7411         MOV     A,#0x11
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   12....       LCALL   ?Subroutine18 & 0xFFFF
    921            uint8 *pBuf = ZDP_TmpBuf;
   \                     ??CrossCallReturnLabel_23:
   \   00001E   12....       LCALL   ?Subroutine44 & 0xFFFF
    922            byte len = 1 + 2 + 1;  // Status + nwkAddr + descriptor length.
    923          
    924            (void)SecurityEnable;  // Intentionally unreferenced parameter
    925            
    926            len += userDesc->len;
   \                     ??CrossCallReturnLabel_274:
   \   000021   85..82       MOV     DPL,?V0 + 4
   \   000024   85..83       MOV     DPH,?V0 + 5
   \   000027   E0           MOVX    A,@DPTR
   \   000028   2404         ADD     A,#0x4
   \   00002A   FF           MOV     R7,A
    927          
    928            *pBuf++ = ZSUCCESS;
   \   00002B   12....       LCALL   ?Subroutine51 & 0xFFFF
    929          
    930            *pBuf++ = LO_UINT16( nwkAddrOfInterest );
    931            *pBuf++ = HI_UINT16( nwkAddrOfInterest );
    932          
    933            *pBuf++ = userDesc->len;
   \                     ??CrossCallReturnLabel_229:
   \   00002E   85..82       MOV     DPL,?V0 + 4
   \   000031   85..83       MOV     DPH,?V0 + 5
   \   000034   12....       LCALL   ??Subroutine118_0 & 0xFFFF
    934            osal_memcpy( pBuf, userDesc->desc, userDesc->len );
   \                     ??CrossCallReturnLabel_252:
   \   000037                ; Setup parameters for call to function osal_memcpy
   \   000037   85..82       MOV     DPL,?V0 + 4
   \   00003A   85..83       MOV     DPH,?V0 + 5
   \   00003D   A3           INC     DPTR
   \   00003E   AC82         MOV     R4,DPL
   \   000040   AD83         MOV     R5,DPH
   \   000042   8C..         MOV     ?V0 + 0,R4
   \   000044   8D..         MOV     ?V0 + 1,R5
   \   000046   75..00       MOV     ?V0 + 2,#0x0
   \   000049   78..         MOV     R0,#?V0 + 0
   \   00004B   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00004E   85..82       MOV     DPL,?V0 + 4
   \   000051   85..83       MOV     DPH,?V0 + 5
   \   000054   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   000057   12....       LCALL   ?DEALLOC_XSTACK8
    935          
    936            return (ZStatus_t)fillAndSend( &TransSeq, dstAddr, User_Desc_rsp, len );
   \   00005A                ; Setup parameters for call to function fillAndSend
   \   00005A   75..11       MOV     ?V0 + 0,#0x11
   \   00005D   75..80       MOV     ?V0 + 1,#-0x80
   \   000060   78..         MOV     R0,#?V0 + 0
   \   000062   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000065   EF           MOV     A,R7
   \   000066   F9           MOV     R1,A
   \   000067   AC..         MOV     R4,?V0 + 6
   \   000069   AD..         MOV     R5,?V0 + 7
   \   00006B   7402         MOV     A,#0x2
   \   00006D   12....       LCALL   ?XSTACK_DISP0_8
   \   000070   12....       LCALL   ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_129:
   \   000073   12....       LCALL   ?DEALLOC_XSTACK8
   \   000076   7401         MOV     A,#0x1
   \   000078   02....       LJMP    ??Subroutine100_0 & 0xFFFF
    937          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   12....       LCALL   ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_263:
   \   000005   22           RET
    938          
    939          /*********************************************************************
    940           * @fn          ZDP_ServerDiscRsp
    941           *
    942           * @brief       Build and send the Server_Discovery_rsp response.
    943           *
    944           * @param       transID - Transaction sequence number of request.
    945           * @param       dstAddr - Network Destination Address.
    946           * @param       status - Status of response to request.
    947           * @param       aoi - Network Address of Interest of request.
    948           * @param       serverMask - Bit map of service(s) being sought.
    949           * @param       SecurityEnable - Security Options
    950           *
    951           * @return      ZStatus_t
    952           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    953          ZStatus_t ZDP_ServerDiscRsp( byte transID, zAddrType_t *dstAddr, byte status,
   \                     ZDP_ServerDiscRsp:
    954                                     uint16 aoi, uint16 serverMask, byte SecurityEnable )
    955          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   EC           MOV     A,R4
   \   000013   FE           MOV     R6,A
   \   000014   740D         MOV     A,#0xd
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   12....       LCALL   ?Subroutine36 & 0xFFFF
    956            const byte len = 1  + 2;  // status + aoi + mask.
    957            uint8 *pBuf = ZDP_TmpBuf;
   \                     ??CrossCallReturnLabel_61:
   \   00001C   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   00001F   8C82         MOV     DPL,R4
   \   000021   8D83         MOV     DPH,R5
    958            ZStatus_t stat;
    959            
    960            // Intentionally unreferenced parameters
    961            (void)aoi;
    962            (void)SecurityEnable;
    963            
    964            *pBuf++ = status;
   \   000023   EE           MOV     A,R6
   \   000024   F0           MOVX    @DPTR,A
   \   000025   A3           INC     DPTR
    965          
    966            *pBuf++ = LO_UINT16( serverMask );
   \   000026   12....       LCALL   ??Subroutine122_0 & 0xFFFF
    967            *pBuf++ = HI_UINT16( serverMask );
    968          
    969            ZDP_TxOptions = AF_MSG_ACK_REQUEST;
   \                     ??CrossCallReturnLabel_284:
   \   000029   90....       MOV     DPTR,#ZDP_TxOptions
   \   00002C   7410         MOV     A,#0x10
   \   00002E   F0           MOVX    @DPTR,A
    970            stat = fillAndSend( &transID, dstAddr, Server_Discovery_rsp, len );
   \   00002F                ; Setup parameters for call to function fillAndSend
   \   00002F   75..15       MOV     ?V0 + 0,#0x15
   \   000032   75..80       MOV     ?V0 + 1,#-0x80
   \   000035   78..         MOV     R0,#?V0 + 0
   \   000037   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003A   7903         MOV     R1,#0x3
   \   00003C   EA           MOV     A,R2
   \   00003D   FC           MOV     R4,A
   \   00003E   EB           MOV     A,R3
   \   00003F   FD           MOV     R5,A
   \   000040   7402         MOV     A,#0x2
   \   000042   12....       LCALL   ?XSTACK_DISP0_8
   \   000045   12....       LCALL   ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_130:
   \   000048   12....       LCALL   ?DEALLOC_XSTACK8
    971            ZDP_TxOptions = AF_TX_OPTIONS_NONE;
   \   00004B   90....       MOV     DPTR,#ZDP_TxOptions
   \   00004E   E4           CLR     A
   \   00004F   F0           MOVX    @DPTR,A
    972            
    973            return ( stat );
   \   000050   04           INC     A
   \   000051   02....       LJMP    ??Subroutine89_0 & 0xFFFF
    974          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine122_0:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET
    975          
    976          /*********************************************************************
    977           * @fn          ZDP_GenericRsp
    978           *
    979           * @brief       Sends a response message with only the parameter status
    980           *              byte and the addr of interest for data.
    981           *              This function sends unicast message to the
    982           *              requesting device.
    983           *
    984           * @param       dstAddr - destination address
    985           * @param       status  - generic status for response
    986           * @param       aoi     - address of interest
    987           * @param       dstAddr - destination address
    988           * @param       rspId   - response cluster ID
    989           * @param       SecurityEnable - Security Options
    990           *
    991           * @return      afStatus_t
    992           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    993          afStatus_t ZDP_GenericRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_GenericRsp:
    994                               byte status, uint16 aoi, uint16 rspID, byte SecurityEnable )
    995          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   EC           MOV     A,R4
   \   000013   FE           MOV     R6,A
   \   000014   740B         MOV     A,#0xb
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   12....       LCALL   ??Subroutine124_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_297:
   \   00001C   740D         MOV     A,#0xd
   \   00001E   12....       LCALL   ?XSTACK_DISP0_8
   \   000021   12....       LCALL   ??Subroutine98_0 & 0xFFFF
    996            uint8 len;
    997          
    998            (void)SecurityEnable;  // Intentionally unreferenced parameter
    999            
   1000            ZDP_TmpBuf[0] = status;
   \                     ??CrossCallReturnLabel_158:
   \   000024   12....       LCALL   ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   000027   EE           MOV     A,R6
   \   000028   F0           MOVX    @DPTR,A
   1001            ZDP_TmpBuf[1] = LO_UINT16( aoi );
   \   000029   12....       LCALL   ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   00002C   A3           INC     DPTR
   \   00002D   E8           MOV     A,R0
   \   00002E   F0           MOVX    @DPTR,A
   1002            ZDP_TmpBuf[2] = HI_UINT16( aoi );
   \   00002F   12....       LCALL   ?Subroutine29 & 0xFFFF
   1003          
   1004            // Length byte
   1005            ZDP_TmpBuf[3] = 0;
   \                     ??CrossCallReturnLabel_47:
   \   000032   12....       LCALL   ??Subroutine91_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_115:
   \   000035   A3           INC     DPTR
   \   000036   A3           INC     DPTR
   \   000037   E4           CLR     A
   \   000038   F0           MOVX    @DPTR,A
   1006            len = 4;
   1007          
   1008            return fillAndSend( &TransSeq, dstAddr, rspID, len );
   \   000039                ; Setup parameters for call to function fillAndSend
   \   000039   78..         MOV     R0,#?V0 + 0
   \   00003B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003E   7904         MOV     R1,#0x4
   \   000040   EA           MOV     A,R2
   \   000041   FC           MOV     R4,A
   \   000042   EB           MOV     A,R3
   \   000043   FD           MOV     R5,A
   \   000044   7402         MOV     A,#0x2
   \   000046   12....       LCALL   ?XSTACK_DISP0_8
   \   000049   12....       LCALL   ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_131:
   \   00004C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00004F   7401         MOV     A,#0x1
   \   000051   02....       LJMP    ??Subroutine89_0 & 0xFFFF
   1009          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FC           MOV     R4,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F583         MOV     DPH,A
   \   000009   8C82         MOV     DPL,R4
   \   00000B   22           RET
   1010          
   1011          /*********************************************************************
   1012           * Binding
   1013           */
   1014          /*********************************************************************
   1015           * @fn          ZDP_EndDeviceBindReq
   1016           *
   1017           * @brief       This builds and sends a End_Device_Bind_req message.
   1018           *              This function sends a unicast message.
   1019           *
   1020           * @param       dstAddr - destination address
   1021           * @param       LocalCoordinator - short address of local coordinator
   1022           * @param       epIntf - Endpoint/Interface of Simple Desc
   1023           * @param       ProfileID - Profile ID
   1024           *
   1025           *   The Input cluster list is the opposite of what you would think.
   1026           *   This is the output cluster list of this device
   1027           * @param       NumInClusters - number of input clusters
   1028           * @param       InClusterList - input cluster ID list
   1029           *
   1030           *   The Output cluster list is the opposite of what you would think.
   1031           *   This is the input cluster list of this device
   1032           * @param       NumOutClusters - number of output clusters
   1033           * @param       OutClusterList - output cluster ID list
   1034           *
   1035           * @param       SecurityEnable - Security Options
   1036           *
   1037           * @return      afStatus_t
   1038           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1039          afStatus_t ZDP_EndDeviceBindReq( zAddrType_t *dstAddr,
   \                     ZDP_EndDeviceBindReq:
   1040                                           uint16 LocalCoordinator,
   1041                                           byte endPoint,
   1042                                           uint16 ProfileID,
   1043                                           byte NumInClusters, cId_t *InClusterList,
   1044                                           byte NumOutClusters, cId_t *OutClusterList,
   1045                                           byte SecurityEnable )
   1046          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7402         MOV     A,#0x2
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   12....       LCALL   ??Subroutine108_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_205:
   \   000012   7401         MOV     A,#0x1
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   E9           MOV     A,R1
   \   000018   F0           MOVX    @DPTR,A
   \   000019   EC           MOV     A,R4
   \   00001A   FE           MOV     R6,A
   \   00001B   ED           MOV     A,R5
   \   00001C   FF           MOV     R7,A
   \   00001D   7414         MOV     A,#0x14
   \   00001F   12....       LCALL   ?XSTACK_DISP0_8
   \   000022   12....       LCALL   ??Subroutine98_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_159:
   \   000025   7416         MOV     A,#0x16
   \   000027   12....       LCALL   ?XSTACK_DISP0_8
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   F5..         MOV     ?V0 + 6,A
   \   00002D   7419         MOV     A,#0x19
   \   00002F   12....       LCALL   ?XSTACK_DISP0_8
   \   000032   E0           MOVX    A,@DPTR
   \   000033   F5..         MOV     ?V0 + 7,A
   1047            uint8 *pBuf = ZDP_TmpBuf;
   \   000035   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000038   12....       LCALL   ?Subroutine73 & 0xFFFF
   1048            uint8 i, len;
   1049            uint8 *ieeeAddr;
   1050          
   1051            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1052            
   1053            // LocalCoordinator + SrcExtAddr + ep + ProfileID +  NumInClusters + NumOutClusters.
   1054            len = 2 + Z_EXTADDR_LEN + 1 + 2 + 1 + 1;
   1055            len += (NumInClusters + NumOutClusters) * sizeof ( uint16 );
   \                     ??CrossCallReturnLabel_108:
   \   00003B   E5..         MOV     A,?V0 + 6
   \   00003D   25..         ADD     A,?V0 + 7
   \   00003F   C3           CLR     C
   \   000040   33           RLC     A
   \   000041   240F         ADD     A,#0xf
   \   000043   85..82       MOV     DPL,?XSP + 0
   \   000046   85..83       MOV     DPH,?XSP + 1
   \   000049   F0           MOVX    @DPTR,A
   1056          
   1057            if ( len >= ZDP_BUF_SZ-1 )
   \   00004A   C3           CLR     C
   \   00004B   944F         SUBB    A,#0x4f
   \   00004D   4005         JC      ??ZDP_EndDeviceBindReq_0
   1058            {
   1059              return afStatus_MEM_FAIL;
   \   00004F   7910         MOV     R1,#0x10
   \   000051   02....       LJMP    ??ZDP_EndDeviceBindReq_1 & 0xFFFF
   1060            }
   1061          
   1062            if ( LocalCoordinator != NLME_GetShortAddr() )
   \                     ??ZDP_EndDeviceBindReq_0:
   \   000054                ; Setup parameters for call to function NLME_GetShortAddr
   \   000054   12....       LCALL   ??NLME_GetShortAddr?relay
   \   000057   EA           MOV     A,R2
   \   000058   6E           XRL     A,R6
   \   000059   7002         JNZ     ??ZDP_EndDeviceBindReq_2
   \   00005B   EB           MOV     A,R3
   \   00005C   6F           XRL     A,R7
   \                     ??ZDP_EndDeviceBindReq_2:
   \   00005D   6005         JZ      ??ZDP_EndDeviceBindReq_3
   1063            {
   1064              return afStatus_INVALID_PARAMETER;
   \   00005F   7902         MOV     R1,#0x2
   \   000061   02....       LJMP    ??ZDP_EndDeviceBindReq_1 & 0xFFFF
   1065            }
   1066          
   1067            *pBuf++ = LO_UINT16( LocalCoordinator );
   \                     ??ZDP_EndDeviceBindReq_3:
   \   000064   EE           MOV     A,R6
   \   000065   85..82       MOV     DPL,?V0 + 2
   \   000068   85..83       MOV     DPH,?V0 + 3
   \   00006B   F0           MOVX    @DPTR,A
   \   00006C   A3           INC     DPTR
   1068            *pBuf++ = HI_UINT16( LocalCoordinator );
   \   00006D   EF           MOV     A,R7
   \   00006E   12....       LCALL   ?Subroutine63 & 0xFFFF
   1069          
   1070            ieeeAddr = NLME_GetExtAddr();
   1071            pBuf = osal_cpyExtAddr( pBuf, ieeeAddr );
   \                     ??CrossCallReturnLabel_101:
   \   000071                ; Setup parameters for call to function sAddrExtCpy
   \   000071                ; Setup parameters for call to function NLME_GetExtAddr
   \   000071   12....       LCALL   ??NLME_GetExtAddr?relay
   \   000074   EA           MOV     A,R2
   \   000075   FC           MOV     R4,A
   \   000076   EB           MOV     A,R3
   \   000077   FD           MOV     R5,A
   \   000078   AA..         MOV     R2,?V0 + 2
   \   00007A   AB..         MOV     R3,?V0 + 3
   \   00007C   12....       LCALL   ??sAddrExtCpy?relay
   1072          
   1073            *pBuf++ = endPoint;
   \   00007F   7401         MOV     A,#0x1
   \   000081   12....       LCALL   ?XSTACK_DISP0_8
   \   000084   12....       LCALL   ??Subroutine115_0 & 0xFFFF
   1074          
   1075            *pBuf++ = LO_UINT16( ProfileID );   // Profile ID
   \                     ??CrossCallReturnLabel_236:
   \   000087   E5..         MOV     A,?V0 + 0
   \   000089   F0           MOVX    @DPTR,A
   \   00008A   A3           INC     DPTR
   1076            *pBuf++ = HI_UINT16( ProfileID );
   \   00008B   E5..         MOV     A,?V0 + 1
   \   00008D   F0           MOVX    @DPTR,A
   \   00008E   A3           INC     DPTR
   1077          
   1078            *pBuf++ = NumInClusters; // Input cluster list
   \   00008F   E5..         MOV     A,?V0 + 6
   \   000091   12....       LCALL   ?Subroutine63 & 0xFFFF
   1079            for ( i = 0; i < NumInClusters; ++i )
   \                     ??CrossCallReturnLabel_102:
   \   000094   7C00         MOV     R4,#0x0
   \   000096   8029         SJMP    ??ZDP_EndDeviceBindReq_4
   1080            {
   1081              *pBuf++ = LO_UINT16(InClusterList[i]);
   \                     ??ZDP_EndDeviceBindReq_5:
   \   000098   EC           MOV     A,R4
   \   000099   C3           CLR     C
   \   00009A   33           RLC     A
   \   00009B   FA           MOV     R2,A
   \   00009C   E4           CLR     A
   \   00009D   33           RLC     A
   \   00009E   FB           MOV     R3,A
   \   00009F   7417         MOV     A,#0x17
   \   0000A1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   2A           ADD     A,R2
   \   0000A6   FA           MOV     R2,A
   \   0000A7   A3           INC     DPTR
   \   0000A8   E0           MOVX    A,@DPTR
   \   0000A9   3B           ADDC    A,R3
   \   0000AA   FB           MOV     R3,A
   \   0000AB   8A82         MOV     DPL,R2
   \   0000AD   8B83         MOV     DPH,R3
   \   0000AF   12....       LCALL   ?Subroutine48 & 0xFFFF
   1082              *pBuf++ = HI_UINT16(InClusterList[i]);
   \                     ??CrossCallReturnLabel_77:
   \   0000B2   8A82         MOV     DPL,R2
   \   0000B4   8B83         MOV     DPH,R3
   \   0000B6   A3           INC     DPTR
   \   0000B7   12....       LCALL   ?Subroutine38 & 0xFFFF
   1083            }
   \                     ??CrossCallReturnLabel_63:
   \   0000BA   8582..       MOV     ?V0 + 2,DPL
   \   0000BD   8583..       MOV     ?V0 + 3,DPH
   \   0000C0   0C           INC     R4
   \                     ??ZDP_EndDeviceBindReq_4:
   \   0000C1   85..82       MOV     DPL,?V0 + 2
   \   0000C4   85..83       MOV     DPH,?V0 + 3
   \   0000C7   A3           INC     DPTR
   \   0000C8   A882         MOV     R0,DPL
   \   0000CA   A983         MOV     R1,DPH
   \   0000CC   EC           MOV     A,R4
   \   0000CD   C3           CLR     C
   \   0000CE   95..         SUBB    A,?V0 + 6
   \   0000D0   40C6         JC      ??ZDP_EndDeviceBindReq_5
   1084          
   1085            *pBuf++ = NumOutClusters; // Output cluster list
   \   0000D2   85..82       MOV     DPL,?V0 + 2
   \   0000D5   85..83       MOV     DPH,?V0 + 3
   \   0000D8   E5..         MOV     A,?V0 + 7
   \   0000DA   F0           MOVX    @DPTR,A
   \   0000DB   88..         MOV     ?V0 + 2,R0
   \   0000DD   89..         MOV     ?V0 + 3,R1
   1086            for ( i = 0; i < NumOutClusters; ++i )
   \   0000DF   7C00         MOV     R4,#0x0
   \   0000E1   8023         SJMP    ??ZDP_EndDeviceBindReq_6
   1087            {
   1088              *pBuf++ = LO_UINT16(OutClusterList[i]);
   \                     ??ZDP_EndDeviceBindReq_7:
   \   0000E3   EC           MOV     A,R4
   \   0000E4   C3           CLR     C
   \   0000E5   33           RLC     A
   \   0000E6   F8           MOV     R0,A
   \   0000E7   E4           CLR     A
   \   0000E8   33           RLC     A
   \   0000E9   F9           MOV     R1,A
   \   0000EA   741A         MOV     A,#0x1a
   \   0000EC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EF   E0           MOVX    A,@DPTR
   \   0000F0   28           ADD     A,R0
   \   0000F1   F8           MOV     R0,A
   \   0000F2   A3           INC     DPTR
   \   0000F3   E0           MOVX    A,@DPTR
   \   0000F4   39           ADDC    A,R1
   \   0000F5   F9           MOV     R1,A
   \   0000F6   8882         MOV     DPL,R0
   \   0000F8   8983         MOV     DPH,R1
   \   0000FA   12....       LCALL   ?Subroutine26 & 0xFFFF
   1089              *pBuf++ = HI_UINT16(OutClusterList[i]);
   \                     ??CrossCallReturnLabel_37:
   \   0000FD   8882         MOV     DPL,R0
   \   0000FF   8983         MOV     DPH,R1
   \   000101   A3           INC     DPTR
   \   000102   12....       LCALL   ?Subroutine26 & 0xFFFF
   1090            }
   \                     ??CrossCallReturnLabel_38:
   \   000105   0C           INC     R4
   \                     ??ZDP_EndDeviceBindReq_6:
   \   000106   EC           MOV     A,R4
   \   000107   C3           CLR     C
   \   000108   95..         SUBB    A,?V0 + 7
   \   00010A   40D7         JC      ??ZDP_EndDeviceBindReq_7
   1091          
   1092            return fillAndSend( &ZDP_TransID, dstAddr, End_Device_Bind_req, len );
   \   00010C                ; Setup parameters for call to function fillAndSend
   \   00010C   75..20       MOV     ?V0 + 0,#0x20
   \   00010F   75..00       MOV     ?V0 + 1,#0x0
   \   000112   78..         MOV     R0,#?V0 + 0
   \   000114   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000117   7402         MOV     A,#0x2
   \   000119   12....       LCALL   ?XSTACK_DISP0_8
   \   00011C   E0           MOVX    A,@DPTR
   \   00011D   F9           MOV     R1,A
   \   00011E   7404         MOV     A,#0x4
   \   000120   12....       LCALL   ?XSTACK_DISP0_8
   \   000123   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000126   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??ZDP_EndDeviceBindReq_1:
   \   000129                REQUIRE ?Subroutine6
   \   000129                ; // Fall through to label ?Subroutine6
   1093          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   7404         MOV     A,#0x4
   \   000002   02....       LJMP    ??Subroutine100_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine63:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   8582..       MOV     ?V0 + 2,DPL
   \   000005   8583..       MOV     ?V0 + 3,DPH
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   12....       LCALL   ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_111:
   \   000003   A3           INC     DPTR
   \   000004   8582..       MOV     ?V0 + 2,DPL
   \   000007   8583..       MOV     ?V0 + 3,DPH
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   12....       LCALL   ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_226:
   \   000003   22           RET
   1094          
   1095          /*********************************************************************
   1096           * @fn          ZDP_BindUnbindReq
   1097           *
   1098           * @brief       This builds and send a Bind_req or Unbind_req message
   1099           *              Depending on the ClusterID. This function
   1100           *              sends a unicast message to the local coordinator.
   1101           *
   1102           * @param       BindOrUnbind - either Bind_req or Unbind_req
   1103           * @param       dstAddr - destination address of the message
   1104           * @param       SourceAddr - source 64 bit address of the binding
   1105           * @param       SrcEPIntf - Source endpoint/interface
   1106           * @param       ClusterID - Binding cluster ID
   1107           * @param       DestinationAddr - destination 64 bit addr of binding
   1108           * @param       DstEPIntf - destination endpoint/interface
   1109           * @param       SecurityEnable - Security Options
   1110           *
   1111           * @return      afStatus_t
   1112           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1113          afStatus_t ZDP_BindUnbindReq( uint16 BindOrUnbind, zAddrType_t *dstAddr,
   \                     ZDP_BindUnbindReq:
   1114                                        uint8 *SourceAddr, byte SrcEndPoint,
   1115                                        cId_t ClusterID,
   1116                                        zAddrType_t *destinationAddr, byte DstEndPoint,
   1117                                        byte SecurityEnable )
   1118          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7401         MOV     A,#0x1
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   EC           MOV     A,R4
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   ED           MOV     A,R5
   \   000013   F0           MOVX    @DPTR,A
   \   000014   E9           MOV     A,R1
   \   000015   85..82       MOV     DPL,?XSP + 0
   \   000018   85..83       MOV     DPH,?XSP + 1
   \   00001B   F0           MOVX    @DPTR,A
   \   00001C   8A..         MOV     ?V0 + 0,R2
   \   00001E   8B..         MOV     ?V0 + 1,R3
   \   000020   7413         MOV     A,#0x13
   \   000022   12....       LCALL   ?XSTACK_DISP0_8
   \   000025   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   000028   7415         MOV     A,#0x15
   \   00002A   12....       LCALL   ?XSTACK_DISP0_8
   \   00002D   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   000030   7417         MOV     A,#0x17
   \   000032   12....       LCALL   ?XSTACK_DISP0_8
   \   000035   12....       LCALL   ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_109:
   \   000038   7419         MOV     A,#0x19
   \   00003A   12....       LCALL   ?XSTACK_DISP0_8
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   F5..         MOV     ?V0 + 7,A
   1119            uint8 *pBuf = ZDP_TmpBuf;
   \   000040   12....       LCALL   ?Subroutine44 & 0xFFFF
   1120            byte len;
   1121          
   1122            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1123            
   1124            // SourceAddr + SrcEPIntf + ClusterID +  addrMode.
   1125            len = Z_EXTADDR_LEN + 1 + sizeof( cId_t ) + sizeof( uint8 );
   \                     ??CrossCallReturnLabel_275:
   \   000043   75..0C       MOV     ?V0 + 6,#0xc
   \   000046   85..82       MOV     DPL,?V0 + 2
   \   000049   85..83       MOV     DPH,?V0 + 3
   \   00004C   A3           INC     DPTR
   \   00004D   A3           INC     DPTR
   \   00004E   A3           INC     DPTR
   \   00004F   A3           INC     DPTR
   \   000050   A3           INC     DPTR
   \   000051   A3           INC     DPTR
   \   000052   A3           INC     DPTR
   \   000053   A3           INC     DPTR
   \   000054   E0           MOVX    A,@DPTR
   \   000055   F8           MOV     R0,A
   \   000056   7403         MOV     A,#0x3
   \   000058   68           XRL     A,R0
   \   000059   7005         JNZ     ??ZDP_BindUnbindReq_0
   1126            if ( destinationAddr->addrMode == Addr64Bit )
   1127              len += Z_EXTADDR_LEN + 1;     // +1 for DstEPIntf
   \   00005B   75..15       MOV     ?V0 + 6,#0x15
   \   00005E   8008         SJMP    ??ZDP_BindUnbindReq_1
   1128            else if ( destinationAddr->addrMode == AddrGroup )
   \                     ??ZDP_BindUnbindReq_0:
   \   000060   7401         MOV     A,#0x1
   \   000062   68           XRL     A,R0
   \   000063   7003         JNZ     ??ZDP_BindUnbindReq_1
   1129              len += sizeof ( uint16 );
   \   000065   75..0E       MOV     ?V0 + 6,#0xe
   1130          
   1131            pBuf = osal_cpyExtAddr( pBuf, SourceAddr );
   \                     ??ZDP_BindUnbindReq_1:
   \   000068                ; Setup parameters for call to function sAddrExtCpy
   \   000068   12....       LCALL   ??sAddrExtCpy?relay
   1132            *pBuf++ = SrcEndPoint;
   \   00006B   12....       LCALL   ?Subroutine41 & 0xFFFF
   1133          
   1134            *pBuf++ = LO_UINT16( ClusterID );
   \                     ??CrossCallReturnLabel_238:
   \   00006E   EE           MOV     A,R6
   \   00006F   F0           MOVX    @DPTR,A
   \   000070   A3           INC     DPTR
   1135          
   1136            *pBuf++ = HI_UINT16( ClusterID );
   \   000071   EF           MOV     A,R7
   \   000072   12....       LCALL   ??Subroutine114_0 & 0xFFFF
   1137            *pBuf++ = destinationAddr->addrMode;
   \                     ??CrossCallReturnLabel_232:
   \   000075   85..82       MOV     DPL,?V0 + 2
   \   000078   85..83       MOV     DPH,?V0 + 3
   \   00007B   A3           INC     DPTR
   \   00007C   A3           INC     DPTR
   \   00007D   A3           INC     DPTR
   \   00007E   A3           INC     DPTR
   \   00007F   A3           INC     DPTR
   \   000080   A3           INC     DPTR
   \   000081   A3           INC     DPTR
   \   000082   A3           INC     DPTR
   \   000083   12....       LCALL   ?Subroutine23 & 0xFFFF
   1138            if ( destinationAddr->addrMode == Addr64Bit )
   \                     ??CrossCallReturnLabel_31:
   \   000086   A3           INC     DPTR
   \   000087   A3           INC     DPTR
   \   000088   A3           INC     DPTR
   \   000089   A3           INC     DPTR
   \   00008A   A3           INC     DPTR
   \   00008B   A3           INC     DPTR
   \   00008C   A3           INC     DPTR
   \   00008D   E0           MOVX    A,@DPTR
   \   00008E   F8           MOV     R0,A
   \   00008F   7403         MOV     A,#0x3
   \   000091   68           XRL     A,R0
   \   000092   700F         JNZ     ??ZDP_BindUnbindReq_2
   1139            {
   1140              pBuf = osal_cpyExtAddr( pBuf, destinationAddr->addr.extAddr );
   1141              *pBuf = DstEndPoint;
   \   000094                ; Setup parameters for call to function sAddrExtCpy
   \   000094   AC..         MOV     R4,?V0 + 2
   \   000096   AD..         MOV     R5,?V0 + 3
   \   000098   12....       LCALL   ??sAddrExtCpy?relay
   \   00009B   8A82         MOV     DPL,R2
   \   00009D   8B83         MOV     DPH,R3
   \   00009F   E5..         MOV     A,?V0 + 7
   \   0000A1   8013         SJMP    ??ZDP_BindUnbindReq_3
   1142            }
   1143            else if ( destinationAddr->addrMode == AddrGroup )
   \                     ??ZDP_BindUnbindReq_2:
   \   0000A3   7401         MOV     A,#0x1
   \   0000A5   68           XRL     A,R0
   \   0000A6   700F         JNZ     ??ZDP_BindUnbindReq_4
   1144            {
   1145              *pBuf++ = LO_UINT16( destinationAddr->addr.shortAddr );
   \   0000A8   85..82       MOV     DPL,?V0 + 2
   \   0000AB   85..83       MOV     DPH,?V0 + 3
   \   0000AE   12....       LCALL   ?Subroutine23 & 0xFFFF
   1146              *pBuf++ = HI_UINT16( destinationAddr->addr.shortAddr );
   1147            }
   \                     ??CrossCallReturnLabel_32:
   \   0000B1   E0           MOVX    A,@DPTR
   \   0000B2   8A82         MOV     DPL,R2
   \   0000B4   8B83         MOV     DPH,R3
   \                     ??ZDP_BindUnbindReq_3:
   \   0000B6   F0           MOVX    @DPTR,A
   1148          
   1149            FillAndSendTxOptions( &ZDP_TransID, dstAddr, BindOrUnbind, len, AF_MSG_ACK_REQUEST );
   \                     ??ZDP_BindUnbindReq_4:
   \   0000B7   90....       MOV     DPTR,#ZDP_TxOptions
   \   0000BA   7410         MOV     A,#0x10
   \   0000BC   F0           MOVX    @DPTR,A
   \   0000BD                ; Setup parameters for call to function fillAndSend
   \   0000BD   78..         MOV     R0,#?V0 + 0
   \   0000BF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C2   A9..         MOV     R1,?V0 + 6
   \   0000C4   7403         MOV     A,#0x3
   \   0000C6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C9   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   0000CC   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000CF   90....       MOV     DPTR,#ZDP_TxOptions
   \   0000D2   E4           CLR     A
   \   0000D3   F0           MOVX    @DPTR,A
   \   0000D4   02....       LJMP    ?Subroutine3 & 0xFFFF
   1150          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   12....       LCALL   ??Subroutine94_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_258:
   \   000003   85..82       MOV     DPL,?V0 + 2
   \   000006   85..83       MOV     DPH,?V0 + 3
   \   000009   A3           INC     DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine115_0
   \   000006                ; // Fall through to label ??Subroutine115_0
   1151          
   1152          /*********************************************************************
   1153           * Network Management
   1154           */
   1155          
   1156          /*********************************************************************
   1157           * @fn          ZDP_MgmtNwkDiscReq
   1158           *
   1159           * @brief       This builds and send a Mgmt_NWK_Disc_req message. This
   1160           *              function sends a unicast message.
   1161           *
   1162           * @param       dstAddr - destination address of the message
   1163           * @param       ScanChannels - 32 bit address bit map
   1164           * @param       StartIndex - Starting index within the reporting network
   1165           *                           list
   1166           * @param       SecurityEnable - Security Options
   1167           *
   1168           * @return      afStatus_t
   1169           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1170          afStatus_t ZDP_MgmtNwkDiscReq( zAddrType_t *dstAddr,
   \                     ZDP_MgmtNwkDiscReq:
   1171                                         uint32 ScanChannels,
   1172                                         byte ScanDuration,
   1173                                         byte StartIndex,
   1174                                         byte SecurityEnable )
   1175          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 4,R2
   \   000007   8B..         MOV     ?V0 + 5,R3
   \   000009   E9           MOV     A,R1
   \   00000A   FF           MOV     R7,A
   \   00000B   EC           MOV     A,R4
   \   00000C   FE           MOV     R6,A
   \   00000D   740E         MOV     A,#0xe
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   78..         MOV     R0,#?V0 + 0
   \   000014   12....       LCALL   ?L_MOV_X
   1176            uint8 *pBuf = ZDP_TmpBuf;
   1177            byte len = sizeof( uint32 )+1+1;  // ScanChannels + ScanDuration + StartIndex.
   1178          
   1179            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1180            
   1181            pBuf = osal_buffer_uint32( pBuf, ScanChannels );
   \   000017                ; Setup parameters for call to function osal_buffer_uint32
   \   000017   78..         MOV     R0,#?V0 + 0
   \   000019   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   00001C   12....       LCALL   ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   00001F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000022   8A82         MOV     DPL,R2
   \   000024   8B83         MOV     DPH,R3
   1182          
   1183            *pBuf++ = ScanDuration;
   \   000026   EF           MOV     A,R7
   \   000027   F0           MOVX    @DPTR,A
   \   000028   A3           INC     DPTR
   1184            *pBuf = StartIndex;
   \   000029   EE           MOV     A,R6
   \   00002A   F0           MOVX    @DPTR,A
   1185          
   1186            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_NWK_Disc_req, len );
   \   00002B                ; Setup parameters for call to function fillAndSend
   \   00002B   75..30       MOV     ?V0 + 0,#0x30
   \   00002E   75..00       MOV     ?V0 + 1,#0x0
   \   000031   78..         MOV     R0,#?V0 + 0
   \   000033   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000036   7906         MOV     R1,#0x6
   \   000038   AC..         MOV     R4,?V0 + 4
   \   00003A   AD..         MOV     R5,?V0 + 5
   \   00003C   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   00003E   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   000040   12....       LCALL   ??Subroutine96_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_146:
   \   000043   02....       LJMP    ?Subroutine0 & 0xFFFF
   1187          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FA           MOV     R2,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   FB           MOV     R3,A
   \   000008   12....       LCALL   ??osal_buffer_uint32?relay
   \   00000B   7404         MOV     A,#0x4
   \   00000D   22           RET
   1188          
   1189          /*********************************************************************
   1190           * @fn          ZDP_MgmtDirectJoinReq
   1191           *
   1192           * @brief       This builds and send a Mgmt_Direct_Join_req message. This
   1193           *              function sends a unicast message.
   1194           *
   1195           * @param       dstAddr - destination address of the message
   1196           * @param       deviceAddr - 64 bit IEEE Address
   1197           * @param       SecurityEnable - Security Options
   1198           *
   1199           * @return      afStatus_t
   1200           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1201          afStatus_t ZDP_MgmtDirectJoinReq( zAddrType_t *dstAddr,
   \                     ZDP_MgmtDirectJoinReq:
   1202                                         uint8 *deviceAddr,
   1203                                         byte capInfo,
   1204                                         byte SecurityEnable )
   1205          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   89..         MOV     ?V0 + 0,R1
   1206            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1207            
   1208            osal_cpyExtAddr( ZDP_TmpBuf, deviceAddr );
   \   00000B                ; Setup parameters for call to function sAddrExtCpy
   \   00000B   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   FA           MOV     R2,A
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   12....       LCALL   ?Subroutine24 & 0xFFFF
   1209            ZDP_TmpBuf[Z_EXTADDR_LEN] = capInfo;
   \                     ??CrossCallReturnLabel_34:
   \   000015   E5..         MOV     A,?V0 + 0
   \   000017   F0           MOVX    @DPTR,A
   1210          
   1211            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_Direct_Join_req, (Z_EXTADDR_LEN + 1) );
   \   000018                ; Setup parameters for call to function fillAndSend
   \   000018   75..35       MOV     ?V0 + 2,#0x35
   \   00001B                REQUIRE ?Subroutine2
   \   00001B                ; // Fall through to label ?Subroutine2
   1212          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   75..00       MOV     ?V0 + 3,#0x0
   \   000003   78..         MOV     R0,#?V0 + 2
   \   000005   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000008   7909         MOV     R1,#0x9
   \   00000A   EE           MOV     A,R6
   \   00000B   FC           MOV     R4,A
   \   00000C   EF           MOV     A,R7
   \   00000D   FD           MOV     R5,A
   \   00000E   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   000010   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   000012   12....       LCALL   ??Subroutine96_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_147:
   \   000015                REQUIRE ??Subroutine95_0
   \   000015                ; // Fall through to label ??Subroutine95_0
   1213          
   1214          /*********************************************************************
   1215           * @fn          ZDP_MgmtPermitJoinReq
   1216           *
   1217           * @brief       This builds and send a Mgmt_Permit_Join_req message.
   1218           *
   1219           * @param       dstAddr - destination address of the message
   1220           * @param       duration - Permit duration
   1221           * @param       TcSignificance - Trust Center Significance
   1222           *
   1223           * @return      afStatus_t
   1224           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1225          afStatus_t ZDP_MgmtPermitJoinReq( zAddrType_t *dstAddr, byte duration,
   \                     ZDP_MgmtPermitJoinReq:
   1226                                            byte TcSignificance, byte SecurityEnable )
   1227          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1228            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1229            
   1230            // Build buffer
   1231            ZDP_TmpBuf[ZDP_MGMT_PERMIT_JOIN_REQ_DURATION] = duration;
   \   000005   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_150:
   \   000008   E9           MOV     A,R1
   \   000009   12....       LCALL   ?Subroutine30 & 0xFFFF
   1232            ZDP_TmpBuf[ZDP_MGMT_PERMIT_JOIN_REQ_TC_SIG]   = TcSignificance;
   \                     ??CrossCallReturnLabel_114:
   \   00000C   EC           MOV     A,R4
   \   00000D   F0           MOVX    @DPTR,A
   1233          
   1234            // Send the message
   1235            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_Permit_Join_req,
   1236                                ZDP_MGMT_PERMIT_JOIN_REQ_SIZE );
   \   00000E                ; Setup parameters for call to function fillAndSend
   \   00000E   75..36       MOV     ?V0 + 0,#0x36
   \   000011   02....       LJMP    ?Subroutine1 & 0xFFFF
   1237          }
   1238          
   1239          /*********************************************************************
   1240           * @fn          ZDP_MgmtLeaveReq
   1241           *
   1242           * @brief       This builds and send a Mgmt_Leave_req message.
   1243           *
   1244           * @param       dstAddr - destination address of the message
   1245           *              IEEEAddr - IEEE adddress of device that is removed
   1246           *              RemoveChildren - set to 1 to remove the children of the
   1247           *                                device as well. 0 otherwise.
   1248           *              Rejoin - set to 1 if the removed device should rejoin
   1249                                   afterwards. 0 otherwise.
   1250           *
   1251           * @return      afStatus_t
   1252           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1253          afStatus_t ZDP_MgmtLeaveReq( zAddrType_t *dstAddr, uint8 *IEEEAddr, uint8 RemoveChildren,
   \                     ZDP_MgmtLeaveReq:
   1254                           uint8 Rejoin, uint8 SecurityEnable )
   1255          
   1256          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   89..         MOV     ?V0 + 0,R1
   \   00000B   740C         MOV     A,#0xc
   \   00000D   12....       LCALL   ?XSTACK_DISP0_8
   \   000010   12....       LCALL   ?Subroutine32 & 0xFFFF
   1257            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1258            
   1259            osal_cpyExtAddr( ZDP_TmpBuf, IEEEAddr );
   \                     ??CrossCallReturnLabel_49:
   \   000013   12....       LCALL   ??sAddrExtCpy?relay
   1260            ZDP_TmpBuf[Z_EXTADDR_LEN] = 0;
   \   000016   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   2408         ADD     A,#0x8
   \   00001C   F8           MOV     R0,A
   \   00001D   A3           INC     DPTR
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   12....       LCALL   ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   000022   E4           CLR     A
   \   000023   F0           MOVX    @DPTR,A
   1261          
   1262            if ( RemoveChildren == TRUE )
   \   000024   04           INC     A
   \   000025   65..         XRL     A,?V0 + 0
   \   000027   7003         JNZ     ??ZDP_MgmtLeaveReq_0
   1263            {
   1264              ZDP_TmpBuf[Z_EXTADDR_LEN] |= ZDP_MGMT_LEAVE_REQ_RC;
   \   000029   7440         MOV     A,#0x40
   \   00002B   F0           MOVX    @DPTR,A
   1265            }
   1266            if ( Rejoin == TRUE )
   \                     ??ZDP_MgmtLeaveReq_0:
   \   00002C   7401         MOV     A,#0x1
   \   00002E   65..         XRL     A,?V0 + 1
   \   000030   7004         JNZ     ??ZDP_MgmtLeaveReq_1
   1267            {
   1268              ZDP_TmpBuf[Z_EXTADDR_LEN] |= ZDP_MGMT_LEAVE_REQ_REJOIN;
   \   000032   E0           MOVX    A,@DPTR
   \   000033   D2E7         SETB    0xE0 /* A   */.7
   \   000035   F0           MOVX    @DPTR,A
   1269            }
   1270          
   1271            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_Leave_req, (Z_EXTADDR_LEN + 1) );
   \                     ??ZDP_MgmtLeaveReq_1:
   \   000036                ; Setup parameters for call to function fillAndSend
   \   000036   75..34       MOV     ?V0 + 2,#0x34
   \   000039   02....       LJMP    ?Subroutine2 & 0xFFFF
   1272          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine67:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F9           MOV     R1,A
   \   000003   8882         MOV     DPL,R0
   \   000005   8983         MOV     DPH,R1
   \   000007   22           RET
   1273          
   1274          /*********************************************************************
   1275           * @fn          ZDP_MgmtNwkUpdateReq
   1276           *
   1277           * @brief       This builds and send a Mgmt_NWK_Update_req message. This
   1278           *              function sends a unicast or broadcast message.
   1279           *
   1280           * @param       dstAddr - destination address of the message
   1281           * @param       ChannelMask - 32 bit address bit map
   1282           * @param       ScanDuration - length of time to spend scanning each channel
   1283           * @param       ScanCount - number of energy scans to be conducted
   1284           * @param       NwkUpdateId - NWk Update Id value
   1285           * @param       NwkManagerAddr - NWK address for device with Network Manager
   1286           *                               bit set in its Node Descriptor
   1287           *
   1288           * @return      afStatus_t
   1289           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1290          afStatus_t ZDP_MgmtNwkUpdateReq( zAddrType_t *dstAddr,
   \                     ZDP_MgmtNwkUpdateReq:
   1291                                           uint32 ChannelMask,
   1292                                           uint8 ScanDuration,
   1293                                           uint8 ScanCount,
   1294                                           uint8 NwkUpdateId,
   1295                                           uint16 NwkManagerAddr )
   1296          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_210:
   \   00000D   89..         MOV     ?V0 + 5,R1
   \   00000F   8C..         MOV     ?V0 + 7,R4
   \   000011   8D..         MOV     ?V0 + 6,R5
   \   000013   7412         MOV     A,#0x12
   \   000015   12....       LCALL   ?XSTACK_DISP0_8
   \   000018   78..         MOV     R0,#?V0 + 0
   \   00001A   12....       LCALL   ?L_MOV_X
   \   00001D   7416         MOV     A,#0x16
   \   00001F   12....       LCALL   ?XSTACK_DISP0_8
   \   000022   12....       LCALL   ?Subroutine17 & 0xFFFF
   1297            uint8 *pBuf = ZDP_TmpBuf;
   1298            byte len = sizeof( uint32 ) + 1;  // ChannelMask + ScanDuration
   \                     ??CrossCallReturnLabel_17:
   \   000025   75..05       MOV     ?V0 + 4,#0x5
   1299          
   1300            pBuf = osal_buffer_uint32( pBuf, ChannelMask );
   \   000028                ; Setup parameters for call to function osal_buffer_uint32
   \   000028   78..         MOV     R0,#?V0 + 0
   \   00002A   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   00002D   12....       LCALL   ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   000030   12....       LCALL   ?DEALLOC_XSTACK8
   \   000033   8A..         MOV     ?V0 + 0,R2
   \   000035   8B..         MOV     ?V0 + 1,R3
   \   000037   A8..         MOV     R0,?V0 + 0
   \   000039   A9..         MOV     R1,?V0 + 1
   1301          
   1302            *pBuf++ = ScanDuration;
   \   00003B   8882         MOV     DPL,R0
   \   00003D   8983         MOV     DPH,R1
   \   00003F   E5..         MOV     A,?V0 + 5
   \   000041   12....       LCALL   ?Subroutine55 & 0xFFFF
   1303          
   1304            if ( ScanDuration <= 0x05 )
   \                     ??CrossCallReturnLabel_87:
   \   000044   A3           INC     DPTR
   \   000045   AB83         MOV     R3,DPH
   \   000047   C3           CLR     C
   \   000048   9406         SUBB    A,#0x6
   \   00004A   500B         JNC     ??ZDP_MgmtNwkUpdateReq_0
   1305            {
   1306              // Request is to scan over channelMask
   1307              len += sizeof( uint8 );
   \   00004C   75..06       MOV     ?V0 + 4,#0x6
   1308          
   1309              *pBuf++ = ScanCount;
   \   00004F   8882         MOV     DPL,R0
   \   000051   8983         MOV     DPH,R1
   \   000053   E5..         MOV     A,?V0 + 7
   \   000055   802A         SJMP    ??ZDP_MgmtNwkUpdateReq_1
   1310            }
   1311            else if ( ( ScanDuration == 0xFE ) || ( ScanDuration == 0xFF ) )
   \                     ??ZDP_MgmtNwkUpdateReq_0:
   \   000057   74FE         MOV     A,#-0x2
   \   000059   65..         XRL     A,?V0 + 5
   \   00005B   6006         JZ      ??ZDP_MgmtNwkUpdateReq_2
   \   00005D   74FF         MOV     A,#-0x1
   \   00005F   65..         XRL     A,?V0 + 5
   \   000061   701F         JNZ     ??ZDP_MgmtNwkUpdateReq_3
   1312            {
   1313              // Request is to change Channel (0xFE) or apsChannelMask and NwkManagerAddr (0xFF)
   1314              len += sizeof( uint8 );
   \                     ??ZDP_MgmtNwkUpdateReq_2:
   \   000063   75..06       MOV     ?V0 + 4,#0x6
   1315          
   1316              *pBuf++ = NwkUpdateId;
   \   000066   8882         MOV     DPL,R0
   \   000068   8983         MOV     DPH,R1
   \   00006A   E5..         MOV     A,?V0 + 6
   \   00006C   F0           MOVX    @DPTR,A
   \   00006D   08           INC     R0
   \   00006E   EB           MOV     A,R3
   \   00006F   F9           MOV     R1,A
   1317          
   1318              if ( ScanDuration == 0xFF )
   \   000070   74FF         MOV     A,#-0x1
   \   000072   65..         XRL     A,?V0 + 5
   \   000074   700C         JNZ     ??ZDP_MgmtNwkUpdateReq_3
   1319              {
   1320                len += sizeof( uint16 );
   \   000076   75..08       MOV     ?V0 + 4,#0x8
   1321          
   1322                *pBuf++  = LO_UINT16( NwkManagerAddr );
   \   000079   EE           MOV     A,R6
   \   00007A   8882         MOV     DPL,R0
   \   00007C   8983         MOV     DPH,R1
   \   00007E   F0           MOVX    @DPTR,A
   \   00007F   A3           INC     DPTR
   1323                *pBuf++  = HI_UINT16( NwkManagerAddr );
   \   000080   EF           MOV     A,R7
   \                     ??ZDP_MgmtNwkUpdateReq_1:
   \   000081   F0           MOVX    @DPTR,A
   1324              }
   1325            }
   1326          
   1327            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_NWK_Update_req, len );
   \                     ??ZDP_MgmtNwkUpdateReq_3:
   \   000082                ; Setup parameters for call to function fillAndSend
   \   000082   75..38       MOV     ?V0 + 0,#0x38
   \   000085   75..00       MOV     ?V0 + 1,#0x0
   \   000088   78..         MOV     R0,#?V0 + 0
   \   00008A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00008D   A9..         MOV     R1,?V0 + 4
   \   00008F   7402         MOV     A,#0x2
   \   000091   12....       LCALL   ?XSTACK_DISP0_8
   \   000094   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000097   12....       LCALL   ?DEALLOC_XSTACK8
   \   00009A   7402         MOV     A,#0x2
   \   00009C   02....       LJMP    ??Subroutine100_0 & 0xFFFF
   1328          }
   1329          
   1330          
   1331          /*********************************************************************
   1332           * Network Management Responses
   1333           */
   1334          
   1335          /*********************************************************************
   1336           * @fn          ZDP_MgmtNwkDiscRsp
   1337           *
   1338           * @brief       This builds and send a Mgmt_NWK_Disc_rsp message. This
   1339           *              function sends a unicast message.
   1340           *
   1341           * @param       dstAddr - destination address of the message
   1342           * @param       Status - message status (ZDP_SUCCESS or other)
   1343           * @param       NetworkCount - Total number of networks found
   1344           * @param       StartIndex - Starting index within the reporting network
   1345           *                           list
   1346           * @param       NetworkListCount - number of network lists included
   1347           *                                 in this message
   1348           * @param       NetworkList - List of network descriptors
   1349           * @param       SecurityEnable - Security Options
   1350           *
   1351           * @return      afStatus_t
   1352           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1353          afStatus_t ZDP_MgmtNwkDiscRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtNwkDiscRsp:
   1354                                      byte Status,
   1355                                      byte NetworkCount,
   1356                                      byte StartIndex,
   1357                                      byte NetworkListCount,
   1358                                      networkDesc_t *NetworkList,
   1359                                      byte SecurityEnable )
   1360          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV     A,#-0x6
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7403         MOV     A,#0x3
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   E9           MOV     A,R1
   \   000010   F0           MOVX    @DPTR,A
   \   000011   7404         MOV     A,#0x4
   \   000013   12....       LCALL   ?XSTACK_DISP0_8
   \   000016   12....       LCALL   ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   EC           MOV     A,R4
   \   00001D   F0           MOVX    @DPTR,A
   \   00001E   7401         MOV     A,#0x1
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   ED           MOV     A,R5
   \   000024   F0           MOVX    @DPTR,A
   \   000025   7416         MOV     A,#0x16
   \   000027   12....       LCALL   ?XSTACK_DISP0_8
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   F5..         MOV     ?V0 + 2,A
   \   00002D   7417         MOV     A,#0x17
   \   00002F   12....       LCALL   ?XSTACK_DISP0_8
   \   000032   E0           MOVX    A,@DPTR
   \   000033   F5..         MOV     ?V0 + 3,A
   \   000035   7418         MOV     A,#0x18
   \   000037   12....       LCALL   ?XSTACK_DISP0_8
   \   00003A   12....       LCALL   ??Subroutine98_0 & 0xFFFF
   1361            uint8 *buf;
   1362            uint8 *pBuf;
   1363            byte len = 1+1+1+1;  // Status + NetworkCount + StartIndex + NetworkCountList.
   1364            byte idx;
   1365          
   1366            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1367            
   1368            len += (NetworkListCount * ( ZDP_NETWORK_EXTENDED_DISCRIPTOR_SIZE - 2 ));
   \                     ??CrossCallReturnLabel_160:
   \   00003D   75F00C       MOV     B,#0xc
   \   000040   E5..         MOV     A,?V0 + 3
   \   000042   12....       LCALL   ?Subroutine50 & 0xFFFF
   1369            
   1370            buf = osal_mem_alloc( len+1 );
   \                     ??CrossCallReturnLabel_183:
   \   000045   8A..         MOV     ?V0 + 4,R2
   \   000047   8B..         MOV     ?V0 + 5,R3
   1371            if ( buf == NULL )
   \   000049   EA           MOV     A,R2
   \   00004A   45..         ORL     A,?V0 + 5
   \   00004C   7005         JNZ     ??ZDP_MgmtNwkDiscRsp_0
   1372            {
   1373              return afStatus_MEM_FAIL;
   \   00004E   7910         MOV     R1,#0x10
   \   000050   02....       LJMP    ??CrossCallReturnLabel_179 & 0xFFFF
   1374            }
   1375          
   1376            pBuf = buf+1;
   \                     ??ZDP_MgmtNwkDiscRsp_0:
   \   000053   8A82         MOV     DPL,R2
   \   000055   8B83         MOV     DPH,R3
   \   000057   A3           INC     DPTR
   \   000058   8582..       MOV     ?V0 + 6,DPL
   \   00005B   8583..       MOV     ?V0 + 7,DPH
   \   00005E   AE..         MOV     R6,?V0 + 6
   \   000060   AF..         MOV     R7,?V0 + 7
   1377          
   1378            *pBuf++ = Status;
   \   000062   7402         MOV     A,#0x2
   \   000064   12....       LCALL   ?XSTACK_DISP0_8
   \   000067   12....       LCALL   ?Subroutine45 & 0xFFFF
   1379            *pBuf++ = NetworkCount;
   \                     ??CrossCallReturnLabel_72:
   \   00006A   7401         MOV     A,#0x1
   \   00006C   12....       LCALL   ?XSTACK_DISP0_8
   \   00006F   12....       LCALL   ??Subroutine106_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_187:
   \   000072   A3           INC     DPTR
   1380            *pBuf++ = StartIndex;
   \   000073   E5..         MOV     A,?V0 + 2
   \   000075   F0           MOVX    @DPTR,A
   \   000076   A3           INC     DPTR
   1381            *pBuf++ = NetworkListCount;
   \   000077   E5..         MOV     A,?V0 + 3
   \   000079   F0           MOVX    @DPTR,A
   \   00007A   A3           INC     DPTR
   \   00007B   0E           INC     R6
   \   00007C   0E           INC     R6
   \   00007D   0E           INC     R6
   \   00007E   AF83         MOV     R7,DPH
   1382          
   1383            for ( idx = 0; idx < NetworkListCount; idx++ )
   \   000080   75..00       MOV     ?V0 + 2,#0x0
   \   000083   8012         SJMP    ??ZDP_MgmtNwkDiscRsp_1
   1384            {
   1385              osal_cpyExtAddr( pBuf, NetworkList->extendedPANID);
   1386              pBuf += Z_EXTADDR_LEN;
   1387          
   1388              *pBuf++  = NetworkList->logicalChannel;                // LogicalChannel
   1389              *pBuf    = NetworkList->stackProfile;                  // Stack profile
   1390              *pBuf++ |= (byte)(NetworkList->version << 4);          // ZigBee Version
   1391              *pBuf    = NetworkList->beaconOrder;                   // Beacon Order
   1392              *pBuf++ |= (byte)(NetworkList->superFrameOrder << 4);  // Superframe Order
   1393          
   1394              if ( NetworkList->chosenRouter != INVALID_NODE_ADDR )
   1395              {
   1396                *pBuf++ = TRUE;                         // Permit Joining
   1397              }
   1398              else
   1399              {
   1400                *pBuf++ = FALSE;
   \                     ??ZDP_MgmtNwkDiscRsp_2:
   \   000085   E4           CLR     A
   \                     ??ZDP_MgmtNwkDiscRsp_3:
   \   000086   F0           MOVX    @DPTR,A
   \   000087   0E           INC     R6
   \   000088   E9           MOV     A,R1
   \   000089   FF           MOV     R7,A
   1401              }
   1402          
   1403              NetworkList = NetworkList->nextDesc;    // Move to next list entry
   \   00008A   E5..         MOV     A,?V0 + 0
   \   00008C   2416         ADD     A,#0x16
   \   00008E   F582         MOV     DPL,A
   \   000090   E5..         MOV     A,?V0 + 1
   \   000092   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_163:
   \   000095   05..         INC     ?V0 + 2
   \                     ??ZDP_MgmtNwkDiscRsp_1:
   \   000097   E5..         MOV     A,?V0 + 2
   \   000099   C3           CLR     C
   \   00009A   95..         SUBB    A,?V0 + 3
   \   00009C   4003         JC      $+5
   \   00009E   02....       LJMP    ??ZDP_MgmtNwkDiscRsp_4 & 0xFFFF
   \   0000A1                ; Setup parameters for call to function sAddrExtCpy
   \   0000A1   E5..         MOV     A,?V0 + 0
   \   0000A3   240D         ADD     A,#0xd
   \   0000A5   12....       LCALL   ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   0000A8   EE           MOV     A,R6
   \   0000A9   2408         ADD     A,#0x8
   \   0000AB   FE           MOV     R6,A
   \   0000AC   EF           MOV     A,R7
   \   0000AD   3400         ADDC    A,#0x0
   \   0000AF   FF           MOV     R7,A
   \   0000B0   85..82       MOV     DPL,?V0 + 0
   \   0000B3   85..83       MOV     DPH,?V0 + 1
   \   0000B6   A3           INC     DPTR
   \   0000B7   A3           INC     DPTR
   \   0000B8   12....       LCALL   ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   0000BB   85..82       MOV     DPL,?V0 + 0
   \   0000BE   85..83       MOV     DPH,?V0 + 1
   \   0000C1   A3           INC     DPTR
   \   0000C2   A3           INC     DPTR
   \   0000C3   A3           INC     DPTR
   \   0000C4   A3           INC     DPTR
   \   0000C5   A3           INC     DPTR
   \   0000C6   12....       LCALL   ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_190:
   \   0000C9   EE           MOV     A,R6
   \   0000CA   F8           MOV     R0,A
   \   0000CB   EF           MOV     A,R7
   \   0000CC   F9           MOV     R1,A
   \   0000CD   A3           INC     DPTR
   \   0000CE   0E           INC     R6
   \   0000CF   AF83         MOV     R7,DPH
   \   0000D1   85..82       MOV     DPL,?V0 + 0
   \   0000D4   85..83       MOV     DPH,?V0 + 1
   \   0000D7   A3           INC     DPTR
   \   0000D8   A3           INC     DPTR
   \   0000D9   A3           INC     DPTR
   \   0000DA   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_166:
   \   0000DD   85..82       MOV     DPL,?V0 + 0
   \   0000E0   85..83       MOV     DPH,?V0 + 1
   \   0000E3   12....       LCALL   ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_191:
   \   0000E6   08           INC     R0
   \   0000E7   EF           MOV     A,R7
   \   0000E8   F9           MOV     R1,A
   \   0000E9   A3           INC     DPTR
   \   0000EA   0E           INC     R6
   \   0000EB   AF83         MOV     R7,DPH
   \   0000ED   85..82       MOV     DPL,?V0 + 0
   \   0000F0   85..83       MOV     DPH,?V0 + 1
   \   0000F3   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_167:
   \   0000F6   8E82         MOV     DPL,R6
   \   0000F8   8F83         MOV     DPH,R7
   \   0000FA   A3           INC     DPTR
   \   0000FB   A983         MOV     R1,DPH
   \   0000FD   85..82       MOV     DPL,?V0 + 0
   \   000100   85..83       MOV     DPH,?V0 + 1
   \   000103   A3           INC     DPTR
   \   000104   A3           INC     DPTR
   \   000105   A3           INC     DPTR
   \   000106   A3           INC     DPTR
   \   000107   A3           INC     DPTR
   \   000108   A3           INC     DPTR
   \   000109   A3           INC     DPTR
   \   00010A   A3           INC     DPTR
   \   00010B   A3           INC     DPTR
   \   00010C   E0           MOVX    A,@DPTR
   \   00010D   64FE         XRL     A,#0xfe
   \   00010F   7003         JNZ     ??ZDP_MgmtNwkDiscRsp_5
   \   000111   A3           INC     DPTR
   \   000112   E0           MOVX    A,@DPTR
   \   000113   F4           CPL     A
   \                     ??ZDP_MgmtNwkDiscRsp_5:
   \   000114   8E82         MOV     DPL,R6
   \   000116   8F83         MOV     DPH,R7
   \   000118   7003         JNZ     $+5
   \   00011A   02....       LJMP    ??ZDP_MgmtNwkDiscRsp_2 & 0xFFFF
   \   00011D   7401         MOV     A,#0x1
   \   00011F   02....       LJMP    ??ZDP_MgmtNwkDiscRsp_3 & 0xFFFF
   1404            }
   1405          
   1406            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_NWK_Disc_rsp, len, buf );
   \                     ??ZDP_MgmtNwkDiscRsp_4:
   \   000122   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000125   E5..         MOV     A,?V0 + 6
   \   000127   F0           MOVX    @DPTR,A
   \   000128   A3           INC     DPTR
   \   000129   E5..         MOV     A,?V0 + 7
   \   00012B   F0           MOVX    @DPTR,A
   \   00012C                ; Setup parameters for call to function fillAndSend
   \   00012C   75..30       MOV     ?V0 + 0,#0x30
   \   00012F   75..80       MOV     ?V0 + 1,#-0x80
   \   000132   78..         MOV     R0,#?V0 + 0
   \   000134   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000137   7402         MOV     A,#0x2
   \   000139   12....       LCALL   ?XSTACK_DISP0_8
   \   00013C   E0           MOVX    A,@DPTR
   \   00013D   F9           MOV     R1,A
   \   00013E   7406         MOV     A,#0x6
   \   000140   12....       LCALL   ?XSTACK_DISP0_8
   \   000143   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   000146   7405         MOV     A,#0x5
   \   000148   12....       LCALL   ?XSTACK_DISP0_8
   \   00014B   12....       LCALL   ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_132:
   \   00014E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000151   E9           MOV     A,R1
   \   000152   FE           MOV     R6,A
   \   000153                ; Setup parameters for call to function osal_mem_free
   \   000153   AA..         MOV     R2,?V0 + 4
   \   000155   AB..         MOV     R3,?V0 + 5
   \   000157   12....       LCALL   ??Subroutine104_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_179:
   \   00015A                REQUIRE ?Subroutine7
   \   00015A                ; // Fall through to label ?Subroutine7
   1407          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   7406         MOV     A,#0x6
   \   000002   80..         SJMP    ??Subroutine100_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F583         MOV     DPH,A
   \   000004                REQUIRE ??Subroutine98_0
   \   000004                ; // Fall through to label ??Subroutine98_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004                REQUIRE ??Subroutine99_0
   \   000004                ; // Fall through to label ??Subroutine99_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine99_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   C4           SWAP    A
   \   000002   54F0         ANL     A,#0xf0
   \   000004   FA           MOV     R2,A
   \   000005   8882         MOV     DPL,R0
   \   000007   8983         MOV     DPH,R1
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   4A           ORL     A,R2
   \   00000B   F0           MOVX    @DPTR,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine66:
   \   000000   FC           MOV     R4,A
   \   000001   E5..         MOV     A,?V0 + 1
   \   000003   3400         ADDC    A,#0x0
   \   000005   FD           MOV     R5,A
   \   000006   EE           MOV     A,R6
   \   000007   FA           MOV     R2,A
   \   000008   EF           MOV     A,R7
   \   000009   FB           MOV     R3,A
   \   00000A   12....       LCALL   ??sAddrExtCpy?relay
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine104_0:
   \   000000   12....       LCALL   ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_181:
   \   000003   EE           MOV     A,R6
   \   000004   F9           MOV     R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000   A4           MUL     AB
   \   000001   2404         ADD     A,#0x4
   \   000003   85..82       MOV     DPL,?XSP + 0
   \   000006   85..83       MOV     DPH,?XSP + 1
   \   000009                REQUIRE ??Subroutine105_0
   \   000009                ; // Fall through to label ??Subroutine105_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine105_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function osal_mem_alloc
   \   000001                ; Setup parameters for call to function osal_mem_alloc
   \   000001                ; Setup parameters for call to function osal_mem_alloc
   \   000001                ; Setup parameters for call to function osal_mem_alloc
   \   000001   2401         ADD     A,#0x1
   \   000003   FA           MOV     R2,A
   \   000004   E4           CLR     A
   \   000005   3400         ADDC    A,#0x0
   \   000007   FB           MOV     R3,A
   \   000008   12....       LCALL   ??osal_mem_alloc?relay
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003                REQUIRE ??Subroutine106_0
   \   000003                ; // Fall through to label ??Subroutine106_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine106_0:
   \   000000   12....       LCALL   ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_199:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine83:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   F0           MOVX    @DPTR,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   12....       LCALL   ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_196:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine75:
   \   000000   12....       LCALL   ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_200:
   \   000003   A3           INC     DPTR
   \   000004   0E           INC     R6
   \   000005   AF83         MOV     R7,DPH
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   12....       LCALL   ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_198:
   \   000003   A3           INC     DPTR
   \   000004   AE82         MOV     R6,DPL
   \   000006   AF83         MOV     R7,DPH
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine59:
   \   000000   EA           MOV     A,R2
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   EB           MOV     A,R3
   \   000004   F0           MOVX    @DPTR,A
   \   000005   7402         MOV     A,#0x2
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine81:
   \   000000   12....       LCALL   ??osal_mem_free?relay
   \   000003   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000006   74..         MOV     A,#(ZDP_Buf + 1) & 0xff
   \   000008   F0           MOVX    @DPTR,A
   \   000009   A3           INC     DPTR
   \   00000A   74..         MOV     A,#((ZDP_Buf + 1) >> 8) & 0xff
   \   00000C   F0           MOVX    @DPTR,A
   \   00000D   22           RET
   1408          
   1409          /*********************************************************************
   1410           * @fn          ZDP_MgmtLqiRsp
   1411           *
   1412           * @brief       This builds and send a Mgmt_Lqi_rsp message. This
   1413           *              function sends a unicast message.
   1414           *
   1415           * @param       dstAddr - destination address of the message
   1416           * @param       Status - message status (ZDP_SUCCESS or other)
   1417           * @param       NeighborLqiEntries - Total number of entries found
   1418           * @param       StartIndex - Starting index within the reporting list
   1419           * @param       NeighborLqiCount - number of lists included
   1420           *                                 in this message
   1421           * @param       NeighborLqiList - List of NeighborLqiItems.  This list
   1422           *                is the list to be sent, not the entire list
   1423           * @param       SecurityEnable - true if secure
   1424           *
   1425           * @return      ZStatus_t
   1426           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1427          ZStatus_t ZDP_MgmtLqiRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtLqiRsp:
   1428                                    byte Status,
   1429                                    byte NeighborLqiEntries,
   1430                                    byte StartIndex,
   1431                                    byte NeighborLqiCount,
   1432                                    ZDP_MgmtLqiItem_t* NeighborList,
   1433                                    byte SecurityEnable )
   1434          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7401         MOV     A,#0x1
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   E9           MOV     A,R1
   \   000010   F0           MOVX    @DPTR,A
   \   000011   7403         MOV     A,#0x3
   \   000013   12....       LCALL   ?XSTACK_DISP0_8
   \   000016   12....       LCALL   ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   000019   7402         MOV     A,#0x2
   \   00001B   12....       LCALL   ?XSTACK_DISP0_8
   \   00001E   ED           MOV     A,R5
   \   00001F   F0           MOVX    @DPTR,A
   \   000020   7415         MOV     A,#0x15
   \   000022   12....       LCALL   ?XSTACK_DISP0_8
   \   000025   E0           MOVX    A,@DPTR
   \   000026   F5..         MOV     ?V0 + 4,A
   \   000028   7417         MOV     A,#0x17
   \   00002A   12....       LCALL   ?XSTACK_DISP0_8
   \   00002D   12....       LCALL   ??Subroutine98_0 & 0xFFFF
   1435            ZDP_MgmtLqiItem_t* list = NeighborList;
   1436            uint8 *buf, *pBuf;
   1437            byte len, x;
   1438          
   1439            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1440            
   1441            if ( ZSuccess != Status )
   \                     ??CrossCallReturnLabel_161:
   \   000030   85..82       MOV     DPL,?XSP + 0
   \   000033   85..83       MOV     DPH,?XSP + 1
   \   000036   E0           MOVX    A,@DPTR
   \   000037   6029         JZ      ??ZDP_MgmtLqiRsp_0
   1442            {
   1443              ZDP_TmpBuf[0] = Status;
   \   000039   C0E0         PUSH    A
   \   00003B   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_151:
   \   00003E   D0E0         POP     A
   \   000040   F0           MOVX    @DPTR,A
   1444              return fillAndSend( &TransSeq, dstAddr, Mgmt_Lqi_rsp, 1 );
   \   000041                ; Setup parameters for call to function fillAndSend
   \   000041   75..31       MOV     ?V0 + 0,#0x31
   \   000044   75..80       MOV     ?V0 + 1,#-0x80
   \   000047   78..         MOV     R0,#?V0 + 0
   \   000049   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004C   7901         MOV     R1,#0x1
   \   00004E   7405         MOV     A,#0x5
   \   000050   12....       LCALL   ?XSTACK_DISP0_8
   \   000053   12....       LCALL   ?Subroutine34 & 0xFFFF
   1445            }
   \                     ??CrossCallReturnLabel_50:
   \   000056   12....       LCALL   ?XSTACK_DISP0_8
   \   000059   12....       LCALL   ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_133:
   \   00005C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00005F   02....       LJMP    ??CrossCallReturnLabel_177 & 0xFFFF
   1446          
   1447            // (Status + NeighborLqiEntries + StartIndex + NeighborLqiCount) +
   1448            //  neighbor LQI data.
   1449            len = (1 + 1 + 1 + 1) + (NeighborLqiCount * ZDP_MGMTLQI_EXTENDED_SIZE);
   \                     ??ZDP_MgmtLqiRsp_0:
   \   000062   75F016       MOV     B,#0x16
   \   000065   7416         MOV     A,#0x16
   \   000067   12....       LCALL   ?XSTACK_DISP0_8
   \   00006A   E0           MOVX    A,@DPTR
   \   00006B   12....       LCALL   ?Subroutine50 & 0xFFFF
   1450          
   1451            buf = osal_mem_alloc( len+1 );
   \                     ??CrossCallReturnLabel_184:
   \   00006E   8A..         MOV     ?V0 + 2,R2
   \   000070   8B..         MOV     ?V0 + 3,R3
   1452            if ( buf == NULL )
   \   000072   EA           MOV     A,R2
   \   000073   45..         ORL     A,?V0 + 3
   \   000075   7005         JNZ     ??ZDP_MgmtLqiRsp_1
   1453            {
   1454              return afStatus_MEM_FAIL;
   \   000077   7910         MOV     R1,#0x10
   \   000079   02....       LJMP    ??CrossCallReturnLabel_177 & 0xFFFF
   1455            }
   \                     ??ZDP_MgmtLqiRsp_1:
   \   00007C   8A82         MOV     DPL,R2
   \   00007E   8B83         MOV     DPH,R3
   \   000080   A3           INC     DPTR
   1456          
   1457            pBuf = buf+1;
   1458          
   1459            *pBuf++ = Status;
   \   000081   E4           CLR     A
   \   000082   F0           MOVX    @DPTR,A
   \   000083   A3           INC     DPTR
   \   000084   AE82         MOV     R6,DPL
   \   000086   AF83         MOV     R7,DPH
   1460            *pBuf++ = NeighborLqiEntries;
   \   000088   7402         MOV     A,#0x2
   \   00008A   12....       LCALL   ?XSTACK_DISP0_8
   \   00008D   12....       LCALL   ??Subroutine106_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_188:
   \   000090   A3           INC     DPTR
   1461            *pBuf++ = StartIndex;
   \   000091   E5..         MOV     A,?V0 + 4
   \   000093   F0           MOVX    @DPTR,A
   \   000094   A3           INC     DPTR
   \   000095   0E           INC     R6
   \   000096   0E           INC     R6
   \   000097   AF83         MOV     R7,DPH
   1462            *pBuf++ = NeighborLqiCount;
   \   000099   7416         MOV     A,#0x16
   \   00009B   12....       LCALL   ?XSTACK_DISP0_8
   \   00009E   12....       LCALL   ?Subroutine45 & 0xFFFF
   1463          
   1464            for ( x = 0; x < NeighborLqiCount; x++ )
   \                     ??CrossCallReturnLabel_73:
   \   0000A1   75..00       MOV     ?V0 + 6,#0x0
   \   0000A4   02....       LJMP    ??ZDP_MgmtLqiRsp_2 & 0xFFFF
   1465            {
   1466              osal_cpyExtAddr( pBuf, list->extPanID);         // Extended PanID
   \                     ??ZDP_MgmtLqiRsp_3:
   \   0000A7                ; Setup parameters for call to function sAddrExtCpy
   \   0000A7   E5..         MOV     A,?V0 + 0
   \   0000A9   2402         ADD     A,#0x2
   \   0000AB   12....       LCALL   ?Subroutine66 & 0xFFFF
   1467              pBuf += Z_EXTADDR_LEN;
   1468          
   1469              // EXTADDR
   1470              pBuf = osal_cpyExtAddr( pBuf, list->extAddr );
   \                     ??CrossCallReturnLabel_104:
   \   0000AE                ; Setup parameters for call to function sAddrExtCpy
   \   0000AE   E5..         MOV     A,?V0 + 0
   \   0000B0   240A         ADD     A,#0xa
   \   0000B2   FC           MOV     R4,A
   \   0000B3   E5..         MOV     A,?V0 + 1
   \   0000B5   3400         ADDC    A,#0x0
   \   0000B7   FD           MOV     R5,A
   \   0000B8   EE           MOV     A,R6
   \   0000B9   2408         ADD     A,#0x8
   \   0000BB   FA           MOV     R2,A
   \   0000BC   EF           MOV     A,R7
   \   0000BD   3400         ADDC    A,#0x0
   \   0000BF   FB           MOV     R3,A
   \   0000C0   12....       LCALL   ??sAddrExtCpy?relay
   \   0000C3   8A..         MOV     ?V0 + 4,R2
   \   0000C5   8B..         MOV     ?V0 + 5,R3
   \   0000C7   AE..         MOV     R6,?V0 + 4
   \   0000C9   AF..         MOV     R7,?V0 + 5
   1471          
   1472              // NWKADDR
   1473              *pBuf++ = LO_UINT16( list->nwkAddr );
   \   0000CB   E5..         MOV     A,?V0 + 0
   \   0000CD   2412         ADD     A,#0x12
   \   0000CF   F8           MOV     R0,A
   \   0000D0   E5..         MOV     A,?V0 + 1
   \   0000D2   12....       LCALL   ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   0000D5   12....       LCALL   ?Subroutine42 & 0xFFFF
   1474              *pBuf++ = HI_UINT16( list->nwkAddr );
   \                     ??CrossCallReturnLabel_69:
   \   0000D8   8882         MOV     DPL,R0
   \   0000DA   8983         MOV     DPH,R1
   \   0000DC   A3           INC     DPTR
   \   0000DD   12....       LCALL   ??Subroutine107_0 & 0xFFFF
   1475          
   1476              // DEVICETYPE
   1477              *pBuf = list->devType;
   \                     ??CrossCallReturnLabel_195:
   \   0000E0   2414         ADD     A,#0x14
   \   0000E2   F582         MOV     DPL,A
   \   0000E4   E5..         MOV     A,?V0 + 1
   \   0000E6   12....       LCALL   ??Subroutine121_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_277:
   \   0000E9   12....       LCALL   ??Subroutine106_0 & 0xFFFF
   1478          
   1479              // RXONIDLE
   1480              *pBuf |= (uint8)(list->rxOnIdle << 2);
   \                     ??CrossCallReturnLabel_189:
   \   0000EC   E5..         MOV     A,?V0 + 0
   \   0000EE   2415         ADD     A,#0x15
   \   0000F0   F582         MOV     DPL,A
   \   0000F2   E5..         MOV     A,?V0 + 1
   \   0000F4   12....       LCALL   ??Subroutine103_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_170:
   \   0000F7   33           RLC     A
   \   0000F8   33           RLC     A
   \   0000F9   54FC         ANL     A,#0xfc
   \   0000FB   F8           MOV     R0,A
   \   0000FC   8E82         MOV     DPL,R6
   \   0000FE   8F83         MOV     DPH,R7
   \   000100   E0           MOVX    A,@DPTR
   \   000101   48           ORL     A,R0
   \   000102   F0           MOVX    @DPTR,A
   1481          
   1482              // RELATIONSHIP
   1483              *pBuf++ |= (uint8)(list->relation << 4);
   \   000103   EE           MOV     A,R6
   \   000104   F8           MOV     R0,A
   \   000105   EF           MOV     A,R7
   \   000106   F9           MOV     R1,A
   \   000107   A3           INC     DPTR
   \   000108   0E           INC     R6
   \   000109   AF83         MOV     R7,DPH
   \   00010B   E5..         MOV     A,?V0 + 0
   \   00010D   2416         ADD     A,#0x16
   \   00010F   F582         MOV     DPL,A
   \   000111   E5..         MOV     A,?V0 + 1
   \   000113   12....       LCALL   ??Subroutine121_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_278:
   \   000116   12....       LCALL   ??Subroutine99_0 & 0xFFFF
   1484          
   1485              // PERMITJOINING
   1486              *pBuf++ = (uint8)(list->permit);
   \                     ??CrossCallReturnLabel_165:
   \   000119   E5..         MOV     A,?V0 + 0
   \   00011B   2417         ADD     A,#0x17
   \   00011D   12....       LCALL   ?Subroutine12 & 0xFFFF
   1487          
   1488              // DEPTH
   1489              *pBuf++ = list->depth;
   1490          
   1491              // LQI
   1492              *pBuf++ = list->lqi;
   1493          
   1494              list++; // next list entry
   1495            }
   \                     ??CrossCallReturnLabel_192:
   \   000120   2418         ADD     A,#0x18
   \   000122   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_193:
   \   000125   2419         ADD     A,#0x19
   \   000127   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_194:
   \   00012A   241A         ADD     A,#0x1a
   \   00012C   F5..         MOV     ?V0 + 0,A
   \   00012E   E5..         MOV     A,?V0 + 1
   \   000130   3400         ADDC    A,#0x0
   \   000132   F5..         MOV     ?V0 + 1,A
   \   000134   05..         INC     ?V0 + 6
   \                     ??ZDP_MgmtLqiRsp_2:
   \   000136   7416         MOV     A,#0x16
   \   000138   12....       LCALL   ?XSTACK_DISP0_8
   \   00013B   E0           MOVX    A,@DPTR
   \   00013C   F8           MOV     R0,A
   \   00013D   E5..         MOV     A,?V0 + 6
   \   00013F   C3           CLR     C
   \   000140   98           SUBB    A,R0
   \   000141   5003         JNC     $+5
   \   000143   02....       LJMP    ??ZDP_MgmtLqiRsp_3 & 0xFFFF
   1496          
   1497            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_Lqi_rsp, len, buf );
   \   000146   12....       LCALL   ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_290:
   \   000149                ; Setup parameters for call to function fillAndSend
   \   000149   75..31       MOV     ?V0 + 0,#0x31
   \   00014C   75..80       MOV     ?V0 + 1,#-0x80
   \   00014F   78..         MOV     R0,#?V0 + 0
   \   000151   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000154   7402         MOV     A,#0x2
   \   000156   12....       LCALL   ?XSTACK_DISP0_8
   \   000159   E0           MOVX    A,@DPTR
   \   00015A   F9           MOV     R1,A
   \   00015B   7405         MOV     A,#0x5
   \   00015D   12....       LCALL   ?XSTACK_DISP0_8
   \   000160   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   000163   12....       LCALL   ?XSTACK_DISP0_8
   \   000166   12....       LCALL   ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_134:
   \   000169   12....       LCALL   ?DEALLOC_XSTACK8
   \   00016C   12....       LCALL   ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_177:
   \   00016F   7405         MOV     A,#0x5
   \   000171   02....       LJMP    ??Subroutine100_0 & 0xFFFF
   1498          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000   E9           MOV     A,R1
   \   000001   FE           MOV     R6,A
   \   000002                ; Setup parameters for call to function osal_mem_free
   \   000002                ; Setup parameters for call to function osal_mem_free
   \   000002   AA..         MOV     R2,?V0 + 2
   \   000004   AB..         MOV     R3,?V0 + 3
   \   000006                REQUIRE ??Subroutine104_0
   \   000006                ; // Fall through to label ??Subroutine104_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   F582         MOV     DPL,A
   \   000002   E5..         MOV     A,?V0 + 1
   \   000004   3400         ADDC    A,#0x0
   \   000006   F583         MOV     DPH,A
   \   000008                REQUIRE ??Subroutine107_0
   \   000008                ; // Fall through to label ??Subroutine107_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine107_0:
   \   000000   12....       LCALL   ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_197:
   \   000003   E5..         MOV     A,?V0 + 0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000   EA           MOV     A,R2
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   EB           MOV     A,R3
   \   000004   F0           MOVX    @DPTR,A
   \   000005   EC           MOV     A,R4
   \   000006   85..82       MOV     DPL,?XSP + 0
   \   000009   85..83       MOV     DPH,?XSP + 1
   \   00000C   F0           MOVX    @DPTR,A
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   7403         MOV     A,#0x3
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine57:
   \   000000   85..82       MOV     DPL,?V0 + 2
   \   000003   85..83       MOV     DPH,?V0 + 3
   \   000006   A3           INC     DPTR
   \   000007   A882         MOV     R0,DPL
   \   000009   A983         MOV     R1,DPH
   \   00000B   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00000E                REQUIRE ??Subroutine122_0
   \   00000E                ; // Fall through to label ??Subroutine122_0
   1499          
   1500          /*********************************************************************
   1501           * @fn          ZDP_MgmtRtgRsp
   1502           *
   1503           * @brief       This builds and send a Mgmt_Rtg_rsp message. This
   1504           *              function sends a unicast message.
   1505           *
   1506           * @param       dstAddr - destination address of the message
   1507           * @param       Status - message status (ZDP_SUCCESS or other)
   1508           * @param       RoutingTableEntries - Total number of entries
   1509           * @param       StartIndex - Starting index within the reporting list
   1510           * @param       RoutingTableListCount - number of entries included
   1511           *                                      in this message
   1512           * @param       RoutingTableList - List of Routing Table entries
   1513           * @param       SecurityEnable - true to enable security for this message
   1514           *
   1515           * @return      ZStatus_t
   1516           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1517          ZStatus_t ZDP_MgmtRtgRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtRtgRsp:
   1518                                      byte Status,
   1519                                      byte RoutingTableEntries,
   1520                                      byte StartIndex,
   1521                                      byte RoutingListCount,
   1522                                      rtgItem_t *RoutingTableList,
   1523                                      byte SecurityEnable )
   1524          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV     A,#-0x6
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7403         MOV     A,#0x3
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   E9           MOV     A,R1
   \   000010   F0           MOVX    @DPTR,A
   \   000011   7404         MOV     A,#0x4
   \   000013   12....       LCALL   ?XSTACK_DISP0_8
   \   000016   12....       LCALL   ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   EC           MOV     A,R4
   \   00001D   F0           MOVX    @DPTR,A
   \   00001E   7401         MOV     A,#0x1
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   ED           MOV     A,R5
   \   000024   F0           MOVX    @DPTR,A
   \   000025   7416         MOV     A,#0x16
   \   000027   12....       LCALL   ?XSTACK_DISP0_8
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   F5..         MOV     ?V0 + 3,A
   \   00002D   7417         MOV     A,#0x17
   \   00002F   12....       LCALL   ?XSTACK_DISP0_8
   \   000032   E0           MOVX    A,@DPTR
   \   000033   F5..         MOV     ?V0 + 2,A
   \   000035   7418         MOV     A,#0x18
   \   000037   12....       LCALL   ?XSTACK_DISP0_8
   \   00003A   12....       LCALL   ?Subroutine17 & 0xFFFF
   1525            uint8 *buf;
   1526            uint8 *pBuf;
   1527            // Status + RoutingTableEntries + StartIndex + RoutingListCount.
   1528            byte len = 1 + 1 + 1 + 1;
   1529            byte x;
   1530          
   1531            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1532            
   1533            // Add an array for Routing List data
   1534            len += (RoutingListCount * ZDP_ROUTINGENTRY_SIZE);
   \                     ??CrossCallReturnLabel_18:
   \   00003D   75F005       MOV     B,#0x5
   \   000040   E5..         MOV     A,?V0 + 2
   \   000042   12....       LCALL   ?Subroutine50 & 0xFFFF
   1535          
   1536            buf = osal_mem_alloc( (short)(len+1) );
   \                     ??CrossCallReturnLabel_185:
   \   000045   8A..         MOV     ?V0 + 0,R2
   \   000047   8B..         MOV     ?V0 + 1,R3
   1537            if ( buf == NULL )
   \   000049   EA           MOV     A,R2
   \   00004A   45..         ORL     A,?V0 + 1
   \   00004C   7005         JNZ     ??ZDP_MgmtRtgRsp_0
   1538            {
   1539              return afStatus_MEM_FAIL;
   \   00004E   7910         MOV     R1,#0x10
   \   000050   02....       LJMP    ??CrossCallReturnLabel_180 & 0xFFFF
   1540            }
   1541          
   1542            pBuf = buf+1;
   \                     ??ZDP_MgmtRtgRsp_0:
   \   000053   8A82         MOV     DPL,R2
   \   000055   8B83         MOV     DPH,R3
   \   000057   A3           INC     DPTR
   \   000058   AA82         MOV     R2,DPL
   \   00005A   AB83         MOV     R3,DPH
   \   00005C   EA           MOV     A,R2
   \   00005D   F8           MOV     R0,A
   \   00005E   EB           MOV     A,R3
   \   00005F   F9           MOV     R1,A
   1543          
   1544            *pBuf++ = Status;
   \   000060   7402         MOV     A,#0x2
   \   000062   12....       LCALL   ?XSTACK_DISP0_8
   \   000065   12....       LCALL   ?Subroutine22 & 0xFFFF
   1545            *pBuf++ = RoutingTableEntries;
   \                     ??CrossCallReturnLabel_29:
   \   000068   7401         MOV     A,#0x1
   \   00006A   12....       LCALL   ?XSTACK_DISP0_8
   \   00006D   12....       LCALL   ?Subroutine38 & 0xFFFF
   1546            *pBuf++ = StartIndex;
   \                     ??CrossCallReturnLabel_64:
   \   000070   E5..         MOV     A,?V0 + 3
   \   000072   12....       LCALL   ?Subroutine58 & 0xFFFF
   1547            *pBuf++ = RoutingListCount;
   \                     ??CrossCallReturnLabel_93:
   \   000075   08           INC     R0
   \   000076   08           INC     R0
   \   000077   08           INC     R0
   \   000078   A983         MOV     R1,DPH
   1548          
   1549            for ( x = 0; x < RoutingListCount; x++ )
   \   00007A   7C00         MOV     R4,#0x0
   \   00007C   8031         SJMP    ??ZDP_MgmtRtgRsp_1
   1550            {
   1551              *pBuf++ = LO_UINT16( RoutingTableList->dstAddress );  // Destination Address
   \                     ??ZDP_MgmtRtgRsp_2:
   \   00007E   8E82         MOV     DPL,R6
   \   000080   8F83         MOV     DPH,R7
   \   000082   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   000085   A882         MOV     R0,DPL
   \   000087   12....       LCALL   ?Subroutine21 & 0xFFFF
   1552              *pBuf++ = HI_UINT16( RoutingTableList->dstAddress );
   1553              *pBuf++ = RoutingTableList->status;
   \                     ??CrossCallReturnLabel_212:
   \   00008A   12....       LCALL   ??Subroutine111_0 & 0xFFFF
   1554              *pBuf++ = LO_UINT16( RoutingTableList->nextHopAddress );  // Next hop
   \                     ??CrossCallReturnLabel_216:
   \   00008D   2402         ADD     A,#0x2
   \   00008F   F5..         MOV     ?V0 + 4,A
   \   000091   EF           MOV     A,R7
   \   000092   3400         ADDC    A,#0x0
   \   000094   F5..         MOV     ?V0 + 5,A
   \   000096   85..82       MOV     DPL,?V0 + 4
   \   000099   F583         MOV     DPH,A
   \   00009B   12....       LCALL   ?Subroutine22 & 0xFFFF
   1555              *pBuf++ = HI_UINT16( RoutingTableList->nextHopAddress );
   \                     ??CrossCallReturnLabel_30:
   \   00009E   85..82       MOV     DPL,?V0 + 4
   \   0000A1   85..83       MOV     DPH,?V0 + 5
   \   0000A4   12....       LCALL   ??Subroutine112_0 & 0xFFFF
   1556              RoutingTableList++;    // Move to next list entry
   1557            }
   \                     ??CrossCallReturnLabel_217:
   \   0000A7   2406         ADD     A,#0x6
   \   0000A9   FE           MOV     R6,A
   \   0000AA   EF           MOV     A,R7
   \   0000AB   3400         ADDC    A,#0x0
   \   0000AD   FF           MOV     R7,A
   \   0000AE   0C           INC     R4
   \                     ??ZDP_MgmtRtgRsp_1:
   \   0000AF   EC           MOV     A,R4
   \   0000B0   C3           CLR     C
   \   0000B1   95..         SUBB    A,?V0 + 2
   \   0000B3   40C9         JC      ??ZDP_MgmtRtgRsp_2
   1558          
   1559            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_Rtg_rsp, len, buf );
   \   0000B5   90....       MOV     DPTR,#ZDP_TmpBuf
   \   0000B8   12....       LCALL   ??Subroutine108_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_206:
   \   0000BB                ; Setup parameters for call to function fillAndSend
   \   0000BB   75..32       MOV     ?V0 + 2,#0x32
   \   0000BE   75..80       MOV     ?V0 + 3,#-0x80
   \   0000C1   78..         MOV     R0,#?V0 + 2
   \   0000C3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C6   7402         MOV     A,#0x2
   \   0000C8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CB   E0           MOVX    A,@DPTR
   \   0000CC   F9           MOV     R1,A
   \   0000CD   7406         MOV     A,#0x6
   \   0000CF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D2   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   0000D5   7405         MOV     A,#0x5
   \   0000D7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DA   12....       LCALL   ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_135:
   \   0000DD   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000E0   E9           MOV     A,R1
   \   0000E1   FE           MOV     R6,A
   \   0000E2                ; Setup parameters for call to function osal_mem_free
   \   0000E2   AA..         MOV     R2,?V0 + 0
   \   0000E4   AB..         MOV     R3,?V0 + 1
   \   0000E6   12....       LCALL   ??Subroutine104_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_180:
   \   0000E9   02....       LJMP    ?Subroutine7 & 0xFFFF
   1560          }
   1561          
   1562          /*********************************************************************
   1563           * @fn          ZDP_MgmtBindRsp
   1564           *
   1565           * @brief       This builds and send a Mgmt_Bind_rsp message. This
   1566           *              function sends a unicast message.
   1567           *
   1568           * @param       dstAddr - destination address of the message
   1569           * @param       Status - message status (ZDP_SUCCESS or other)
   1570           * @param       BindingTableEntries - Total number of entries
   1571           * @param       StartIndex - Starting index within the reporting list
   1572           * @param       BindingTableListCount - number of entries included
   1573           *                                 in this message
   1574           * @param       BindingTableList - List of Binding Table entries
   1575           * @param       SecurityEnable - Security Options
   1576           *
   1577           * @return      ZStatus_t
   1578           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1579          ZStatus_t ZDP_MgmtBindRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtBindRsp:
   1580                                      byte Status,
   1581                                      byte BindingTableEntries,
   1582                                      byte StartIndex,
   1583                                      byte BindingTableListCount,
   1584                                      apsBindingItem_t *BindingTableList,
   1585                                      byte SecurityEnable )
   1586          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7401         MOV     A,#0x1
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   E9           MOV     A,R1
   \   000010   F0           MOVX    @DPTR,A
   \   000011   7402         MOV     A,#0x2
   \   000013   12....       LCALL   ?XSTACK_DISP0_8
   \   000016   12....       LCALL   ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   000019   8D..         MOV     ?V0 + 7,R5
   \   00001B   7414         MOV     A,#0x14
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F5..         MOV     ?V0 + 0,A
   \   000023   7415         MOV     A,#0x15
   \   000025   12....       LCALL   ?XSTACK_DISP0_8
   \   000028   E0           MOVX    A,@DPTR
   \   000029   F5..         MOV     ?V0 + 6,A
   \   00002B   7416         MOV     A,#0x16
   \   00002D   12....       LCALL   ?XSTACK_DISP0_8
   \   000030   12....       LCALL   ?Subroutine17 & 0xFFFF
   1587            uint8 *buf;
   1588            uint8 *pBuf;
   1589            uint8 maxLen; // maxLen is the maximum packet length to allocate enough memory space
   1590            uint8 len;    // Actual length varies due to different addrMode
   1591            uint8 x;
   1592            byte extZdpBindEntrySize = ZDP_BINDINGENTRY_SIZE + 1 + 1; // One more byte for cluserID and DstAddrMode
   1593            byte shortZdpBindEntrySize = ZDP_BINDINGENTRY_SIZE + 1 + 1 + 2 - 8 - 1; // clusterID + DstAddrMode + shortAddr - ExtAddr - DstEndpoint
   1594          
   1595            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1596            
   1597            // Status + BindingTableEntries + StartIndex + BindingTableListCount.
   1598            maxLen = 1 + 1 + 1 + 1;
   1599            maxLen += (BindingTableListCount * extZdpBindEntrySize );  //max length
   1600            buf = osal_mem_alloc( maxLen + 1 );  // +1 for transaction ID
   \                     ??CrossCallReturnLabel_19:
   \   000033                ; Setup parameters for call to function osal_mem_alloc
   \   000033   75F015       MOV     B,#0x15
   \   000036   E5..         MOV     A,?V0 + 6
   \   000038   A4           MUL     AB
   \   000039   2405         ADD     A,#0x5
   \   00003B   FA           MOV     R2,A
   \   00003C   E4           CLR     A
   \   00003D   3400         ADDC    A,#0x0
   \   00003F   FB           MOV     R3,A
   \   000040   12....       LCALL   ??osal_mem_alloc?relay
   \   000043   8A..         MOV     ?V0 + 2,R2
   \   000045   8B..         MOV     ?V0 + 3,R3
   1601          
   1602            if ( buf == NULL )
   \   000047   EA           MOV     A,R2
   \   000048   45..         ORL     A,?V0 + 3
   \   00004A   7005         JNZ     ??ZDP_MgmtBindRsp_0
   1603            {
   1604              return afStatus_MEM_FAIL;
   \   00004C   7910         MOV     R1,#0x10
   \   00004E   02....       LJMP    ??CrossCallReturnLabel_178 & 0xFFFF
   1605            }
   \                     ??ZDP_MgmtBindRsp_0:
   \   000051   8A82         MOV     DPL,R2
   \   000053   8B83         MOV     DPH,R3
   \   000055   A3           INC     DPTR
   \   000056   AA82         MOV     R2,DPL
   \   000058   AB83         MOV     R3,DPH
   1606          
   1607            pBuf = buf+1;
   1608          
   1609            *pBuf++ = Status;
   \   00005A   12....       LCALL   ?Subroutine41 & 0xFFFF
   1610            *pBuf++ = BindingTableEntries;
   \                     ??CrossCallReturnLabel_239:
   \   00005D   E5..         MOV     A,?V0 + 7
   \   00005F   F0           MOVX    @DPTR,A
   \   000060   A3           INC     DPTR
   1611            *pBuf++ = StartIndex;
   \   000061   E5..         MOV     A,?V0 + 0
   \   000063   F0           MOVX    @DPTR,A
   \   000064   A3           INC     DPTR
   1612            *pBuf++ = BindingTableListCount;
   \   000065   E5..         MOV     A,?V0 + 6
   \   000067   12....       LCALL   ??Subroutine114_0 & 0xFFFF
   1613          
   1614            // Initial length = Status + BindingTableEntries + StartIndex + BindingTableListCount.
   1615            // length += ZDP_BINDINGENTRY_SIZE   -- Version 1.0
   1616            //           extZdpBindEntrySize     -- Version 1.1 extended address mode
   1617            //           shortZdpBindEntrySize   -- Version 1.1 group address mode
   1618          
   1619            len = 1 + 1 + 1 + 1;
   \                     ??CrossCallReturnLabel_233:
   \   00006A   75..04       MOV     ?V0 + 0,#0x4
   1620            for ( x = 0; x < BindingTableListCount; x++ )
   \   00006D   75..00       MOV     ?V0 + 1,#0x0
   \   000070   8015         SJMP    ??ZDP_MgmtBindRsp_1
   1621            {
   1622              pBuf = osal_cpyExtAddr( pBuf, BindingTableList->srcAddr );
   1623              *pBuf++ = BindingTableList->srcEP;
   1624          
   1625              // Cluster ID
   1626              *pBuf++ = LO_UINT16( BindingTableList->clusterID );
   1627              *pBuf++ = HI_UINT16( BindingTableList->clusterID );
   1628          
   1629              *pBuf++ = BindingTableList->dstAddr.addrMode;
   1630              if ( BindingTableList->dstAddr.addrMode == Addr64Bit )
   1631              {
   1632                len += extZdpBindEntrySize;
   1633                pBuf = osal_cpyExtAddr( pBuf, BindingTableList->dstAddr.addr.extAddr );
   1634                *pBuf++ = BindingTableList->dstEP;
   1635              }
   1636              else
   1637              {
   1638                len += shortZdpBindEntrySize;
   \                     ??ZDP_MgmtBindRsp_2:
   \   000072   740E         MOV     A,#0xe
   \   000074   25..         ADD     A,?V0 + 0
   \   000076   F5..         MOV     ?V0 + 0,A
   1639                *pBuf++ = LO_UINT16( BindingTableList->dstAddr.addr.shortAddr );
   \   000078   12....       LCALL   ?Subroutine15 & 0xFFFF
   1640                *pBuf++ = HI_UINT16( BindingTableList->dstAddr.addr.shortAddr );
   1641              }
   \                     ??CrossCallReturnLabel_10:
   \   00007B   AB83         MOV     R3,DPH
   1642              BindingTableList++;    // Move to next list entry
   \   00007D   EE           MOV     A,R6
   \   00007E   2415         ADD     A,#0x15
   \   000080   FE           MOV     R6,A
   \   000081   EF           MOV     A,R7
   \   000082   3400         ADDC    A,#0x0
   \   000084   FF           MOV     R7,A
   \   000085   05..         INC     ?V0 + 1
   \                     ??ZDP_MgmtBindRsp_1:
   \   000087   E5..         MOV     A,?V0 + 1
   \   000089   C3           CLR     C
   \   00008A   95..         SUBB    A,?V0 + 6
   \   00008C   5056         JNC     ??ZDP_MgmtBindRsp_3
   \   00008E                ; Setup parameters for call to function sAddrExtCpy
   \   00008E   EE           MOV     A,R6
   \   00008F   FC           MOV     R4,A
   \   000090   EF           MOV     A,R7
   \   000091   FD           MOV     R5,A
   \   000092   12....       LCALL   ??sAddrExtCpy?relay
   \   000095   8E82         MOV     DPL,R6
   \   000097   8F83         MOV     DPH,R7
   \   000099   A3           INC     DPTR
   \   00009A   A3           INC     DPTR
   \   00009B   A3           INC     DPTR
   \   00009C   A3           INC     DPTR
   \   00009D   A3           INC     DPTR
   \   00009E   A3           INC     DPTR
   \   00009F   A3           INC     DPTR
   \   0000A0   A3           INC     DPTR
   \   0000A1   12....       LCALL   ??Subroutine116_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_242:
   \   0000A4   EE           MOV     A,R6
   \   0000A5   2409         ADD     A,#0x9
   \   0000A7   FC           MOV     R4,A
   \   0000A8   EF           MOV     A,R7
   \   0000A9   3400         ADDC    A,#0x0
   \   0000AB   FD           MOV     R5,A
   \   0000AC   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   0000AF   AB83         MOV     R3,DPH
   \   0000B1   EE           MOV     A,R6
   \   0000B2   2413         ADD     A,#0x13
   \   0000B4   F8           MOV     R0,A
   \   0000B5   EF           MOV     A,R7
   \   0000B6   3400         ADDC    A,#0x0
   \   0000B8   F9           MOV     R1,A
   \   0000B9   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_255:
   \   0000BC   EE           MOV     A,R6
   \   0000BD   240B         ADD     A,#0xb
   \   0000BF   0C           INC     R4
   \   0000C0   0C           INC     R4
   \   0000C1   EF           MOV     A,R7
   \   0000C2   3400         ADDC    A,#0x0
   \   0000C4   FD           MOV     R5,A
   \   0000C5   8882         MOV     DPL,R0
   \   0000C7   8983         MOV     DPH,R1
   \   0000C9   E0           MOVX    A,@DPTR
   \   0000CA   6403         XRL     A,#0x3
   \   0000CC   70A4         JNZ     ??ZDP_MgmtBindRsp_2
   \   0000CE   7415         MOV     A,#0x15
   \   0000D0   25..         ADD     A,?V0 + 0
   \   0000D2   F5..         MOV     ?V0 + 0,A
   \   0000D4                ; Setup parameters for call to function sAddrExtCpy
   \   0000D4   12....       LCALL   ??sAddrExtCpy?relay
   \   0000D7   EE           MOV     A,R6
   \   0000D8   2414         ADD     A,#0x14
   \   0000DA   12....       LCALL   ?Subroutine68 & 0xFFFF
   1643            }
   \                     ??CrossCallReturnLabel_282:
   \   0000DD   12....       LCALL   ??Subroutine115_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_237:
   \   0000E0   AA82         MOV     R2,DPL
   \   0000E2   8097         SJMP    ??CrossCallReturnLabel_10
   1644          
   1645            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_Bind_rsp, len, buf );
   \                     ??ZDP_MgmtBindRsp_3:
   \   0000E4   12....       LCALL   ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_291:
   \   0000E7                ; Setup parameters for call to function fillAndSend
   \   0000E7   75..33       MOV     ?V0 + 4,#0x33
   \   0000EA   75..80       MOV     ?V0 + 5,#-0x80
   \   0000ED   78..         MOV     R0,#?V0 + 4
   \   0000EF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000F2   A9..         MOV     R1,?V0 + 0
   \   0000F4   7404         MOV     A,#0x4
   \   0000F6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F9   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   0000FC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FF   12....       LCALL   ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_136:
   \   000102   12....       LCALL   ?DEALLOC_XSTACK8
   \   000105   12....       LCALL   ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_178:
   \   000108   02....       LJMP    ?Subroutine6 & 0xFFFF
   1646          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   8C82         MOV     DPL,R4
   \   000002   8D83         MOV     DPH,R5
   \   000004   12....       LCALL   ??Subroutine94_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_257:
   \   000007   8C82         MOV     DPL,R4
   \   000009   8D83         MOV     DPH,R5
   \   00000B   A3           INC     DPTR
   \   00000C   12....       LCALL   ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_246:
   \   00000F   0A           INC     R2
   \   000010   22           RET
   1647          
   1648          /*********************************************************************
   1649           * @fn          ZDP_MgmtNwkUpdateNotify
   1650           *
   1651           * @brief       This builds and send a Mgmt_NWK_Update_notify message. This
   1652           *              function sends a unicast message.
   1653           *
   1654           * @param       dstAddr - destination address of the message
   1655           * @param       status - message status (ZDP_SUCCESS or other)
   1656           * @param       scannedChannels - List of channels scanned by the request
   1657           * @param       totalTransmissions - Total transmissions
   1658           * @param       transmissionFailures - Sum of transmission failures
   1659           * @param       listCount - Number of records contained in the energyValues list
   1660           * @param       energyValues - List of descriptors, one for each of ListCount,
   1661           *                             of the enegry detect descriptors
   1662           * @param       txOptions - Transmit options
   1663           * @param       securityEnable - Security options
   1664           *
   1665           * @return      afStatus_t
   1666           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1667          afStatus_t ZDP_MgmtNwkUpdateNotify( uint8 TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtNwkUpdateNotify:
   1668                                              uint8 status, uint32 scannedChannels,
   1669                                              uint16 totalTransmissions, uint16 transmissionFailures,
   1670                                              uint8 listCount, uint8 *energyValues, uint8 txOptions,
   1671                                              uint8 securityEnable )
   1672          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7405         MOV     A,#0x5
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   E9           MOV     A,R1
   \   000010   F0           MOVX    @DPTR,A
   \   000011   7408         MOV     A,#0x8
   \   000013   12....       LCALL   ?XSTACK_DISP0_8
   \   000016   12....       LCALL   ??Subroutine108_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_207:
   \   000019   7404         MOV     A,#0x4
   \   00001B   12....       LCALL   ?XSTACK_DISP0_8
   \   00001E   EC           MOV     A,R4
   \   00001F   F0           MOVX    @DPTR,A
   \   000020   ED           MOV     A,R5
   \   000021   85..82       MOV     DPL,?XSP + 0
   \   000024   85..83       MOV     DPH,?XSP + 1
   \   000027   F0           MOVX    @DPTR,A
   \   000028   7418         MOV     A,#0x18
   \   00002A   12....       LCALL   ?XSTACK_DISP0_8
   \   00002D   78..         MOV     R0,#?V0 + 0
   \   00002F   12....       LCALL   ?L_MOV_X
   \   000032   741C         MOV     A,#0x1c
   \   000034   12....       LCALL   ?XSTACK_DISP0_8
   \   000037   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   00003A   741E         MOV     A,#0x1e
   \   00003C   12....       LCALL   ?XSTACK_DISP0_8
   \   00003F   12....       LCALL   ?Subroutine17 & 0xFFFF
   1673            uint8 *buf;
   1674            uint8 *pBuf;
   1675            uint8 len;
   1676          
   1677            (void)securityEnable;  // Intentionally unreferenced parameter
   1678            
   1679            // Status + ScannedChannels + totalTransmissions + transmissionFailures + ListCount + energyValues
   1680            len = 1 + 4 + 2 + 2 + 1 + listCount;
   \                     ??CrossCallReturnLabel_20:
   \   000042   85..82       MOV     DPL,?XSP + 0
   \   000045   85..83       MOV     DPH,?XSP + 1
   \   000048   E0           MOVX    A,@DPTR
   \   000049   240A         ADD     A,#0xa
   \   00004B   C0E0         PUSH    A
   \   00004D   7401         MOV     A,#0x1
   \   00004F   12....       LCALL   ?XSTACK_DISP0_8
   \   000052   D0E0         POP     A
   \   000054   12....       LCALL   ??Subroutine105_0 & 0xFFFF
   1681          
   1682            buf = osal_mem_alloc( len+1 ); // +1 for transaction ID
   \                     ??CrossCallReturnLabel_186:
   \   000057   7402         MOV     A,#0x2
   \   000059   12....       LCALL   ?XSTACK_DISP0_8
   \   00005C   12....       LCALL   ?Subroutine59 & 0xFFFF
   1683            if ( buf == NULL )
   \                     ??CrossCallReturnLabel_94:
   \   00005F   12....       LCALL   ?XSTACK_DISP0_8
   \   000062   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   000065   7005         JNZ     ??ZDP_MgmtNwkUpdateNotify_0
   1684            {
   1685              return afStatus_MEM_FAIL;
   \   000067   7910         MOV     R1,#0x10
   \   000069   02....       LJMP    ??ZDP_MgmtNwkUpdateNotify_1 & 0xFFFF
   1686            }
   1687          
   1688            pBuf = buf+1;
   \                     ??ZDP_MgmtNwkUpdateNotify_0:
   \   00006C   7402         MOV     A,#0x2
   \   00006E   12....       LCALL   ?XSTACK_DISP0_8
   \   000071   E0           MOVX    A,@DPTR
   \   000072   2401         ADD     A,#0x1
   \   000074   08           INC     R0
   \   000075   A3           INC     DPTR
   \   000076   E0           MOVX    A,@DPTR
   \   000077   3400         ADDC    A,#0x0
   \   000079   F9           MOV     R1,A
   \   00007A   7406         MOV     A,#0x6
   \   00007C   12....       LCALL   ?XSTACK_DISP0_8
   \   00007F   12....       LCALL   ??Subroutine122_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_285:
   \   000082   7406         MOV     A,#0x6
   \   000084   12....       LCALL   ?XSTACK_DISP0_8
   \   000087   12....       LCALL   ??Subroutine120_0 & 0xFFFF
   1689          
   1690            *pBuf++ = status;
   \                     ??CrossCallReturnLabel_268:
   \   00008A   7404         MOV     A,#0x4
   \   00008C   12....       LCALL   ?XSTACK_DISP0_8
   \   00008F   12....       LCALL   ??Subroutine116_0 & 0xFFFF
   1691          
   1692            pBuf = osal_buffer_uint32( pBuf, scannedChannels );
   \                     ??CrossCallReturnLabel_243:
   \   000092                ; Setup parameters for call to function osal_buffer_uint32
   \   000092   78..         MOV     R0,#?V0 + 0
   \   000094   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000097   12....       LCALL   ??osal_buffer_uint32?relay
   \   00009A   7404         MOV     A,#0x4
   \   00009C   12....       LCALL   ?DEALLOC_XSTACK8
   1693          
   1694            *pBuf++ = LO_UINT16( totalTransmissions );
   \   00009F   8A82         MOV     DPL,R2
   \   0000A1   8B83         MOV     DPH,R3
   \   0000A3   E5..         MOV     A,?V0 + 4
   \   0000A5   F0           MOVX    @DPTR,A
   \   0000A6   A3           INC     DPTR
   1695            *pBuf++ = HI_UINT16( totalTransmissions );
   \   0000A7   E5..         MOV     A,?V0 + 5
   \   0000A9   F0           MOVX    @DPTR,A
   \   0000AA   A3           INC     DPTR
   1696          
   1697            *pBuf++ = LO_UINT16( transmissionFailures );
   \   0000AB   EE           MOV     A,R6
   \   0000AC   F0           MOVX    @DPTR,A
   \   0000AD   A3           INC     DPTR
   1698            *pBuf++ = HI_UINT16( transmissionFailures );
   \   0000AE   EF           MOV     A,R7
   \   0000AF   12....       LCALL   ??Subroutine114_0 & 0xFFFF
   1699          
   1700            *pBuf++ = listCount;
   \                     ??CrossCallReturnLabel_234:
   \   0000B2   85..82       MOV     DPL,?XSP + 0
   \   0000B5   85..83       MOV     DPH,?XSP + 1
   \   0000B8   12....       LCALL   ??Subroutine118_0 & 0xFFFF
   1701          
   1702            if ( listCount > 0 )
   \                     ??CrossCallReturnLabel_253:
   \   0000BB   85..82       MOV     DPL,?XSP + 0
   \   0000BE   85..83       MOV     DPH,?XSP + 1
   \   0000C1   E0           MOVX    A,@DPTR
   \   0000C2   601B         JZ      ??ZDP_MgmtNwkUpdateNotify_2
   1703              osal_memcpy( pBuf, energyValues, listCount );
   \   0000C4                ; Setup parameters for call to function osal_memcpy
   \   0000C4   7420         MOV     A,#0x20
   \   0000C6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C9   12....       LCALL   ??Subroutine98_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_162:
   \   0000CC   75..00       MOV     ?V0 + 2,#0x0
   \   0000CF   78..         MOV     R0,#?V0 + 0
   \   0000D1   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000D4   7403         MOV     A,#0x3
   \   0000D6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D9   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   0000DC   12....       LCALL   ?DEALLOC_XSTACK8
   1704          
   1705            FillAndSendBufferTxOptions( &TransSeq, dstAddr, Mgmt_NWK_Update_notify, len, buf, txOptions );
   \                     ??ZDP_MgmtNwkUpdateNotify_2:
   \   0000DF   7406         MOV     A,#0x6
   \   0000E1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E4   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   0000E7   12....       LCALL   ??Subroutine122_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_286:
   \   0000EA   7422         MOV     A,#0x22
   \   0000EC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EF   E0           MOVX    A,@DPTR
   \   0000F0   90....       MOV     DPTR,#ZDP_TxOptions
   \   0000F3   F0           MOVX    @DPTR,A
   \   0000F4                ; Setup parameters for call to function fillAndSend
   \   0000F4   75..38       MOV     ?V0 + 0,#0x38
   \   0000F7   75..80       MOV     ?V0 + 1,#-0x80
   \   0000FA   78..         MOV     R0,#?V0 + 0
   \   0000FC   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000FF   7403         MOV     A,#0x3
   \   000101   12....       LCALL   ?XSTACK_DISP0_8
   \   000104   E0           MOVX    A,@DPTR
   \   000105   F9           MOV     R1,A
   \   000106   740A         MOV     A,#0xa
   \   000108   12....       LCALL   ?XSTACK_DISP0_8
   \   00010B   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   00010E   7407         MOV     A,#0x7
   \   000110   12....       LCALL   ?XSTACK_DISP0_8
   \   000113   12....       LCALL   ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_137:
   \   000116   12....       LCALL   ?DEALLOC_XSTACK8
   \   000119   E9           MOV     A,R1
   \   00011A   FE           MOV     R6,A
   \   00011B                ; Setup parameters for call to function osal_mem_free
   \   00011B   7402         MOV     A,#0x2
   \   00011D   12....       LCALL   ?XSTACK_DISP0_8
   \   000120   12....       LCALL   ??Subroutine120_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_269:
   \   000123   12....       LCALL   ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_182:
   \   000126   90....       MOV     DPTR,#ZDP_TxOptions
   \   000129   E4           CLR     A
   \   00012A   F0           MOVX    @DPTR,A
   \   00012B   EE           MOV     A,R6
   \   00012C   F9           MOV     R1,A
   \                     ??ZDP_MgmtNwkUpdateNotify_1:
   \   00012D   740A         MOV     A,#0xa
   \   00012F                REQUIRE ?Subroutine0
   \   00012F                ; // Fall through to label ?Subroutine0
   1706          }
   1707          
   1708          /*********************************************************************
   1709           * Functions to register for ZDO Over-the-air messages
   1710           */
   1711          
   1712          /*********************************************************************
   1713           * @fn          ZDO_RegisterForZDOMsg
   1714           *
   1715           * @brief       Call this function to register of an incoming over
   1716           *              the air ZDO message - probably a response message
   1717           *              but requests can also be received.
   1718           *              Messages are delivered to the task with ZDO_CB_MSG
   1719           *              as the message ID.
   1720           *
   1721           * @param       taskID - Where you would like the message delivered
   1722           * @param       clusterID - What message?
   1723           *
   1724           * @return      ZSuccess - successful, ZMemError if not
   1725           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1726          ZStatus_t ZDO_RegisterForZDOMsg( uint8 taskID, uint16 clusterID )
   \                     ZDO_RegisterForZDOMsg:
   1727          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 2,R1
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
   \   000009   EB           MOV     A,R3
   \   00000A   FF           MOV     R7,A
   1728            ZDO_MsgCB_t *pList;
   1729            ZDO_MsgCB_t *pLast;
   1730            ZDO_MsgCB_t *pNew;
   1731          
   1732            // Look for duplicate
   1733            pList = zdoMsgCBs;
   \   00000B   90....       MOV     DPTR,#zdoMsgCBs
   \   00000E   8008         SJMP    ??ZDO_RegisterForZDOMsg_0
   1734            while ( pList )
   1735            {
   1736              if ( pList->taskID == taskID && pList->clusterID == clusterID )
   1737                return ( ZSuccess );
   1738              pLast = pList;
   \                     ??ZDO_RegisterForZDOMsg_1:
   \   000010   88..         MOV     ?V0 + 0,R0
   \   000012   89..         MOV     ?V0 + 1,R1
   1739              pList = (ZDO_MsgCB_t *)pList->next;
   \   000014   8882         MOV     DPL,R0
   \   000016   8983         MOV     DPH,R1
   \                     ??ZDO_RegisterForZDOMsg_0:
   \   000018   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   00001B   601F         JZ      ??ZDO_RegisterForZDOMsg_2
   \   00001D   8882         MOV     DPL,R0
   \   00001F   8983         MOV     DPH,R1
   \   000021   A3           INC     DPTR
   \   000022   A3           INC     DPTR
   \   000023   E0           MOVX    A,@DPTR
   \   000024   65..         XRL     A,?V0 + 2
   \   000026   70E8         JNZ     ??ZDO_RegisterForZDOMsg_1
   \   000028   8882         MOV     DPL,R0
   \   00002A   8983         MOV     DPH,R1
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   6E           XRL     A,R6
   \   000031   7003         JNZ     ??ZDO_RegisterForZDOMsg_3
   \   000033   A3           INC     DPTR
   \   000034   E0           MOVX    A,@DPTR
   \   000035   6F           XRL     A,R7
   \                     ??ZDO_RegisterForZDOMsg_3:
   \   000036   70D8         JNZ     ??ZDO_RegisterForZDOMsg_1
   \                     ??ZDO_RegisterForZDOMsg_4:
   \   000038   7900         MOV     R1,#0x0
   \   00003A   804C         SJMP    ??ZDO_RegisterForZDOMsg_5
   1740            }
   1741          
   1742            // Add to the list
   1743            pNew = (ZDO_MsgCB_t *)osal_mem_alloc( sizeof ( ZDO_MsgCB_t ) );
   \                     ??ZDO_RegisterForZDOMsg_2:
   \   00003C                ; Setup parameters for call to function osal_mem_alloc
   \   00003C   7A05         MOV     R2,#0x5
   \   00003E   7B00         MOV     R3,#0x0
   \   000040   12....       LCALL   ??osal_mem_alloc?relay
   \   000043   8A..         MOV     ?V0 + 4,R2
   \   000045   8B..         MOV     ?V0 + 5,R3
   \   000047   A8..         MOV     R0,?V0 + 4
   \   000049   A9..         MOV     R1,?V0 + 5
   1744            if ( pNew )
   \   00004B   E8           MOV     A,R0
   \   00004C   49           ORL     A,R1
   \   00004D   6037         JZ      ??ZDO_RegisterForZDOMsg_6
   1745            {
   1746              pNew->taskID = taskID;
   \   00004F   8882         MOV     DPL,R0
   \   000051   8983         MOV     DPH,R1
   \   000053   A3           INC     DPTR
   \   000054   A3           INC     DPTR
   \   000055   E5..         MOV     A,?V0 + 2
   \   000057   F0           MOVX    @DPTR,A
   1747              pNew->clusterID = clusterID;
   \   000058   8882         MOV     DPL,R0
   \   00005A   8983         MOV     DPH,R1
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   EE           MOV     A,R6
   \   000060   F0           MOVX    @DPTR,A
   \   000061   A3           INC     DPTR
   \   000062   EF           MOV     A,R7
   \   000063   F0           MOVX    @DPTR,A
   1748              pNew->next = NULL;
   \   000064   8882         MOV     DPL,R0
   \   000066   8983         MOV     DPH,R1
   \   000068   E4           CLR     A
   \   000069   F0           MOVX    @DPTR,A
   \   00006A   A3           INC     DPTR
   \   00006B   F0           MOVX    @DPTR,A
   1749              if ( zdoMsgCBs )
   \   00006C   90....       MOV     DPTR,#zdoMsgCBs
   \   00006F   12....       LCALL   ??Subroutine120_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_270:
   \   000072   EA           MOV     A,R2
   \   000073   4B           ORL     A,R3
   \   000074   600B         JZ      ??ZDO_RegisterForZDOMsg_7
   1750              {
   1751                pLast->next = pNew;
   \   000076   85..82       MOV     DPL,?V0 + 0
   \   000079   85..83       MOV     DPH,?V0 + 1
   1752              }
   \                     ??ZDO_RegisterForZDOMsg_8:
   \   00007C   12....       LCALL   ??Subroutine122_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_287:
   \   00007F   80B7         SJMP    ??ZDO_RegisterForZDOMsg_4
   1753              else
   1754                zdoMsgCBs = pNew;
   \                     ??ZDO_RegisterForZDOMsg_7:
   \   000081   90....       MOV     DPTR,#zdoMsgCBs
   \   000084   80F6         SJMP    ??ZDO_RegisterForZDOMsg_8
   1755              return ( ZSuccess );
   1756            }
   1757            else
   1758              return ( ZMemError );
   \                     ??ZDO_RegisterForZDOMsg_6:
   \   000086   7910         MOV     R1,#0x10
   \                     ??ZDO_RegisterForZDOMsg_5:
   \   000088   02....       LJMP    ??Subroutine117_0 & 0xFFFF
   1759          }
   1760          
   1761          /*********************************************************************
   1762           * @fn          ZDO_RemoveRegisteredCB
   1763           *
   1764           * @brief       Call this function if you don't want to receive the
   1765           *              incoming message.
   1766           *
   1767           * @param       taskID - Where the messages are being delivered.
   1768           * @param       clusterID - What message?
   1769           *
   1770           * @return      ZSuccess - successful, ZFailure if not found
   1771           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1772          ZStatus_t ZDO_RemoveRegisteredCB( uint8 taskID, uint16 clusterID )
   \                     ZDO_RemoveRegisteredCB:
   1773          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   1774            ZDO_MsgCB_t *pList;
   1775            ZDO_MsgCB_t *pLast = NULL;
   \   000007   7C00         MOV     R4,#0x0
   \   000009   7D00         MOV     R5,#0x0
   1776          
   1777            pList = zdoMsgCBs;
   \   00000B   90....       MOV     DPTR,#zdoMsgCBs
   \   00000E   8008         SJMP    ??ZDO_RemoveRegisteredCB_0
   1778            while ( pList )
   1779            {
   1780              if ( pList->taskID == taskID && pList->clusterID == clusterID )
   1781              {
   1782                if ( pLast )
   1783                {
   1784                  // remove this one from the linked list
   1785                  pLast->next = pList->next;
   1786                }
   1787                else if ( pList->next )
   1788                {
   1789                  // remove the first one from the linked list
   1790                  zdoMsgCBs = pList->next;
   1791                }
   1792                else
   1793                {
   1794                  // remove the only item from the list
   1795                  zdoMsgCBs = (ZDO_MsgCB_t *)NULL;
   1796                }
   1797                osal_mem_free( pList );
   1798                return ( ZSuccess );
   1799              }
   1800              pLast = pList;
   \                     ??ZDO_RemoveRegisteredCB_1:
   \   000010   E8           MOV     A,R0
   \   000011   FC           MOV     R4,A
   \   000012   E9           MOV     A,R1
   \   000013   FD           MOV     R5,A
   1801              pList = pList->next;
   \   000014   8882         MOV     DPL,R0
   \   000016   8983         MOV     DPH,R1
   \                     ??ZDO_RemoveRegisteredCB_0:
   \   000018   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   00001B   6045         JZ      ??ZDO_RemoveRegisteredCB_2
   \   00001D   8882         MOV     DPL,R0
   \   00001F   8983         MOV     DPH,R1
   \   000021   A3           INC     DPTR
   \   000022   A3           INC     DPTR
   \   000023   E0           MOVX    A,@DPTR
   \   000024   6E           XRL     A,R6
   \   000025   70E9         JNZ     ??ZDO_RemoveRegisteredCB_1
   \   000027   8882         MOV     DPL,R0
   \   000029   8983         MOV     DPH,R1
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   6A           XRL     A,R2
   \   000030   7003         JNZ     ??ZDO_RemoveRegisteredCB_3
   \   000032   A3           INC     DPTR
   \   000033   E0           MOVX    A,@DPTR
   \   000034   6B           XRL     A,R3
   \                     ??ZDO_RemoveRegisteredCB_3:
   \   000035   70D9         JNZ     ??ZDO_RemoveRegisteredCB_1
   \   000037   8882         MOV     DPL,R0
   \   000039   8983         MOV     DPH,R1
   \   00003B   12....       LCALL   ??Subroutine120_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_271:
   \   00003E   EC           MOV     A,R4
   \   00003F   4D           ORL     A,R5
   \   000040   600A         JZ      ??ZDO_RemoveRegisteredCB_4
   \   000042   8C82         MOV     DPL,R4
   \   000044   8D83         MOV     DPH,R5
   \                     ??ZDO_RemoveRegisteredCB_5:
   \   000046   EA           MOV     A,R2
   \   000047   F0           MOVX    @DPTR,A
   \   000048   A3           INC     DPTR
   \   000049   EB           MOV     A,R3
   \   00004A   800A         SJMP    ??ZDO_RemoveRegisteredCB_6
   \                     ??ZDO_RemoveRegisteredCB_4:
   \   00004C   EA           MOV     A,R2
   \   00004D   4B           ORL     A,R3
   \   00004E   90....       MOV     DPTR,#zdoMsgCBs
   \   000051   70F3         JNZ     ??ZDO_RemoveRegisteredCB_5
   \   000053   E4           CLR     A
   \   000054   F0           MOVX    @DPTR,A
   \   000055   A3           INC     DPTR
   \                     ??ZDO_RemoveRegisteredCB_6:
   \   000056   F0           MOVX    @DPTR,A
   \   000057                ; Setup parameters for call to function osal_mem_free
   \   000057   E8           MOV     A,R0
   \   000058   FA           MOV     R2,A
   \   000059   E9           MOV     A,R1
   \   00005A   FB           MOV     R3,A
   \   00005B   12....       LCALL   ??osal_mem_free?relay
   \   00005E   7900         MOV     R1,#0x0
   \   000060   8002         SJMP    ??ZDO_RemoveRegisteredCB_7
   1802            }
   1803          
   1804            return ( ZFailure );
   \                     ??ZDO_RemoveRegisteredCB_2:
   \   000062   7901         MOV     R1,#0x1
   \                     ??ZDO_RemoveRegisteredCB_7:
   \   000064   7F01         MOV     R7,#0x1
   \   000066   02....       LJMP    ?BANKED_LEAVE_XDATA
   1805          }
   1806          
   1807          /*********************************************************************
   1808           * @fn          ZDO_SendMsgCBs
   1809           *
   1810           * @brief       This function sends messages to registered tasks.
   1811           *              Local to ZDO and shouldn't be called outside of ZDO.
   1812           *
   1813           * @param       inMsg - incoming message
   1814           *
   1815           * @return      TRUE if sent to at least 1 task, FALSE if not
   1816           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine65:
   \   000000   E5..         MOV     A,?V0 + 6
   \   000002   2410         ADD     A,#0x10
   \   000004                REQUIRE ??Subroutine102_0
   \   000004                ; // Fall through to label ??Subroutine102_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine102_0:
   \   000000   F582         MOV     DPL,A
   \   000002   E5..         MOV     A,?V0 + 7
   \   000004                REQUIRE ??Subroutine103_0
   \   000004                ; // Fall through to label ??Subroutine103_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1817          uint8 ZDO_SendMsgCBs( zdoIncomingMsg_t *inMsg )
   \                     ZDO_SendMsgCBs:
   1818          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 6,R2
   \   000007   8B..         MOV     ?V0 + 7,R3
   1819            uint8 ret = FALSE;
   \   000009   75..00       MOV     ?V0 + 0,#0x0
   1820            ZDO_MsgCB_t *pList = zdoMsgCBs;
   \   00000C   90....       MOV     DPTR,#zdoMsgCBs
   \   00000F   02....       LJMP    ??ZDO_SendMsgCBs_0 & 0xFFFF
   1821            while ( pList )
   1822            {
   1823              if ( pList->clusterID == inMsg->clusterID )
   \                     ??ZDO_SendMsgCBs_1:
   \   000012   85..82       MOV     DPL,?V0 + 4
   \   000015   85..83       MOV     DPH,?V0 + 5
   \   000018   A3           INC     DPTR
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   12....       LCALL   ??Subroutine124_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_298:
   \   00001E   E5..         MOV     A,?V0 + 6
   \   000020   240C         ADD     A,#0xc
   \   000022   12....       LCALL   ??Subroutine102_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_174:
   \   000025   68           XRL     A,R0
   \   000026   7003         JNZ     ??ZDO_SendMsgCBs_2
   \   000028   A3           INC     DPTR
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   69           XRL     A,R1
   \                     ??ZDO_SendMsgCBs_2:
   \   00002B   6003         JZ      $+5
   \   00002D   02....       LJMP    ??ZDO_SendMsgCBs_3 & 0xFFFF
   1824              {
   1825                zdoIncomingMsg_t *msgPtr;
   1826          
   1827                // Send the address to the task
   1828                msgPtr = (zdoIncomingMsg_t *)osal_msg_allocate( sizeof( zdoIncomingMsg_t ) + inMsg->asduLen );
   \   000030                ; Setup parameters for call to function osal_msg_allocate
   \   000030   12....       LCALL   ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_175:
   \   000033   2415         ADD     A,#0x15
   \   000035   FA           MOV     R2,A
   \   000036   E4           CLR     A
   \   000037   3400         ADDC    A,#0x0
   \   000039   FB           MOV     R3,A
   \   00003A   12....       LCALL   ??osal_msg_allocate?relay
   \   00003D   8A..         MOV     ?V0 + 2,R2
   \   00003F   8B..         MOV     ?V0 + 3,R3
   \   000041   AE..         MOV     R6,?V0 + 2
   \   000043   AF..         MOV     R7,?V0 + 3
   1829                if ( msgPtr )
   \   000045   EE           MOV     A,R6
   \   000046   4F           ORL     A,R7
   \   000047   6068         JZ      ??ZDO_SendMsgCBs_3
   1830                {
   1831                  // copy struct
   1832                  osal_memcpy( msgPtr, inMsg, sizeof( zdoIncomingMsg_t ));
   \   000049                ; Setup parameters for call to function osal_memcpy
   \   000049   85....       MOV     ?V0 + 0,?V0 + 6
   \   00004C   85....       MOV     ?V0 + 1,?V0 + 7
   \   00004F   75..00       MOV     ?V0 + 2,#0x0
   \   000052   78..         MOV     R0,#?V0 + 0
   \   000054   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000057   7C15         MOV     R4,#0x15
   \   000059   12....       LCALL   ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_264:
   \   00005C   12....       LCALL   ?DEALLOC_XSTACK8
   1833          
   1834                  if ( inMsg->asduLen )
   \   00005F   12....       LCALL   ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_176:
   \   000062   6032         JZ      ??ZDO_SendMsgCBs_4
   1835                  {
   1836                    msgPtr->asdu = (byte*)(((byte*)msgPtr) + sizeof( zdoIncomingMsg_t ));
   \   000064   EE           MOV     A,R6
   \   000065   2415         ADD     A,#0x15
   \   000067   FA           MOV     R2,A
   \   000068   EF           MOV     A,R7
   \   000069   3400         ADDC    A,#0x0
   \   00006B   FB           MOV     R3,A
   \   00006C   EE           MOV     A,R6
   \   00006D   2413         ADD     A,#0x13
   \   00006F   12....       LCALL   ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_283:
   \   000072   12....       LCALL   ??Subroutine108_0 & 0xFFFF
   1837                    osal_memcpy( msgPtr->asdu, inMsg->asdu, inMsg->asduLen );
   \                     ??CrossCallReturnLabel_208:
   \   000075                ; Setup parameters for call to function osal_memcpy
   \   000075   E5..         MOV     A,?V0 + 6
   \   000077   2413         ADD     A,#0x13
   \   000079   F582         MOV     DPL,A
   \   00007B   E5..         MOV     A,?V0 + 7
   \   00007D   12....       LCALL   ?Subroutine33 & 0xFFFF
   1838                  }
   \                     ??CrossCallReturnLabel_164:
   \   000080   78..         MOV     R0,#?V0 + 0
   \   000082   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000085   E5..         MOV     A,?V0 + 6
   \   000087   2410         ADD     A,#0x10
   \   000089   F582         MOV     DPL,A
   \   00008B   E5..         MOV     A,?V0 + 7
   \   00008D   12....       LCALL   ??Subroutine121_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_279:
   \   000090   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   000093   12....       LCALL   ?DEALLOC_XSTACK8
   1839          
   1840                  msgPtr->hdr.event = ZDO_CB_MSG;
   \                     ??ZDO_SendMsgCBs_4:
   \   000096   8E82         MOV     DPL,R6
   \   000098   8F83         MOV     DPH,R7
   \   00009A   74D3         MOV     A,#-0x2d
   \   00009C   F0           MOVX    @DPTR,A
   1841                  osal_msg_send( pList->taskID, (uint8 *)msgPtr );
   \   00009D                ; Setup parameters for call to function osal_msg_send
   \   00009D   EE           MOV     A,R6
   \   00009E   FA           MOV     R2,A
   \   00009F   EF           MOV     A,R7
   \   0000A0   FB           MOV     R3,A
   \   0000A1   85..82       MOV     DPL,?V0 + 4
   \   0000A4   85..83       MOV     DPH,?V0 + 5
   \   0000A7   A3           INC     DPTR
   \   0000A8   A3           INC     DPTR
   \   0000A9   E0           MOVX    A,@DPTR
   \   0000AA   F9           MOV     R1,A
   \   0000AB   12....       LCALL   ??osal_msg_send?relay
   1842                  ret = TRUE;
   \   0000AE   75..01       MOV     ?V0 + 0,#0x1
   1843                }
   1844              }
   1845              pList = (ZDO_MsgCB_t *)pList->next;
   \                     ??ZDO_SendMsgCBs_3:
   \   0000B1   85..82       MOV     DPL,?V0 + 4
   \   0000B4   85..83       MOV     DPH,?V0 + 5
   1846            }
   \                     ??ZDO_SendMsgCBs_0:
   \   0000B7   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   0000BA   E5..         MOV     A,?V0 + 4
   \   0000BC   45..         ORL     A,?V0 + 5
   \   0000BE   6003         JZ      $+5
   \   0000C0   02....       LJMP    ??ZDO_SendMsgCBs_1 & 0xFFFF
   1847            return ( ret );
   \   0000C3   A9..         MOV     R1,?V0 + 0
   \   0000C5   02....       LJMP    ??Subroutine101_0 & 0xFFFF
   1848          }
   1849          
   1850          /*********************************************************************
   1851           * Incoming message processor
   1852           */
   1853          
   1854          /*********************************************************************
   1855           * @fn          ZDP_IncomingData
   1856           *
   1857           * @brief       This function indicates the transfer of a data PDU (ASDU)
   1858           *              from the APS sub-layer to the ZDO.
   1859           *
   1860           * @param       pData - Incoming Message
   1861           *
   1862           * @return      none
   1863           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1864          void ZDP_IncomingData( afIncomingMSGPacket_t *pData )
   \                     ZDP_IncomingData:
   1865          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1866            uint8 x = 0;
   \   00000A   7E00         MOV     R6,#0x0
   1867            uint8 handled;
   1868            zdoIncomingMsg_t inMsg;
   1869          
   1870            inMsg.srcAddr.addrMode = Addr16Bit;
   \   00000C   740A         MOV     A,#0xa
   \   00000E   12....       LCALL   ?XSTACK_DISP0_8
   \   000011   7402         MOV     A,#0x2
   \   000013   12....       LCALL   ?Subroutine61 & 0xFFFF
   1871            inMsg.srcAddr.addr.shortAddr = pData->srcAddr.addr.shortAddr;
   \                     ??CrossCallReturnLabel_97:
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   12....       LCALL   ??Subroutine124_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_299:
   \   00001B   7402         MOV     A,#0x2
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   12....       LCALL   ??Subroutine122_0 & 0xFFFF
   1872            inMsg.wasBroadcast = pData->wasBroadcast;
   \                     ??CrossCallReturnLabel_288:
   \   000023   EA           MOV     A,R2
   \   000024   2415         ADD     A,#0x15
   \   000026   F582         MOV     DPL,A
   \   000028   EB           MOV     A,R3
   \   000029   12....       LCALL   ??Subroutine103_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_171:
   \   00002C   C0E0         PUSH    A
   \   00002E   740B         MOV     A,#0xb
   \   000030   12....       LCALL   ?XSTACK_DISP0_8
   \   000033   D0E0         POP     A
   \   000035   12....       LCALL   ?Subroutine61 & 0xFFFF
   1873            inMsg.clusterID = pData->clusterId;
   \                     ??CrossCallReturnLabel_98:
   \   000038   12....       LCALL   ??Subroutine124_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_300:
   \   00003B   740C         MOV     A,#0xc
   \   00003D   12....       LCALL   ?XSTACK_DISP0_8
   \   000040   12....       LCALL   ??Subroutine122_0 & 0xFFFF
   1874            inMsg.SecurityUse = pData->SecurityUse;
   \                     ??CrossCallReturnLabel_289:
   \   000043   EA           MOV     A,R2
   \   000044   2419         ADD     A,#0x19
   \   000046   F582         MOV     DPL,A
   \   000048   EB           MOV     A,R3
   \   000049   12....       LCALL   ??Subroutine103_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_172:
   \   00004C   C0E0         PUSH    A
   \   00004E   740E         MOV     A,#0xe
   \   000050   12....       LCALL   ?XSTACK_DISP0_8
   \   000053   D0E0         POP     A
   \   000055   F0           MOVX    @DPTR,A
   1875          
   1876            inMsg.asduLen = pData->cmd.DataLength-1;
   \   000056   EA           MOV     A,R2
   \   000057   241F         ADD     A,#0x1f
   \   000059   F582         MOV     DPL,A
   \   00005B   EB           MOV     A,R3
   \   00005C   12....       LCALL   ??Subroutine103_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_173:
   \   00005F   14           DEC     A
   \   000060   C0E0         PUSH    A
   \   000062   7410         MOV     A,#0x10
   \   000064   12....       LCALL   ?XSTACK_DISP0_8
   \   000067   D0E0         POP     A
   \   000069   F0           MOVX    @DPTR,A
   1877            inMsg.asdu = pData->cmd.Data+1;
   \   00006A   EA           MOV     A,R2
   \   00006B   2421         ADD     A,#0x21
   \   00006D   F8           MOV     R0,A
   \   00006E   EB           MOV     A,R3
   \   00006F   12....       LCALL   ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   000072   E0           MOVX    A,@DPTR
   \   000073   2401         ADD     A,#0x1
   \   000075   FC           MOV     R4,A
   \   000076   A3           INC     DPTR
   \   000077   E0           MOVX    A,@DPTR
   \   000078   3400         ADDC    A,#0x0
   \   00007A   FD           MOV     R5,A
   \   00007B   7413         MOV     A,#0x13
   \   00007D   12....       LCALL   ?XSTACK_DISP0_8
   \   000080   EC           MOV     A,R4
   \   000081   F0           MOVX    @DPTR,A
   \   000082   A3           INC     DPTR
   \   000083   ED           MOV     A,R5
   \   000084   F0           MOVX    @DPTR,A
   1878            inMsg.TransSeq = pData->cmd.Data[0];
   \   000085   8882         MOV     DPL,R0
   \   000087   8983         MOV     DPH,R1
   \   000089   12....       LCALL   ??Subroutine97_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_148:
   \   00008C   E0           MOVX    A,@DPTR
   \   00008D   C0E0         PUSH    A
   \   00008F   740F         MOV     A,#0xf
   \   000091   12....       LCALL   ?XSTACK_DISP0_8
   \   000094   D0E0         POP     A
   \   000096   F0           MOVX    @DPTR,A
   1879            inMsg.macDestAddr = pData->macDestAddr;
   \   000097   EA           MOV     A,R2
   \   000098   2412         ADD     A,#0x12
   \   00009A   F582         MOV     DPL,A
   \   00009C   EB           MOV     A,R3
   \   00009D   12....       LCALL   ??Subroutine121_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_280:
   \   0000A0   12....       LCALL   ??Subroutine124_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_301:
   \   0000A3   7411         MOV     A,#0x11
   \   0000A5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A8   E8           MOV     A,R0
   \   0000A9   F0           MOVX    @DPTR,A
   \   0000AA   A3           INC     DPTR
   \   0000AB   E9           MOV     A,R1
   \   0000AC   12....       LCALL   ?Subroutine56 & 0xFFFF
   1880          
   1881            handled = ZDO_SendMsgCBs( &inMsg );
   \                     ??CrossCallReturnLabel_90:
   \   0000AF   AA82         MOV     R2,DPL
   \   0000B1   AB83         MOV     R3,DPH
   \   0000B3   12....       LCALL   ??ZDO_SendMsgCBs?relay
   \   0000B6   E9           MOV     A,R1
   \   0000B7   FC           MOV     R4,A
   \   0000B8   8001         SJMP    ??ZDP_IncomingData_0
   1882          
   1883          #if defined( MT_ZDO_CB_FUNC )
   1884            MT_ZdoDirectCB( pData, &inMsg );
   1885          #endif
   1886          
   1887            while ( zdpMsgProcs[x].clusterID != 0xFFFF )
   1888            {
   1889              if ( zdpMsgProcs[x].clusterID == inMsg.clusterID )
   1890              {
   1891                zdpMsgProcs[x].pFn( &inMsg );
   1892                return;
   1893              }
   1894              x++;
   \                     ??ZDP_IncomingData_1:
   \   0000BA   0E           INC     R6
   \                     ??ZDP_IncomingData_0:
   \   0000BB   8E..         MOV     ?V0 + 0,R6
   \   0000BD   75..00       MOV     ?V0 + 1,#0x0
   \   0000C0   7402         MOV     A,#0x2
   \   0000C2   78..         MOV     R0,#?V0 + 0
   \   0000C4   12....       LCALL   ?S_SHL
   \   0000C7   74..         MOV     A,#zdpMsgProcs & 0xff
   \   0000C9   25..         ADD     A,?V0 + 0
   \   0000CB   F8           MOV     R0,A
   \   0000CC   74..         MOV     A,#(zdpMsgProcs >> 8) & 0xff
   \   0000CE   35..         ADDC    A,?V0 + 1
   \   0000D0   F9           MOV     R1,A
   \   0000D1   8882         MOV     DPL,R0
   \   0000D3   8983         MOV     DPH,R1
   \   0000D5   E4           CLR     A
   \   0000D6   93           MOVC    A,@A+DPTR
   \   0000D7   C0E0         PUSH    A
   \   0000D9   7401         MOV     A,#0x1
   \   0000DB   93           MOVC    A,@A+DPTR
   \   0000DC   F583         MOV     DPH,A
   \   0000DE   D082         POP     DPL
   \   0000E0   AA82         MOV     R2,DPL
   \   0000E2   AB83         MOV     R3,DPH
   \   0000E4   74FF         MOV     A,#-0x1
   \   0000E6   6A           XRL     A,R2
   \   0000E7   7003         JNZ     ??ZDP_IncomingData_2
   \   0000E9   74FF         MOV     A,#-0x1
   \   0000EB   6B           XRL     A,R3
   \                     ??ZDP_IncomingData_2:
   \   0000EC   602E         JZ      ??ZDP_IncomingData_3
   \   0000EE   740C         MOV     A,#0xc
   \   0000F0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F3   E0           MOVX    A,@DPTR
   \   0000F4   6A           XRL     A,R2
   \   0000F5   7003         JNZ     ??ZDP_IncomingData_4
   \   0000F7   A3           INC     DPTR
   \   0000F8   E0           MOVX    A,@DPTR
   \   0000F9   6B           XRL     A,R3
   \                     ??ZDP_IncomingData_4:
   \   0000FA   70BE         JNZ     ??ZDP_IncomingData_1
   \   0000FC                ; Setup parameters for indirect call
   \   0000FC   85..82       MOV     DPL,?XSP + 0
   \   0000FF   85..83       MOV     DPH,?XSP + 1
   \   000102   AA82         MOV     R2,DPL
   \   000104   AB83         MOV     R3,DPH
   \   000106   8882         MOV     DPL,R0
   \   000108   8983         MOV     DPH,R1
   \   00010A   A3           INC     DPTR
   \   00010B   A3           INC     DPTR
   \   00010C   E4           CLR     A
   \   00010D   93           MOVC    A,@A+DPTR
   \   00010E   C0E0         PUSH    A
   \   000110   7401         MOV     A,#0x1
   \   000112   93           MOVC    A,@A+DPTR
   \   000113   F583         MOV     DPH,A
   \   000115   D082         POP     DPL
   \   000117   12....       LCALL   ?CALL_IND
   \   00011A   8010         SJMP    ??ZDP_IncomingData_5
   1895            }
   1896          
   1897            // Handle unhandled messages
   1898            if ( !handled )
   \                     ??ZDP_IncomingData_3:
   \   00011C   EC           MOV     A,R4
   \   00011D   700D         JNZ     ??ZDP_IncomingData_5
   1899              ZDApp_InMsgCB( &inMsg );
   \   00011F                ; Setup parameters for call to function ZDApp_InMsgCB
   \   00011F   85..82       MOV     DPL,?XSP + 0
   \   000122   85..83       MOV     DPH,?XSP + 1
   \   000125   AA82         MOV     R2,DPL
   \   000127   AB83         MOV     R3,DPH
   \   000129   12....       LCALL   ??ZDApp_InMsgCB?relay
   \                     ??ZDP_IncomingData_5:
   \   00012C   7415         MOV     A,#0x15
   \   00012E   02....       LJMP    ??Subroutine89_0 & 0xFFFF
   1900          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine61:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   22           RET

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ZDP_TmpBuf>`:
   \   000000   ....         DW ZDP_Buf + 1H

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??fillAndSend?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    fillAndSend

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_SendData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_SendData

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_NWKAddrOfInterestReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_NWKAddrOfInterestReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_NwkAddrReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_NwkAddrReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_IEEEAddrReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_IEEEAddrReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MatchDescReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MatchDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_SimpleDescReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_SimpleDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_UserDescSet?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_UserDescSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_ServerDiscReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_ServerDiscReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_DeviceAnnce?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_DeviceAnnce

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zdpProcessAddrReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zdpProcessAddrReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_NodeDescMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_NodeDescMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_PowerDescMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_PowerDescMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_SimpleDescMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_SimpleDescMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_EPRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_EPRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_UserDescRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_UserDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_ServerDiscRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_ServerDiscRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_GenericRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_GenericRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_EndDeviceBindReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_EndDeviceBindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_BindUnbindReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_BindUnbindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MgmtNwkDiscReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtNwkDiscReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MgmtDirectJoinReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtDirectJoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MgmtPermitJoinReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtPermitJoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MgmtLeaveReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtLeaveReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MgmtNwkUpdateReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtNwkUpdateReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MgmtNwkDiscRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtNwkDiscRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MgmtLqiRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtLqiRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MgmtRtgRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtRtgRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MgmtBindRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtBindRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MgmtNwkUpdateNotify?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtNwkUpdateNotify

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_RegisterForZDOMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_RegisterForZDOMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_RemoveRegisteredCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_RemoveRegisteredCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_SendMsgCBs?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_SendMsgCBs

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_IncomingData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_IncomingData
   1901          
   1902          /*********************************************************************
   1903          *********************************************************************/
   1904          

   Maximum stack usage in bytes:

     Function                 ISTACK PSTACK XSTACK
     --------                 ------ ------ ------
     ZDO_RegisterForZDOMsg        1      0     14
       -> osal_mem_alloc          0      0     28
     ZDO_RemoveRegisteredCB       0      0      9
       -> osal_mem_free           0      0     18
     ZDO_SendMsgCBs               0      0     50
       -> osal_msg_allocate       0      0     32
       -> osal_memcpy             0      0     38
       -> osal_memcpy             0      0     38
       -> osal_msg_send           0      0     32
     ZDP_BindUnbindReq            1      0     29
       -> sAddrExtCpy             0      0     38
       -> sAddrExtCpy             2      0     38
       -> fillAndSend             0      0     42
     ZDP_DeviceAnnce              1      0     22
       -> sAddrExtCpy             0      0     38
       -> fillAndSend             0      0     42
     ZDP_EPRsp                    1      0     27
       -> osal_memcpy             0      0     40
       -> fillAndSend             0      0     38
     ZDP_EndDeviceBindReq         1      0     31
       -> NLME_GetShortAddr       0      0     40
       -> NLME_GetExtAddr         0      0     40
       -> sAddrExtCpy             0      0     40
       -> fillAndSend             0      0     44
     ZDP_GenericRsp               1      0     17
       -> fillAndSend             0      0     26
     ZDP_IEEEAddrReq              1      0     21
       -> fillAndSend             0      0     42
     ZDP_IncomingData             1      0     31
       -> ZDO_SendMsgCBs          0      0     62
       -> ZDApp_InMsgCB           0      0     62
     ZDP_MatchDescReq             1      0     26
       -> fillAndSend             0      0     36
     ZDP_MgmtBindRsp              1      0     27
       -> osal_mem_alloc          0      0     40
       -> sAddrExtCpy             0      0     40
       -> sAddrExtCpy             0      0     40
       -> fillAndSend             0      0     44
       -> osal_mem_free           0      0     40
     ZDP_MgmtDirectJoinReq        1      0     15
       -> sAddrExtCpy             0      0     24
       -> fillAndSend             0      0     28
     ZDP_MgmtLeaveReq             0      0     16
       -> sAddrExtCpy             0      0     24
       -> fillAndSend             0      0     28
     ZDP_MgmtLqiRsp               1      0     28
       -> fillAndSend             0      0     46
       -> osal_mem_alloc          0      0     42
       -> sAddrExtCpy             0      0     42
       -> sAddrExtCpy             0      0     42
       -> fillAndSend             0      0     46
       -> osal_mem_free           0      0     42
     ZDP_MgmtNwkDiscReq           1      0     22
       -> osal_buffer_uint32      0      0     36
       -> fillAndSend             0      0     32
     ZDP_MgmtNwkDiscRsp           1      0     29
       -> osal_mem_alloc          0      0     44
       -> sAddrExtCpy             0      0     44
       -> fillAndSend             0      0     48
       -> osal_mem_free           0      0     44
     ZDP_MgmtNwkUpdateNotify      1      0     40
       -> osal_mem_alloc          0      0     48
       -> osal_buffer_uint32      0      0     56
       -> osal_memcpy             0      0     54
       -> fillAndSend             0      0     52
       -> osal_mem_free           0      0     48
     ZDP_MgmtNwkUpdateReq         1      0     28
       -> osal_buffer_uint32      0      0     44
       -> fillAndSend             0      0     40
     ZDP_MgmtPermitJoinReq        1      0     12
       -> fillAndSend             0      0     24
     ZDP_MgmtRtgRsp               1      0     29
       -> osal_mem_alloc          0      0     44
       -> fillAndSend             0      0     48
       -> osal_mem_free           0      0     44
     ZDP_NWKAddrOfInterestReq     1      0     13
       -> fillAndSend             0      0     24
     ZDP_NodeDescMsg              1      0     14
       -> fillAndSend             0      0     24
     ZDP_NwkAddrReq               1      0     23
       -> sAddrExtCmp             0      0     42
       -> sAddrExtCpy             0      0     42
       -> fillAndSend             0      0     46
     ZDP_PowerDescMsg             1      0     14
       -> fillAndSend             0      0     24
     ZDP_SendData                 1      0     21
       -> fillAndSend             0      0     32
     ZDP_ServerDiscReq            1      0     21
       -> fillAndSend             0      0     42
     ZDP_ServerDiscRsp            1      0     17
       -> fillAndSend             0      0     26
     ZDP_SimpleDescMsg            2      0     21
       -> fillAndSend             0      0     42
     ZDP_SimpleDescReq            1      0     13
       -> fillAndSend             0      0     24
     ZDP_UserDescRsp              1      0     23
       -> osal_memcpy             0      0     40
       -> fillAndSend             0      0     38
     ZDP_UserDescSet              1      0     22
       -> osal_memcpy             2      0     40
       -> osal_memset             0      0     34
       -> fillAndSend             0      0     38
     fillAndSend                  1      0     61
       -> osal_memset             0      0     52
       -> AF_DataRequest          0      0     70
     zdpProcessAddrReq            1      0     18
       -> sAddrExtCmp             0      0     32
       -> sAddrExtCpy             0      0     32
       -> fillAndSend             0      0     36


   Segment part sizes:

     Function/Label                   Bytes
     --------------                   -----
     ZDP_AF_ENDPOINT                     1
     ZDP_TransID                         1
     ZDP_Buf                            80
     ZDP_TmpBuf                          2
     ZDP_TxOptions                       1
     zdoMsgCBs                           2
     zdpMsgProcs                        28
     fillAndSend                       184
     ?Subroutine62                       9
     ?Subroutine25                      14
     ?Subroutine48                       4
     ?Subroutine78                       9
     ?Subroutine17                       6
     ?Subroutine0                        3
     ??Subroutine117_0                   5
     ?Subroutine76                       6
     ZDP_SendData                      128
     ?Subroutine47                       6
     ?Subroutine18                       8
     ?Subroutine73                       8
     ??Subroutine96_0                    6
     ??Subroutine124_0                   4
     ZDP_NWKAddrOfInterestReq           15
     ?Subroutine1                       10
     ??Subroutine87_0                    8
     ??Subroutine88_0                    3
     ??Subroutine89_0                    8
     ?Subroutine14                      14
     ?Subroutine72                       8
     ?Subroutine77                       4
     ?Subroutine84                       9
     ZDP_NwkAddrReq                    137
     ?Subroutine56                       8
     ??Subroutine95_0                    8
     ZDP_IEEEAddrReq                    56
     ?Subroutine4                       19
     ??Subroutine86_0                    4
     ??Subroutine108_0                   1
     ??Subroutine109_0                   5
     ?Subroutine37                       1
     ??Subroutine123_0                   3
     ZDP_MatchDescReq                  174
     ?Subroutine11                      29
     ?Subroutine71                       1
     ??Subroutine90_0                    4
     ?Subroutine82                       7
     ?Subroutine58                       7
     ?Subroutine55                       7
     ?Subroutine35                       6
     ??Subroutine101_0                   5
     ?Subroutine85                       8
     ZDP_SimpleDescReq                  27
     ?Subroutine29                       7
     ZDP_UserDescSet                   170
     ?Subroutine9                       15
     ??Subroutine98_0                    8
     ?Subroutine60                       6
     ??Subroutine119_0                   6
     ZDP_ServerDiscReq                  81
     ?Subroutine53                      17
     ZDP_DeviceAnnce                    63
     ?Subroutine30                       1
     ??Subroutine91_0                    4
     ?Subroutine24                      15
     ?Subroutine31                       3
     ??Subroutine97_0                    4
     zdpProcessAddrReq                 270
     ??Subroutine103_0                   6
     ??Subroutine114_0                   7
     ?Subroutine27                       6
     ?Subroutine44                       3
     ??Subroutine120_0                   6
     ??Subroutine121_0                   5
     ZDP_NodeDescMsg                   134
     ?Subroutine5                        6
     ?Subroutine79                       1
     ??Subroutine92_0                    7
     ?Subroutine20                       1
     ??Subroutine93_0                    4
     ?Subroutine70                      11
     ?Subroutine19                       6
     ?Subroutine22                       4
     ?Subroutine21                       6
     ??Subroutine110_0                   8
     ?Subroutine10                       2
     ??Subroutine111_0                   4
     ??Subroutine112_0                   1
     ??Subroutine113_0                   5
     ?Subroutine68                       3
     ZDP_PowerDescMsg                   80
     ??Subroutine94_0                   11
     ?Subroutine36                       7
     ?Subroutine51                       7
     ?Subroutine40                       4
     ??Subroutine118_0                   4
     ZDP_SimpleDescMsg                 414
     ?Subroutine39                      10
     ?Subroutine13                      11
     ?Subroutine69                       1
     ?Subroutine3                        2
     ??Subroutine100_0                   3
     ??Subroutine115_0                   4
     ?Subroutine74                       8
     ?Subroutine8                        5
     ??Subroutine116_0                   8
     ZDP_EPRsp                         161
     ?Subroutine64                       4
     ?Subroutine32                      12
     ?Subroutine80                       2
     ZDP_UserDescRsp                   123
     ?Subroutine28                       6
     ZDP_ServerDiscRsp                  84
     ??Subroutine122_0                   6
     ZDP_GenericRsp                     84
     ?Subroutine49                      12
     ZDP_EndDeviceBindReq              297
     ?Subroutine6                        5
     ?Subroutine63                       9
     ?Subroutine26                      11
     ?Subroutine38                       4
     ZDP_BindUnbindReq                 215
     ?Subroutine23                      11
     ?Subroutine41                       6
     ZDP_MgmtNwkDiscReq                 70
     ?Subroutine43                      14
     ZDP_MgmtDirectJoinReq              27
     ?Subroutine2                       21
     ZDP_MgmtPermitJoinReq              20
     ZDP_MgmtLeaveReq                   60
     ?Subroutine67                       8
     ZDP_MgmtNwkUpdateReq              159
     ZDP_MgmtNwkDiscRsp                346
     ?Subroutine7                        4
     ?Subroutine33                       4
     ?Subroutine16                       4
     ??Subroutine99_0                   13
     ?Subroutine66                      14
     ??Subroutine104_0                   6
     ?Subroutine50                       9
     ??Subroutine105_0                  12
     ?Subroutine46                       3
     ??Subroutine106_0                   4
     ?Subroutine83                       7
     ?Subroutine45                       4
     ?Subroutine75                       8
     ?Subroutine42                       9
     ?Subroutine59                       8
     ?Subroutine81                      14
     ZDP_MgmtLqiRsp                    372
     ?Subroutine52                       6
     ?Subroutine12                       8
     ??Subroutine107_0                   6
     ?Subroutine54                      14
     ?Subroutine34                       8
     ?Subroutine57                      14
     ZDP_MgmtRtgRsp                    236
     ZDP_MgmtBindRsp                   267
     ?Subroutine15                      17
     ZDP_MgmtNwkUpdateNotify           303
     ZDO_RegisterForZDOMsg             139
     ZDO_RemoveRegisteredCB            105
     ?Subroutine65                       4
     ??Subroutine102_0                   4
     ZDO_SendMsgCBs                    200
     ZDP_IncomingData                  305
     ?Subroutine61                      10
     ?<Initializer for ZDP_TmpBuf>       2
     ??fillAndSend?relay                 6
     ??ZDP_SendData?relay                6
     ??ZDP_NWKAddrOfInterestReq?relay    6
     ??ZDP_NwkAddrReq?relay              6
     ??ZDP_IEEEAddrReq?relay             6
     ??ZDP_MatchDescReq?relay            6
     ??ZDP_SimpleDescReq?relay           6
     ??ZDP_UserDescSet?relay             6
     ??ZDP_ServerDiscReq?relay           6
     ??ZDP_DeviceAnnce?relay             6
     ??zdpProcessAddrReq?relay           6
     ??ZDP_NodeDescMsg?relay             6
     ??ZDP_PowerDescMsg?relay            6
     ??ZDP_SimpleDescMsg?relay           6
     ??ZDP_EPRsp?relay                   6
     ??ZDP_UserDescRsp?relay             6
     ??ZDP_ServerDiscRsp?relay           6
     ??ZDP_GenericRsp?relay              6
     ??ZDP_EndDeviceBindReq?relay        6
     ??ZDP_BindUnbindReq?relay           6
     ??ZDP_MgmtNwkDiscReq?relay          6
     ??ZDP_MgmtDirectJoinReq?relay       6
     ??ZDP_MgmtPermitJoinReq?relay       6
     ??ZDP_MgmtLeaveReq?relay            6
     ??ZDP_MgmtNwkUpdateReq?relay        6
     ??ZDP_MgmtNwkDiscRsp?relay          6
     ??ZDP_MgmtLqiRsp?relay              6
     ??ZDP_MgmtRtgRsp?relay              6
     ??ZDP_MgmtBindRsp?relay             6
     ??ZDP_MgmtNwkUpdateNotify?relay     6
     ??ZDO_RegisterForZDOMsg?relay       6
     ??ZDO_RemoveRegisteredCB?relay      6
     ??ZDO_SendMsgCBs?relay              6
     ??ZDP_IncomingData?relay            6

 
 6 399 bytes in segment BANKED_CODE
   204 bytes in segment BANK_RELAYS
    29 bytes in segment CODE_C
     2 bytes in segment XDATA_I
     2 bytes in segment XDATA_ID
    84 bytes in segment XDATA_Z
 
 6 634 bytes of CODE  memory
    86 bytes of XDATA memory

Errors: none
Warnings: none
