###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         10/Jul/2018  16:37:37 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Components\stack\zdo\ZDObject.c                    #
#    Command line       =  -f D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ #
#                          ¸Ä\Projects\zstack\Utilities\SerialApp\CC2530DB\.. #
#                          \..\..\Tools\CC2530DB\f8wEndev.cfg (-DCPU32MHZ     #
#                          -DROOT=__near_func -DBLINK_LEDS) -f                #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\Tools\CC2530DB\f8wConfig.cfg (-DSECURE=0       #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xfFF1                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Components\stack\zdo\ZDObject.c -D ZIGBEEPRO -D    #
#                          NWK_AUTO_POLL -D HAL_UART=TRUE -D                  #
#                          SERIAL_APP_PORT=0 -D LCD_SUPPORTED -D              #
#                          xPOWER_SAVING -lC D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼ #
#                          «\WSN_ZigBee_ÐÞ¸Ä\Projects\zstack\Utilities\Serial #
#                          App\CC2530DB\EndDeviceEB-Pro\List\ -lA             #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\EndDe #
#                          viceEB-Pro\List\ --diag_suppress Pe001,Pa010 -o    #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\EndDe #
#                          viceEB-Pro\Obj\ -e --debug --core=plain            #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 8 -I D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ #
#                          °\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\Projects\zstack\Utilities\S #
#                          erialApp\CC2530DB\ -I D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ° #
#                          \ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\Projects\zstack\Utilities\Se #
#                          rialApp\CC2530DB\..\SOURCE\ -I                     #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\ZMAIN\TI2530DB\ -I D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ #
#                          °\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\Projects\zstack\Utilities\S #
#                          erialApp\CC2530DB\..\..\..\..\..\COMPONENTS\MT\    #
#                          -I D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ #
#                          ¸Ä\Projects\zstack\Utilities\SerialApp\CC2530DB\.. #
#                          \..\..\..\..\COMPONENTS\HAL\INCLUDE\ -I            #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\ -I       #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\OSAL\MCU\CCSOC\ -I            #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\OSAL\INCLUDE\ -I              #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\STACK\AF\ -I                  #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\STACK\NWK\ -I                 #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\STACK\SEC\ -I                 #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\STACK\SAPI\ -I                #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\STACK\SYS\ -I                 #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\STACK\ZDO\ -I                 #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\ZMAC\F8W\ -I                  #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\ZMAC\ -I                      #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\SERVICES\SADDR\ -I            #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\SERVICES\SDATA\ -I            #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\MAC\INCLUDE\ -I               #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\MAC\HIGH_LEVEL\ -I            #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\ -I       #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CH #
#                          IP\ -Ohz --require_prototypes                      #
#    List file          =  D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\EndDe #
#                          viceEB-Pro\List\ZDObject.lst                       #
#    Object file        =  D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\EndDe #
#                          viceEB-Pro\Obj\ZDObject.r51                        #
#                                                                             #
#                                                                             #
###############################################################################

D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\Components\stack\zdo\ZDObject.c
      1          /**************************************************************************************************
      2            Filename:       ZDObject.c
      3            Revised:        $Date: 2009-03-19 11:37:20 -0700 (Thu, 19 Mar 2009) $
      4            Revision:       $Revision: 19466 $
      5          
      6            Description:    This is the Zigbee Device Object.
      7          
      8          
      9            Copyright 2004-2009 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          #include "ZComdef.h"
     44          #include "OSAL.h"
     45          #include "OSAL_Nv.h"
     46          #include "rtg.h"
     47          #include "NLMEDE.h"
     48          #include "nwk_globals.h"
     49          #include "APS.h"
     50          #include "APSMEDE.h"
     51          #include "AssocList.h"
     52          #include "BindingTable.h"
     53          #include "AddrMgr.h"
     54          #include "AF.h"
     55          #include "ZDObject.h"
     56          #include "ZDProfile.h"
     57          #include "ZDConfig.h"
     58          #include "ZDSecMgr.h"
     59          #include "ZDApp.h"
     60          #include "nwk_util.h"   // NLME_IsAddressBroadcast()
     61          #include "ZGlobals.h"
     62          
     63          #if defined( LCD_SUPPORTED )
     64            #include "OnBoard.h"
     65          #endif
     66          
     67          /* HAL */
     68          #include "hal_lcd.h"
     69          
     70          /*********************************************************************
     71           * MACROS
     72           */
     73          
     74          /*********************************************************************
     75           * CONSTANTS
     76           */
     77          // NLME Stub Implementations
     78          #define ZDO_ProcessMgmtPermitJoinTimeout NLME_PermitJoiningTimeout
     79          
     80          // Status fields used by ZDO_ProcessMgmtRtgReq
     81          #define ZDO_MGMT_RTG_ENTRY_ACTIVE             0x00
     82          #define ZDO_MGMT_RTG_ENTRY_DISCOVERY_UNDERWAY 0x01
     83          #define ZDO_MGMT_RTG_ENTRY_DISCOVERY_FAILED   0x02
     84          #define ZDO_MGMT_RTG_ENTRY_INACTIVE           0x03
     85          
     86          /*********************************************************************
     87           * TYPEDEFS
     88           */
     89          #if defined ( REFLECTOR )
     90          typedef struct
     91          {
     92            byte SrcTransSeq;
     93            zAddrType_t SrcAddr;
     94            uint16 LocalCoordinator;
     95            byte epIntf;
     96            uint16 ProfileID;
     97            byte numInClusters;
     98            uint16 *inClusters;
     99            byte numOutClusters;
    100            uint16 *outClusters;
    101            byte SecurityUse;
    102            byte status;
    103          } ZDO_EDBind_t;
    104          #endif // defined ( REFLECTOR )
    105          
    106          enum
    107          {
    108            ZDMATCH_INIT,           // Initialized
    109            ZDMATCH_WAIT_REQ,       // Received first request, waiting for second
    110            ZDMATCH_SENDING_BINDS   // Received both requests, sending unbind/binds
    111          };
    112          
    113          enum
    114          {
    115            ZDMATCH_SENDING_NOT,
    116            ZDMATCH_SENDING_UNBIND,
    117            ZDMATCH_SENDING_BIND
    118          };
    119          
    120          /*********************************************************************
    121           * GLOBAL VARIABLES
    122           */
    123          
    124          /*********************************************************************
    125           * EXTERNAL VARIABLES
    126           */
    127          
    128          /*********************************************************************
    129           * EXTERNAL FUNCTIONS
    130           */
    131          
    132          /*********************************************************************
    133           * LOCAL VARIABLES
    134           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    135          static uint16 ZDOBuildBuf[26];  // temp area to build data without allocation
   \                     ZDOBuildBuf:
   \   000000                DS 52
   \   000034                REQUIRE __INIT_XDATA_Z
    136          
    137          #if defined ( REFLECTOR )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    138          static ZDO_EDBind_t *ZDO_EDBind;     // Null when not used
   \                     ZDO_EDBind:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    139          #endif
    140          
    141          #if defined ( MANAGED_SCAN )
    142            uint32 managedScanNextChannel = 0;
    143            uint32 managedScanChannelMask = 0;
    144            uint8  managedScanTimesPerChannel = 0;
    145          #endif
    146          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    147          ZDMatchEndDeviceBind_t *matchED = (ZDMatchEndDeviceBind_t *)NULL;
   \                     matchED:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    148          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    149          uint32 apsChannelMask = 0;
   \                     apsChannelMask:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
    150          
    151          /*********************************************************************
    152           * LOCAL FUNCTIONS
    153           */
    154          static void ZDODeviceSetup( void );
    155          #if defined ( MANAGED_SCAN )
    156            static void ZDOManagedScan_Next( void );
    157          #endif
    158          #if defined ( REFLECTOR )
    159            static void ZDO_RemoveEndDeviceBind( void );
    160            static void ZDO_SendEDBindRsp( byte TransSeq, zAddrType_t *dstAddr, byte Status, byte secUse );
    161          #endif
    162          static byte ZDO_CompareClusterLists( byte numList1, uint16 *list1,
    163                                          byte numList2, uint16 *list2, uint16 *pMatches );
    164          static void ZDO_RemoveMatchMemory( void );
    165          static uint8 ZDO_CopyMatchInfo( ZDEndDeviceBind_t *destReq, ZDEndDeviceBind_t *srcReq );
    166          static void ZDO_EndDeviceBindMatchTimeoutCB( void );
    167          uint8 *ZDO_ConvertOTAClusters( uint8 cnt, uint8 *inBuf, uint16 *outList );
    168          
    169          /*********************************************************************
    170           * @fn          ZDO_Init
    171           *
    172           * @brief       ZDObject and ZDProfile initialization.
    173           *
    174           * @param       none
    175           *
    176           * @return      none
    177           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    178          void ZDO_Init( void )
   \                     ZDO_Init:
    179          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    180            // Initialize ZD items
    181            #if defined ( REFLECTOR )
    182            ZDO_EDBind = NULL;
   \   000004   90....       MOV     DPTR,#ZDO_EDBind
   \   000007   E4           CLR     A
   \   000008   F0           MOVX    @DPTR,A
   \   000009   A3           INC     DPTR
   \   00000A   F0           MOVX    @DPTR,A
    183            #endif
    184          
    185            // Initialize default ZDO_UseExtendedPANID to the APS one.
    186            osal_cpyExtAddr( ZDO_UseExtendedPANID, AIB_apsUseExtendedPANID );
   \   00000B                ; Setup parameters for call to function sAddrExtCpy
   \   00000B   7C..         MOV     R4,#AIB_apsUseExtendedPANID & 0xff
   \   00000D   7D..         MOV     R5,#(AIB_apsUseExtendedPANID >> 8) & 0xff
   \   00000F   7A..         MOV     R2,#ZDO_UseExtendedPANID & 0xff
   \   000011   7B..         MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   000013   12....       LCALL   ??sAddrExtCpy?relay
    187          
    188            // Setup the device - type of device to create.
    189            ZDODeviceSetup();
   \   000016   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   7004         JNZ     ??ZDO_Init_0
   \   00001C   7900         MOV     R1,#0x0
   \   00001E   8002         SJMP    ??ZDO_Init_1
   \                     ??ZDO_Init_0:
   \   000020   7901         MOV     R1,#0x1
   \                     ??ZDO_Init_1:
   \   000022                ; Setup parameters for call to function APS_ReflectorInit
   \   000022   12....       LCALL   ??APS_ReflectorInit?relay
   \   000025                ; Setup parameters for call to function NLME_DeviceJoiningInit
   \   000025   12....       LCALL   ??NLME_DeviceJoiningInit?relay
    190          }
   \   000028   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    191          
    192          #if defined ( MANAGED_SCAN )
    193          /*********************************************************************
    194           * @fn      ZDOManagedScan_Next()
    195           *
    196           * @brief   Setup a managed scan.
    197           *
    198           * @param   none
    199           *
    200           * @return  none
    201           */
    202          static void ZDOManagedScan_Next( void )
    203          {
    204            // Is it the first time
    205            if ( managedScanNextChannel == 0 && managedScanTimesPerChannel == 0 )
    206            {
    207              // Setup the defaults
    208              managedScanNextChannel  = 1;
    209          
    210              while( managedScanNextChannel && (zgDefaultChannelList & managedScanNextChannel) == 0 )
    211                managedScanNextChannel <<= 1;
    212          
    213              managedScanChannelMask = managedScanNextChannel;
    214              managedScanTimesPerChannel = MANAGEDSCAN_TIMES_PRE_CHANNEL;
    215            }
    216            else
    217            {
    218              // Do we need to go to the next channel
    219              if ( managedScanTimesPerChannel == 0 )
    220              {
    221                // Find next active channel
    222                managedScanChannelMask  = managedScanNextChannel;
    223                managedScanTimesPerChannel = MANAGEDSCAN_TIMES_PRE_CHANNEL;
    224              }
    225              else
    226              {
    227                managedScanTimesPerChannel--;
    228          
    229                if ( managedScanTimesPerChannel == 0 )
    230                {
    231                  managedScanNextChannel  <<= 1;
    232                  while( managedScanNextChannel && (zgDefaultChannelList & managedScanNextChannel) == 0 )
    233                    managedScanNextChannel <<= 1;
    234          
    235                  if ( managedScanNextChannel == 0 )
    236                    zdoDiscCounter  = NUM_DISC_ATTEMPTS + 1; // Stop
    237                }
    238              }
    239            }
    240          }
    241          #endif // MANAGED_SCAN
    242          
    243          /*********************************************************************
    244           * @fn      ZDODeviceSetup()
    245           *
    246           * @brief   Call set functions depending on the type of device compiled.
    247           *
    248           * @param   none
    249           *
    250           * @return  none
    251           */
    252          static void ZDODeviceSetup( void )
    253          {
    254            if ( ZG_BUILD_COORDINATOR_TYPE )
    255            {
    256              NLME_CoordinatorInit();
    257            }
    258          
    259          #if defined ( REFLECTOR )
    260            APS_ReflectorInit( (ZG_DEVICE_COORDINATOR_TYPE) ? APS_REFLECTOR_PUBLIC :  APS_REFLECTOR_PRIVATE );
    261          #endif
    262          
    263            if ( ZG_BUILD_JOINING_TYPE )
    264            {
    265              NLME_DeviceJoiningInit();
    266            }
    267          }
    268          
    269          /*********************************************************************
    270           * @fn          ZDO_StartDevice
    271           *
    272           * @brief       This function starts a device in a network.
    273           *
    274           * @param       logicalType     - Device type to start
    275           *              startMode       - indicates mode of device startup
    276           *              beaconOrder     - indicates time betwen beacons
    277           *              superframeOrder - indicates length of active superframe
    278           *
    279           * @return      none
    280           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    281          void ZDO_StartDevice( byte logicalType, devStartModes_t startMode, byte beaconOrder, byte superframeOrder )
   \                     ZDO_StartDevice:
    282          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV     A,#-0xb
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   EA           MOV     A,R2
   \   00000D   FF           MOV     R7,A
    283            ZStatus_t ret;
    284          #if defined ( ZIGBEE_FREQ_AGILITY )
    285            static uint8 discRetries = 0;
    286          #endif
    287          #if defined ( ZIGBEE_COMMISSIONING )
    288            static uint8 scanCnt = 0;
    289          #endif
    290            
    291            ret = ZUnsupportedMode;
    292          
    293            if ( ZG_BUILD_COORDINATOR_TYPE && logicalType == NODETYPE_COORDINATOR )
    294            {
    295              if ( startMode == MODE_HARD )
    296              {
    297                devState = DEV_COORD_STARTING;
    298                ret = NLME_NetworkFormationRequest( zgConfigPANID, zgApsUseExtendedPANID, zgDefaultChannelList,
    299                                                    zgDefaultStartingScanDuration, beaconOrder,
    300                                                    superframeOrder, false );
    301              }
    302              else if ( startMode == MODE_RESUME )
    303              {
    304                // Just start the coordinator
    305                devState = DEV_COORD_STARTING;
    306                ret = NLME_StartRouterRequest( beaconOrder, beaconOrder, false );
    307              }
    308              else
    309              {
    310          #if defined( LCD_SUPPORTED )
    311                HalLcdWriteScreen( "StartDevice ERR", "MODE unknown" );
    312          #endif
    313              }
    314            }
    315          
    316            if ( ZG_BUILD_JOINING_TYPE && (logicalType == NODETYPE_ROUTER || logicalType == NODETYPE_DEVICE) )
   \   00000E   7401         MOV     A,#0x1
   \   000010   6E           XRL     A,R6
   \   000011   6005         JZ      ??ZDO_StartDevice_0
   \   000013   7402         MOV     A,#0x2
   \   000015   6E           XRL     A,R6
   \   000016   705C         JNZ     ??ZDO_StartDevice_1
    317            {
    318              if ( (startMode == MODE_JOIN) || (startMode == MODE_REJOIN) )
   \                     ??ZDO_StartDevice_0:
   \   000018   EF           MOV     A,R7
   \   000019   6005         JZ      ??ZDO_StartDevice_2
   \   00001B   7403         MOV     A,#0x3
   \   00001D   6F           XRL     A,R7
   \   00001E   706C         JNZ     ??ZDO_StartDevice_3
    319              {
    320                devState = DEV_NWK_DISC;
   \                     ??ZDO_StartDevice_2:
   \   000020   90....       MOV     DPTR,#devState
   \   000023   7402         MOV     A,#0x2
   \   000025   12....       LCALL   ?Subroutine47 & 0xFFFF
    321          
    322            #if defined( MANAGED_SCAN )
    323                ZDOManagedScan_Next();
    324                ret = NLME_NetworkDiscoveryRequest( managedScanChannelMask, BEACON_ORDER_15_MSEC );
    325            #else
    326                ret = NLME_NetworkDiscoveryRequest( zgDefaultChannelList, zgDefaultStartingScanDuration );
   \                     ??CrossCallReturnLabel_88:
   \   000028   12....       LCALL   ?XLOAD_R2345
   \   00002B   12....       LCALL   ??NLME_NetworkDiscoveryRequest?relay
   \   00002E   E9           MOV     A,R1
   \   00002F   F8           MOV     R0,A
    327              #if defined ( ZIGBEE_FREQ_AGILITY )
    328                if ( !( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE ) &&
    329                      ( ret == ZSuccess ) && ( ++discRetries == 4 ) )
   \   000030   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000033   E0           MOVX    A,@DPTR
   \   000034   A2E3         MOV     C,0xE0 /* A   */.3
   \   000036   4019         JC      ??ZDO_StartDevice_4
   \   000038   E8           MOV     A,R0
   \   000039   7016         JNZ     ??ZDO_StartDevice_4
   \   00003B   90....       MOV     DPTR,#??discRetries
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   04           INC     A
   \   000040   F0           MOVX    @DPTR,A
   \   000041   6404         XRL     A,#0x4
   \   000043   700C         JNZ     ??ZDO_StartDevice_4
    330                {
    331                  // For devices with RxOnWhenIdle equals to FALSE, any network channel
    332                  // change will not be recieved. On these devices or routers that have 
    333                  // lost the network, an active scan shall be conducted on the Default
    334                  // Channel list using the extended PANID to find the network. If the 
    335                  // extended PANID isn't found using the Default Channel list, an scan
    336                  // should be completed using all channels.
    337                  zgDefaultChannelList = MAX_CHANNELS_24GHZ;
   \   000045   90....       MOV     DPTR,#__Constant_7fff800
   \   000048   12....       LCALL   ?XLOAD_R2345
   \   00004B   90....       MOV     DPTR,#zgDefaultChannelList
   \   00004E   12....       LCALL   ?XSTORE_R2345
    338                }
    339              #endif // ZIGBEE_FREQ_AGILITY
    340              #if defined ( ZIGBEE_COMMISSIONING )
    341                if (startMode == MODE_REJOIN && scanCnt++ >= 5 )
   \                     ??ZDO_StartDevice_4:
   \   000051   7403         MOV     A,#0x3
   \   000053   6F           XRL     A,R7
   \   000054   701B         JNZ     ??ZDO_StartDevice_5
   \   000056   90....       MOV     DPTR,#??scanCnt
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   F9           MOV     R1,A
   \   00005B   7401         MOV     A,#0x1
   \   00005D   29           ADD     A,R1
   \   00005E   F0           MOVX    @DPTR,A
   \   00005F   E9           MOV     A,R1
   \   000060   C3           CLR     C
   \   000061   9405         SUBB    A,#0x5
   \   000063   400C         JC      ??ZDO_StartDevice_5
    342                {
    343                  // When ApsUseExtendedPanID is commissioned to a non zero value via 
    344                  // application specific means, the device shall conduct an active scan
    345                  // on the Default Channel list and join the PAN with the same
    346                  // ExtendedPanID. If the PAN is not found, an scan should be completed
    347                  // on all channels.
    348                  // When devices rejoin the network and the PAN is not found from 
    349                  zgDefaultChannelList = MAX_CHANNELS_24GHZ;
   \   000065   90....       MOV     DPTR,#__Constant_7fff800
   \   000068   12....       LCALL   ?XLOAD_R2345
   \   00006B   90....       MOV     DPTR,#zgDefaultChannelList
   \   00006E   12....       LCALL   ?XSTORE_R2345
    350                }  
    351              #endif // ZIGBEE_COMMISSIONING
    352            #endif
    353              }
    354              else if ( startMode == MODE_RESUME )
    355              {
    356                if ( logicalType == NODETYPE_ROUTER )
    357                {
    358                  ZMacScanCnf_t scanCnf;
    359                  devState = DEV_NWK_ORPHAN;
    360          
    361                  /* if router and nvram is available, fake successful orphan scan */
    362                  scanCnf.hdr.Status = ZSUCCESS;
    363                  scanCnf.ScanType = ZMAC_ORPHAN_SCAN;
    364                  scanCnf.UnscannedChannels = 0;
    365                  scanCnf.ResultListSize = 0;
    366                  nwk_ScanJoiningOrphan(&scanCnf);
    367          
    368                  ret = ZSuccess;
    369                }
    370                else
    371                {
    372                  devState = DEV_NWK_ORPHAN;
    373                  ret = NLME_OrphanJoinRequest( zgDefaultChannelList,
    374                                                zgDefaultStartingScanDuration );
    375                }
    376              }
    377              else
    378              {
    379          #if defined( LCD_SUPPORTED )
    380                HalLcdWriteScreen( "StartDevice ERR", "MODE unknown" );
    381          #endif
    382              }
    383            }
    384          
    385            if ( ret != ZSuccess )
   \                     ??ZDO_StartDevice_5:
   \   000071   E8           MOV     A,R0
   \   000072   6010         JZ      ??ZDO_StartDevice_6
    386              osal_start_timerEx(ZDAppTaskID, ZDO_NETWORK_INIT, NWK_RETRY_DELAY );
   \                     ??ZDO_StartDevice_1:
   \   000074                ; Setup parameters for call to function osal_start_timerEx
   \   000074   7CE8         MOV     R4,#-0x18
   \   000076   7D03         MOV     R5,#0x3
   \   000078   7A01         MOV     R2,#0x1
   \   00007A   7B00         MOV     R3,#0x0
   \   00007C   90....       MOV     DPTR,#ZDAppTaskID
   \   00007F   E0           MOVX    A,@DPTR
   \   000080   F9           MOV     R1,A
   \   000081   12....       LCALL   ??osal_start_timerEx?relay
    387          }
   \                     ??ZDO_StartDevice_6:
   \   000084   740B         MOV     A,#0xb
   \   000086   12....       LCALL   ?DEALLOC_XSTACK8
   \   000089   02....       LJMP    ?Subroutine1 & 0xFFFF
   \                     ??ZDO_StartDevice_3:
   \   00008C   7401         MOV     A,#0x1
   \   00008E   6F           XRL     A,R7
   \   00008F   7045         JNZ     ??ZDO_StartDevice_7
   \   000091   7401         MOV     A,#0x1
   \   000093   6E           XRL     A,R6
   \   000094   90....       MOV     DPTR,#devState
   \   000097   702E         JNZ     ??ZDO_StartDevice_8
   \   000099   740A         MOV     A,#0xa
   \   00009B   F0           MOVX    @DPTR,A
   \   00009C   7401         MOV     A,#0x1
   \   00009E   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A1   E4           CLR     A
   \   0000A2   F0           MOVX    @DPTR,A
   \   0000A3   7402         MOV     A,#0x2
   \   0000A5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A8   7403         MOV     A,#0x3
   \   0000AA   F0           MOVX    @DPTR,A
   \   0000AB   90....       MOV     DPTR,#__Constant_0
   \   0000AE   12....       LCALL   ?XLOAD_R2345
   \   0000B1   7404         MOV     A,#0x4
   \   0000B3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B6   12....       LCALL   ?XSTORE_R2345
   \   0000B9   7408         MOV     A,#0x8
   \   0000BB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BE   E4           CLR     A
   \   0000BF   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   0000C2   12....       LCALL   ??nwk_ScanJoiningOrphan?relay
   \   0000C5   80BD         SJMP    ??ZDO_StartDevice_6
   \                     ??ZDO_StartDevice_8:
   \   0000C7   740A         MOV     A,#0xa
   \   0000C9   12....       LCALL   ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   0000CC   12....       LCALL   ?XLOAD_R2345
   \   0000CF   12....       LCALL   ??NLME_OrphanJoinRequest?relay
   \   0000D2   E9           MOV     A,R1
   \   0000D3   F8           MOV     R0,A
   \   0000D4   809B         SJMP    ??ZDO_StartDevice_5
   \                     ??ZDO_StartDevice_7:
   \   0000D6                ; Setup parameters for call to function HalLcdWriteScreen
   \   0000D6   7C..         MOV     R4,#`?<Constant "MODE unknown">` & 0xff
   \   0000D8   7D..         MOV     R5,#(`?<Constant "MODE unknown">` >> 8) & 0xff
   \   0000DA   7A..         MOV     R2,#`?<Constant "StartDevice ERR">` & 0xff
   \   0000DC   7B..         MOV     R3,#(`?<Constant "StartDevice ERR">` >> 8) & 0xff
   \   0000DE   12....       LCALL   ??HalLcdWriteScreen?relay
   \   0000E1   8091         SJMP    ??ZDO_StartDevice_1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function NLME_NetworkDiscoveryRequest
   \   000001                ; Setup parameters for call to function NLME_OrphanJoinRequest
   \   000001   90....       MOV     DPTR,#zgDefaultStartingScanDuration
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F9           MOV     R1,A
   \   000006   90....       MOV     DPTR,#zgDefaultChannelList
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   12....       LCALL   ?Subroutine200 & 0xFFFF
   \                     ??CrossCallReturnLabel_337:
   \   000003   AA82         MOV     R2,DPL
   \   000005   AB83         MOV     R3,DPH
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine200:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function nwk_ScanJoiningOrphan
   \   000001                ; Setup parameters for call to function NLME_NwkDiscReq2
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??discRetries:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??scanCnt:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    388          
    389          /*********************************************************************
    390           * @fn      ZDO_UpdateNwkStatus()
    391           *
    392           * @brief
    393           *
    394           *   This function will send an update message to each registered
    395           *   application endpoint/interface about a network status change.
    396           *
    397           * @param   none
    398           *
    399           * @return  none
    400           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    401          void ZDO_UpdateNwkStatus( devStates_t state )
   \                     ZDO_UpdateNwkStatus:
    402          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 0,R1
    403            // Endpoint/Interface descriptor list.
    404            epList_t *epDesc = epList;
   \   000007   90....       MOV     DPTR,#epList
   \   00000A   12....       LCALL   ??Subroutine209_0 & 0xFFFF
    405            byte bufLen = sizeof(osal_event_hdr_t);
    406            osal_event_hdr_t *msgPtr;
    407          
    408            ZDAppNwkAddr.addr.shortAddr = NLME_GetShortAddr();
   \                     ??CrossCallReturnLabel_357:
   \   00000D                ; Setup parameters for call to function NLME_GetShortAddr
   \   00000D   12....       LCALL   ??NLME_GetShortAddr?relay
   \   000010   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000013   12....       LCALL   ?Subroutine38 & 0xFFFF
    409            (void)NLME_GetExtAddr();  // Load the saveExtAddr pointer.
   \                     ??CrossCallReturnLabel_55:
   \   000016                ; Setup parameters for call to function NLME_GetExtAddr
   \   000016   12....       LCALL   ??NLME_GetExtAddr?relay
   \   000019   8030         SJMP    ??CrossCallReturnLabel_358
    410          
    411            while ( epDesc )
    412            {
    413              if ( epDesc->epDesc->endPoint != ZDO_EP )
   \                     ??ZDO_UpdateNwkStatus_0:
   \   00001B   8E82         MOV     DPL,R6
   \   00001D   8F83         MOV     DPH,R7
   \   00001F   12....       LCALL   ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_152:
   \   000022   601B         JZ      ??CrossCallReturnLabel_142
    414              {
    415                msgPtr = (osal_event_hdr_t *)osal_msg_allocate( bufLen );
   \   000024                ; Setup parameters for call to function osal_msg_allocate
   \   000024   7A02         MOV     R2,#0x2
   \   000026   7B00         MOV     R3,#0x0
   \   000028   12....       LCALL   ??osal_msg_allocate?relay
    416                if ( msgPtr )
   \   00002B   EA           MOV     A,R2
   \   00002C   4B           ORL     A,R3
   \   00002D   6010         JZ      ??CrossCallReturnLabel_142
    417                {
    418                  msgPtr->event = ZDO_STATE_CHANGE; // Command ID
   \   00002F   8A82         MOV     DPL,R2
   \   000031   8B83         MOV     DPH,R3
   \   000033   74D1         MOV     A,#-0x2f
   \   000035   F0           MOVX    @DPTR,A
    419                  msgPtr->status = (byte)state;
   \   000036   A3           INC     DPTR
   \   000037   E5..         MOV     A,?V0 + 0
   \   000039   12....       LCALL   ?Subroutine52 & 0xFFFF
    420          
    421                  osal_msg_send( *(epDesc->epDesc->task_id), (uint8 *)msgPtr );
    422                }
    423              }
   \                     ??CrossCallReturnLabel_100:
   \   00003C   12....       LCALL   ?Subroutine72 & 0xFFFF
    424              epDesc = epDesc->nextDesc;
   \                     ??CrossCallReturnLabel_142:
   \   00003F   8E82         MOV     DPL,R6
   \   000041   8F83         MOV     DPH,R7
   \   000043   A3           INC     DPTR
   \   000044   A3           INC     DPTR
   \   000045   A3           INC     DPTR
   \   000046   A3           INC     DPTR
   \   000047   A3           INC     DPTR
   \   000048   12....       LCALL   ??Subroutine209_0 & 0xFFFF
    425            }
   \                     ??CrossCallReturnLabel_358:
   \   00004B   EE           MOV     A,R6
   \   00004C   4F           ORL     A,R7
   \   00004D   70CC         JNZ     ??ZDO_UpdateNwkStatus_0
    426          }
   \   00004F                REQUIRE ?Subroutine2
   \   00004F                ; // Fall through to label ?Subroutine2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine72:
   \   000000   12....       LCALL   ??Subroutine257_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_664:
   \   000003   12....       LCALL   ?Subroutine162 & 0xFFFF
   \                     ??CrossCallReturnLabel_280:
   \   000006   F9           MOV     R1,A
   \   000007   12....       LCALL   ??osal_msg_send?relay
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine79:
   \   000000   12....       LCALL   ?Subroutine162 & 0xFFFF
   \                     ??CrossCallReturnLabel_281:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine209_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FE           MOV     R6,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FF           MOV     R7,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine195:
   \   000000   F8           MOV     R0,A
   \   000001                REQUIRE ??Subroutine211_0
   \   000001                ; // Fall through to label ??Subroutine211_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine211_0:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine212_0
   \   000001                ; // Fall through to label ??Subroutine212_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine212_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F583         MOV     DPH,A
   \   000003   8882         MOV     DPL,R0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine162:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   12....       LCALL   ?Subroutine195 & 0xFFFF
   \                     ??CrossCallReturnLabel_671:
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   EA           MOV     A,R2
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   EB           MOV     A,R3
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000   12....       LCALL   ?Subroutine190 & 0xFFFF
   \                     ??CrossCallReturnLabel_323:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F8           MOV     R0,A
   \   000005   A3           INC     DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine190:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function osal_msg_send
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine257_0:
   \   000000   12....       LCALL   ??Subroutine212_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_673:
   \   000003   A3           INC     DPTR
   \   000004   22           RET
    427          
    428          #if defined ( REFLECTOR )
    429          /*********************************************************************
    430           * @fn          ZDO_RemoveEndDeviceBind
    431           *
    432           * @brief       Remove the end device bind
    433           *
    434           * @param  none
    435           *
    436           * @return      none
    437           */
    438          static void ZDO_RemoveEndDeviceBind( void )
    439          {
    440            if ( ZDO_EDBind != NULL )
    441            {
    442              // Free the RAM
    443              if ( ZDO_EDBind->inClusters != NULL )
    444                osal_mem_free( ZDO_EDBind->inClusters );
    445              if ( ZDO_EDBind->outClusters != NULL )
    446                osal_mem_free( ZDO_EDBind->outClusters );
    447              osal_mem_free( ZDO_EDBind );
    448              ZDO_EDBind = NULL;
    449            }
    450          }
    451          #endif // REFLECTOR
    452          
    453          #if defined ( REFLECTOR )
    454          /*********************************************************************
    455           * @fn          ZDO_RemoveEndDeviceBind
    456           *
    457           * @brief       Remove the end device bind
    458           *
    459           * @param  none
    460           *
    461           * @return      none
    462           */
    463          static void ZDO_SendEDBindRsp( byte TransSeq, zAddrType_t *dstAddr, byte Status, byte secUse )
    464          {
    465            ZDP_EndDeviceBindRsp( TransSeq, dstAddr, Status, secUse );
    466          
    467          #if defined( LCD_SUPPORTED )
    468            HalLcdWriteString( "End Device Bind", HAL_LCD_LINE_1 );
    469            if ( Status == ZDP_SUCCESS )
    470              HalLcdWriteString( "Success Sent", HAL_LCD_LINE_2 );
    471            else
    472              HalLcdWriteString( "Timeout", HAL_LCD_LINE_2 );
    473          #endif
    474          
    475          }
    476          #endif // REFLECTOR
    477          
    478          /*********************************************************************
    479           * @fn          ZDO_CompareClusterLists
    480           *
    481           * @brief       Compare one list to another list
    482           *
    483           * @param       numList1 - number of items in list 1
    484           * @param       list1 - first list of cluster IDs
    485           * @param       numList2 - number of items in list 2
    486           * @param       list2 - second list of cluster IDs
    487           * @param       pMatches - buffer to put matches
    488           *
    489           * @return      number of matches
    490           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    491          static byte ZDO_CompareClusterLists( byte numList1, uint16 *list1,
   \                     ZDO_CompareClusterLists:
    492                                    byte numList2, uint16 *list2, uint16 *pMatches )
    493          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FD           MOV     R5,A
   \   000007   8A..         MOV     ?V0 + 6,R2
   \   000009   8B..         MOV     ?V0 + 7,R3
   \   00000B   7410         MOV     A,#0x10
   \   00000D   12....       LCALL   ?XSTACK_DISP0_8
   \   000010   12....       LCALL   ??Subroutine209_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_359:
   \   000013   7412         MOV     A,#0x12
   \   000015   12....       LCALL   ?XSTACK_DISP0_8
   \   000018   12....       LCALL   ??Subroutine203_0 & 0xFFFF
    494            byte x, y;
    495            uint16 z;
    496            byte numMatches = 0;
   \                     ??CrossCallReturnLabel_341:
   \   00001B   7A00         MOV     R2,#0x0
    497          
    498            // Check the first in against the seconds out
    499            for ( x = 0; x < numList1; x++ )
   \   00001D   7B00         MOV     R3,#0x0
   \   00001F   8051         SJMP    ??ZDO_CompareClusterLists_0
    500            {
    501              for ( y = 0; y < numList2; y++ )
    502              {
    503                z = list2[y];
   \                     ??ZDO_CompareClusterLists_1:
   \   000021   E5..         MOV     A,?V0 + 4
   \   000023   C3           CLR     C
   \   000024   33           RLC     A
   \   000025   F8           MOV     R0,A
   \   000026   E4           CLR     A
   \   000027   33           RLC     A
   \   000028   F9           MOV     R1,A
   \   000029   EE           MOV     A,R6
   \   00002A   28           ADD     A,R0
   \   00002B   F582         MOV     DPL,A
   \   00002D   EF           MOV     A,R7
   \   00002E   39           ADDC    A,R1
   \   00002F   F583         MOV     DPH,A
   \   000031   12....       LCALL   ?Subroutine98 & 0xFFFF
    504                if ( list1[x] == z )
   \                     ??CrossCallReturnLabel_185:
   \   000034   EB           MOV     A,R3
   \   000035   C3           CLR     C
   \   000036   33           RLC     A
   \   000037   F8           MOV     R0,A
   \   000038   E4           CLR     A
   \   000039   33           RLC     A
   \   00003A   F9           MOV     R1,A
   \   00003B   E5..         MOV     A,?V0 + 6
   \   00003D   28           ADD     A,R0
   \   00003E   F582         MOV     DPL,A
   \   000040   E5..         MOV     A,?V0 + 7
   \   000042   39           ADDC    A,R1
   \   000043   F583         MOV     DPH,A
   \   000045   E0           MOVX    A,@DPTR
   \   000046   65..         XRL     A,?V0 + 2
   \   000048   7004         JNZ     ??ZDO_CompareClusterLists_2
   \   00004A   A3           INC     DPTR
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   65..         XRL     A,?V0 + 3
   \                     ??ZDO_CompareClusterLists_2:
   \   00004E   7019         JNZ     ??ZDO_CompareClusterLists_3
    505                  pMatches[numMatches++] = z;
   \   000050   EA           MOV     A,R2
   \   000051   C3           CLR     C
   \   000052   33           RLC     A
   \   000053   F8           MOV     R0,A
   \   000054   E4           CLR     A
   \   000055   33           RLC     A
   \   000056   F9           MOV     R1,A
   \   000057   E5..         MOV     A,?V0 + 0
   \   000059   28           ADD     A,R0
   \   00005A   F582         MOV     DPL,A
   \   00005C   E5..         MOV     A,?V0 + 1
   \   00005E   39           ADDC    A,R1
   \   00005F   F583         MOV     DPH,A
   \   000061   E5..         MOV     A,?V0 + 2
   \   000063   F0           MOVX    @DPTR,A
   \   000064   A3           INC     DPTR
   \   000065   E5..         MOV     A,?V0 + 3
   \   000067   F0           MOVX    @DPTR,A
   \   000068   0A           INC     R2
    506              }
   \                     ??ZDO_CompareClusterLists_3:
   \   000069   05..         INC     ?V0 + 4
   \                     ??ZDO_CompareClusterLists_4:
   \   00006B   E5..         MOV     A,?V0 + 4
   \   00006D   C3           CLR     C
   \   00006E   9C           SUBB    A,R4
   \   00006F   40B0         JC      ??ZDO_CompareClusterLists_1
   \   000071   0B           INC     R3
   \                     ??ZDO_CompareClusterLists_0:
   \   000072   EB           MOV     A,R3
   \   000073   C3           CLR     C
   \   000074   9D           SUBB    A,R5
   \   000075   5005         JNC     ??ZDO_CompareClusterLists_5
   \   000077   75..00       MOV     ?V0 + 4,#0x0
   \   00007A   80EF         SJMP    ??ZDO_CompareClusterLists_4
    507            }
    508          
    509            return ( numMatches );
   \                     ??ZDO_CompareClusterLists_5:
   \   00007C   EA           MOV     A,R2
   \   00007D   F9           MOV     R1,A
   \   00007E   02....       LJMP    ??Subroutine222_0 & 0xFFFF
    510          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine203_0:
   \   000000   12....       LCALL   ??Subroutine234_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_500:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine98:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 2,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 3,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine222_0:
   \   000000   7F08         MOV     R7,#0x8
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine234_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 0,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 1,A
   \   000007   22           RET
    511          
    512          /*********************************************************************
    513           * Utility functions
    514           */
    515          
    516          /*********************************************************************
    517           * @fn          ZDO_CompareByteLists
    518           *
    519           * @brief       Compares two lists for matches.
    520           *
    521           * @param       ACnt  - number of entries in list A
    522           * @param       AList  - List A
    523           * @param       BCnt  - number of entries in list B
    524           * @param       BList  - List B
    525           *
    526           * @return      true if a match is found
    527           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    528          byte ZDO_AnyClusterMatches( byte ACnt, uint16 *AList, byte BCnt, uint16 *BList )
   \                     ZDO_AnyClusterMatches:
    529          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   \   000007   EC           MOV     A,R4
   \   000008   FF           MOV     R7,A
   \   000009   740C         MOV     A,#0xc
   \   00000B   12....       LCALL   ?XSTACK_DISP0_8
   \   00000E   12....       LCALL   ??Subroutine224_0 & 0xFFFF
    530            byte x, y;
    531          
    532            for ( x = 0; x < ACnt; x++ )
   \                     ??CrossCallReturnLabel_409:
   \   000011   75..00       MOV     ?V0 + 3,#0x0
   \   000014   8002         SJMP    ??ZDO_AnyClusterMatches_0
   \                     ??ZDO_AnyClusterMatches_1:
   \   000016   05..         INC     ?V0 + 3
   \                     ??ZDO_AnyClusterMatches_0:
   \   000018   E5..         MOV     A,?V0 + 3
   \   00001A   C3           CLR     C
   \   00001B   9E           SUBB    A,R6
   \   00001C   5033         JNC     ??ZDO_AnyClusterMatches_2
    533            {
    534              for ( y = 0; y < BCnt; y++ )
   \   00001E   75..00       MOV     ?V0 + 2,#0x0
   \   000021   8002         SJMP    ??ZDO_AnyClusterMatches_3
   \                     ??ZDO_AnyClusterMatches_4:
   \   000023   05..         INC     ?V0 + 2
   \                     ??ZDO_AnyClusterMatches_3:
   \   000025   E5..         MOV     A,?V0 + 2
   \   000027   C3           CLR     C
   \   000028   9F           SUBB    A,R7
   \   000029   50EB         JNC     ??ZDO_AnyClusterMatches_1
    535              {
    536                if ( AList[x] == BList[y] )
   \   00002B   E5..         MOV     A,?V0 + 3
   \   00002D   C3           CLR     C
   \   00002E   33           RLC     A
   \   00002F   FC           MOV     R4,A
   \   000030   E4           CLR     A
   \   000031   33           RLC     A
   \   000032   FD           MOV     R5,A
   \   000033   EA           MOV     A,R2
   \   000034   2C           ADD     A,R4
   \   000035   F582         MOV     DPL,A
   \   000037   EB           MOV     A,R3
   \   000038   3D           ADDC    A,R5
   \   000039   12....       LCALL   ?Subroutine108 & 0xFFFF
   \                     ??CrossCallReturnLabel_342:
   \   00003C   E5..         MOV     A,?V0 + 2
   \   00003E   C3           CLR     C
   \   00003F   12....       LCALL   ??Subroutine251_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_639:
   \   000042   E0           MOVX    A,@DPTR
   \   000043   65..         XRL     A,?V0 + 0
   \   000045   7004         JNZ     ??ZDO_AnyClusterMatches_5
   \   000047   A3           INC     DPTR
   \   000048   E0           MOVX    A,@DPTR
   \   000049   65..         XRL     A,?V0 + 1
   \                     ??ZDO_AnyClusterMatches_5:
   \   00004B   70D6         JNZ     ??ZDO_AnyClusterMatches_4
    537                {
    538                  return true;
   \   00004D   7901         MOV     R1,#0x1
   \   00004F   8002         SJMP    ??ZDO_AnyClusterMatches_6
    539                }
    540              }
    541            }
    542          
    543            return false;
   \                     ??ZDO_AnyClusterMatches_2:
   \   000051   7900         MOV     R1,#0x0
   \                     ??ZDO_AnyClusterMatches_6:
   \   000053   02....       LJMP    ?Subroutine2 & 0xFFFF
    544          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine108:
   \   000000   F583         MOV     DPH,A
   \   000002                REQUIRE ??Subroutine203_0
   \   000002                ; // Fall through to label ??Subroutine203_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine224_0:
   \   000000   12....       LCALL   ?Subroutine169 & 0xFFFF
   \                     ??CrossCallReturnLabel_492:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine169:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine251_0:
   \   000000   33           RLC     A
   \   000001   FC           MOV     R4,A
   \   000002   E4           CLR     A
   \   000003   33           RLC     A
   \   000004   FD           MOV     R5,A
   \   000005   E8           MOV     A,R0
   \   000006   2C           ADD     A,R4
   \   000007   F582         MOV     DPL,A
   \   000009   E9           MOV     A,R1
   \   00000A   3D           ADDC    A,R5
   \   00000B   F583         MOV     DPH,A
   \   00000D   22           RET
    545          
    546          /*********************************************************************
    547           * Callback functions from ZDProfile
    548           */
    549          
    550          /*********************************************************************
    551           * @fn          ZDO_ProcessNodeDescReq
    552           *
    553           * @brief       This function processes and responds to the
    554           *              Node_Desc_req message.
    555           *
    556           * @param       inMsg - incoming message
    557           *
    558           * @return      none
    559           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    560          void ZDO_ProcessNodeDescReq( zdoIncomingMsg_t *inMsg ) 
   \                     ZDO_ProcessNodeDescReq:
    561          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine64 & 0xFFFF
    562            uint16 aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
    563            NodeDescriptorFormat_t *desc = NULL;
    564          
    565            if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \                     ??CrossCallReturnLabel_127:
   \   000008   7003         JNZ     ??ZDO_ProcessNodeDescReq_0
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   6D           XRL     A,R5
   \                     ??ZDO_ProcessNodeDescReq_0:
   \   00000D   7017         JNZ     ??ZDO_ProcessNodeDescReq_1
    566            {
    567              desc = &ZDO_Config_Node_Descriptor;
    568            }
    569          
    570            if ( desc != NULL )
    571            {
    572              ZDP_NodeDescMsg( inMsg, aoi, desc );
   \   00000F                ; Setup parameters for call to function ZDP_NodeDescMsg
   \   00000F   75....       MOV     ?V0 + 0,#ZDO_Config_Node_Descriptor & 0xff
   \   000012   75....       MOV     ?V0 + 1,#(ZDO_Config_Node_Descriptor >> 8) & 0xff
   \   000015   78..         MOV     R0,#?V0 + 0
   \   000017   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001A   EE           MOV     A,R6
   \   00001B   FA           MOV     R2,A
   \   00001C   12....       LCALL   ??ZDP_NodeDescMsg?relay
   \   00001F   7402         MOV     A,#0x2
   \   000021   12....       LCALL   ?DEALLOC_XSTACK8
   \   000024   801A         SJMP    ??ZDO_ProcessNodeDescReq_2
    573            }
    574            else
    575            {
    576              ZDP_GenericRsp( inMsg->TransSeq, &(inMsg->srcAddr), 
    577                        ZDP_INVALID_REQTYPE, aoi, Node_Desc_rsp, inMsg->SecurityUse );
   \                     ??ZDO_ProcessNodeDescReq_1:
   \   000026                ; Setup parameters for call to function ZDP_GenericRsp
   \   000026   75..02       MOV     ?V0 + 0,#0x2
   \   000029   75..80       MOV     ?V0 + 1,#-0x80
   \   00002C   78..         MOV     R0,#?V0 + 0
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000031   8C..         MOV     ?V0 + 0,R4
   \   000033   8D..         MOV     ?V0 + 1,R5
   \   000035   78..         MOV     R0,#?V0 + 0
   \   000037   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003A   12....       LCALL   ?Subroutine63 & 0xFFFF
    578            }
   \                     ??CrossCallReturnLabel_125:
   \   00003D   12....       LCALL   ?DEALLOC_XSTACK8
    579          }
   \                     ??ZDO_ProcessNodeDescReq_2:
   \   000040   80..         SJMP    ??Subroutine205_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine205_0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine64:
   \   000000   EA           MOV     A,R2
   \   000001   FE           MOV     R6,A
   \   000002   EB           MOV     A,R3
   \   000003   FF           MOV     R7,A
   \   000004   12....       LCALL   ?Subroutine201 & 0xFFFF
   \                     ??CrossCallReturnLabel_348:
   \   000007   EF           MOV     A,R7
   \   000008   12....       LCALL   ?Subroutine158 & 0xFFFF
   \                     ??CrossCallReturnLabel_275:
   \   00000B   FC           MOV     R4,A
   \   00000C   E4           CLR     A
   \   00000D   39           ADDC    A,R1
   \   00000E   FD           MOV     R5,A
   \   00000F   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000012   E0           MOVX    A,@DPTR
   \   000013   6C           XRL     A,R4
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine201:
   \   000000   EE           MOV     A,R6
   \   000001                REQUIRE ??Subroutine206_0
   \   000001                ; // Fall through to label ??Subroutine206_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine206_0:
   \   000000   2413         ADD     A,#0x13
   \   000002   F582         MOV     DPL,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine63:
   \   000000   EE           MOV     A,R6
   \   000001   240E         ADD     A,#0xe
   \   000003   12....       LCALL   ?Subroutine180 & 0xFFFF
   \                     ??CrossCallReturnLabel_515:
   \   000006   FD           MOV     R5,A
   \   000007   7C80         MOV     R4,#-0x80
   \   000009   12....       LCALL   ?Subroutine183 & 0xFFFF
   \                     ??CrossCallReturnLabel_315:
   \   00000C   12....       LCALL   ?Subroutine180 & 0xFFFF
   \                     ??CrossCallReturnLabel_516:
   \   00000F   F9           MOV     R1,A
   \   000010   12....       LCALL   ??ZDP_GenericRsp?relay
   \   000013   7404         MOV     A,#0x4
   \   000015   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine183:
   \   000000   EE           MOV     A,R6
   \   000001   2402         ADD     A,#0x2
   \   000003   FA           MOV     R2,A
   \   000004   EF           MOV     A,R7
   \   000005   3400         ADDC    A,#0x0
   \   000007   FB           MOV     R3,A
   \   000008   EE           MOV     A,R6
   \   000009   240F         ADD     A,#0xf
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine158:
   \   000000   12....       LCALL   ?Subroutine196 & 0xFFFF
   \                     ??CrossCallReturnLabel_331:
   \   000003   FA           MOV     R2,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   F9           MOV     R1,A
   \   000007   EA           MOV     A,R2
   \   000008   2400         ADD     A,#0x0
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine180:
   \   000000   F582         MOV     DPL,A
   \   000002   EF           MOV     A,R7
   \   000003                REQUIRE ??Subroutine236_0
   \   000003                ; // Fall through to label ??Subroutine236_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine236_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F583         MOV     DPH,A
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine196:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F583         MOV     DPH,A
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F8           MOV     R0,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F9           MOV     R1,A
   \   000009   8882         MOV     DPL,R0
   \   00000B   8983         MOV     DPH,R1
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   22           RET
    580          
    581          /*********************************************************************
    582           * @fn          ZDO_ProcessPowerDescReq
    583           *
    584           * @brief       This function processes and responds to the
    585           *              Node_Power_req message.
    586           *
    587           * @param       inMsg  - incoming request
    588           *
    589           * @return      none
    590           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    591          void ZDO_ProcessPowerDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessPowerDescReq:
    592          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine64 & 0xFFFF
    593            uint16 aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
    594            NodePowerDescriptorFormat_t *desc = NULL;
    595          
    596            if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \                     ??CrossCallReturnLabel_128:
   \   000008   7003         JNZ     ??ZDO_ProcessPowerDescReq_0
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   6D           XRL     A,R5
   \                     ??ZDO_ProcessPowerDescReq_0:
   \   00000D   7017         JNZ     ??ZDO_ProcessPowerDescReq_1
    597            {
    598              desc = &ZDO_Config_Power_Descriptor;
    599            }
    600          
    601            if ( desc != NULL )
    602            {
    603              ZDP_PowerDescMsg( inMsg, aoi, desc );
   \   00000F                ; Setup parameters for call to function ZDP_PowerDescMsg
   \   00000F   75....       MOV     ?V0 + 0,#ZDO_Config_Power_Descriptor & 0xff
   \   000012   75....       MOV     ?V0 + 1,#(ZDO_Config_Power_Descriptor >> 8) & 0xff
   \   000015   78..         MOV     R0,#?V0 + 0
   \   000017   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001A   EE           MOV     A,R6
   \   00001B   FA           MOV     R2,A
   \   00001C   12....       LCALL   ??ZDP_PowerDescMsg?relay
   \   00001F   7402         MOV     A,#0x2
   \   000021   12....       LCALL   ?DEALLOC_XSTACK8
   \   000024   801A         SJMP    ??ZDO_ProcessPowerDescReq_2
    604            }
    605            else
    606            {
    607              ZDP_GenericRsp( inMsg->TransSeq, &(inMsg->srcAddr), 
    608                        ZDP_INVALID_REQTYPE, aoi, Power_Desc_rsp, inMsg->SecurityUse );
   \                     ??ZDO_ProcessPowerDescReq_1:
   \   000026                ; Setup parameters for call to function ZDP_GenericRsp
   \   000026   75..03       MOV     ?V0 + 0,#0x3
   \   000029   75..80       MOV     ?V0 + 1,#-0x80
   \   00002C   78..         MOV     R0,#?V0 + 0
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000031   8C..         MOV     ?V0 + 0,R4
   \   000033   8D..         MOV     ?V0 + 1,R5
   \   000035   78..         MOV     R0,#?V0 + 0
   \   000037   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003A   12....       LCALL   ?Subroutine63 & 0xFFFF
    609            }
   \                     ??CrossCallReturnLabel_126:
   \   00003D   12....       LCALL   ?DEALLOC_XSTACK8
    610          }
   \                     ??ZDO_ProcessPowerDescReq_2:
   \   000040   80..         SJMP    ??Subroutine205_0
    611          
    612          /*********************************************************************
    613           * @fn          ZDO_ProcessSimpleDescReq
    614           *
    615           * @brief       This function processes and responds to the
    616           *              Simple_Desc_req message.
    617           *
    618           * @param       inMsg - incoming message (request)
    619           *
    620           * @return      none
    621           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7402         MOV     A,#0x2
   \   000002                REQUIRE ??Subroutine204_0
   \   000002                ; // Fall through to label ??Subroutine204_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine204_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine205_0
   \   000003                ; // Fall through to label ??Subroutine205_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    622          void ZDO_ProcessSimpleDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessSimpleDescReq:
    623          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    624            SimpleDescriptionFormat_t *sDesc = NULL;
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   E4           CLR     A
   \   000015   F0           MOVX    @DPTR,A
   \   000016   A3           INC     DPTR
   \   000017   F0           MOVX    @DPTR,A
    625            uint16 aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \   000018   12....       LCALL   ?Subroutine201 & 0xFFFF
   \                     ??CrossCallReturnLabel_347:
   \   00001B   EF           MOV     A,R7
   \   00001C   12....       LCALL   ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_168:
   \   00001F   FA           MOV     R2,A
    626            byte endPoint = inMsg->asdu[2];
   \   000020   8882         MOV     DPL,R0
   \   000022   8983         MOV     DPH,R1
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   E0           MOVX    A,@DPTR
   \   000027   F9           MOV     R1,A
    627            byte free = false;
   \   000028   75..00       MOV     ?V0 + 0,#0x0
    628            byte stat = ZDP_SUCCESS;
   \   00002B   75..00       MOV     ?V0 + 1,#0x0
    629          
    630            if ( (endPoint == ZDO_EP) || (endPoint > MAX_ENDPOINTS) )
   \   00002E   6005         JZ      ??ZDO_ProcessSimpleDescReq_0
   \   000030   C3           CLR     C
   \   000031   94F1         SUBB    A,#-0xf
   \   000033   4005         JC      ??ZDO_ProcessSimpleDescReq_1
    631            {
    632              stat = ZDP_INVALID_EP;
   \                     ??ZDO_ProcessSimpleDescReq_0:
   \   000035   75..82       MOV     ?V0 + 1,#-0x7e
   \   000038   8029         SJMP    ??ZDO_ProcessSimpleDescReq_2
    633            }
    634            else if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \                     ??ZDO_ProcessSimpleDescReq_1:
   \   00003A   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   6A           XRL     A,R2
   \   00003F   7003         JNZ     ??ZDO_ProcessSimpleDescReq_3
   \   000041   A3           INC     DPTR
   \   000042   E0           MOVX    A,@DPTR
   \   000043   6B           XRL     A,R3
   \                     ??ZDO_ProcessSimpleDescReq_3:
   \   000044   701A         JNZ     ??ZDO_ProcessSimpleDescReq_4
    635            {
    636              free = afFindSimpleDesc( &sDesc, endPoint );
   \   000046                ; Setup parameters for call to function afFindSimpleDesc
   \   000046   85..82       MOV     DPL,?XSP + 0
   \   000049   85..83       MOV     DPH,?XSP + 1
   \   00004C   AA82         MOV     R2,DPL
   \   00004E   AB83         MOV     R3,DPH
   \   000050   12....       LCALL   ??afFindSimpleDesc?relay
   \   000053   E9           MOV     A,R1
   \   000054   F5..         MOV     ?V0 + 0,A
    637              if ( sDesc == NULL )
   \   000056   12....       LCALL   ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_486:
   \   000059   7008         JNZ     ??ZDO_ProcessSimpleDescReq_2
    638              {
    639                stat = ZDP_NOT_ACTIVE;
   \   00005B   75..83       MOV     ?V0 + 1,#-0x7d
   \   00005E   8003         SJMP    ??ZDO_ProcessSimpleDescReq_2
    640              }
    641            }
    642            else
    643            {
    644              if ( ZSTACK_ROUTER_BUILD )
    645              {
    646                stat = ZDP_DEVICE_NOT_FOUND;
    647              }
    648              else if ( ZSTACK_END_DEVICE_BUILD )
    649              {
    650                stat = ZDP_INVALID_REQTYPE;
   \                     ??ZDO_ProcessSimpleDescReq_4:
   \   000060   75..80       MOV     ?V0 + 1,#-0x80
    651              }
    652            }
    653          
    654            ZDP_SimpleDescMsg( inMsg, stat, sDesc );
   \                     ??ZDO_ProcessSimpleDescReq_2:
   \   000063                ; Setup parameters for call to function ZDP_SimpleDescMsg
   \   000063   85..82       MOV     DPL,?XSP + 0
   \   000066   85..83       MOV     DPH,?XSP + 1
   \   000069   12....       LCALL   ?Subroutine110 & 0xFFFF
   \                     ??CrossCallReturnLabel_209:
   \   00006C   A9..         MOV     R1,?V0 + 1
   \   00006E   EE           MOV     A,R6
   \   00006F   FA           MOV     R2,A
   \   000070   EF           MOV     A,R7
   \   000071   FB           MOV     R3,A
   \   000072   12....       LCALL   ??ZDP_SimpleDescMsg?relay
    655          
    656            if ( free && sDesc )
   \   000075   E5..         MOV     A,?V0 + 0
   \   000077   6008         JZ      ??CrossCallReturnLabel_366
   \   000079   12....       LCALL   ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_487:
   \   00007C   6003         JZ      ??CrossCallReturnLabel_366
    657            {
    658              osal_mem_free( sDesc );
   \   00007E                ; Setup parameters for call to function osal_mem_free
   \   00007E   12....       LCALL   ?Subroutine62 & 0xFFFF
    659            }
    660          }
   \                     ??CrossCallReturnLabel_366:
   \   000081   02....       LJMP    ?Subroutine4 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine62:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine213_0
   \   000006                ; // Fall through to label ??Subroutine213_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine213_0:
   \   000000   12....       LCALL   ?Subroutine166 & 0xFFFF
   \                     ??CrossCallReturnLabel_510:
   \   000003   12....       LCALL   ??osal_mem_free?relay
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine110:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine86:
   \   000000   12....       LCALL   ?Subroutine168 & 0xFFFF
   \                     ??CrossCallReturnLabel_290:
   \   000003   FC           MOV     R4,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   FB           MOV     R3,A
   \   000007   EC           MOV     A,R4
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine166:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine232_0
   \   000006                ; // Fall through to label ??Subroutine232_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine232_0:
   \   000000   12....       LCALL   ?Subroutine169 & 0xFFFF
   \                     ??CrossCallReturnLabel_493:
   \   000003   E8           MOV     A,R0
   \   000004   49           ORL     A,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine168:
   \   000000   12....       LCALL   ?Subroutine196 & 0xFFFF
   \                     ??CrossCallReturnLabel_330:
   \   000003   22           RET
    661          
    662          /*********************************************************************
    663           * @fn          ZDO_ProcessActiveEPReq
    664           *
    665           * @brief       This function processes and responds to the
    666           *              Active_EP_req message.
    667           *
    668           * @param       inMsg  - incoming message (request)
    669           *
    670           * @return      none
    671           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    672          void ZDO_ProcessActiveEPReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessActiveEPReq:
    673          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 4,R2
   \   000007   8B..         MOV     ?V0 + 5,R3
    674            byte cnt = 0;
   \   000009   75..00       MOV     ?V0 + 0,#0x0
    675            uint16 aoi;
    676            byte stat = ZDP_SUCCESS;
   \   00000C   75..00       MOV     ?V0 + 1,#0x0
    677          
    678            aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \   00000F   12....       LCALL   ?Subroutine69 & 0xFFFF
    679          
    680            if ( aoi == NLME_GetShortAddr() )
   \                     ??CrossCallReturnLabel_134:
   \   000012                ; Setup parameters for call to function NLME_GetShortAddr
   \   000012   12....       LCALL   ??NLME_GetShortAddr?relay
   \   000015   EA           MOV     A,R2
   \   000016   6E           XRL     A,R6
   \   000017   7002         JNZ     ??ZDO_ProcessActiveEPReq_0
   \   000019   EB           MOV     A,R3
   \   00001A   6F           XRL     A,R7
   \                     ??ZDO_ProcessActiveEPReq_0:
   \   00001B   7012         JNZ     ??ZDO_ProcessActiveEPReq_1
    681            {
    682              cnt = afNumEndPoints() - 1;  // -1 for ZDO endpoint descriptor
   \   00001D                ; Setup parameters for call to function afNumEndPoints
   \   00001D   12....       LCALL   ??afNumEndPoints?relay
   \   000020   E9           MOV     A,R1
   \   000021   14           DEC     A
   \   000022   F5..         MOV     ?V0 + 0,A
    683              afEndPoints( (uint8 *)ZDOBuildBuf, true );
   \   000024                ; Setup parameters for call to function afEndPoints
   \   000024   7901         MOV     R1,#0x1
   \   000026   7A..         MOV     R2,#ZDOBuildBuf & 0xff
   \   000028   7B..         MOV     R3,#(ZDOBuildBuf >> 8) & 0xff
   \   00002A   12....       LCALL   ??afEndPoints?relay
   \   00002D   8003         SJMP    ??ZDO_ProcessActiveEPReq_2
    684            }
    685            else
    686            {
    687              stat = ZDP_INVALID_REQTYPE;
   \                     ??ZDO_ProcessActiveEPReq_1:
   \   00002F   75..80       MOV     ?V0 + 1,#-0x80
    688            }
    689          
    690            ZDP_ActiveEPRsp( inMsg->TransSeq, &(inMsg->srcAddr), stat, 
    691                            aoi, cnt, (uint8 *)ZDOBuildBuf, inMsg->SecurityUse );
   \                     ??ZDO_ProcessActiveEPReq_2:
   \   000032                ; Setup parameters for call to function ZDP_EPRsp
   \   000032   E5..         MOV     A,?V0 + 4
   \   000034   240E         ADD     A,#0xe
   \   000036   12....       LCALL   ?Subroutine135 & 0xFFFF
   \                     ??CrossCallReturnLabel_436:
   \   000039   F5..         MOV     ?V0 + 2,A
   \   00003B   78..         MOV     R0,#?V0 + 2
   \   00003D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000040   75....       MOV     ?V0 + 2,#ZDOBuildBuf & 0xff
   \   000043   75....       MOV     ?V0 + 3,#(ZDOBuildBuf >> 8) & 0xff
   \   000046   78..         MOV     R0,#?V0 + 2
   \   000048   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004B   78..         MOV     R0,#?V0 + 0
   \   00004D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000050   8E..         MOV     ?V0 + 2,R6
   \   000052   8F..         MOV     ?V0 + 3,R7
   \   000054   78..         MOV     R0,#?V0 + 2
   \   000056   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000059   E5..         MOV     A,?V0 + 1
   \   00005B   F5..         MOV     ?V0 + 0,A
   \   00005D   78..         MOV     R0,#?V0 + 0
   \   00005F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000062   12....       LCALL   ?Subroutine139 & 0xFFFF
   \                     ??CrossCallReturnLabel_249:
   \   000065   F582         MOV     DPL,A
   \   000067   E5..         MOV     A,?V0 + 5
   \   000069   12....       LCALL   ?Subroutine134 & 0xFFFF
   \                     ??CrossCallReturnLabel_241:
   \   00006C   7A05         MOV     R2,#0x5
   \   00006E   7B80         MOV     R3,#-0x80
   \   000070   12....       LCALL   ??ZDP_EPRsp?relay
   \   000073   02....       LJMP    ?Subroutine5 & 0xFFFF
    692          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine134:
   \   000000   12....       LCALL   ??Subroutine236_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_514:
   \   000003   F9           MOV     R1,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine135:
   \   000000   F582         MOV     DPL,A
   \   000002   E5..         MOV     A,?V0 + 5
   \   000004                REQUIRE ??Subroutine226_0
   \   000004                ; // Fall through to label ??Subroutine226_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine226_0:
   \   000000   12....       LCALL   ??Subroutine236_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_517:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine69:
   \   000000   12....       LCALL   ?Subroutine178 & 0xFFFF
   \                     ??CrossCallReturnLabel_311:
   \   000003   12....       LCALL   ?Subroutine158 & 0xFFFF
   \                     ??CrossCallReturnLabel_276:
   \   000006   FE           MOV     R6,A
   \   000007   E4           CLR     A
   \   000008   39           ADDC    A,R1
   \   000009   FF           MOV     R7,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine139:
   \   000000   E5..         MOV     A,?V0 + 4
   \   000002   2402         ADD     A,#0x2
   \   000004   FC           MOV     R4,A
   \   000005   E5..         MOV     A,?V0 + 5
   \   000007   3400         ADDC    A,#0x0
   \   000009   FD           MOV     R5,A
   \   00000A   E5..         MOV     A,?V0 + 4
   \   00000C   240F         ADD     A,#0xf
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine178:
   \   000000   EA           MOV     A,R2
   \   000001   12....       LCALL   ??Subroutine206_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_345:
   \   000004   EB           MOV     A,R3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   7407         MOV     A,#0x7
   \   000002                REQUIRE ??Subroutine259_0
   \   000002                ; // Fall through to label ??Subroutine259_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine259_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine260_0
   \   000003                ; // Fall through to label ??Subroutine260_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine260_0:
   \   000000   7F06         MOV     R7,#0x6
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    693          
    694          /*********************************************************************
    695           * @fn          ZDO_ConvertOTAClusters
    696           *
    697           * @brief       This function will convert the over-the-air cluster list
    698           *              format to an internal format.
    699           *
    700           * @param       inMsg  - incoming message (request)
    701           *
    702           * @return      pointer to incremented inBuf
    703           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    704          uint8 *ZDO_ConvertOTAClusters( uint8 cnt, uint8 *inBuf, uint16 *outList )
   \                     ZDO_ConvertOTAClusters:
    705          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    706            uint8 x;
    707            
    708            for ( x = 0; x < cnt; x++ ) 
   \   000007   7F00         MOV     R7,#0x0
   \   000009   802F         SJMP    ??ZDO_ConvertOTAClusters_0
    709            {
    710              // convert ota format to internal
    711              outList[x] = BUILD_UINT16( inBuf[0], inBuf[1] );
   \                     ??ZDO_ConvertOTAClusters_1:
   \   00000B   8A82         MOV     DPL,R2
   \   00000D   8B83         MOV     DPH,R3
   \   00000F   12....       LCALL   ??Subroutine208_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_353:
   \   000012   F9           MOV     R1,A
   \   000013   E5..         MOV     A,?V0 + 0
   \   000015   2400         ADD     A,#0x0
   \   000017   E4           CLR     A
   \   000018   39           ADDC    A,R1
   \   000019   F5..         MOV     ?V0 + 1,A
   \   00001B   EF           MOV     A,R7
   \   00001C   33           RLC     A
   \   00001D   F8           MOV     R0,A
   \   00001E   E4           CLR     A
   \   00001F   33           RLC     A
   \   000020   F9           MOV     R1,A
   \   000021   EC           MOV     A,R4
   \   000022   28           ADD     A,R0
   \   000023   F582         MOV     DPL,A
   \   000025   ED           MOV     A,R5
   \   000026   39           ADDC    A,R1
   \   000027   F583         MOV     DPH,A
   \   000029   E5..         MOV     A,?V0 + 0
   \   00002B   F0           MOVX    @DPTR,A
   \   00002C   A3           INC     DPTR
   \   00002D   E5..         MOV     A,?V0 + 1
   \   00002F   F0           MOVX    @DPTR,A
    712              inBuf += sizeof( uint16 );
   \   000030   EA           MOV     A,R2
   \   000031   2402         ADD     A,#0x2
   \   000033   0A           INC     R2
   \   000034   0A           INC     R2
   \   000035   EB           MOV     A,R3
   \   000036   3400         ADDC    A,#0x0
   \   000038   FB           MOV     R3,A
    713            }
   \   000039   0F           INC     R7
   \                     ??ZDO_ConvertOTAClusters_0:
   \   00003A   EF           MOV     A,R7
   \   00003B   C3           CLR     C
   \   00003C   9E           SUBB    A,R6
   \   00003D   40CC         JC      ??ZDO_ConvertOTAClusters_1
    714            return ( inBuf );
   \   00003F   02....       LJMP    ??Subroutine205_0 & 0xFFFF
    715          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine208_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 0,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET
    716          
    717          /*********************************************************************
    718           * @fn          ZDO_ProcessMatchDescReq
    719           *
    720           * @brief       This function processes and responds to the
    721           *              Match_Desc_req message.
    722           *
    723           * @param       inMsg  - incoming message (request)
    724           *
    725           * @return      none
    726           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    727          void ZDO_ProcessMatchDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMatchDescReq:
    728          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV     A,#-0xb
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7403         MOV     A,#0x3
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   12....       LCALL   ?Subroutine38 & 0xFFFF
    729            uint8 epCnt = 0;
   \                     ??CrossCallReturnLabel_56:
   \   000012   7402         MOV     A,#0x2
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   E4           CLR     A
   \   000018   F0           MOVX    @DPTR,A
    730            uint8 numInClusters;
    731            uint16 *inClusters = NULL;
   \   000019   7409         MOV     A,#0x9
   \   00001B   12....       LCALL   ?XSTACK_DISP0_8
   \   00001E   E4           CLR     A
   \   00001F   F0           MOVX    @DPTR,A
   \   000020   A3           INC     DPTR
   \   000021   F0           MOVX    @DPTR,A
    732            uint8 numOutClusters;
    733            uint16 *outClusters = NULL;
   \   000022   7407         MOV     A,#0x7
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   E4           CLR     A
   \   000028   F0           MOVX    @DPTR,A
   \   000029   A3           INC     DPTR
   \   00002A   F0           MOVX    @DPTR,A
    734            epList_t *epDesc;
    735            SimpleDescriptionFormat_t *sDesc = NULL;
    736            uint8 allocated;
    737            uint8 *msg;
    738            uint16 aoi;
    739            uint16 profileID;
    740          
    741            // Parse the incoming message
    742            msg = inMsg->asdu;
   \   00002B   7403         MOV     A,#0x3
   \   00002D   12....       LCALL   ?XSTACK_DISP0_8
   \   000030   E0           MOVX    A,@DPTR
   \   000031   2413         ADD     A,#0x13
   \   000033   12....       LCALL   ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_188:
   \   000036   12....       LCALL   ?Subroutine98 & 0xFFFF
    743            aoi = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_186:
   \   000039   85..82       MOV     DPL,?V0 + 2
   \   00003C   F583         MOV     DPH,A
   \   00003E   12....       LCALL   ??Subroutine240_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_571:
   \   000041   2400         ADD     A,#0x0
   \   000043   F5..         MOV     ?V0 + 0,A
   \   000045   E4           CLR     A
   \   000046   39           ADDC    A,R1
   \   000047   F5..         MOV     ?V0 + 1,A
    744            profileID = BUILD_UINT16( msg[2], msg[3] );
   \   000049   85..82       MOV     DPL,?V0 + 2
   \   00004C   85..83       MOV     DPH,?V0 + 3
   \   00004F   A3           INC     DPTR
   \   000050   A3           INC     DPTR
   \   000051   E0           MOVX    A,@DPTR
   \   000052   FA           MOV     R2,A
   \   000053   85..82       MOV     DPL,?V0 + 2
   \   000056   85..83       MOV     DPH,?V0 + 3
   \   000059   A3           INC     DPTR
   \   00005A   A3           INC     DPTR
   \   00005B   A3           INC     DPTR
   \   00005C   E0           MOVX    A,@DPTR
   \   00005D   F9           MOV     R1,A
   \   00005E   EA           MOV     A,R2
   \   00005F   FE           MOV     R6,A
   \   000060   E4           CLR     A
   \   000061   39           ADDC    A,R1
   \   000062   FF           MOV     R7,A
    745            msg += 4;
   \   000063   E5..         MOV     A,?V0 + 2
   \   000065   2404         ADD     A,#0x4
   \   000067   F5..         MOV     ?V0 + 2,A
   \   000069   E5..         MOV     A,?V0 + 3
   \   00006B   3400         ADDC    A,#0x0
   \   00006D   F5..         MOV     ?V0 + 3,A
   \   00006F                ; Setup parameters for call to function NLME_IsAddressBroadcast
   \   00006F   AA..         MOV     R2,?V0 + 0
   \   000071   AB..         MOV     R3,?V0 + 1
    746          
    747            if ( ADDR_BCAST_NOT_ME == NLME_IsAddressBroadcast(aoi) )
   \   000073   12....       LCALL   ??NLME_IsAddressBroadcast?relay
   \   000076   E9           MOV     A,R1
   \   000077   6401         XRL     A,#0x1
   \   000079   703C         JNZ     ??ZDO_ProcessMatchDescReq_0
    748            {
    749              ZDP_MatchDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_INVALID_REQTYPE,
    750                                    ZDAppNwkAddr.addr.shortAddr, 0, NULL, inMsg->SecurityUse );
   \                     ??ZDO_ProcessMatchDescReq_1:
   \   00007B                ; Setup parameters for call to function ZDP_EPRsp
   \   00007B   7403         MOV     A,#0x3
   \   00007D   12....       LCALL   ?XSTACK_DISP0_8
   \   000080   12....       LCALL   ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_351:
   \   000083   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000086   E4           CLR     A
   \   000087   F5..         MOV     ?V0 + 0,A
   \   000089   F5..         MOV     ?V0 + 1,A
   \   00008B   78..         MOV     R0,#?V0 + 0
   \   00008D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000090   78..         MOV     R0,#?V0 + 0
   \   000092   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000095   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000098   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00009B   75..80       MOV     ?V0 + 0,#-0x80
   \   00009E   78..         MOV     R0,#?V0 + 0
   \   0000A0   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000A3   740A         MOV     A,#0xa
   \   0000A5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A8   12....       LCALL   ?Subroutine102 & 0xFFFF
   \                     ??CrossCallReturnLabel_195:
   \   0000AB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AE   12....       LCALL   ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_129:
   \   0000B1   12....       LCALL   ?DEALLOC_XSTACK8
    751              return;
   \   0000B4   02....       LJMP    ??CrossCallReturnLabel_369 & 0xFFFF
    752            }
    753            else if ( (ADDR_NOT_BCAST == NLME_IsAddressBroadcast(aoi)) && (aoi != ZDAppNwkAddr.addr.shortAddr) )
   \                     ??ZDO_ProcessMatchDescReq_0:
   \   0000B7                ; Setup parameters for call to function NLME_IsAddressBroadcast
   \   0000B7   AA..         MOV     R2,?V0 + 0
   \   0000B9   AB..         MOV     R3,?V0 + 1
   \   0000BB   12....       LCALL   ??NLME_IsAddressBroadcast?relay
   \   0000BE   E9           MOV     A,R1
   \   0000BF   700E         JNZ     ??ZDO_ProcessMatchDescReq_2
   \   0000C1   90....       MOV     DPTR,#ZDAppNwkAddr
   \   0000C4   E0           MOVX    A,@DPTR
   \   0000C5   65..         XRL     A,?V0 + 0
   \   0000C7   7004         JNZ     ??ZDO_ProcessMatchDescReq_3
   \   0000C9   A3           INC     DPTR
   \   0000CA   E0           MOVX    A,@DPTR
   \   0000CB   65..         XRL     A,?V0 + 1
   \                     ??ZDO_ProcessMatchDescReq_3:
   \   0000CD   70AC         JNZ     ??ZDO_ProcessMatchDescReq_1
    754            {
    755              ZDP_MatchDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_INVALID_REQTYPE,
    756                                       ZDAppNwkAddr.addr.shortAddr, 0, NULL, inMsg->SecurityUse );
    757              return;
    758            }
    759          
    760            if ((numInClusters = *msg++) &&
    761                (inClusters = (uint16*)osal_mem_alloc( numInClusters * sizeof( uint16 ) )))
   \                     ??ZDO_ProcessMatchDescReq_2:
   \   0000CF   12....       LCALL   ?Subroutine114 & 0xFFFF
   \                     ??CrossCallReturnLabel_216:
   \   0000D2   88..         MOV     ?V0 + 7,R0
   \   0000D4   602E         JZ      ??ZDO_ProcessMatchDescReq_4
   \   0000D6                ; Setup parameters for call to function osal_mem_alloc
   \   0000D6   C3           CLR     C
   \   0000D7   33           RLC     A
   \   0000D8   FA           MOV     R2,A
   \   0000D9   E4           CLR     A
   \   0000DA   33           RLC     A
   \   0000DB   FB           MOV     R3,A
   \   0000DC   12....       LCALL   ??osal_mem_alloc?relay
   \   0000DF   7409         MOV     A,#0x9
   \   0000E1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E4   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   0000E7   7409         MOV     A,#0x9
   \   0000E9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EC   12....       LCALL   ??Subroutine232_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_470:
   \   0000EF   6013         JZ      ??ZDO_ProcessMatchDescReq_4
    762            {
    763              msg = ZDO_ConvertOTAClusters( numInClusters, msg, inClusters );
   \   0000F1                ; Setup parameters for call to function ZDO_ConvertOTAClusters
   \   0000F1   7409         MOV     A,#0x9
   \   0000F3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F6   12....       LCALL   ?Subroutine109 & 0xFFFF
    764            }
   \                     ??CrossCallReturnLabel_207:
   \   0000F9   A9..         MOV     R1,?V0 + 7
   \   0000FB   12....       LCALL   ??ZDO_ConvertOTAClusters?relay
   \   0000FE   8A..         MOV     ?V0 + 2,R2
   \   000100   8B..         MOV     ?V0 + 3,R3
   \   000102   8003         SJMP    ??ZDO_ProcessMatchDescReq_5
    765            else
    766            {
    767              numInClusters = 0;
   \                     ??ZDO_ProcessMatchDescReq_4:
   \   000104   75..00       MOV     ?V0 + 7,#0x0
    768            }
    769          
    770            if ((numOutClusters = *msg++) &&
    771                (outClusters = (uint16 *)osal_mem_alloc( numOutClusters * sizeof( uint16 ) )))
   \                     ??ZDO_ProcessMatchDescReq_5:
   \   000107   12....       LCALL   ?Subroutine114 & 0xFFFF
   \                     ??CrossCallReturnLabel_217:
   \   00010A   88..         MOV     ?V0 + 6,R0
   \   00010C   602A         JZ      ??ZDO_ProcessMatchDescReq_6
   \   00010E                ; Setup parameters for call to function osal_mem_alloc
   \   00010E   C3           CLR     C
   \   00010F   33           RLC     A
   \   000110   FA           MOV     R2,A
   \   000111   E4           CLR     A
   \   000112   33           RLC     A
   \   000113   FB           MOV     R3,A
   \   000114   12....       LCALL   ??osal_mem_alloc?relay
   \   000117   7407         MOV     A,#0x7
   \   000119   12....       LCALL   ?XSTACK_DISP0_8
   \   00011C   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   00011F   7407         MOV     A,#0x7
   \   000121   12....       LCALL   ?XSTACK_DISP0_8
   \   000124   12....       LCALL   ??Subroutine232_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_471:
   \   000127   600F         JZ      ??ZDO_ProcessMatchDescReq_6
    772            {
    773              msg = ZDO_ConvertOTAClusters( numOutClusters, msg, outClusters );
   \   000129                ; Setup parameters for call to function ZDO_ConvertOTAClusters
   \   000129   7407         MOV     A,#0x7
   \   00012B   12....       LCALL   ?XSTACK_DISP0_8
   \   00012E   12....       LCALL   ?Subroutine109 & 0xFFFF
    774            }
   \                     ??CrossCallReturnLabel_208:
   \   000131   A9..         MOV     R1,?V0 + 6
   \   000133   12....       LCALL   ??ZDO_ConvertOTAClusters?relay
   \   000136   8003         SJMP    ??ZDO_ProcessMatchDescReq_7
    775            else
    776            {
    777              numOutClusters = 0;
   \                     ??ZDO_ProcessMatchDescReq_6:
   \   000138   75..00       MOV     ?V0 + 6,#0x0
    778            }
    779          
    780            // First count the number of endpoints that match.
    781            epDesc = epList;
   \                     ??ZDO_ProcessMatchDescReq_7:
   \   00013B   90....       MOV     DPTR,#epList
   \   00013E   804D         SJMP    ??CrossCallReturnLabel_662
    782            while ( epDesc )
    783            {
    784              // Don't search endpoint 0 and check if response is allowed
    785              if ( epDesc->epDesc->endPoint != ZDO_EP && (epDesc->flags&eEP_AllowMatch) )
    786              {
    787                if ( epDesc->pfnDescCB )
    788                {
    789                  sDesc = (SimpleDescriptionFormat_t *)epDesc->pfnDescCB( AF_DESCRIPTOR_SIMPLE, epDesc->epDesc->endPoint );
    790                  allocated = TRUE;
    791                }
    792                else
    793                {
    794                  sDesc = epDesc->epDesc->simpleDesc;
    795                  allocated = FALSE;
    796                }
    797          
    798                if ( sDesc && sDesc->AppProfId == profileID )
    799                {
    800                  uint8 *uint8Buf = (uint8 *)ZDOBuildBuf;
    801          
    802                  // If there are no search input/ouput clusters - respond
    803                  if ( ((numInClusters == 0) && (numOutClusters == 0))
    804                      // Are there matching input clusters?
    805                       || (ZDO_AnyClusterMatches( numInClusters, inClusters,
    806                            sDesc->AppNumInClusters, sDesc->pAppInClusterList ))
    807                      // Are there matching output clusters?
    808                       || (ZDO_AnyClusterMatches( numOutClusters, outClusters,
    809                            sDesc->AppNumOutClusters, sDesc->pAppOutClusterList ))     )
    810                  {         
    811                    // Notify the endpoint of the match.
    812                    uint8 bufLen = sizeof( ZDO_MatchDescRspSent_t ) + (numOutClusters + numInClusters) * sizeof(uint16);
    813                    ZDO_MatchDescRspSent_t *pRspSent = (ZDO_MatchDescRspSent_t *) osal_msg_allocate( bufLen );
    814          
    815                    if (pRspSent)
    816                    {
    817                      pRspSent->hdr.event = ZDO_MATCH_DESC_RSP_SENT;
    818                      pRspSent->nwkAddr = inMsg->srcAddr.addr.shortAddr;
    819                      pRspSent->numInClusters = numInClusters;
    820                      pRspSent->numOutClusters = numOutClusters;
    821          
    822                      if (numInClusters)
    823                      {
    824                        pRspSent->pInClusters = (uint16*) (pRspSent + 1);
    825                        osal_memcpy(pRspSent->pInClusters, inClusters, numInClusters * sizeof(uint16));
    826                      }
    827                      else 
    828                      {
    829                        pRspSent->pInClusters = NULL;
    830                      }
    831                       
    832                      if (numOutClusters)
    833                      {
    834                        pRspSent->pOutClusters = (uint16*)(pRspSent + 1) + numInClusters;
    835                        osal_memcpy(pRspSent->pOutClusters, outClusters, numOutClusters * sizeof(uint16));
    836                      }
    837                      else 
    838                      {
    839                        pRspSent->pOutClusters = NULL;
   \                     ??ZDO_ProcessMatchDescReq_8:
   \   000140   E4           CLR     A
   \   000141   F0           MOVX    @DPTR,A
   \   000142   A3           INC     DPTR
   \   000143   F0           MOVX    @DPTR,A
    840                      }
    841                    
    842                      osal_msg_send( *epDesc->epDesc->task_id, (uint8 *)pRspSent );
   \                     ??ZDO_ProcessMatchDescReq_9:
   \   000144                ; Setup parameters for call to function osal_msg_send
   \   000144   AA..         MOV     R2,?V0 + 4
   \   000146   AB..         MOV     R3,?V0 + 5
   \   000148   7405         MOV     A,#0x5
   \   00014A   12....       LCALL   ?XSTACK_DISP0_8
   \   00014D   12....       LCALL   ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_153:
   \   000150   F8           MOV     R0,A
   \   000151   A3           INC     DPTR
   \   000152   12....       LCALL   ?Subroutine72 & 0xFFFF
    843                    }
    844          
    845                    uint8Buf[epCnt++] = sDesc->EndPoint;
   \                     ??CrossCallReturnLabel_143:
   \   000155   85..82       MOV     DPL,?XSP + 0
   \   000158   85..83       MOV     DPH,?XSP + 1
   \   00015B   12....       LCALL   ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_154:
   \   00015E   C0E0         PUSH    A
   \   000160   7402         MOV     A,#0x2
   \   000162   12....       LCALL   ?XSTACK_DISP0_8
   \   000165   E0           MOVX    A,@DPTR
   \   000166   F8           MOV     R0,A
   \   000167   74..         MOV     A,#ZDOBuildBuf & 0xff
   \   000169   28           ADD     A,R0
   \   00016A   F582         MOV     DPL,A
   \   00016C   74..         MOV     A,#(ZDOBuildBuf >> 8) & 0xff
   \   00016E   12....       LCALL   ??Subroutine239_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_529:
   \   000171   D0E0         POP     A
   \   000173   F0           MOVX    @DPTR,A
   \   000174   7402         MOV     A,#0x2
   \   000176   12....       LCALL   ?XSTACK_DISP0_8
   \   000179   E0           MOVX    A,@DPTR
   \   00017A   04           INC     A
   \   00017B   F0           MOVX    @DPTR,A
    846                  }
    847                }
    848          
    849                if ( allocated )
   \                     ??ZDO_ProcessMatchDescReq_10:
   \   00017C   E5..         MOV     A,?V0 + 3
   \   00017E   A2E0         MOV     C,0xE0 /* A   */.0
   \   000180   5003         JNC     ??CrossCallReturnLabel_367
    850                  osal_mem_free( sDesc );
   \   000182                ; Setup parameters for call to function osal_mem_free
   \   000182   12....       LCALL   ?Subroutine62 & 0xFFFF
    851              }
    852              epDesc = epDesc->nextDesc;
   \                     ??CrossCallReturnLabel_367:
   \   000185   7405         MOV     A,#0x5
   \   000187   12....       LCALL   ?XSTACK_DISP0_8
   \   00018A   12....       LCALL   ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_662:
   \   00018D   12....       LCALL   ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_410:
   \   000190   7405         MOV     A,#0x5
   \   000192   12....       LCALL   ?XSTACK_DISP0_8
   \   000195   12....       LCALL   ??Subroutine217_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_384:
   \   000198   7405         MOV     A,#0x5
   \   00019A   12....       LCALL   ?XSTACK_DISP0_8
   \   00019D   12....       LCALL   ??Subroutine232_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_472:
   \   0001A0   7003         JNZ     $+5
   \   0001A2   02....       LJMP    ??ZDO_ProcessMatchDescReq_11 & 0xFFFF
   \   0001A5   7405         MOV     A,#0x5
   \   0001A7   12....       LCALL   ?XSTACK_DISP0_8
   \   0001AA   12....       LCALL   ??Subroutine210_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_363:
   \   0001AD   E8           MOV     A,R0
   \   0001AE   FA           MOV     R2,A
   \   0001AF   E9           MOV     A,R1
   \   0001B0   FB           MOV     R3,A
   \   0001B1   8A82         MOV     DPL,R2
   \   0001B3   8B83         MOV     DPH,R3
   \   0001B5   E0           MOVX    A,@DPTR
   \   0001B6   60CD         JZ      ??CrossCallReturnLabel_367
   \   0001B8   7405         MOV     A,#0x5
   \   0001BA   12....       LCALL   ?XSTACK_DISP0_8
   \   0001BD   12....       LCALL   ?Subroutine115 & 0xFFFF
   \                     ??CrossCallReturnLabel_218:
   \   0001C0   A3           INC     DPTR
   \   0001C1   E0           MOVX    A,@DPTR
   \   0001C2   A2E0         MOV     C,0xE0 /* A   */.0
   \   0001C4   50BF         JNC     ??CrossCallReturnLabel_367
   \   0001C6   7405         MOV     A,#0x5
   \   0001C8   12....       LCALL   ?XSTACK_DISP0_8
   \   0001CB   12....       LCALL   ?Subroutine116 & 0xFFFF
   \                     ??CrossCallReturnLabel_220:
   \   0001CE   12....       LCALL   ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_420:
   \   0001D1   E8           MOV     A,R0
   \   0001D2   FC           MOV     R4,A
   \   0001D3   E9           MOV     A,R1
   \   0001D4   FD           MOV     R5,A
   \   0001D5   EC           MOV     A,R4
   \   0001D6   4D           ORL     A,R5
   \   0001D7   8A82         MOV     DPL,R2
   \   0001D9   8B83         MOV     DPH,R3
   \   0001DB   6019         JZ      ??ZDO_ProcessMatchDescReq_12
   \   0001DD                ; Setup parameters for indirect call
   \   0001DD   E0           MOVX    A,@DPTR
   \   0001DE   FA           MOV     R2,A
   \   0001DF   7901         MOV     R1,#0x1
   \   0001E1   8C82         MOV     DPL,R4
   \   0001E3   8D83         MOV     DPH,R5
   \   0001E5   12....       LCALL   ?CALL_IND
   \   0001E8   85..82       MOV     DPL,?XSP + 0
   \   0001EB   85..83       MOV     DPH,?XSP + 1
   \   0001EE   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   0001F1   75..01       MOV     ?V0 + 3,#0x1
   \   0001F4   800F         SJMP    ??ZDO_ProcessMatchDescReq_13
   \                     ??ZDO_ProcessMatchDescReq_12:
   \   0001F6   12....       LCALL   ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_421:
   \   0001F9   85..82       MOV     DPL,?XSP + 0
   \   0001FC   85..83       MOV     DPH,?XSP + 1
   \   0001FF   12....       LCALL   ??Subroutine217_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_385:
   \   000202   75..00       MOV     ?V0 + 3,#0x0
   \                     ??ZDO_ProcessMatchDescReq_13:
   \   000205   12....       LCALL   ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_488:
   \   000208   7003         JNZ     $+5
   \   00020A   02....       LJMP    ??ZDO_ProcessMatchDescReq_10 & 0xFFFF
   \   00020D   85..82       MOV     DPL,?XSP + 0
   \   000210   85..83       MOV     DPH,?XSP + 1
   \   000213   12....       LCALL   ?Subroutine116 & 0xFFFF
   \                     ??CrossCallReturnLabel_221:
   \   000216   A3           INC     DPTR
   \   000217   E0           MOVX    A,@DPTR
   \   000218   6E           XRL     A,R6
   \   000219   7003         JNZ     ??ZDO_ProcessMatchDescReq_14
   \   00021B   A3           INC     DPTR
   \   00021C   E0           MOVX    A,@DPTR
   \   00021D   6F           XRL     A,R7
   \                     ??ZDO_ProcessMatchDescReq_14:
   \   00021E   6003         JZ      $+5
   \   000220   02....       LJMP    ??ZDO_ProcessMatchDescReq_10 & 0xFFFF
   \   000223   E5..         MOV     A,?V0 + 7
   \   000225   7004         JNZ     ??ZDO_ProcessMatchDescReq_15
   \   000227   E5..         MOV     A,?V0 + 6
   \   000229   605B         JZ      ??ZDO_ProcessMatchDescReq_16
   \                     ??ZDO_ProcessMatchDescReq_15:
   \   00022B                ; Setup parameters for call to function ZDO_AnyClusterMatches
   \   00022B   85..82       MOV     DPL,?XSP + 0
   \   00022E   85..83       MOV     DPH,?XSP + 1
   \   000231   12....       LCALL   ??Subroutine258_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_661:
   \   000234   A3           INC     DPTR
   \   000235   A3           INC     DPTR
   \   000236   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000239   7402         MOV     A,#0x2
   \   00023B   12....       LCALL   ?XSTACK_DISP0_8
   \   00023E   12....       LCALL   ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_175:
   \   000241   E0           MOVX    A,@DPTR
   \   000242   FC           MOV     R4,A
   \   000243   740B         MOV     A,#0xb
   \   000245   12....       LCALL   ?XSTACK_DISP0_8
   \   000248   12....       LCALL   ??Subroutine228_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_448:
   \   00024B   A9..         MOV     R1,?V0 + 7
   \   00024D   12....       LCALL   ??ZDO_AnyClusterMatches?relay
   \   000250   7402         MOV     A,#0x2
   \   000252   12....       LCALL   ?DEALLOC_XSTACK8
   \   000255   E9           MOV     A,R1
   \   000256   702E         JNZ     ??ZDO_ProcessMatchDescReq_16
   \   000258                ; Setup parameters for call to function ZDO_AnyClusterMatches
   \   000258   85..82       MOV     DPL,?XSP + 0
   \   00025B   85..83       MOV     DPH,?XSP + 1
   \   00025E   12....       LCALL   ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_146:
   \   000261   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000264   7402         MOV     A,#0x2
   \   000266   12....       LCALL   ?XSTACK_DISP0_8
   \   000269   12....       LCALL   ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_150:
   \   00026C   E0           MOVX    A,@DPTR
   \   00026D   FC           MOV     R4,A
   \   00026E   7409         MOV     A,#0x9
   \   000270   12....       LCALL   ?XSTACK_DISP0_8
   \   000273   12....       LCALL   ??Subroutine228_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_449:
   \   000276   A9..         MOV     R1,?V0 + 6
   \   000278   12....       LCALL   ??ZDO_AnyClusterMatches?relay
   \   00027B   7402         MOV     A,#0x2
   \   00027D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000280   E9           MOV     A,R1
   \   000281   7003         JNZ     $+5
   \   000283   02....       LJMP    ??ZDO_ProcessMatchDescReq_10 & 0xFFFF
   \                     ??ZDO_ProcessMatchDescReq_16:
   \   000286                ; Setup parameters for call to function osal_msg_allocate
   \   000286   E5..         MOV     A,?V0 + 6
   \   000288   25..         ADD     A,?V0 + 7
   \   00028A   C3           CLR     C
   \   00028B   33           RLC     A
   \   00028C   240A         ADD     A,#0xa
   \   00028E   FA           MOV     R2,A
   \   00028F   7B00         MOV     R3,#0x0
   \   000291   12....       LCALL   ??osal_msg_allocate?relay
   \   000294   8A..         MOV     ?V0 + 4,R2
   \   000296   8B..         MOV     ?V0 + 5,R3
   \   000298   EA           MOV     A,R2
   \   000299   45..         ORL     A,?V0 + 5
   \   00029B   7003         JNZ     $+5
   \   00029D   02....       LJMP    ??CrossCallReturnLabel_143 & 0xFFFF
   \   0002A0   8A82         MOV     DPL,R2
   \   0002A2   8B83         MOV     DPH,R3
   \   0002A4   74D2         MOV     A,#-0x2e
   \   0002A6   F0           MOVX    @DPTR,A
   \   0002A7   7403         MOV     A,#0x3
   \   0002A9   12....       LCALL   ?XSTACK_DISP0_8
   \   0002AC   12....       LCALL   ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_169:
   \   0002AF   8A82         MOV     DPL,R2
   \   0002B1   8B83         MOV     DPH,R3
   \   0002B3   12....       LCALL   ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_395:
   \   0002B6   8A82         MOV     DPL,R2
   \   0002B8   8B83         MOV     DPH,R3
   \   0002BA   A3           INC     DPTR
   \   0002BB   A3           INC     DPTR
   \   0002BC   A3           INC     DPTR
   \   0002BD   A3           INC     DPTR
   \   0002BE   E5..         MOV     A,?V0 + 7
   \   0002C0   12....       LCALL   ??Subroutine250_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_629:
   \   0002C3   A3           INC     DPTR
   \   0002C4   A3           INC     DPTR
   \   0002C5   A3           INC     DPTR
   \   0002C6   A3           INC     DPTR
   \   0002C7   E5..         MOV     A,?V0 + 6
   \   0002C9   F0           MOVX    @DPTR,A
   \   0002CA   EA           MOV     A,R2
   \   0002CB   2405         ADD     A,#0x5
   \   0002CD   FA           MOV     R2,A
   \   0002CE   EB           MOV     A,R3
   \   0002CF   3400         ADDC    A,#0x0
   \   0002D1   FB           MOV     R3,A
   \   0002D2   E5..         MOV     A,?V0 + 7
   \   0002D4   6033         JZ      ??ZDO_ProcessMatchDescReq_17
   \   0002D6   E5..         MOV     A,?V0 + 4
   \   0002D8   240A         ADD     A,#0xa
   \   0002DA   F8           MOV     R0,A
   \   0002DB   E5..         MOV     A,?V0 + 5
   \   0002DD   3400         ADDC    A,#0x0
   \   0002DF   F9           MOV     R1,A
   \   0002E0   8A82         MOV     DPL,R2
   \   0002E2   8B83         MOV     DPH,R3
   \   0002E4   12....       LCALL   ??Subroutine217_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_386:
   \   0002E7                ; Setup parameters for call to function osal_memcpy
   \   0002E7   7409         MOV     A,#0x9
   \   0002E9   12....       LCALL   ?XSTACK_DISP0_8
   \   0002EC   12....       LCALL   ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_136:
   \   0002EF   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0002F2   E5..         MOV     A,?V0 + 7
   \   0002F4   C3           CLR     C
   \   0002F5   33           RLC     A
   \   0002F6   FC           MOV     R4,A
   \   0002F7   E4           CLR     A
   \   0002F8   33           RLC     A
   \   0002F9   FD           MOV     R5,A
   \   0002FA   8A82         MOV     DPL,R2
   \   0002FC   8B83         MOV     DPH,R3
   \   0002FE   12....       LCALL   ??Subroutine228_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_450:
   \   000301   12....       LCALL   ??Subroutine233_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_497:
   \   000304   12....       LCALL   ?DEALLOC_XSTACK8
   \   000307   8008         SJMP    ??ZDO_ProcessMatchDescReq_18
   \                     ??ZDO_ProcessMatchDescReq_17:
   \   000309   8A82         MOV     DPL,R2
   \   00030B   8B83         MOV     DPH,R3
   \   00030D   E4           CLR     A
   \   00030E   F0           MOVX    @DPTR,A
   \   00030F   A3           INC     DPTR
   \   000310   F0           MOVX    @DPTR,A
   \                     ??ZDO_ProcessMatchDescReq_18:
   \   000311   E5..         MOV     A,?V0 + 4
   \   000313   2408         ADD     A,#0x8
   \   000315   F582         MOV     DPL,A
   \   000317   E5..         MOV     A,?V0 + 5
   \   000319   12....       LCALL   ??Subroutine239_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_530:
   \   00031C   E5..         MOV     A,?V0 + 6
   \   00031E   7003         JNZ     $+5
   \   000320   02....       LJMP    ??ZDO_ProcessMatchDescReq_8 & 0xFFFF
   \   000323   E5..         MOV     A,?V0 + 7
   \   000325   C3           CLR     C
   \   000326   33           RLC     A
   \   000327   F8           MOV     R0,A
   \   000328   E4           CLR     A
   \   000329   33           RLC     A
   \   00032A   F9           MOV     R1,A
   \   00032B   E5..         MOV     A,?V0 + 4
   \   00032D   28           ADD     A,R0
   \   00032E   F8           MOV     R0,A
   \   00032F   E5..         MOV     A,?V0 + 5
   \   000331   39           ADDC    A,R1
   \   000332   F9           MOV     R1,A
   \   000333   E8           MOV     A,R0
   \   000334   240A         ADD     A,#0xa
   \   000336   FA           MOV     R2,A
   \   000337   E9           MOV     A,R1
   \   000338   3400         ADDC    A,#0x0
   \   00033A   FB           MOV     R3,A
   \   00033B   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   00033E                ; Setup parameters for call to function osal_memcpy
   \   00033E   7407         MOV     A,#0x7
   \   000340   12....       LCALL   ?XSTACK_DISP0_8
   \   000343   12....       LCALL   ?Subroutine70 & 0xFFFF
    853            }
   \                     ??CrossCallReturnLabel_137:
   \   000346   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000349   E5..         MOV     A,?V0 + 6
   \   00034B   12....       LCALL   ?Subroutine142 & 0xFFFF
   \                     ??CrossCallReturnLabel_494:
   \   00034E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000351   02....       LJMP    ??ZDO_ProcessMatchDescReq_9 & 0xFFFF
    854          
    855            // Send the message only if at least one match found.
    856            if ( epCnt )
   \                     ??ZDO_ProcessMatchDescReq_11:
   \   000354   7402         MOV     A,#0x2
   \   000356   12....       LCALL   ?XSTACK_DISP0_8
   \   000359   E0           MOVX    A,@DPTR
   \   00035A   6049         JZ      ??ZDO_ProcessMatchDescReq_19
    857            {
    858              if ( ZSuccess == ZDP_MatchDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_SUCCESS,
    859                        ZDAppNwkAddr.addr.shortAddr, epCnt, (uint8 *)ZDOBuildBuf, inMsg->SecurityUse ) )
   \   00035C                ; Setup parameters for call to function ZDP_EPRsp
   \   00035C   7403         MOV     A,#0x3
   \   00035E   12....       LCALL   ?XSTACK_DISP0_8
   \   000361   12....       LCALL   ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_352:
   \   000364   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000367   75....       MOV     ?V0 + 0,#ZDOBuildBuf & 0xff
   \   00036A   75....       MOV     ?V0 + 1,#(ZDOBuildBuf >> 8) & 0xff
   \   00036D   78..         MOV     R0,#?V0 + 0
   \   00036F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000372   7405         MOV     A,#0x5
   \   000374   12....       LCALL   ?XSTACK_DISP0_8
   \   000377   12....       LCALL   ??Subroutine225_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_422:
   \   00037A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00037D   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000380   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000383   75..00       MOV     ?V0 + 0,#0x0
   \   000386   78..         MOV     R0,#?V0 + 0
   \   000388   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00038B   740A         MOV     A,#0xa
   \   00038D   12....       LCALL   ?XSTACK_DISP0_8
   \   000390   12....       LCALL   ?Subroutine102 & 0xFFFF
   \                     ??CrossCallReturnLabel_196:
   \   000393   12....       LCALL   ?XSTACK_DISP0_8
   \   000396   12....       LCALL   ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_130:
   \   000399   12....       LCALL   ?DEALLOC_XSTACK8
   \   00039C   E9           MOV     A,R1
   \   00039D   7011         JNZ     ??ZDO_ProcessMatchDescReq_20
    860              {
    861          #if defined( LCD_SUPPORTED )
    862                HalLcdWriteScreen( "Match Desc Req", "Rsp Sent" );
   \   00039F                ; Setup parameters for call to function HalLcdWriteScreen
   \   00039F   7C..         MOV     R4,#`?<Constant "Rsp Sent">` & 0xff
   \   0003A1   7D..         MOV     R5,#(`?<Constant "Rsp Sent">` >> 8) & 0xff
   \   0003A3   8004         SJMP    ??ZDO_ProcessMatchDescReq_21
    863          #endif
    864              }
    865            }
    866            else
    867            {
    868          #if defined( LCD_SUPPORTED )
    869              HalLcdWriteScreen( "Match Desc Req", "Non Matched" );
   \                     ??ZDO_ProcessMatchDescReq_19:
   \   0003A5                ; Setup parameters for call to function HalLcdWriteScreen
   \   0003A5   7C..         MOV     R4,#`?<Constant "Non Matched">` & 0xff
   \   0003A7   7D..         MOV     R5,#(`?<Constant "Non Matched">` >> 8) & 0xff
   \                     ??ZDO_ProcessMatchDescReq_21:
   \   0003A9   7A..         MOV     R2,#`?<Constant "Match Desc Req">` & 0xff
   \   0003AB   7B..         MOV     R3,#(`?<Constant "Match Desc Req">` >> 8) & 0xff
   \   0003AD   12....       LCALL   ??HalLcdWriteScreen?relay
    870          #endif
    871            }
    872            
    873            if ( inClusters != NULL )
   \                     ??ZDO_ProcessMatchDescReq_20:
   \   0003B0   7409         MOV     A,#0x9
   \   0003B2   12....       LCALL   ?XSTACK_DISP0_8
   \   0003B5   12....       LCALL   ??Subroutine232_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_473:
   \   0003B8   6008         JZ      ??CrossCallReturnLabel_368
    874              osal_mem_free( inClusters );
   \   0003BA                ; Setup parameters for call to function osal_mem_free
   \   0003BA   7409         MOV     A,#0x9
   \   0003BC   12....       LCALL   ?XSTACK_DISP0_8
   \   0003BF   12....       LCALL   ??Subroutine213_0 & 0xFFFF
    875            if ( outClusters != NULL )
   \                     ??CrossCallReturnLabel_368:
   \   0003C2   7407         MOV     A,#0x7
   \   0003C4   12....       LCALL   ?XSTACK_DISP0_8
   \   0003C7   12....       LCALL   ??Subroutine232_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_474:
   \   0003CA   6008         JZ      ??CrossCallReturnLabel_369
    876              osal_mem_free( outClusters );
   \   0003CC                ; Setup parameters for call to function osal_mem_free
   \   0003CC   7407         MOV     A,#0x7
   \   0003CE   12....       LCALL   ?XSTACK_DISP0_8
   \   0003D1   12....       LCALL   ??Subroutine213_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_369:
   \   0003D4   740B         MOV     A,#0xb
   \   0003D6   02....       LJMP    ?Subroutine6 & 0xFFFF
    877          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine114:
   \   000000   85..82       MOV     DPL,?V0 + 2
   \   000003   85..83       MOV     DPH,?V0 + 3
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F8           MOV     R0,A
   \   000008   A3           INC     DPTR
   \   000009   8582..       MOV     ?V0 + 2,DPL
   \   00000C   8583..       MOV     ?V0 + 3,DPH
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine109:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   AA..         MOV     R2,?V0 + 2
   \   000007   AB..         MOV     R3,?V0 + 3
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine102:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   2402         ADD     A,#0x2
   \   000003   FC           MOV     R4,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   3400         ADDC    A,#0x0
   \   000008   FD           MOV     R5,A
   \   000009   740A         MOV     A,#0xa
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine68:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   240E         ADD     A,#0xe
   \   000003                REQUIRE ??Subroutine207_0
   \   000003                ; // Fall through to label ??Subroutine207_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine207_0:
   \   000000   12....       LCALL   ?Subroutine164 & 0xFFFF
   \                     ??CrossCallReturnLabel_524:
   \   000003   F5..         MOV     ?V0 + 0,A
   \   000005   78..         MOV     R0,#?V0 + 0
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine66:
   \   000000   12....       LCALL   ?Subroutine160 & 0xFFFF
   \                     ??CrossCallReturnLabel_407:
   \   000003   7A06         MOV     R2,#0x6
   \   000005   7B80         MOV     R3,#-0x80
   \   000007   12....       LCALL   ??ZDP_EPRsp?relay
   \   00000A   7407         MOV     A,#0x7
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine116:
   \   000000   12....       LCALL   ??Subroutine211_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_669:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine210_0:
   \   000000   12....       LCALL   ??Subroutine211_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_672:
   \   000003   12....       LCALL   ?Subroutine169 & 0xFFFF
   \                     ??CrossCallReturnLabel_491:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine74:
   \   000000   12....       LCALL   ?Subroutine159 & 0xFFFF
   \                     ??CrossCallReturnLabel_277:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine215_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F583         MOV     DPH,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine217_0
   \   000002                ; // Fall through to label ??Subroutine217_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine217_0:
   \   000000   E8           MOV     A,R0
   \   000001                REQUIRE ??Subroutine218_0
   \   000001                ; // Fall through to label ??Subroutine218_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine218_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E9           MOV     A,R1
   \   000003   F0           MOVX    @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   80..         SJMP    ??Subroutine222_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine160:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   240F         ADD     A,#0xf
   \   000003   F8           MOV     R0,A
   \   000004                REQUIRE ??Subroutine221_0
   \   000004                ; // Fall through to label ??Subroutine221_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine221_0:
   \   000000   12....       LCALL   ?Subroutine193 & 0xFFFF
   \                     ??CrossCallReturnLabel_527:
   \   000003   F9           MOV     R1,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine88:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine223_0
   \   000001                ; // Fall through to label ??Subroutine223_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine223_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine224_0
   \   000002                ; // Fall through to label ??Subroutine224_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine225_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 0,A
   \   000003   78..         MOV     R0,#?V0 + 0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine228_0:
   \   000000   12....       LCALL   ?Subroutine166 & 0xFFFF
   \                     ??CrossCallReturnLabel_511:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine100:
   \   000000   12....       LCALL   ?Subroutine165 & 0xFFFF
   \                     ??CrossCallReturnLabel_287:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine165:
   \   000000   F8           MOV     R0,A
   \   000001   A3           INC     DPTR
   \   000002   E0           MOVX    A,@DPTR
   \   000003   12....       LCALL   ?Subroutine198 & 0xFFFF
   \                     ??CrossCallReturnLabel_336:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine198:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F9           MOV     R1,A
   \   000003   8882         MOV     DPL,R0
   \   000005   8983         MOV     DPH,R1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine142:
   \   000000   C3           CLR     C
   \   000001   33           RLC     A
   \   000002   FC           MOV     R4,A
   \   000003   E4           CLR     A
   \   000004   33           RLC     A
   \   000005   FD           MOV     R5,A
   \   000006                REQUIRE ??Subroutine233_0
   \   000006                ; // Fall through to label ??Subroutine233_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine233_0:
   \   000000   12....       LCALL   ??osal_memcpy?relay
   \   000003   7403         MOV     A,#0x3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine87:
   \   000000   12....       LCALL   ?Subroutine170 & 0xFFFF
   \                     ??CrossCallReturnLabel_292:
   \   000003   12....       LCALL   ?Subroutine169 & 0xFFFF
   \                     ??CrossCallReturnLabel_490:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine164:
   \   000000   F8           MOV     R0,A
   \   000001                REQUIRE ??Subroutine237_0
   \   000001                ; // Fall through to label ??Subroutine237_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine237_0:
   \   000000   12....       LCALL   ?Subroutine193 & 0xFFFF
   \                     ??CrossCallReturnLabel_528:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine193:
   \   000000   A3           INC     DPTR
   \   000001   E0           MOVX    A,@DPTR
   \   000002   3400         ADDC    A,#0x0
   \   000004   F9           MOV     R1,A
   \   000005   8882         MOV     DPL,R0
   \   000007   8983         MOV     DPH,R1
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine189:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine239_0:
   \   000000   12....       LCALL   ??Subroutine215_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_568:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine240_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   EA           MOV     A,R2
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine151:
   \   000000   12....       LCALL   ?Subroutine189 & 0xFFFF
   \                     ??CrossCallReturnLabel_638:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine250_0:
   \   000000   12....       LCALL   ?Subroutine151 & 0xFFFF
   \                     ??CrossCallReturnLabel_634:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine115:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   12....       LCALL   ?Subroutine171 & 0xFFFF
   \                     ??CrossCallReturnLabel_667:
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine171:
   \   000000   F8           MOV     R0,A
   \   000001                REQUIRE ??Subroutine256_0
   \   000001                ; // Fall through to label ??Subroutine256_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine256_0:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine257_0
   \   000001                ; // Fall through to label ??Subroutine257_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine92:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002                REQUIRE ??Subroutine258_0
   \   000002                ; // Fall through to label ??Subroutine258_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine258_0:
   \   000000   12....       LCALL   ??Subroutine256_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_668:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine91:
   \   000000   12....       LCALL   ?Subroutine170 & 0xFFFF
   \                     ??CrossCallReturnLabel_293:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine170:
   \   000000   12....       LCALL   ?Subroutine194 & 0xFFFF
   \                     ??CrossCallReturnLabel_329:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine194:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8882         MOV     DPL,R0
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine77:
   \   000000   12....       LCALL   ?Subroutine159 & 0xFFFF
   \                     ??CrossCallReturnLabel_278:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine159:
   \   000000   12....       LCALL   ?Subroutine194 & 0xFFFF
   \                     ??CrossCallReturnLabel_328:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine70:
   \   000000   12....       LCALL   ??Subroutine234_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_501:
   \   000003   75..00       MOV     ?V0 + 2,#0x0
   \   000006   78..         MOV     R0,#?V0 + 0
   \   000008   22           RET
    878          
    879          
    880          /*********************************************************************
    881           * @fn      ZDO_ProcessBindUnbindReq()
    882           *
    883           * @brief   Called to process a Bind or Unbind Request message.
    884           *
    885           * @param   inMsg  - incoming message (request)
    886           * @param   pReq - place to put parsed information
    887           *
    888           * @return  none
    889           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    890          void ZDO_ProcessBindUnbindReq( zdoIncomingMsg_t *inMsg, ZDO_BindUnbindReq_t *pReq )
   \                     ZDO_ProcessBindUnbindReq:
    891          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 2,R2
   \   00000C   8B..         MOV     ?V0 + 3,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   FE           MOV     R6,A
   \   000010   ED           MOV     A,R5
   \   000011   FF           MOV     R7,A
    892            zAddrType_t SourceAddr;       // Binding Source addres
    893            byte bindStat;
    894          
    895            SourceAddr.addrMode = Addr64Bit;
   \   000012   740B         MOV     A,#0xb
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   7403         MOV     A,#0x3
   \   000019   F0           MOVX    @DPTR,A
    896            osal_cpyExtAddr( SourceAddr.addr.extAddr, pReq->srcAddress );
   \   00001A                ; Setup parameters for call to function sAddrExtCpy
   \   00001A   12....       LCALL   ?XSTACK_DISP0_8
   \   00001D   AA82         MOV     R2,DPL
   \   00001F   AB83         MOV     R3,DPH
   \   000021   12....       LCALL   ??sAddrExtCpy?relay
   \   000024                ; Setup parameters for call to function sAddrExtCmp
   \   000024                ; Setup parameters for call to function NLME_GetExtAddr
    897          
    898           
    899            // If the local device is not the primary binding cache
    900            // check the src address of the bind request.
    901            // If it is not the local device's extended address
    902            // discard the request.
    903            if ( !osal_ExtAddrEqual( SourceAddr.addr.extAddr, NLME_GetExtAddr()) ||
    904                  (pReq->dstAddress.addrMode != Addr64Bit &&
    905                   pReq->dstAddress.addrMode != AddrGroup) )
   \   000024   12....       LCALL   ??NLME_GetExtAddr?relay
   \   000027   EA           MOV     A,R2
   \   000028   FC           MOV     R4,A
   \   000029   EB           MOV     A,R3
   \   00002A   FD           MOV     R5,A
   \   00002B   7403         MOV     A,#0x3
   \   00002D   12....       LCALL   ?XSTACK_DISP0_8
   \   000030   AA82         MOV     R2,DPL
   \   000032   AB83         MOV     R3,DPH
   \   000034   12....       LCALL   ??sAddrExtCmp?relay
   \   000037   E9           MOV     A,R1
   \   000038   600E         JZ      ??ZDO_ProcessBindUnbindReq_0
   \   00003A   12....       LCALL   ?Subroutine125 & 0xFFFF
   \                     ??CrossCallReturnLabel_234:
   \   00003D   F8           MOV     R0,A
   \   00003E   7403         MOV     A,#0x3
   \   000040   68           XRL     A,R0
   \   000041   6010         JZ      ??ZDO_ProcessBindUnbindReq_1
   \   000043   7401         MOV     A,#0x1
   \   000045   68           XRL     A,R0
   \   000046   600B         JZ      ??ZDO_ProcessBindUnbindReq_1
    906            {
    907              bindStat = ZDP_NOT_SUPPORTED;
   \                     ??ZDO_ProcessBindUnbindReq_0:
   \   000048   85..82       MOV     DPL,?XSP + 0
   \   00004B   85..83       MOV     DPH,?XSP + 1
   \   00004E   7484         MOV     A,#-0x7c
   \   000050   02....       LJMP    ??ZDO_ProcessBindUnbindReq_2 & 0xFFFF
    908            }
   \                     ??ZDO_ProcessBindUnbindReq_1:
   \   000053   8E82         MOV     DPL,R6
   \   000055   8F83         MOV     DPH,R7
   \   000057   A3           INC     DPTR
   \   000058   A3           INC     DPTR
   \   000059   A3           INC     DPTR
   \   00005A   A3           INC     DPTR
   \   00005B   A3           INC     DPTR
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   F9           MOV     R1,A
   \   000061   6021         JZ      ??ZDO_ProcessBindUnbindReq_3
   \   000063   C3           CLR     C
   \   000064   94F1         SUBB    A,#-0xf
   \   000066   501C         JNC     ??ZDO_ProcessBindUnbindReq_3
   \   000068   EE           MOV     A,R6
   \   000069   2414         ADD     A,#0x14
   \   00006B   F5..         MOV     ?V0 + 0,A
   \   00006D   EF           MOV     A,R7
   \   00006E   12....       LCALL   ??Subroutine248_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_614:
   \   000071   7403         MOV     A,#0x3
   \   000073   68           XRL     A,R0
   \   000074   7019         JNZ     ??ZDO_ProcessBindUnbindReq_4
   \   000076   85..82       MOV     DPL,?V0 + 0
   \   000079   85..83       MOV     DPH,?V0 + 1
   \   00007C   E0           MOVX    A,@DPTR
   \   00007D   6005         JZ      ??ZDO_ProcessBindUnbindReq_3
   \   00007F   C3           CLR     C
   \   000080   94F1         SUBB    A,#-0xf
   \   000082   400B         JC      ??ZDO_ProcessBindUnbindReq_4
    909            else
    910            { 
    911              // Check source & destination endpoints
    912              if ( (pReq->srcEndpoint == 0 || pReq->srcEndpoint > MAX_ENDPOINTS)
    913                  || (( pReq->dstAddress.addrMode == Addr64Bit ) &&
    914                      (pReq->dstEndpoint == 0 || pReq->dstEndpoint > MAX_ENDPOINTS)) )
    915              {
    916                bindStat = ZDP_INVALID_EP;
   \                     ??ZDO_ProcessBindUnbindReq_3:
   \   000084   85..82       MOV     DPL,?XSP + 0
   \   000087   85..83       MOV     DPH,?XSP + 1
   \   00008A   7482         MOV     A,#-0x7e
   \   00008C   02....       LJMP    ??ZDO_ProcessBindUnbindReq_2 & 0xFFFF
    917              }
   \                     ??ZDO_ProcessBindUnbindReq_4:
   \   00008F   EE           MOV     A,R6
   \   000090   240B         ADD     A,#0xb
   \   000092   F5..         MOV     ?V0 + 6,A
   \   000094   EF           MOV     A,R7
   \   000095   3400         ADDC    A,#0x0
   \   000097   F5..         MOV     ?V0 + 7,A
   \   000099   E5..         MOV     A,?V0 + 2
   \   00009B   240C         ADD     A,#0xc
   \   00009D   F582         MOV     DPL,A
   \   00009F   E5..         MOV     A,?V0 + 3
   \   0000A1   12....       LCALL   ??Subroutine226_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_429:
   \   0000A4   6421         XRL     A,#0x21
   \   0000A6   7002         JNZ     ??ZDO_ProcessBindUnbindReq_5
   \   0000A8   A3           INC     DPTR
   \   0000A9   E0           MOVX    A,@DPTR
   \                     ??ZDO_ProcessBindUnbindReq_5:
   \   0000AA   7073         JNZ     ??ZDO_ProcessBindUnbindReq_6
    918              else
    919              {
    920                if ( inMsg->clusterID == Bind_req )
    921                {
    922                  // Assume the table is full
    923                  bindStat = ZDP_TABLE_FULL;
   \   0000AC   85..82       MOV     DPL,?XSP + 0
   \   0000AF   85..83       MOV     DPH,?XSP + 1
   \   0000B2   7487         MOV     A,#-0x79
   \   0000B4   F0           MOVX    @DPTR,A
    924                  
    925                  if ( bindNumOfEntries() < gNWK_MAX_BINDING_ENTRIES )
   \   0000B5                ; Setup parameters for call to function bindNumOfEntries
   \   0000B5   12....       LCALL   ??bindNumOfEntries?relay
   \   0000B8   90....       MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   0000BB   E4           CLR     A
   \   0000BC   93           MOVC    A,@A+DPTR
   \   0000BD   F8           MOV     R0,A
   \   0000BE   7401         MOV     A,#0x1
   \   0000C0   93           MOVC    A,@A+DPTR
   \   0000C1   F9           MOV     R1,A
   \   0000C2   C3           CLR     C
   \   0000C3   EA           MOV     A,R2
   \   0000C4   98           SUBB    A,R0
   \   0000C5   EB           MOV     A,R3
   \   0000C6   99           SUBB    A,R1
   \   0000C7   507A         JNC     ??ZDO_ProcessBindUnbindReq_7
    926                  {
    927                    if ( APSME_BindRequest( pReq->srcEndpoint, pReq->clusterID,
    928                                   &(pReq->dstAddress), pReq->dstEndpoint ) == ZSuccess )
   \   0000C9                ; Setup parameters for call to function APSME_BindRequest
   \   0000C9   12....       LCALL   ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_427:
   \   0000CC   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000CF   12....       LCALL   ?Subroutine113 & 0xFFFF
   \                     ??CrossCallReturnLabel_457:
   \   0000D2   8E82         MOV     DPL,R6
   \   0000D4   8F83         MOV     DPH,R7
   \   0000D6   A3           INC     DPTR
   \   0000D7   A3           INC     DPTR
   \   0000D8   A3           INC     DPTR
   \   0000D9   A3           INC     DPTR
   \   0000DA   A3           INC     DPTR
   \   0000DB   A3           INC     DPTR
   \   0000DC   A3           INC     DPTR
   \   0000DD   A3           INC     DPTR
   \   0000DE   E0           MOVX    A,@DPTR
   \   0000DF   F9           MOV     R1,A
   \   0000E0   12....       LCALL   ??APSME_BindRequest?relay
   \   0000E3   7401         MOV     A,#0x1
   \   0000E5   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000E8   E9           MOV     A,R1
   \   0000E9   7058         JNZ     ??ZDO_ProcessBindUnbindReq_7
    929                    {
    930                      uint16 nwkAddr;
    931                      
    932                      // valid entry
    933                      bindStat = ZDP_SUCCESS;
   \   0000EB   85..82       MOV     DPL,?XSP + 0
   \   0000EE   85..83       MOV     DPH,?XSP + 1
   \   0000F1   E4           CLR     A
   \   0000F2   F0           MOVX    @DPTR,A
    934                      
    935                      // Notify to save info into NV
    936                      ZDApp_NVUpdate();
   \   0000F3                ; Setup parameters for call to function ZDApp_NVUpdate
   \   0000F3   12....       LCALL   ??ZDApp_NVUpdate?relay
    937                      
    938                      // Check for the destination address
    939                      if ( pReq->dstAddress.addrMode == Addr64Bit )
   \   0000F6   12....       LCALL   ?Subroutine125 & 0xFFFF
   \                     ??CrossCallReturnLabel_235:
   \   0000F9   6403         XRL     A,#0x3
   \   0000FB   7046         JNZ     ??ZDO_ProcessBindUnbindReq_7
    940                      {
    941                        if ( APSME_LookupNwkAddr( pReq->dstAddress.addr.extAddr, &nwkAddr ) == FALSE )
   \   0000FD                ; Setup parameters for call to function APSME_LookupNwkAddr
   \   0000FD   7401         MOV     A,#0x1
   \   0000FF   12....       LCALL   ?XSTACK_DISP0_8
   \   000102   AC82         MOV     R4,DPL
   \   000104   AD83         MOV     R5,DPH
   \   000106   AA..         MOV     R2,?V0 + 6
   \   000108   AB..         MOV     R3,?V0 + 7
   \   00010A   12....       LCALL   ??APSME_LookupNwkAddr?relay
   \   00010D   E9           MOV     A,R1
   \   00010E   7033         JNZ     ??ZDO_ProcessBindUnbindReq_7
    942                        {
    943                          ZDP_NwkAddrReq( pReq->dstAddress.addr.extAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
   \   000110                ; Setup parameters for call to function ZDP_NwkAddrReq
   \   000110   7D00         MOV     R5,#0x0
   \   000112   7C00         MOV     R4,#0x0
   \   000114   7900         MOV     R1,#0x0
   \   000116   AA..         MOV     R2,?V0 + 6
   \   000118   AB..         MOV     R3,?V0 + 7
   \   00011A   12....       LCALL   ??ZDP_NwkAddrReq?relay
   \   00011D   8024         SJMP    ??ZDO_ProcessBindUnbindReq_7
    944                        }
    945                      }
    946                    }
    947                  }
    948                }
    949                else // Unbind_req
    950                {
    951                  if ( APSME_UnBindRequest( pReq->srcEndpoint, pReq->clusterID,
    952                                 &(pReq->dstAddress), pReq->dstEndpoint ) == ZSuccess )
   \                     ??ZDO_ProcessBindUnbindReq_6:
   \   00011F                ; Setup parameters for call to function APSME_UnBindRequest
   \   00011F   12....       LCALL   ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_428:
   \   000122   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000125   12....       LCALL   ?Subroutine113 & 0xFFFF
   \                     ??CrossCallReturnLabel_458:
   \   000128   12....       LCALL   ??APSME_UnBindRequest?relay
   \   00012B   7401         MOV     A,#0x1
   \   00012D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000130   E9           MOV     A,R1
   \   000131   85..82       MOV     DPL,?XSP + 0
   \   000134   85..83       MOV     DPH,?XSP + 1
   \   000137   7007         JNZ     ??ZDO_ProcessBindUnbindReq_8
    953                  {
    954                    bindStat = ZDP_SUCCESS;
   \   000139   E4           CLR     A
   \   00013A   F0           MOVX    @DPTR,A
    955              
    956                    // Notify to save info into NV
    957                    ZDApp_NVUpdate();
   \   00013B                ; Setup parameters for call to function ZDApp_NVUpdate
   \   00013B   12....       LCALL   ??ZDApp_NVUpdate?relay
   \   00013E   8003         SJMP    ??ZDO_ProcessBindUnbindReq_7
    958                  }
    959                  else
    960                    bindStat = ZDP_NO_ENTRY;
   \                     ??ZDO_ProcessBindUnbindReq_8:
   \   000140   7488         MOV     A,#-0x78
   \                     ??ZDO_ProcessBindUnbindReq_2:
   \   000142   F0           MOVX    @DPTR,A
    961                }
    962              }
    963            }
    964            
    965            // Send back a response message
    966            ZDP_SendData( &(inMsg->TransSeq), &(inMsg->srcAddr), 
    967                         (inMsg->clusterID | ZDO_RESPONSE_BIT), 1, &bindStat, 
    968                         inMsg->SecurityUse );
   \                     ??ZDO_ProcessBindUnbindReq_7:
   \   000143                ; Setup parameters for call to function ZDP_SendData
   \   000143   12....       LCALL   ?Subroutine141 & 0xFFFF
   \                     ??CrossCallReturnLabel_584:
   \   000146   E5..         MOV     A,?V0 + 3
   \   000148   12....       LCALL   ??Subroutine239_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_531:
   \   00014B   12....       LCALL   ??Subroutine225_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_423:
   \   00014E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000151   7401         MOV     A,#0x1
   \   000153   12....       LCALL   ?XSTACK_DISP0_8
   \   000156   8582..       MOV     ?V0 + 0,DPL
   \   000159   8583..       MOV     ?V0 + 1,DPH
   \   00015C   78..         MOV     R0,#?V0 + 0
   \   00015E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000161   E5..         MOV     A,?V0 + 2
   \   000163   240C         ADD     A,#0xc
   \   000165   F582         MOV     DPL,A
   \   000167   E5..         MOV     A,?V0 + 3
   \   000169   12....       LCALL   ?Subroutine111 & 0xFFFF
   \                     ??CrossCallReturnLabel_355:
   \   00016C   4480         ORL     A,#0x80
   \   00016E   F5..         MOV     ?V0 + 1,A
   \   000170   78..         MOV     R0,#?V0 + 0
   \   000172   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000175   7901         MOV     R1,#0x1
   \   000177   E5..         MOV     A,?V0 + 2
   \   000179   2402         ADD     A,#0x2
   \   00017B   FC           MOV     R4,A
   \   00017C   E5..         MOV     A,?V0 + 3
   \   00017E   3400         ADDC    A,#0x0
   \   000180   FD           MOV     R5,A
   \   000181   E5..         MOV     A,?V0 + 2
   \   000183   240F         ADD     A,#0xf
   \   000185   FA           MOV     R2,A
   \   000186   E5..         MOV     A,?V0 + 3
   \   000188   12....       LCALL   ??Subroutine227_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_440:
   \   00018B   12....       LCALL   ?DEALLOC_XSTACK8
    969          }
   \   00018E   740C         MOV     A,#0xc
   \   000190   02....       LJMP    ?Subroutine6 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine125:
   \   000000   12....       LCALL   ?Subroutine179 & 0xFFFF
   \                     ??CrossCallReturnLabel_312:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine111:
   \   000000   12....       LCALL   ??Subroutine215_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_562:
   \   000003                REQUIRE ??Subroutine208_0
   \   000003                ; // Fall through to label ??Subroutine208_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine85:
   \   000000   85..82       MOV     DPL,?V0 + 0
   \   000003   85..83       MOV     DPH,?V0 + 1
   \   000006                REQUIRE ??Subroutine225_0
   \   000006                ; // Fall through to label ??Subroutine225_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine179:
   \   000000   12....       LCALL   ?Subroutine201 & 0xFFFF
   \                     ??CrossCallReturnLabel_349:
   \   000003   EF           MOV     A,R7
   \   000004   3400         ADDC    A,#0x0
   \   000006   F583         MOV     DPH,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine227_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   FB           MOV     R3,A
   \   000003   12....       LCALL   ?Subroutine186 & 0xFFFF
   \                     ??CrossCallReturnLabel_444:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine113:
   \   000000   AC..         MOV     R4,?V0 + 6
   \   000002   AD..         MOV     R5,?V0 + 7
   \   000004   8E82         MOV     DPL,R6
   \   000006   8F83         MOV     DPH,R7
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011                REQUIRE ??Subroutine228_0
   \   000011                ; // Fall through to label ??Subroutine228_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine186:
   \   000000   12....       LCALL   ??ZDP_SendData?relay
   \   000003   7405         MOV     A,#0x5
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine141:
   \   000000   E5..         MOV     A,?V0 + 2
   \   000002                REQUIRE ??Subroutine242_0
   \   000002                ; // Fall through to label ??Subroutine242_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine242_0:
   \   000000   240E         ADD     A,#0xe
   \   000002   F582         MOV     DPL,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine248_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F5..         MOV     ?V0 + 1,A
   \   000004   22           RET
    970          
    971          /*********************************************************************
    972           * @fn      ZDO_UpdateAddrManager
    973           *
    974           * @brief   Update the Address Manager.
    975           *
    976           * @param   nwkAddr - network address
    977           * @param   extAddr - extended address
    978           *
    979           * @return  none
    980           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    981          void ZDO_UpdateAddrManager( uint16 nwkAddr, uint8 *extAddr )
   \                     ZDO_UpdateAddrManager:
    982          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 13
   \   000004   74F3         MOV     A,#-0xd
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
    983            AddrMgrEntry_t addrEntry;
    984          
    985            // Update the address manager
    986            addrEntry.user = ADDRMGR_USER_DEFAULT;
   \   000009   85..82       MOV     DPL,?XSP + 0
   \   00000C   85..83       MOV     DPH,?XSP + 1
   \   00000F   E4           CLR     A
   \   000010   F0           MOVX    @DPTR,A
    987            addrEntry.nwkAddr = nwkAddr;
   \   000011   04           INC     A
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   12....       LCALL   ?Subroutine38 & 0xFFFF
    988            AddrMgrExtAddrSet( addrEntry.extAddr, extAddr );
   \                     ??CrossCallReturnLabel_61:
   \   000018                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   000018   7403         MOV     A,#0x3
   \   00001A   12....       LCALL   ?XSTACK_DISP0_8
   \   00001D   AA82         MOV     R2,DPL
   \   00001F   AB83         MOV     R3,DPH
   \   000021   12....       LCALL   ??AddrMgrExtAddrSet?relay
    989            AddrMgrEntryUpdate( &addrEntry );
   \   000024                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   000024   85..82       MOV     DPL,?XSP + 0
   \   000027   85..83       MOV     DPH,?XSP + 1
   \   00002A   AA82         MOV     R2,DPL
   \   00002C   AB83         MOV     R3,DPH
   \   00002E   12....       LCALL   ??AddrMgrEntryUpdate?relay
    990          }
   \   000031   740D         MOV     A,#0xd
   \   000033   12....       LCALL   ?DEALLOC_XSTACK8
   \   000036   02....       LJMP    ?Subroutine0 & 0xFFFF
    991          
    992          /*********************************************************************
    993           * @fn      ZDO_ProcessServerDiscReq
    994           *
    995           * @brief   Process the Server_Discovery_req message.
    996           *
    997           * @param   inMsg  - incoming message (request)
    998           *
    999           * @return  none
   1000           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1001          void ZDO_ProcessServerDiscReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessServerDiscReq:
   1002          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine126 & 0xFFFF
   1003            uint16 serverMask = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   1004            uint16 matchMask = serverMask & ZDO_Config_Node_Descriptor.ServerMask;
   \                     ??CrossCallReturnLabel_236:
   \   000008   12....       LCALL   ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_411:
   \   00000B   8882         MOV     DPL,R0
   \   00000D   8983         MOV     DPH,R1
   \   00000F   12....       LCALL   ??Subroutine240_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_572:
   \   000012   F8           MOV     R0,A
   \   000013   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 8
   \   000016   E0           MOVX    A,@DPTR
   \   000017   58           ANL     A,R0
   \   000018   F5..         MOV     ?V0 + 0,A
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   59           ANL     A,R1
   \   00001D   F5..         MOV     ?V0 + 1,A
   1005          
   1006            if ( matchMask )
   \   00001F   E5..         MOV     A,?V0 + 0
   \   000021   45..         ORL     A,?V0 + 1
   \   000023   6027         JZ      ??ZDO_ProcessServerDiscReq_0
   1007            {
   1008              ZDP_ServerDiscRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZSUCCESS, 
   1009                          ZDAppNwkAddr.addr.shortAddr, matchMask, inMsg->SecurityUse );
   \   000025                ; Setup parameters for call to function ZDP_ServerDiscRsp
   \   000025   78..         MOV     R0,#?V0 + 0
   \   000027   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002A   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00002D   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000030   EE           MOV     A,R6
   \   000031   12....       LCALL   ??Subroutine242_0 & 0xFFFF
   1010            }
   \                     ??CrossCallReturnLabel_580:
   \   000034   EF           MOV     A,R7
   \   000035   12....       LCALL   ??Subroutine226_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_430:
   \   000038   FD           MOV     R5,A
   \   000039   7C00         MOV     R4,#0x0
   \   00003B   12....       LCALL   ?Subroutine183 & 0xFFFF
   \                     ??CrossCallReturnLabel_314:
   \   00003E   F582         MOV     DPL,A
   \   000040   EF           MOV     A,R7
   \   000041   12....       LCALL   ?Subroutine134 & 0xFFFF
   \                     ??CrossCallReturnLabel_242:
   \   000044   12....       LCALL   ??ZDP_ServerDiscRsp?relay
   \   000047   7404         MOV     A,#0x4
   \   000049   12....       LCALL   ?DEALLOC_XSTACK8
   1011          }
   \                     ??ZDO_ProcessServerDiscReq_0:
   \   00004C   02....       LJMP    ??Subroutine205_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine126:
   \   000000   EA           MOV     A,R2
   \   000001   FE           MOV     R6,A
   \   000002   EB           MOV     A,R3
   \   000003   FF           MOV     R7,A
   \   000004                ; Setup parameters for call to function NLME_PermitJoiningRequest
   \   000004   12....       LCALL   ?Subroutine179 & 0xFFFF
   \                     ??CrossCallReturnLabel_313:
   \   000007   22           RET
   1012          
   1013          /*********************************************************************
   1014           * Call Back Functions from APS  - API
   1015           */
   1016          
   1017          /*********************************************************************
   1018           * @fn          ZDO_EndDeviceTimeoutCB
   1019           *
   1020           * @brief       This function handles the binding timer for the End
   1021           *              Device Bind command.
   1022           *
   1023           * @param       none
   1024           *
   1025           * @return      none
   1026           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1027          void ZDO_EndDeviceTimeoutCB( void )
   \                     ZDO_EndDeviceTimeoutCB:
   1028          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1029          #if defined ( REFLECTOR )
   1030            byte stat;
   1031            if ( ZDO_EDBind )
   \   00000A   90....       MOV     DPTR,#ZDO_EDBind
   \   00000D   12....       LCALL   ??Subroutine232_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_475:
   \   000010   7003         JNZ     $+5
   \   000012   02....       LJMP    ??ZDO_EndDeviceTimeoutCB_0 & 0xFFFF
   1032            {
   1033              stat = ZDO_EDBind->status;
   1034          
   1035              // Send the response message to the first sent
   1036              ZDO_SendEDBindRsp( ZDO_EDBind->SrcTransSeq, &(ZDO_EDBind->SrcAddr),
   1037                                  stat, ZDO_EDBind->SecurityUse );
   \   000015   90....       MOV     DPTR,#ZDO_EDBind
   \   000018   E0           MOVX    A,@DPTR
   \   000019   2415         ADD     A,#0x15
   \   00001B   12....       LCALL   ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_402:
   \   00001E   FA           MOV     R2,A
   \   00001F   90....       MOV     DPTR,#ZDO_EDBind
   \   000022   E0           MOVX    A,@DPTR
   \   000023   2416         ADD     A,#0x16
   \   000025   08           INC     R0
   \   000026   12....       LCALL   ??Subroutine220_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_400:
   \   000029   85..82       MOV     DPL,?XSP + 0
   \   00002C   85..83       MOV     DPH,?XSP + 1
   \   00002F   F0           MOVX    @DPTR,A
   \   000030   90....       MOV     DPTR,#ZDO_EDBind
   \   000033   E0           MOVX    A,@DPTR
   \   000034   2401         ADD     A,#0x1
   \   000036   FC           MOV     R4,A
   \   000037   A3           INC     DPTR
   \   000038   E0           MOVX    A,@DPTR
   \   000039   3400         ADDC    A,#0x0
   \   00003B   FD           MOV     R5,A
   \   00003C   90....       MOV     DPTR,#ZDO_EDBind
   \   00003F   12....       LCALL   ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_155:
   \   000042   C0E0         PUSH    A
   \   000044   7401         MOV     A,#0x1
   \   000046   12....       LCALL   ?XSTACK_DISP0_8
   \   000049   D0E0         POP     A
   \   00004B   F0           MOVX    @DPTR,A
   \   00004C                ; Setup parameters for call to function ZDP_SendData
   \   00004C   EA           MOV     A,R2
   \   00004D   F5..         MOV     ?V0 + 0,A
   \   00004F   78..         MOV     R0,#?V0 + 0
   \   000051   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000054   7401         MOV     A,#0x1
   \   000056   12....       LCALL   ?XSTACK_DISP0_8
   \   000059   8582..       MOV     ?V0 + 0,DPL
   \   00005C   8583..       MOV     ?V0 + 1,DPH
   \   00005F   78..         MOV     R0,#?V0 + 0
   \   000061   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000064   75..20       MOV     ?V0 + 0,#0x20
   \   000067   75..80       MOV     ?V0 + 1,#-0x80
   \   00006A   78..         MOV     R0,#?V0 + 0
   \   00006C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006F   7901         MOV     R1,#0x1
   \   000071   7406         MOV     A,#0x6
   \   000073   12....       LCALL   ?XSTACK_DISP0_8
   \   000076   AA82         MOV     R2,DPL
   \   000078   AB83         MOV     R3,DPH
   \   00007A   12....       LCALL   ?Subroutine186 & 0xFFFF
   \                     ??CrossCallReturnLabel_443:
   \   00007D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000080                ; Setup parameters for call to function HalLcdWriteString
   \   000080   7901         MOV     R1,#0x1
   \   000082   7A..         MOV     R2,#`?<Constant "End Device Bind">` & 0xff
   \   000084   7B..         MOV     R3,#(`?<Constant "End Device Bind">` >> 8) & 0xff
   \   000086   12....       LCALL   ??HalLcdWriteString?relay
   \   000089   85..82       MOV     DPL,?XSP + 0
   \   00008C   85..83       MOV     DPH,?XSP + 1
   \   00008F   E0           MOVX    A,@DPTR
   \   000090   7902         MOV     R1,#0x2
   \   000092   7006         JNZ     ??ZDO_EndDeviceTimeoutCB_1
   \   000094                ; Setup parameters for call to function HalLcdWriteString
   \   000094   7A..         MOV     R2,#`?<Constant "Success Sent">` & 0xff
   \   000096   7B..         MOV     R3,#(`?<Constant "Success Sent">` >> 8) & 0xff
   \   000098   8004         SJMP    ??ZDO_EndDeviceTimeoutCB_2
   \                     ??ZDO_EndDeviceTimeoutCB_1:
   \   00009A                ; Setup parameters for call to function HalLcdWriteString
   \   00009A   7A..         MOV     R2,#`?<Constant "Timeout">` & 0xff
   \   00009C   7B..         MOV     R3,#(`?<Constant "Timeout">` >> 8) & 0xff
   \                     ??ZDO_EndDeviceTimeoutCB_2:
   \   00009E   12....       LCALL   ??HalLcdWriteString?relay
   1038          
   1039              ZDO_RemoveEndDeviceBind();
   \   0000A1   90....       MOV     DPTR,#ZDO_EDBind
   \   0000A4   12....       LCALL   ??Subroutine232_0 & 0xFFFF
   1040            }
   \                     ??CrossCallReturnLabel_476:
   \   0000A7   6029         JZ      ??ZDO_EndDeviceTimeoutCB_0
   \   0000A9   90....       MOV     DPTR,#ZDO_EDBind
   \   0000AC   E0           MOVX    A,@DPTR
   \   0000AD   2410         ADD     A,#0x10
   \   0000AF   12....       LCALL   ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   0000B2   6003         JZ      ??ZDO_EndDeviceTimeoutCB_3
   \   0000B4                ; Setup parameters for call to function osal_mem_free
   \   0000B4   12....       LCALL   ??osal_mem_free?relay
   \                     ??ZDO_EndDeviceTimeoutCB_3:
   \   0000B7   90....       MOV     DPTR,#ZDO_EDBind
   \   0000BA   E0           MOVX    A,@DPTR
   \   0000BB   2413         ADD     A,#0x13
   \   0000BD   12....       LCALL   ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_109:
   \   0000C0   6003         JZ      ??ZDO_EndDeviceTimeoutCB_4
   \   0000C2                ; Setup parameters for call to function osal_mem_free
   \   0000C2   12....       LCALL   ??osal_mem_free?relay
   \                     ??ZDO_EndDeviceTimeoutCB_4:
   \   0000C5                ; Setup parameters for call to function osal_mem_free
   \   0000C5   90....       MOV     DPTR,#ZDO_EDBind
   \   0000C8   12....       LCALL   ??Subroutine213_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_372:
   \   0000CB   90....       MOV     DPTR,#ZDO_EDBind
   \   0000CE   E4           CLR     A
   \   0000CF   F0           MOVX    @DPTR,A
   \   0000D0   A3           INC     DPTR
   \   0000D1   F0           MOVX    @DPTR,A
   1041          #endif  // REFLECTOR
   1042          }
   \                     ??ZDO_EndDeviceTimeoutCB_0:
   \   0000D2   02....       LJMP    ?Subroutine4 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine99:
   \   000000   F8           MOV     R0,A
   \   000001                REQUIRE ??Subroutine220_0
   \   000001                ; // Fall through to label ??Subroutine220_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine220_0:
   \   000000   12....       LCALL   ??Subroutine237_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_519:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine57:
   \   000000   12....       LCALL   ?Subroutine163 & 0xFFFF
   \                     ??CrossCallReturnLabel_282:
   \   000003   EA           MOV     A,R2
   \   000004   4B           ORL     A,R3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine163:
   \   000000   F8           MOV     R0,A
   \   000001   12....       LCALL   ?Subroutine193 & 0xFFFF
   \                     ??CrossCallReturnLabel_526:
   \   000004   FA           MOV     R2,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   FB           MOV     R3,A
   \   000008   22           RET
   1043          
   1044          /*********************************************************************
   1045           * Optional Management Messages
   1046           */
   1047          
   1048          /*********************************************************************
   1049           * @fn          ZDO_ProcessMgmtLqiReq
   1050           *
   1051           * @brief       This function handles parsing the incoming Management
   1052           *              LQI request and generate the response.
   1053           *
   1054           *   Note:      This function will limit the number of items returned
   1055           *              to ZDO_MAX_LQI_ITEMS items.
   1056           *
   1057           * @param       inMsg - incoming message (request)
   1058           *
   1059           * @return      none
   1060           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1061          void ZDO_ProcessMgmtLqiReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtLqiReq:
   1062          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 43
   \   000005   74D5         MOV     A,#-0x2b
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7405         MOV     A,#0x5
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   12....       LCALL   ?Subroutine38 & 0xFFFF
   1063            byte x;
   1064            byte index;
   1065            byte numItems;
   1066            byte maxItems;
   1067            ZDP_MgmtLqiItem_t* table = NULL;
   \                     ??CrossCallReturnLabel_62:
   \   000012   7401         MOV     A,#0x1
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   E4           CLR     A
   \   000018   F0           MOVX    @DPTR,A
   \   000019   A3           INC     DPTR
   \   00001A   F0           MOVX    @DPTR,A
   1068            ZDP_MgmtLqiItem_t* item;
   1069            neighborEntry_t    entry;
   1070            byte aItems;
   1071            associated_devices_t *aDevice;
   1072            AddrMgrEntry_t  nwkEntry;
   1073            uint8 StartIndex = inMsg->asdu[0];
   \   00001B   7405         MOV     A,#0x5
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   12....       LCALL   ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_116:
   \   000023   F5..         MOV     ?V0 + 5,A
   1074          
   1075            // Get the number of neighbor items
   1076            NLME_GetRequest( nwkNumNeighborTableEntries, 0, &maxItems );
   \   000025                ; Setup parameters for call to function NLME_GetRequest
   \   000025   85..82       MOV     DPL,?XSP + 0
   \   000028   85..83       MOV     DPH,?XSP + 1
   \   00002B   AC82         MOV     R4,DPL
   \   00002D   AD83         MOV     R5,DPH
   \   00002F   7A00         MOV     R2,#0x0
   \   000031   7B00         MOV     R3,#0x0
   \   000033   799C         MOV     R1,#-0x64
   \   000035   12....       LCALL   ??NLME_GetRequest?relay
   1077          
   1078            // Get the number of associated items
   1079            aItems = (uint8)AssocCount( PARENT, CHILD_FFD_RX_IDLE );
   \   000038                ; Setup parameters for call to function AssocCount
   \   000038   7A04         MOV     R2,#0x4
   \   00003A   7900         MOV     R1,#0x0
   \   00003C   12....       LCALL   ??AssocCount?relay
   \   00003F   EA           MOV     A,R2
   \   000040   F5..         MOV     ?V0 + 2,A
   1080          
   1081            // Total number of items
   1082            maxItems += aItems;
   \   000042   85..82       MOV     DPL,?XSP + 0
   \   000045   85..83       MOV     DPH,?XSP + 1
   \   000048   E0           MOVX    A,@DPTR
   \   000049   25..         ADD     A,?V0 + 2
   \   00004B   F0           MOVX    @DPTR,A
   1083          
   1084            // Start with the supplied index
   1085            if ( maxItems > StartIndex )
   \   00004C   F8           MOV     R0,A
   \   00004D   E5..         MOV     A,?V0 + 5
   \   00004F   C3           CLR     C
   \   000050   98           SUBB    A,R0
   \   000051   4003         JC      $+5
   \   000053   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_0 & 0xFFFF
   1086            {
   1087              numItems = maxItems - StartIndex;
   \   000056   E0           MOVX    A,@DPTR
   \   000057   C3           CLR     C
   \   000058   95..         SUBB    A,?V0 + 5
   \   00005A   F5..         MOV     ?V0 + 1,A
   1088          
   1089              // limit the size of the list
   1090              if ( numItems > ZDO_MAX_LQI_ITEMS )
   \   00005C   C3           CLR     C
   \   00005D   9404         SUBB    A,#0x4
   \   00005F   4003         JC      ??ZDO_ProcessMgmtLqiReq_1
   1091                numItems = ZDO_MAX_LQI_ITEMS;
   \   000061   75..03       MOV     ?V0 + 1,#0x3
   1092            
   1093              // Allocate the memory to build the table
   1094              table = (ZDP_MgmtLqiItem_t*)osal_mem_alloc( (short)
   1095                        ( numItems * sizeof( ZDP_MgmtLqiItem_t ) ) );
   \                     ??ZDO_ProcessMgmtLqiReq_1:
   \   000064                ; Setup parameters for call to function osal_mem_alloc
   \   000064   E5..         MOV     A,?V0 + 1
   \   000066   75F01A       MOV     B,#0x1a
   \   000069   A4           MUL     AB
   \   00006A   FA           MOV     R2,A
   \   00006B   ABF0         MOV     R3,B
   \   00006D   12....       LCALL   ??osal_mem_alloc?relay
   \   000070   7401         MOV     A,#0x1
   \   000072   12....       LCALL   ?XSTACK_DISP0_8
   \   000075   12....       LCALL   ?Subroutine38 & 0xFFFF
   1096            
   1097              if ( table != NULL )
   \                     ??CrossCallReturnLabel_63:
   \   000078   7401         MOV     A,#0x1
   \   00007A   12....       LCALL   ?XSTACK_DISP0_8
   \   00007D   12....       LCALL   ??Subroutine232_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_477:
   \   000080   7003         JNZ     $+5
   \   000082   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_2 & 0xFFFF
   1098              {
   1099                x = 0;
   \   000085   75..00       MOV     ?V0 + 4,#0x0
   1100                item = table;
   \   000088   7401         MOV     A,#0x1
   \   00008A   12....       LCALL   ?XSTACK_DISP0_8
   \   00008D   12....       LCALL   ??Subroutine209_0 & 0xFFFF
   1101                index = StartIndex;
   \                     ??CrossCallReturnLabel_360:
   \   000090   85....       MOV     ?V0 + 0,?V0 + 5
   \   000093   02....       LJMP    ??CrossCallReturnLabel_82 & 0xFFFF
   1102            
   1103                // Loop through associated items and build list
   1104                for ( ; x < numItems; x++ )
   1105                {
   1106                  if ( index < aItems )
   1107                  {
   1108                    // get next associated device
   1109                    aDevice = AssocFindDevice( index++ );
   1110            
   1111                    // set basic fields
   1112                    item->panID   = _NIB.nwkPanId;
   1113                    osal_cpyExtAddr( item->extPanID, _NIB.extendedPANID );
   1114                    item->nwkAddr = aDevice->shortAddr;
   1115                    item->permit  = ZDP_MGMT_BOOL_UNKNOWN;
   1116                    item->depth   = 0xFF;
   1117                    item->lqi     = aDevice->linkInfo.rxLqi;
   1118                    
   1119                    // set extented address
   1120                    nwkEntry.user    = ADDRMGR_USER_DEFAULT;
   1121                    nwkEntry.nwkAddr = aDevice->shortAddr;    
   1122                    
   1123                    if ( AddrMgrEntryLookupNwk( &nwkEntry ) == TRUE )
   1124                    {
   1125                      osal_cpyExtAddr( item->extAddr, nwkEntry.extAddr );
   1126                    }
   1127                    else
   1128                    {
   1129                      osal_memset( item->extAddr, 0xFF, Z_EXTADDR_LEN );
   \                     ??ZDO_ProcessMgmtLqiReq_3:
   \   000096                ; Setup parameters for call to function osal_memset
   \   000096   7C08         MOV     R4,#0x8
   \   000098   7D00         MOV     R5,#0x0
   \   00009A   79FF         MOV     R1,#-0x1
   \   00009C   AA..         MOV     R2,?V0 + 6
   \   00009E   AB..         MOV     R3,?V0 + 7
   \   0000A0   12....       LCALL   ??osal_memset?relay
   1130                    }
   1131            
   1132                    // use association info to set other fields
   1133                    if ( aDevice->nodeRelation == PARENT )
   \                     ??ZDO_ProcessMgmtLqiReq_4:
   \   0000A3   7403         MOV     A,#0x3
   \   0000A5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A8   E0           MOVX    A,@DPTR
   \   0000A9   2404         ADD     A,#0x4
   \   0000AB   F8           MOV     R0,A
   \   0000AC   A3           INC     DPTR
   \   0000AD   E0           MOVX    A,@DPTR
   \   0000AE   3400         ADDC    A,#0x0
   \   0000B0   F9           MOV     R1,A
   \   0000B1   EE           MOV     A,R6
   \   0000B2   2415         ADD     A,#0x15
   \   0000B4   FA           MOV     R2,A
   \   0000B5   EF           MOV     A,R7
   \   0000B6   3400         ADDC    A,#0x0
   \   0000B8   FB           MOV     R3,A
   \   0000B9   EE           MOV     A,R6
   \   0000BA   2414         ADD     A,#0x14
   \   0000BC   FC           MOV     R4,A
   \   0000BD   EF           MOV     A,R7
   \   0000BE   3400         ADDC    A,#0x0
   \   0000C0   FD           MOV     R5,A
   \   0000C1   8882         MOV     DPL,R0
   \   0000C3   8983         MOV     DPH,R1
   \   0000C5   E0           MOVX    A,@DPTR
   \   0000C6   703F         JNZ     ??ZDO_ProcessMgmtLqiReq_5
   1134                    {
   1135                      if (  aDevice->shortAddr == 0 )
   \   0000C8   7403         MOV     A,#0x3
   \   0000CA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CD   E0           MOVX    A,@DPTR
   \   0000CE   F8           MOV     R0,A
   \   0000CF   12....       LCALL   ?Subroutine116 & 0xFFFF
   \                     ??CrossCallReturnLabel_222:
   \   0000D2   12....       LCALL   ??Subroutine232_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_478:
   \   0000D5   8C82         MOV     DPL,R4
   \   0000D7   8D83         MOV     DPH,R5
   \   0000D9   700E         JNZ     ??ZDO_ProcessMgmtLqiReq_6
   1136                      {
   1137                        item->devType = ZDP_MGMT_DT_COORD;
   \   0000DB   E4           CLR     A
   \   0000DC   F0           MOVX    @DPTR,A
   1138                        item->depth = 0;
   \   0000DD   EE           MOV     A,R6
   \   0000DE   2418         ADD     A,#0x18
   \   0000E0   F582         MOV     DPL,A
   \   0000E2   EF           MOV     A,R7
   \   0000E3   12....       LCALL   ??Subroutine239_0 & 0xFFFF
   1139                      }
   \                     ??CrossCallReturnLabel_532:
   \   0000E6   E4           CLR     A
   \   0000E7   8015         SJMP    ??ZDO_ProcessMgmtLqiReq_7
   1140                      else
   1141                      {
   1142                        item->devType = ZDP_MGMT_DT_ROUTER;
   \                     ??ZDO_ProcessMgmtLqiReq_6:
   \   0000E9   7401         MOV     A,#0x1
   \   0000EB   F0           MOVX    @DPTR,A
   1143                        item->depth = _NIB.nodeDepth - 1;
   \   0000EC   90....       MOV     DPTR,#_NIB + 52
   \   0000EF   E0           MOVX    A,@DPTR
   \   0000F0   14           DEC     A
   \   0000F1   C0E0         PUSH    A
   \   0000F3   EE           MOV     A,R6
   \   0000F4   2418         ADD     A,#0x18
   \   0000F6   F582         MOV     DPL,A
   \   0000F8   EF           MOV     A,R7
   \   0000F9   12....       LCALL   ??Subroutine239_0 & 0xFFFF
   1144                      }
   1145            
   1146                      item->rxOnIdle = ZDP_MGMT_BOOL_UNKNOWN;
   1147                      item->relation = ZDP_MGMT_REL_PARENT;
   1148                    }
   \                     ??CrossCallReturnLabel_533:
   \   0000FC   D0E0         POP     A
   \                     ??ZDO_ProcessMgmtLqiReq_7:
   \   0000FE   12....       LCALL   ?Subroutine189 & 0xFFFF
   \                     ??CrossCallReturnLabel_635:
   \   000101   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_373:
   \   000104   E4           CLR     A
   \   000105   8037         SJMP    ??ZDO_ProcessMgmtLqiReq_8
   1149                    else
   1150                    {
   1151                      // If not parent, then it's a child
   1152                      item->depth = _NIB.nodeDepth + 1;
   \                     ??ZDO_ProcessMgmtLqiReq_5:
   \   000107   90....       MOV     DPTR,#_NIB + 52
   \   00010A   E0           MOVX    A,@DPTR
   \   00010B   04           INC     A
   \   00010C   C0E0         PUSH    A
   \   00010E   EE           MOV     A,R6
   \   00010F   2418         ADD     A,#0x18
   \   000111   F582         MOV     DPL,A
   \   000113   EF           MOV     A,R7
   \   000114   12....       LCALL   ??Subroutine239_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_534:
   \   000117   D0E0         POP     A
   \   000119   12....       LCALL   ??Subroutine244_0 & 0xFFFF
   1153                      
   1154                      if ( aDevice->nodeRelation < CHILD_FFD )
   \                     ??CrossCallReturnLabel_594:
   \   00011C   C3           CLR     C
   \   00011D   9403         SUBB    A,#0x3
   \   00011F   8C82         MOV     DPL,R4
   \   000121   8D83         MOV     DPH,R5
   \   000123   4003         JC      $+5
   \   000125   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_9 & 0xFFFF
   1155                      {
   1156                        item->devType = ZDP_MGMT_DT_ENDDEV;
   \   000128   7402         MOV     A,#0x2
   \   00012A   12....       LCALL   ??Subroutine244_0 & 0xFFFF
   1157                       
   1158                        if ( aDevice->nodeRelation == CHILD_RFD )
   \                     ??CrossCallReturnLabel_595:
   \   00012D   6401         XRL     A,#0x1
   \   00012F   6003         JZ      $+5
   \   000131   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_10 & 0xFFFF
   1159                        {
   1160                          item->rxOnIdle = FALSE;
   \                     ??ZDO_ProcessMgmtLqiReq_11:
   \   000134   8A82         MOV     DPL,R2
   \   000136   8B83         MOV     DPH,R3
   \   000138   E4           CLR     A
   1161                        }
   \                     ??ZDO_ProcessMgmtLqiReq_12:
   \   000139   12....       LCALL   ??Subroutine214_0 & 0xFFFF
   1162                        else
   1163                        {
   1164                          item->rxOnIdle = TRUE;
   1165                        }
   1166                      }
   1167                      else
   1168                      {
   1169                        item->devType = ZDP_MGMT_DT_ROUTER;
   1170            
   1171                        if ( aDevice->nodeRelation == CHILD_FFD )
   1172                        {
   1173                          item->rxOnIdle = FALSE;
   1174                        }
   1175                        else
   1176                        {
   1177                          item->rxOnIdle = TRUE;
   1178                        }
   1179                      }
   1180            
   1181                      item->relation = ZDP_MGMT_REL_CHILD;
   \                     ??CrossCallReturnLabel_375:
   \   00013C   7401         MOV     A,#0x1
   \                     ??ZDO_ProcessMgmtLqiReq_8:
   \   00013E   12....       LCALL   ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   000141   E5..         MOV     A,?V0 + 4
   \   000143   C3           CLR     C
   \   000144   95..         SUBB    A,?V0 + 1
   \   000146   4003         JC      $+5
   \   000148   02....       LJMP    ??CrossCallReturnLabel_83 & 0xFFFF
   \   00014B   E5..         MOV     A,?V0 + 0
   \   00014D   C3           CLR     C
   \   00014E   95..         SUBB    A,?V0 + 2
   \   000150   4003         JC      $+5
   \   000152   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_13 & 0xFFFF
   \   000155                ; Setup parameters for call to function AssocFindDevice
   \   000155   A9..         MOV     R1,?V0 + 0
   \   000157   12....       LCALL   ??AssocFindDevice?relay
   \   00015A   7403         MOV     A,#0x3
   \   00015C   12....       LCALL   ?XSTACK_DISP0_8
   \   00015F   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   000162   05..         INC     ?V0 + 0
   \   000164   90....       MOV     DPTR,#_NIB + 33
   \   000167   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   00016A   7403         MOV     A,#0x3
   \   00016C   12....       LCALL   ?XSTACK_DISP0_8
   \   00016F   12....       LCALL   ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_364:
   \   000172   EE           MOV     A,R6
   \   000173   2412         ADD     A,#0x12
   \   000175   F582         MOV     DPL,A
   \   000177   EF           MOV     A,R7
   \   000178   12....       LCALL   ??Subroutine239_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_535:
   \   00017B   E8           MOV     A,R0
   \   00017C   F0           MOVX    @DPTR,A
   \   00017D   A3           INC     DPTR
   \   00017E   E9           MOV     A,R1
   \   00017F   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000182   7403         MOV     A,#0x3
   \   000184   12....       LCALL   ?XSTACK_DISP0_8
   \   000187   12....       LCALL   ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_147:
   \   00018A   E0           MOVX    A,@DPTR
   \   00018B   C0E0         PUSH    A
   \   00018D   EE           MOV     A,R6
   \   00018E   2419         ADD     A,#0x19
   \   000190   F582         MOV     DPL,A
   \   000192   EF           MOV     A,R7
   \   000193   12....       LCALL   ??Subroutine239_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_536:
   \   000196   D0E0         POP     A
   \   000198   F0           MOVX    @DPTR,A
   \   000199   7407         MOV     A,#0x7
   \   00019B   12....       LCALL   ?XSTACK_DISP0_8
   \   00019E   E4           CLR     A
   \   00019F   F0           MOVX    @DPTR,A
   \   0001A0   7403         MOV     A,#0x3
   \   0001A2   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A5   12....       LCALL   ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_365:
   \   0001A8   7408         MOV     A,#0x8
   \   0001AA   12....       LCALL   ?XSTACK_DISP0_8
   \   0001AD   12....       LCALL   ??Subroutine217_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_387:
   \   0001B0   EE           MOV     A,R6
   \   0001B1   240A         ADD     A,#0xa
   \   0001B3   F5..         MOV     ?V0 + 6,A
   \   0001B5   EF           MOV     A,R7
   \   0001B6   3400         ADDC    A,#0x0
   \   0001B8   F5..         MOV     ?V0 + 7,A
   \   0001BA                ; Setup parameters for call to function AddrMgrEntryLookupNwk
   \   0001BA   7407         MOV     A,#0x7
   \   0001BC   12....       LCALL   ?XSTACK_DISP0_8
   \   0001BF   AA82         MOV     R2,DPL
   \   0001C1   AB83         MOV     R3,DPH
   \   0001C3   12....       LCALL   ??AddrMgrEntryLookupNwk?relay
   \   0001C6   E9           MOV     A,R1
   \   0001C7   6401         XRL     A,#0x1
   \   0001C9   6003         JZ      $+5
   \   0001CB   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_3 & 0xFFFF
   \   0001CE                ; Setup parameters for call to function sAddrExtCpy
   \   0001CE   740A         MOV     A,#0xa
   \   0001D0   12....       LCALL   ?XSTACK_DISP0_8
   \   0001D3   AC82         MOV     R4,DPL
   \   0001D5   AD83         MOV     R5,DPH
   \   0001D7   AA..         MOV     R2,?V0 + 6
   \   0001D9   AB..         MOV     R3,?V0 + 7
   \   0001DB   12....       LCALL   ??sAddrExtCpy?relay
   \   0001DE   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_4 & 0xFFFF
   \                     ??ZDO_ProcessMgmtLqiReq_9:
   \   0001E1   7401         MOV     A,#0x1
   \   0001E3   12....       LCALL   ??Subroutine244_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_596:
   \   0001E6   6403         XRL     A,#0x3
   \   0001E8   7003         JNZ     $+5
   \   0001EA   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_11 & 0xFFFF
   \                     ??ZDO_ProcessMgmtLqiReq_10:
   \   0001ED   8A82         MOV     DPL,R2
   \   0001EF   8B83         MOV     DPH,R3
   \   0001F1   7401         MOV     A,#0x1
   \   0001F3   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_12 & 0xFFFF
   1182                    }
   1183            
   1184                    item++;
   1185                  }
   1186                  else
   1187                  {
   1188                    if ( StartIndex <= aItems )
   \                     ??ZDO_ProcessMgmtLqiReq_13:
   \   0001F6   E5..         MOV     A,?V0 + 2
   \   0001F8   C3           CLR     C
   \   0001F9   95..         SUBB    A,?V0 + 5
   \   0001FB   4005         JC      ??ZDO_ProcessMgmtLqiReq_14
   1189                      // Start with 1st neighbor
   1190                      index = 0;
   \   0001FD   75..00       MOV     ?V0 + 0,#0x0
   \   000200   8018         SJMP    ??ZDO_ProcessMgmtLqiReq_15
   1191                    else
   1192                      // Start with >1st neighbor
   1193                      index = StartIndex - aItems;
   \                     ??ZDO_ProcessMgmtLqiReq_14:
   \   000202   E5..         MOV     A,?V0 + 5
   \   000204   C3           CLR     C
   \   000205   95..         SUBB    A,?V0 + 2
   \   000207   F5..         MOV     ?V0 + 0,A
   \   000209   800F         SJMP    ??ZDO_ProcessMgmtLqiReq_15
   1194                    break;
   1195                  }
   1196                }
   1197            
   1198                // Loop through neighbor items and finish list
   1199                for ( ; x < numItems; x++ )
   1200                {
   1201                  // Add next neighbor table item
   1202                  NLME_GetRequest( nwkNeighborTable, index++, &entry );
   1203            
   1204                  // set ZDP_MgmtLqiItem_t fields
   1205                  item->panID    = entry.panId;
   1206                  osal_cpyExtAddr( item->extPanID, _NIB.extendedPANID );
   1207                  osal_memset( item->extAddr, 0xFF, Z_EXTADDR_LEN );
   1208                  item->nwkAddr  = entry.neighborAddress;
   1209                  item->rxOnIdle = ZDP_MGMT_BOOL_UNKNOWN;
   1210                  item->relation = ZDP_MGMT_REL_UNKNOWN;
   1211                  item->permit   = ZDP_MGMT_BOOL_UNKNOWN;
   1212                  item->depth    = 0xFF;
   1213                  item->lqi      = entry.linkInfo.rxLqi;
   1214            
   1215                  if ( item->nwkAddr == 0 )
   1216                  {
   1217                    item->devType = ZDP_MGMT_DT_COORD;
   1218                  }
   1219                  else
   1220                  {
   1221                    item->devType = ZDP_MGMT_DT_ROUTER;
   \                     ??ZDO_ProcessMgmtLqiReq_16:
   \   00020B   7401         MOV     A,#0x1
   1222                  }
   \                     ??ZDO_ProcessMgmtLqiReq_17:
   \   00020D   12....       LCALL   ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   000210   E5..         MOV     A,?V0 + 4
   \   000212   C3           CLR     C
   \   000213   95..         SUBB    A,?V0 + 1
   \   000215   4003         JC      $+5
   \   000217   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_2 & 0xFFFF
   \                     ??ZDO_ProcessMgmtLqiReq_15:
   \   00021A                ; Setup parameters for call to function NLME_GetRequest
   \   00021A   7414         MOV     A,#0x14
   \   00021C   12....       LCALL   ?XSTACK_DISP0_8
   \   00021F   AC82         MOV     R4,DPL
   \   000221   AD83         MOV     R5,DPH
   \   000223   85....       MOV     ?V0 + 2,?V0 + 0
   \   000226   AA..         MOV     R2,?V0 + 2
   \   000228   7B00         MOV     R3,#0x0
   \   00022A   7987         MOV     R1,#-0x79
   \   00022C   12....       LCALL   ??NLME_GetRequest?relay
   \   00022F   05..         INC     ?V0 + 0
   \   000231   741E         MOV     A,#0x1e
   \   000233   12....       LCALL   ?XSTACK_DISP0_8
   \   000236   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   000239                ; Setup parameters for call to function osal_memset
   \   000239   7C08         MOV     R4,#0x8
   \   00023B   7D00         MOV     R5,#0x0
   \   00023D   79FF         MOV     R1,#-0x1
   \   00023F   EE           MOV     A,R6
   \   000240   240A         ADD     A,#0xa
   \   000242   FA           MOV     R2,A
   \   000243   EF           MOV     A,R7
   \   000244   3400         ADDC    A,#0x0
   \   000246   FB           MOV     R3,A
   \   000247   12....       LCALL   ??osal_memset?relay
   \   00024A   EE           MOV     A,R6
   \   00024B   2412         ADD     A,#0x12
   \   00024D   F8           MOV     R0,A
   \   00024E   EF           MOV     A,R7
   \   00024F   3400         ADDC    A,#0x0
   \   000251   F9           MOV     R1,A
   \   000252   7414         MOV     A,#0x14
   \   000254   12....       LCALL   ?XSTACK_DISP0_8
   \   000257   12....       LCALL   ??Subroutine228_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_451:
   \   00025A   8882         MOV     DPL,R0
   \   00025C   8983         MOV     DPH,R1
   \   00025E   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   000261   EE           MOV     A,R6
   \   000262   2415         ADD     A,#0x15
   \   000264   F582         MOV     DPL,A
   \   000266   EF           MOV     A,R7
   \   000267   12....       LCALL   ??Subroutine239_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_537:
   \   00026A   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_374:
   \   00026D   7403         MOV     A,#0x3
   \   00026F   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000272   7423         MOV     A,#0x23
   \   000274   12....       LCALL   ?XSTACK_DISP0_8
   \   000277   E0           MOVX    A,@DPTR
   \   000278   C0E0         PUSH    A
   \   00027A   EE           MOV     A,R6
   \   00027B   2419         ADD     A,#0x19
   \   00027D   F582         MOV     DPL,A
   \   00027F   EF           MOV     A,R7
   \   000280   12....       LCALL   ??Subroutine239_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_538:
   \   000283   D0E0         POP     A
   \   000285   F0           MOVX    @DPTR,A
   \   000286   EE           MOV     A,R6
   \   000287   2414         ADD     A,#0x14
   \   000289   FA           MOV     R2,A
   \   00028A   EF           MOV     A,R7
   \   00028B   3400         ADDC    A,#0x0
   \   00028D   FB           MOV     R3,A
   \   00028E   8882         MOV     DPL,R0
   \   000290   8983         MOV     DPH,R1
   \   000292   12....       LCALL   ??Subroutine232_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_479:
   \   000295   8A82         MOV     DPL,R2
   \   000297   8B83         MOV     DPH,R3
   \   000299   6003         JZ      $+5
   \   00029B   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_16 & 0xFFFF
   \   00029E   E4           CLR     A
   \   00029F   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_17 & 0xFFFF
   1223            
   1224                  item++;
   1225                }
   1226              }
   1227            }
   1228            else
   1229            {
   1230              numItems = 0;
   \                     ??ZDO_ProcessMgmtLqiReq_0:
   \   0002A2   75..00       MOV     ?V0 + 1,#0x0
   1231            }
   1232            
   1233            // Send response
   1234            ZDP_MgmtLqiRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZSuccess, maxItems,
   1235                            StartIndex, numItems, table, false );
   \                     ??ZDO_ProcessMgmtLqiReq_2:
   \   0002A5                ; Setup parameters for call to function ZDP_MgmtLqiRsp
   \   0002A5   75..00       MOV     ?V0 + 2,#0x0
   \   0002A8   78..         MOV     R0,#?V0 + 2
   \   0002AA   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0002AD   7402         MOV     A,#0x2
   \   0002AF   12....       LCALL   ?XSTACK_DISP0_8
   \   0002B2   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0002B5   78..         MOV     R0,#?V0 + 1
   \   0002B7   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0002BA   E5..         MOV     A,?V0 + 5
   \   0002BC   F5..         MOV     ?V0 + 1,A
   \   0002BE   78..         MOV     R0,#?V0 + 1
   \   0002C0   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0002C3   7405         MOV     A,#0x5
   \   0002C5   12....       LCALL   ?XSTACK_DISP0_8
   \   0002C8   E0           MOVX    A,@DPTR
   \   0002C9   FD           MOV     R5,A
   \   0002CA   7C00         MOV     R4,#0x0
   \   0002CC   740A         MOV     A,#0xa
   \   0002CE   12....       LCALL   ?XSTACK_DISP0_8
   \   0002D1   12....       LCALL   ?Subroutine103 & 0xFFFF
   \                     ??CrossCallReturnLabel_197:
   \   0002D4   12....       LCALL   ?XSTACK_DISP0_8
   \   0002D7   12....       LCALL   ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_131:
   \   0002DA   12....       LCALL   ??ZDP_MgmtLqiRsp?relay
   \   0002DD   7405         MOV     A,#0x5
   \   0002DF   12....       LCALL   ?DEALLOC_XSTACK8
   1236          
   1237            if ( table )
   \   0002E2   7401         MOV     A,#0x1
   \   0002E4   12....       LCALL   ?XSTACK_DISP0_8
   \   0002E7   12....       LCALL   ??Subroutine232_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_480:
   \   0002EA   6008         JZ      ??CrossCallReturnLabel_370
   1238            {
   1239              osal_mem_free( table );
   \   0002EC                ; Setup parameters for call to function osal_mem_free
   \   0002EC   7401         MOV     A,#0x1
   \   0002EE   12....       LCALL   ?XSTACK_DISP0_8
   \   0002F1   12....       LCALL   ??Subroutine213_0 & 0xFFFF
   1240            }
   1241          }
   \                     ??CrossCallReturnLabel_370:
   \   0002F4   742B         MOV     A,#0x2b
   \   0002F6   02....       LJMP    ?Subroutine6 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine78:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002                REQUIRE ??Subroutine210_0
   \   000002                ; // Fall through to label ??Subroutine210_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   EE           MOV     A,R6
   \   000002   241A         ADD     A,#0x1a
   \   000004   FE           MOV     R6,A
   \   000005   EF           MOV     A,R7
   \   000006   3400         ADDC    A,#0x0
   \   000008   FF           MOV     R7,A
   \   000009   05..         INC     ?V0 + 4
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   7402         MOV     A,#0x2
   \   000002                REQUIRE ??Subroutine214_0
   \   000002                ; // Fall through to label ??Subroutine214_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine214_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   EE           MOV     A,R6
   \   000002   2416         ADD     A,#0x16
   \   000004   12....       LCALL   ?Subroutine181 & 0xFFFF
   \                     ??CrossCallReturnLabel_567:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine181:
   \   000000   F582         MOV     DPL,A
   \   000002   EF           MOV     A,R7
   \   000003                REQUIRE ??Subroutine215_0
   \   000003                ; // Fall through to label ??Subroutine215_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   12....       LCALL   ?Subroutine169 & 0xFFFF
   \                     ??CrossCallReturnLabel_489:
   \   000003   8E82         MOV     DPL,R6
   \   000005   8F83         MOV     DPH,R7
   \   000007   E8           MOV     A,R0
   \   000008   F0           MOVX    @DPTR,A
   \   000009   A3           INC     DPTR
   \   00000A   E9           MOV     A,R1
   \   00000B   F0           MOVX    @DPTR,A
   \   00000C                ; Setup parameters for call to function sAddrExtCpy
   \   00000C                ; Setup parameters for call to function sAddrExtCpy
   \   00000C   7C..         MOV     R4,#(_NIB + 53) & 0xff
   \   00000E   7D..         MOV     R5,#((_NIB + 53) >> 8) & 0xff
   \   000010   EE           MOV     A,R6
   \   000011   2402         ADD     A,#0x2
   \   000013   FA           MOV     R2,A
   \   000014   EF           MOV     A,R7
   \   000015   3400         ADDC    A,#0x0
   \   000017   FB           MOV     R3,A
   \   000018   12....       LCALL   ??sAddrExtCpy?relay
   \   00001B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   EE           MOV     A,R6
   \   000002   2417         ADD     A,#0x17
   \   000004   12....       LCALL   ?Subroutine181 & 0xFFFF
   \                     ??CrossCallReturnLabel_565:
   \   000007   7402         MOV     A,#0x2
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   EE           MOV     A,R6
   \   00000B   2418         ADD     A,#0x18
   \   00000D   12....       LCALL   ?Subroutine181 & 0xFFFF
   \                     ??CrossCallReturnLabel_566:
   \   000010   74FF         MOV     A,#-0x1
   \   000012   F0           MOVX    @DPTR,A
   \   000013   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine67:
   \   000000   12....       LCALL   ?Subroutine160 & 0xFFFF
   \                     ??CrossCallReturnLabel_408:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine59:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   2413         ADD     A,#0x13
   \   000003   12....       LCALL   ?Subroutine165 & 0xFFFF
   \                     ??CrossCallReturnLabel_284:
   \   000006   12....       LCALL   ?Subroutine162 & 0xFFFF
   \                     ??CrossCallReturnLabel_279:
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine103:
   \   000000   12....       LCALL   ?Subroutine173 & 0xFFFF
   \                     ??CrossCallReturnLabel_295:
   \   000003   740A         MOV     A,#0xa
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine173:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   2402         ADD     A,#0x2
   \   000003   FA           MOV     R2,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   3400         ADDC    A,#0x0
   \   000008   FB           MOV     R3,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine244_0:
   \   000000   12....       LCALL   ?Subroutine191 & 0xFFFF
   \                     ??CrossCallReturnLabel_602:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine191:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function osal_memcpy
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   22           RET
   1242          
   1243          /*********************************************************************
   1244           * @fn          ZDO_ProcessMgmtNwkDiscReq
   1245           *
   1246           * @brief       This function handles parsing the incoming Management
   1247           *              Network Discover request and starts the request.
   1248           *
   1249           * @param       inMsg - incoming message (request)
   1250           *
   1251           * @return      none
   1252           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1253          void ZDO_ProcessMgmtNwkDiscReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtNwkDiscReq:
   1254          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 7
   \   000005   74F9         MOV     A,#-0x7
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 0,R2
   \   00000C   8B..         MOV     ?V0 + 1,R3
   1255            NLME_ScanFields_t scan;
   1256            uint8             index;
   1257            uint8             *msg;
   1258          
   1259            msg = inMsg->asdu;
   \   00000E   12....       LCALL   ?Subroutine84 & 0xFFFF
   1260            scan.channels = osal_build_uint32( msg, 4 );
   \                     ??CrossCallReturnLabel_165:
   \   000011   85..82       MOV     DPL,?XSP + 0
   \   000014   85..83       MOV     DPH,?XSP + 1
   \   000017   12....       LCALL   ?XSTORE_R2345
   1261            msg += 4;
   \   00001A   12....       LCALL   ?Subroutine132 & 0xFFFF
   1262            scan.duration = *msg++;
   \                     ??CrossCallReturnLabel_376:
   \   00001D   C0E0         PUSH    A
   \   00001F   7404         MOV     A,#0x4
   \   000021   12....       LCALL   ?XSTACK_DISP0_8
   \   000024   D0E0         POP     A
   \   000026   12....       LCALL   ?Subroutine49 & 0xFFFF
   1263            index         = *msg;
   \                     ??CrossCallReturnLabel_94:
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   FA           MOV     R2,A
   1264            scan.scanType = ZMAC_ACTIVE_SCAN;
   \   00002B   7405         MOV     A,#0x5
   \   00002D   12....       LCALL   ?XSTACK_DISP0_8
   \   000030   7401         MOV     A,#0x1
   \   000032   F0           MOVX    @DPTR,A
   1265            scan.scanApp  = NLME_DISC_SCAN;
   \   000033   7406         MOV     A,#0x6
   \   000035   12....       LCALL   ?XSTACK_DISP0_8
   \   000038   7401         MOV     A,#0x1
   \   00003A   F0           MOVX    @DPTR,A
   1266          
   1267            // Save off the information to be used for the response
   1268            zdappMgmtNwkDiscReqInProgress          = true;
   \   00003B   90....       MOV     DPTR,#zdappMgmtNwkDiscReqInProgress
   \   00003E   F0           MOVX    @DPTR,A
   1269            zdappMgmtNwkDiscRspAddr.addrMode       = Addr16Bit;
   \   00003F   90....       MOV     DPTR,#zdappMgmtNwkDiscRspAddr + 8
   \   000042   04           INC     A
   \   000043   12....       LCALL   ?Subroutine50 & 0xFFFF
   1270            zdappMgmtNwkDiscRspAddr.addr.shortAddr = inMsg->srcAddr.addr.shortAddr;
   \                     ??CrossCallReturnLabel_95:
   \   000046   12....       LCALL   ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_412:
   \   000049   90....       MOV     DPTR,#zdappMgmtNwkDiscRspAddr
   \   00004C   12....       LCALL   ??Subroutine217_0 & 0xFFFF
   1271            zdappMgmtNwkDiscStartIndex             = index;
   \                     ??CrossCallReturnLabel_388:
   \   00004F   EA           MOV     A,R2
   \   000050   90....       MOV     DPTR,#zdappMgmtNwkDiscStartIndex
   \   000053   F0           MOVX    @DPTR,A
   1272            zdappMgmtNwkDiscRspTransSeq            = inMsg->TransSeq;
   \   000054   E5..         MOV     A,?V0 + 0
   \   000056   240F         ADD     A,#0xf
   \   000058   F582         MOV     DPL,A
   \   00005A   E5..         MOV     A,?V0 + 1
   \   00005C   12....       LCALL   ??Subroutine226_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_431:
   \   00005F   90....       MOV     DPTR,#zdappMgmtNwkDiscRspTransSeq
   \   000062   12....       LCALL   ?Subroutine39 & 0xFFFF
   1273            
   1274            if ( NLME_NwkDiscReq2( &scan ) != ZSuccess )
   \                     ??CrossCallReturnLabel_76:
   \   000065   12....       LCALL   ??NLME_NwkDiscReq2?relay
   \   000068   E9           MOV     A,R1
   \   000069   6003         JZ      ??ZDO_ProcessMgmtNwkDiscReq_0
   1275            {
   1276              NLME_NwkDiscTerm();
   \   00006B                ; Setup parameters for call to function NLME_NwkDiscTerm
   \   00006B   12....       LCALL   ??NLME_NwkDiscTerm?relay
   1277          
   1278              // zdappMgmtNwkDiscReqInProgress will be reset in the confirm callback
   1279            }
   1280          }
   \                     ??ZDO_ProcessMgmtNwkDiscReq_0:
   \   00006E   7407         MOV     A,#0x7
   \   000070   02....       LJMP    ??Subroutine204_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine132:
   \   000000   EE           MOV     A,R6
   \   000001   2404         ADD     A,#0x4
   \   000003                REQUIRE ??Subroutine216_0
   \   000003                ; // Fall through to label ??Subroutine216_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine216_0:
   \   000000   12....       LCALL   ?Subroutine199 & 0xFFFF
   \                     ??CrossCallReturnLabel_578:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   12....       LCALL   ?Subroutine190 & 0xFFFF
   \                     ??CrossCallReturnLabel_322:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine199:
   \   000000   FE           MOV     R6,A
   \   000001   EF           MOV     A,R7
   \   000002   3400         ADDC    A,#0x0
   \   000004   FF           MOV     R7,A
   \   000005   8E82         MOV     DPL,R6
   \   000007   8F83         MOV     DPH,R7
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000   12....       LCALL   ?Subroutine156 & 0xFFFF
   \                     ??CrossCallReturnLabel_273:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine197:
   \   000000   EA           MOV     A,R2
   \   000001   12....       LCALL   ??Subroutine206_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_346:
   \   000004   EB           MOV     A,R3
   \   000005   3400         ADDC    A,#0x0
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine156:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function osal_memcpy
   \   000001   85..82       MOV     DPL,?V0 + 0
   \   000004   85..83       MOV     DPH,?V0 + 1
   \   000007   A3           INC     DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine176:
   \   000000   12....       LCALL   ?Subroutine197 & 0xFFFF
   \                     ??CrossCallReturnLabel_332:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine84:
   \   000000   12....       LCALL   ?Subroutine176 & 0xFFFF
   \                     ??CrossCallReturnLabel_303:
   \   000003   FE           MOV     R6,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   FF           MOV     R7,A
   \   000007                ; Setup parameters for call to function osal_build_uint32
   \   000007                ; Setup parameters for call to function osal_build_uint32
   \   000007   7904         MOV     R1,#0x4
   \   000009   EE           MOV     A,R6
   \   00000A   FA           MOV     R2,A
   \   00000B   EF           MOV     A,R7
   \   00000C   FB           MOV     R3,A
   \   00000D   12....       LCALL   ??osal_build_uint32?relay
   \   000010   22           RET
   1281          
   1282          #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
   1283          /*********************************************************************
   1284           * @fn          ZDO_FinishProcessingMgmtNwkDiscReq
   1285           *
   1286           * @brief       This function finishes the processing of the Management
   1287           *              Network Discover Request and generates the response.
   1288           *
   1289           *   Note:      This function will limit the number of items returned
   1290           *              to ZDO_MAX_NWKDISC_ITEMS items.
   1291           *
   1292           * @param       ResultCountSrcAddr - source of the request
   1293           * @param       msg - pointer to incoming message
   1294           * @param       SecurityUse -
   1295           *
   1296           * @return      none
   1297           */
   1298          void ZDO_FinishProcessingMgmtNwkDiscReq( byte ResultCount,
   1299                                                   networkDesc_t *NetworkList )
   1300          {
   1301            byte count, i;
   1302            networkDesc_t *newDesc = NULL, *pList = NetworkList;
   1303          
   1304            if ( ZSTACK_ROUTER_BUILD )
   1305            {
   1306              // Look for my PanID.
   1307              while ( pList )
   1308              {
   1309                if ( pList->panId == _NIB.nwkPanId )
   1310                {
   1311                  break;
   1312                }
   1313          
   1314            
   1315                if ( !pList->nextDesc )
   1316                {
   1317                  break;
   1318                }
   1319                pList = pList->nextDesc;
   1320              }
   1321            
   1322              
   1323              // If my Pan not present (query to a star network ZC or an isolated ZR?),
   1324              // prepend it.
   1325              if ( !pList || (pList->panId != _NIB.nwkPanId) )
   1326              {
   1327                newDesc = (networkDesc_t *)osal_mem_alloc( sizeof( networkDesc_t ) );
   1328                if ( newDesc )
   1329                {
   1330                  byte pJoin;
   1331            
   1332                  newDesc->panId = _NIB.nwkPanId;
   1333                  newDesc->logicalChannel = _NIB.nwkLogicalChannel;
   1334                  newDesc->beaconOrder = _NIB.beaconOrder;
   1335                  newDesc->superFrameOrder = _NIB.superFrameOrder;
   1336                  newDesc->version = NLME_GetProtocolVersion();
   1337                  newDesc->stackProfile = zgStackProfile;
   1338                  //Extended PanID
   1339                  osal_cpyExtAddr( newDesc->extendedPANID, _NIB.extendedPANID);
   1340            
   1341                  ZMacGetReq( ZMacAssociationPermit, &pJoin );
   1342                  newDesc->chosenRouter = ((pJoin) ? ZDAppNwkAddr.addr.shortAddr :
   1343                                                     INVALID_NODE_ADDR);
   1344            
   1345                  newDesc->nextDesc = NetworkList;
   1346                  NetworkList = newDesc;
   1347                  ResultCount++;
   1348                }
   1349              }
   1350            }
   1351          
   1352            // Calc the count and apply a max count.
   1353            if ( zdappMgmtNwkDiscStartIndex > ResultCount )
   1354            {
   1355              count = 0;
   1356            }
   1357            else
   1358            {
   1359              count = ResultCount - zdappMgmtNwkDiscStartIndex;
   1360              if ( count > ZDO_MAX_NWKDISC_ITEMS )
   1361              {
   1362                count = ZDO_MAX_NWKDISC_ITEMS;
   1363              }
   1364          
   1365              // Move the list pointer up to the start index.
   1366              for ( i = 0; i < zdappMgmtNwkDiscStartIndex; i++ )
   1367              {
   1368                NetworkList = NetworkList->nextDesc;
   1369              }
   1370            }
   1371          
   1372            ZDP_MgmtNwkDiscRsp( zdappMgmtNwkDiscRspTransSeq,
   1373                               &zdappMgmtNwkDiscRspAddr, ZSuccess, ResultCount,
   1374                                zdappMgmtNwkDiscStartIndex,
   1375                                count,
   1376                                NetworkList,
   1377                                false );
   1378          
   1379            if ( ZSTACK_ROUTER_BUILD )
   1380            {
   1381              if ( newDesc != NULL )
   1382              {
   1383                osal_mem_free( newDesc );
   1384              }
   1385            }
   1386          
   1387            NLME_NwkDiscTerm();
   1388          }
   1389          #endif
   1390          
   1391          /*********************************************************************
   1392           * @fn          ZDO_ProcessMgmtRtgReq
   1393           *
   1394           * @brief       This function finishes the processing of the Management
   1395           *              Routing Request and generates the response.
   1396           *
   1397           *   Note:      This function will limit the number of items returned
   1398           *              to ZDO_MAX_RTG_ITEMS items.
   1399           *
   1400           * @param       inMsg - incoming message (request)
   1401           *
   1402           * @return      none
   1403           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1404          void ZDO_ProcessMgmtRtgReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtRtgReq:
   1405          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7403         MOV     A,#0x3
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   12....       LCALL   ?Subroutine38 & 0xFFFF
   1406            byte x;
   1407            byte maxNumItems;
   1408            byte numItems = 0;
   \                     ??CrossCallReturnLabel_66:
   \   000012   7E00         MOV     R6,#0x0
   1409            uint8 *pBuf = NULL;
   \   000014   8E..         MOV     ?V0 + 6,R6
   \   000016   8E..         MOV     ?V0 + 7,R6
   1410            rtgItem_t *pList;
   1411            uint8 StartIndex = inMsg->asdu[0];
   \   000018   7403         MOV     A,#0x3
   \   00001A   12....       LCALL   ?XSTACK_DISP0_8
   \   00001D   12....       LCALL   ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   000020   F5..         MOV     ?V0 + 4,A
   1412          
   1413            // Get the number of table items
   1414            NLME_GetRequest( nwkNumRoutingTableEntries, 0, &maxNumItems );
   \   000022                ; Setup parameters for call to function NLME_GetRequest
   \   000022   85..82       MOV     DPL,?XSP + 0
   \   000025   85..83       MOV     DPH,?XSP + 1
   \   000028   AC82         MOV     R4,DPL
   \   00002A   AD83         MOV     R5,DPH
   \   00002C   7A00         MOV     R2,#0x0
   \   00002E   7B00         MOV     R3,#0x0
   \   000030   799D         MOV     R1,#-0x63
   \   000032   12....       LCALL   ??NLME_GetRequest?relay
   1415          
   1416            if ( maxNumItems > StartIndex )
   \   000035   85..82       MOV     DPL,?XSP + 0
   \   000038   85..83       MOV     DPH,?XSP + 1
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   F8           MOV     R0,A
   \   00003D   E5..         MOV     A,?V0 + 4
   \   00003F   C3           CLR     C
   \   000040   98           SUBB    A,R0
   \   000041   4003         JC      $+5
   \   000043   02....       LJMP    ??ZDO_ProcessMgmtRtgReq_0 & 0xFFFF
   1417            {
   1418              numItems = maxNumItems - StartIndex;    // Start at the passed in index
   \   000046   E0           MOVX    A,@DPTR
   \   000047   C3           CLR     C
   \   000048   95..         SUBB    A,?V0 + 4
   \   00004A   FE           MOV     R6,A
   1419              
   1420              // limit the size of the list
   1421              if ( numItems > ZDO_MAX_RTG_ITEMS )
   \   00004B   C3           CLR     C
   \   00004C   940B         SUBB    A,#0xb
   \   00004E   4002         JC      ??ZDO_ProcessMgmtRtgReq_1
   1422              {
   1423                numItems = ZDO_MAX_RTG_ITEMS;
   \   000050   7E0A         MOV     R6,#0xa
   1424              }
   1425          
   1426              // Allocate the memory to build the table
   1427              pBuf = osal_mem_alloc( (short)(sizeof( rtgItem_t ) * numItems) );
   \                     ??ZDO_ProcessMgmtRtgReq_1:
   \   000052                ; Setup parameters for call to function osal_mem_alloc
   \   000052   EE           MOV     A,R6
   \   000053   75F006       MOV     B,#0x6
   \   000056   A4           MUL     AB
   \   000057   FA           MOV     R2,A
   \   000058   ABF0         MOV     R3,B
   \   00005A   12....       LCALL   ??osal_mem_alloc?relay
   \   00005D   8A..         MOV     ?V0 + 6,R2
   \   00005F   8B..         MOV     ?V0 + 7,R3
   1428            
   1429              if ( pBuf != NULL )
   \   000061   EA           MOV     A,R2
   \   000062   45..         ORL     A,?V0 + 7
   \   000064   605F         JZ      ??ZDO_ProcessMgmtRtgReq_2
   1430              {
   1431                // Convert buffer to list
   1432                pList = (rtgItem_t *)pBuf;
   \   000066   7401         MOV     A,#0x1
   \   000068   12....       LCALL   ?XSTACK_DISP0_8
   \   00006B   12....       LCALL   ?Subroutine38 & 0xFFFF
   1433            
   1434                // Loop through items and build list
   1435                for ( x = 0; x < numItems; x++ )
   \                     ??CrossCallReturnLabel_67:
   \   00006E   7F00         MOV     R7,#0x0
   \   000070   8016         SJMP    ??ZDO_ProcessMgmtRtgReq_3
   1436                {
   1437                  NLME_GetRequest( nwkRoutingTable, (uint16)(x + StartIndex), (void*)pList );
   1438            
   1439                  // Remap the status to the RoutingTableList Record Format defined in the ZigBee spec
   1440                  switch( pList->status )
   1441                  {
   1442                    case RT_ACTIVE:
   1443                      pList->status = ZDO_MGMT_RTG_ENTRY_ACTIVE;
   1444                      break;
   1445            
   1446                    case RT_DISC:
   1447                      pList->status = ZDO_MGMT_RTG_ENTRY_DISCOVERY_UNDERWAY;
   1448                      break;
   1449            
   1450                    case RT_LINK_FAIL:
   1451                      pList->status = ZDO_MGMT_RTG_ENTRY_DISCOVERY_FAILED;
   \                     ??ZDO_ProcessMgmtRtgReq_4:
   \   000072   7402         MOV     A,#0x2
   \   000074   F0           MOVX    @DPTR,A
   1452            
   1453                    case RT_INIT:
   1454                    case RT_REPAIR:
   1455                    default:
   1456                      pList->status = ZDO_MGMT_RTG_ENTRY_INACTIVE;
   \                     ??ZDO_ProcessMgmtRtgReq_5:
   \   000075   7403         MOV     A,#0x3
   \                     ??ZDO_ProcessMgmtRtgReq_6:
   \   000077   F0           MOVX    @DPTR,A
   1457                      break;
   1458                  }
   1459            
   1460                  // Increment pointer to next record
   1461                  pList++;
   \   000078   7401         MOV     A,#0x1
   \   00007A   12....       LCALL   ?XSTACK_DISP0_8
   \   00007D   E0           MOVX    A,@DPTR
   \   00007E   12....       LCALL   ?Subroutine117 & 0xFFFF
   \                     ??CrossCallReturnLabel_398:
   \   000081   12....       LCALL   ?XSTACK_DISP0_8
   \   000084   12....       LCALL   ??Subroutine217_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_389:
   \   000087   0F           INC     R7
   \                     ??ZDO_ProcessMgmtRtgReq_3:
   \   000088   EF           MOV     A,R7
   \   000089   C3           CLR     C
   \   00008A   9E           SUBB    A,R6
   \   00008B   503A         JNC     ??ZDO_ProcessMgmtRtgReq_0
   \   00008D                ; Setup parameters for call to function NLME_GetRequest
   \   00008D   7401         MOV     A,#0x1
   \   00008F   12....       LCALL   ?XSTACK_DISP0_8
   \   000092   12....       LCALL   ?Subroutine110 & 0xFFFF
   \                     ??CrossCallReturnLabel_210:
   \   000095   8F..         MOV     ?V0 + 2,R7
   \   000097   85....       MOV     ?V0 + 0,?V0 + 4
   \   00009A   E5..         MOV     A,?V0 + 2
   \   00009C   25..         ADD     A,?V0 + 0
   \   00009E   FA           MOV     R2,A
   \   00009F   E4           CLR     A
   \   0000A0   3400         ADDC    A,#0x0
   \   0000A2   FB           MOV     R3,A
   \   0000A3   798B         MOV     R1,#-0x75
   \   0000A5   12....       LCALL   ??NLME_GetRequest?relay
   \   0000A8   7401         MOV     A,#0x1
   \   0000AA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AD   E0           MOVX    A,@DPTR
   \   0000AE   2405         ADD     A,#0x5
   \   0000B0   12....       LCALL   ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_403:
   \   0000B3   14           DEC     A
   \   0000B4   6008         JZ      ??ZDO_ProcessMgmtRtgReq_7
   \   0000B6   14           DEC     A
   \   0000B7   6008         JZ      ??ZDO_ProcessMgmtRtgReq_8
   \   0000B9   14           DEC     A
   \   0000BA   60B6         JZ      ??ZDO_ProcessMgmtRtgReq_4
   \   0000BC   80B7         SJMP    ??ZDO_ProcessMgmtRtgReq_5
   \                     ??ZDO_ProcessMgmtRtgReq_7:
   \   0000BE   E4           CLR     A
   \   0000BF   80B6         SJMP    ??ZDO_ProcessMgmtRtgReq_6
   \                     ??ZDO_ProcessMgmtRtgReq_8:
   \   0000C1   7401         MOV     A,#0x1
   \   0000C3   80B2         SJMP    ??ZDO_ProcessMgmtRtgReq_6
   1462                }
   1463              }
   1464              else
   1465              {
   1466                numItems = 0;
   \                     ??ZDO_ProcessMgmtRtgReq_2:
   \   0000C5   7E00         MOV     R6,#0x0
   1467              }
   1468            }
   1469            
   1470            // Send response
   1471            ZDP_MgmtRtgRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZSuccess, maxNumItems, StartIndex, numItems,
   1472                                  (rtgItem_t *)pBuf, false );
   \                     ??ZDO_ProcessMgmtRtgReq_0:
   \   0000C7                ; Setup parameters for call to function ZDP_MgmtRtgRsp
   \   0000C7   75..00       MOV     ?V0 + 0,#0x0
   \   0000CA   78..         MOV     R0,#?V0 + 0
   \   0000CC   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000CF   78..         MOV     R0,#?V0 + 6
   \   0000D1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000D4   EE           MOV     A,R6
   \   0000D5   F5..         MOV     ?V0 + 0,A
   \   0000D7   78..         MOV     R0,#?V0 + 0
   \   0000D9   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000DC   E5..         MOV     A,?V0 + 4
   \   0000DE   F5..         MOV     ?V0 + 0,A
   \   0000E0   78..         MOV     R0,#?V0 + 0
   \   0000E2   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000E5   7405         MOV     A,#0x5
   \   0000E7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EA   E0           MOVX    A,@DPTR
   \   0000EB   FD           MOV     R5,A
   \   0000EC   7C00         MOV     R4,#0x0
   \   0000EE   7408         MOV     A,#0x8
   \   0000F0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F3   12....       LCALL   ?Subroutine173 & 0xFFFF
   \                     ??CrossCallReturnLabel_294:
   \   0000F6   7408         MOV     A,#0x8
   \   0000F8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FB   12....       LCALL   ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_132:
   \   0000FE   12....       LCALL   ??ZDP_MgmtRtgRsp?relay
   \   000101   7405         MOV     A,#0x5
   \   000103   12....       LCALL   ?DEALLOC_XSTACK8
   1473          
   1474            if ( pBuf )
   \   000106   E5..         MOV     A,?V0 + 6
   \   000108   45..         ORL     A,?V0 + 7
   \   00010A   6007         JZ      ??ZDO_ProcessMgmtRtgReq_9
   1475            {
   1476              osal_mem_free( pBuf );
   \   00010C                ; Setup parameters for call to function osal_mem_free
   \   00010C   AA..         MOV     R2,?V0 + 6
   \   00010E   AB..         MOV     R3,?V0 + 7
   \   000110   12....       LCALL   ??osal_mem_free?relay
   1477            }
   1478          }
   \                     ??ZDO_ProcessMgmtRtgReq_9:
   \   000113   7405         MOV     A,#0x5
   \   000115                REQUIRE ?Subroutine6
   \   000115                ; // Fall through to label ?Subroutine6

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine117:
   \   000000   2406         ADD     A,#0x6
   \   000002                REQUIRE ??Subroutine219_0
   \   000002                ; // Fall through to label ??Subroutine219_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine219_0:
   \   000000   F8           MOV     R0,A
   \   000001   A3           INC     DPTR
   \   000002   E0           MOVX    A,@DPTR
   \   000003   3400         ADDC    A,#0x0
   \   000005   F9           MOV     R1,A
   \   000006   7401         MOV     A,#0x1
   \   000008   22           RET
   1479          
   1480          /*********************************************************************
   1481           * @fn          ZDO_ProcessMgmtBindReq
   1482           *
   1483           * @brief       This function finishes the processing of the Management
   1484           *              Bind Request and generates the response.
   1485           *
   1486           *   Note:      This function will limit the number of items returned
   1487           *              to ZDO_MAX_BIND_ITEMS items.
   1488           *
   1489           * @param       inMsg - incoming message (request)
   1490           *
   1491           * @return      none
   1492           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1493          void ZDO_ProcessMgmtBindReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtBindReq:
   1494          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 7
   \   000005   74F9         MOV     A,#-0x7
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7405         MOV     A,#0x5
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   12....       LCALL   ?Subroutine38 & 0xFFFF
   1495          #if defined ( REFLECTOR )
   1496            byte x;
   1497            uint16 maxNumItems;
   1498            uint16 numItems;
   1499            uint8 *pBuf = NULL;
   \                     ??CrossCallReturnLabel_68:
   \   000012   75..00       MOV     ?V0 + 4,#0x0
   \   000015   75..00       MOV     ?V0 + 5,#0x0
   1500            apsBindingItem_t *pList;
   1501            uint8 StartIndex = inMsg->asdu[0];
   \   000018   7405         MOV     A,#0x5
   \   00001A   12....       LCALL   ?XSTACK_DISP0_8
   \   00001D   12....       LCALL   ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_118:
   \   000020   85..82       MOV     DPL,?XSP + 0
   \   000023   85..83       MOV     DPH,?XSP + 1
   \   000026   F0           MOVX    @DPTR,A
   1502            uint8 status;
   1503          
   1504            // Get the number of table items
   1505            APSME_GetRequest( apsNumBindingTableEntries, 0, (byte*)(&maxNumItems) );
   \   000027                ; Setup parameters for call to function APSME_GetRequest
   \   000027   7401         MOV     A,#0x1
   \   000029   12....       LCALL   ?XSTACK_DISP0_8
   \   00002C   AC82         MOV     R4,DPL
   \   00002E   AD83         MOV     R5,DPH
   \   000030   7A00         MOV     R2,#0x0
   \   000032   7B00         MOV     R3,#0x0
   \   000034   79A3         MOV     R1,#-0x5d
   \   000036   12....       LCALL   ??APSME_GetRequest?relay
   1506          
   1507            if ( maxNumItems > StartIndex )
   \   000039   85..82       MOV     DPL,?XSP + 0
   \   00003C   85..83       MOV     DPH,?XSP + 1
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   FA           MOV     R2,A
   \   000041   7401         MOV     A,#0x1
   \   000043   12....       LCALL   ?XSTACK_DISP0_8
   \   000046   12....       LCALL   ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_413:
   \   000049   C3           CLR     C
   \   00004A   EA           MOV     A,R2
   \   00004B   98           SUBB    A,R0
   \   00004C   E4           CLR     A
   \   00004D   99           SUBB    A,R1
   \   00004E   4003         JC      $+5
   \   000050   02....       LJMP    ??ZDO_ProcessMgmtBindReq_0 & 0xFFFF
   1508            {
   1509              numItems = maxNumItems - StartIndex;    // Start at the passed in index
   \   000053   7401         MOV     A,#0x1
   \   000055   12....       LCALL   ?XSTACK_DISP0_8
   \   000058   E0           MOVX    A,@DPTR
   \   000059   C3           CLR     C
   \   00005A   9A           SUBB    A,R2
   \   00005B   FE           MOV     R6,A
   \   00005C   A3           INC     DPTR
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   9400         SUBB    A,#0x0
   \   000060   FF           MOV     R7,A
   1510            }
   1511            else
   1512            {
   1513              numItems = 0;
   1514            }
   1515          
   1516            // limit the size of the list
   1517            if ( numItems > ZDO_MAX_BIND_ITEMS )
   \   000061   C3           CLR     C
   \   000062   EE           MOV     A,R6
   \   000063   9404         SUBB    A,#0x4
   \   000065   EF           MOV     A,R7
   \   000066   9400         SUBB    A,#0x0
   \   000068   4006         JC      ??ZDO_ProcessMgmtBindReq_1
   1518            {
   1519              numItems = ZDO_MAX_BIND_ITEMS;
   \   00006A   7E03         MOV     R6,#0x3
   \   00006C   7F00         MOV     R7,#0x0
   \   00006E   8004         SJMP    ??ZDO_ProcessMgmtBindReq_2
   1520            }
   1521          
   1522            // Allocate the memory to build the table
   1523            if ( numItems && (pBuf = osal_mem_alloc( sizeof( apsBindingItem_t ) * numItems )) )
   \                     ??ZDO_ProcessMgmtBindReq_1:
   \   000070   EE           MOV     A,R6
   \   000071   4F           ORL     A,R7
   \   000072   606F         JZ      ??ZDO_ProcessMgmtBindReq_0
   \                     ??ZDO_ProcessMgmtBindReq_2:
   \   000074                ; Setup parameters for call to function osal_mem_alloc
   \   000074   EE           MOV     A,R6
   \   000075   FA           MOV     R2,A
   \   000076   EF           MOV     A,R7
   \   000077   FB           MOV     R3,A
   \   000078   EA           MOV     A,R2
   \   000079   75F015       MOV     B,#0x15
   \   00007C   A4           MUL     AB
   \   00007D   FA           MOV     R2,A
   \   00007E   A8F0         MOV     R0,B
   \   000080   75F015       MOV     B,#0x15
   \   000083   EB           MOV     A,R3
   \   000084   A4           MUL     AB
   \   000085   28           ADD     A,R0
   \   000086   FB           MOV     R3,A
   \   000087   12....       LCALL   ??osal_mem_alloc?relay
   \   00008A   8A..         MOV     ?V0 + 4,R2
   \   00008C   8B..         MOV     ?V0 + 5,R3
   \   00008E   EA           MOV     A,R2
   \   00008F   45..         ORL     A,?V0 + 5
   \   000091   6050         JZ      ??ZDO_ProcessMgmtBindReq_0
   1524            {
   1525              status = ZSuccess;
   \   000093   75..00       MOV     ?V0 + 1,#0x0
   1526              
   1527              // Convert buffer to list
   1528              pList = (apsBindingItem_t *)pBuf;
   \   000096   7403         MOV     A,#0x3
   \   000098   12....       LCALL   ?XSTACK_DISP0_8
   \   00009B   12....       LCALL   ?Subroutine38 & 0xFFFF
   1529          
   1530              // Loop through items and build list
   1531              for ( x = 0; x < numItems; x++ )
   \                     ??CrossCallReturnLabel_69:
   \   00009E   75..00       MOV     ?V0 + 0,#0x0
   \                     ??ZDO_ProcessMgmtBindReq_3:
   \   0000A1   85....       MOV     ?V0 + 2,?V0 + 0
   \   0000A4   C3           CLR     C
   \   0000A5   E5..         MOV     A,?V0 + 2
   \   0000A7   9E           SUBB    A,R6
   \   0000A8   E4           CLR     A
   \   0000A9   9F           SUBB    A,R7
   \   0000AA   503C         JNC     ??ZDO_ProcessMgmtBindReq_4
   1532              {
   1533                APSME_GetRequest( apsBindingTable, (x + StartIndex), (void*)pList );
   \   0000AC                ; Setup parameters for call to function APSME_GetRequest
   \   0000AC   7403         MOV     A,#0x3
   \   0000AE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B1   12....       LCALL   ?Subroutine110 & 0xFFFF
   \                     ??CrossCallReturnLabel_211:
   \   0000B4   85..82       MOV     DPL,?XSP + 0
   \   0000B7   85..83       MOV     DPH,?XSP + 1
   \   0000BA   E0           MOVX    A,@DPTR
   \   0000BB   F8           MOV     R0,A
   \   0000BC   E5..         MOV     A,?V0 + 2
   \   0000BE   28           ADD     A,R0
   \   0000BF   FA           MOV     R2,A
   \   0000C0   E4           CLR     A
   \   0000C1   3400         ADDC    A,#0x0
   \   0000C3   FB           MOV     R3,A
   \   0000C4   79A2         MOV     R1,#-0x5e
   \   0000C6   12....       LCALL   ??APSME_GetRequest?relay
   1534                pList++;
   \   0000C9   7403         MOV     A,#0x3
   \   0000CB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CE   E0           MOVX    A,@DPTR
   \   0000CF   2415         ADD     A,#0x15
   \   0000D1   F8           MOV     R0,A
   \   0000D2   A3           INC     DPTR
   \   0000D3   E0           MOVX    A,@DPTR
   \   0000D4   3400         ADDC    A,#0x0
   \   0000D6   F9           MOV     R1,A
   \   0000D7   7403         MOV     A,#0x3
   \   0000D9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DC   12....       LCALL   ??Subroutine217_0 & 0xFFFF
   1535              }
   \                     ??CrossCallReturnLabel_390:
   \   0000DF   05..         INC     ?V0 + 0
   \   0000E1   80BE         SJMP    ??ZDO_ProcessMgmtBindReq_3
   1536              
   1537            }
   1538            else
   1539            {
   1540              status = ZDP_NOT_PERMITTED;
   \                     ??ZDO_ProcessMgmtBindReq_0:
   \   0000E3   75..8B       MOV     ?V0 + 1,#-0x75
   1541              numItems = 0;
   \   0000E6   7E00         MOV     R6,#0x0
   1542            }
   1543          
   1544            // Send response
   1545            ZDP_MgmtBindRsp( inMsg->TransSeq, &(inMsg->srcAddr), status, (byte)maxNumItems, StartIndex,
   1546                             (byte)numItems, (apsBindingItem_t *)pBuf, false );
   \                     ??ZDO_ProcessMgmtBindReq_4:
   \   0000E8                ; Setup parameters for call to function ZDP_MgmtBindRsp
   \   0000E8   75..00       MOV     ?V0 + 0,#0x0
   \   0000EB   78..         MOV     R0,#?V0 + 0
   \   0000ED   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000F0   78..         MOV     R0,#?V0 + 4
   \   0000F2   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000F5   EE           MOV     A,R6
   \   0000F6   F5..         MOV     ?V0 + 0,A
   \   0000F8   78..         MOV     R0,#?V0 + 0
   \   0000FA   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000FD   7404         MOV     A,#0x4
   \   0000FF   12....       LCALL   ?XSTACK_DISP0_8
   \   000102   12....       LCALL   ??Subroutine225_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_424:
   \   000105   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000108   7406         MOV     A,#0x6
   \   00010A   12....       LCALL   ?XSTACK_DISP0_8
   \   00010D   E0           MOVX    A,@DPTR
   \   00010E   FD           MOV     R5,A
   \   00010F   AC..         MOV     R4,?V0 + 1
   \   000111   740A         MOV     A,#0xa
   \   000113   12....       LCALL   ?XSTACK_DISP0_8
   \   000116   12....       LCALL   ?Subroutine103 & 0xFFFF
   \                     ??CrossCallReturnLabel_198:
   \   000119   12....       LCALL   ?XSTACK_DISP0_8
   \   00011C   12....       LCALL   ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_133:
   \   00011F   12....       LCALL   ??ZDP_MgmtBindRsp?relay
   \   000122   7405         MOV     A,#0x5
   \   000124   12....       LCALL   ?DEALLOC_XSTACK8
   1547          
   1548            if ( pBuf )
   \   000127   E5..         MOV     A,?V0 + 4
   \   000129   45..         ORL     A,?V0 + 5
   \   00012B   6007         JZ      ??ZDO_ProcessMgmtBindReq_5
   1549            {
   1550              osal_mem_free( pBuf );
   \   00012D                ; Setup parameters for call to function osal_mem_free
   \   00012D   AA..         MOV     R2,?V0 + 4
   \   00012F   AB..         MOV     R3,?V0 + 5
   \   000131   12....       LCALL   ??osal_mem_free?relay
   1551            }
   1552          #else
   1553            (void)inMsg;
   1554          #endif
   1555          }
   \                     ??ZDO_ProcessMgmtBindReq_5:
   \   000134   02....       LJMP    ?Subroutine5 & 0xFFFF
   1556          
   1557          /*********************************************************************
   1558           * @fn          ZDO_ProcessMgmtDirectJoinReq
   1559           *
   1560           * @brief       This function finishes the processing of the Management
   1561           *              Direct Join Request and generates the response.
   1562           *
   1563           * @param       inMsg - incoming message (request)
   1564           *
   1565           * @return      none
   1566           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1567          void ZDO_ProcessMgmtDirectJoinReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtDirectJoinReq:
   1568          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine126 & 0xFFFF
   1569            uint8 *deviceAddr;
   1570            uint8 capInfo;
   1571            uint8 stat;
   1572          
   1573            // Parse the message
   1574            deviceAddr = inMsg->asdu;
   1575            capInfo = inMsg->asdu[Z_EXTADDR_LEN];
   1576          
   1577            stat = (byte) NLME_DirectJoinRequest( deviceAddr, capInfo );
   \                     ??CrossCallReturnLabel_237:
   \   00000D   12....       LCALL   ??Subroutine228_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_452:
   \   000010                ; Setup parameters for call to function NLME_DirectJoinRequest
   \   000010   8A82         MOV     DPL,R2
   \   000012   8B83         MOV     DPH,R3
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F9           MOV     R1,A
   \   00001E   12....       LCALL   ??NLME_DirectJoinRequest?relay
   \   000021   E9           MOV     A,R1
   \   000022   85..82       MOV     DPL,?XSP + 0
   \   000025   85..83       MOV     DPH,?XSP + 1
   \   000028   F0           MOVX    @DPTR,A
   1578          
   1579            ZDP_MgmtDirectJoinRsp( inMsg->TransSeq, &(inMsg->srcAddr), stat, false );
   \   000029                ; Setup parameters for call to function ZDP_SendData
   \   000029   75..00       MOV     ?V0 + 0,#0x0
   \   00002C   78..         MOV     R0,#?V0 + 0
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000031   7401         MOV     A,#0x1
   \   000033   12....       LCALL   ?XSTACK_DISP0_8
   \   000036   8582..       MOV     ?V0 + 0,DPL
   \   000039   8583..       MOV     ?V0 + 1,DPH
   \   00003C   78..         MOV     R0,#?V0 + 0
   \   00003E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000041   75..35       MOV     ?V0 + 0,#0x35
   \   000044   75..80       MOV     ?V0 + 1,#-0x80
   \   000047   78..         MOV     R0,#?V0 + 0
   \   000049   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004C   7901         MOV     R1,#0x1
   \   00004E   EE           MOV     A,R6
   \   00004F   2402         ADD     A,#0x2
   \   000051   FC           MOV     R4,A
   \   000052   EF           MOV     A,R7
   \   000053   3400         ADDC    A,#0x0
   \   000055   FD           MOV     R5,A
   \   000056   12....       LCALL   ?Subroutine127 & 0xFFFF
   \                     ??CrossCallReturnLabel_438:
   \   000059   12....       LCALL   ?DEALLOC_XSTACK8
   1580          }
   \   00005C                REQUIRE ?Subroutine7
   \   00005C                ; // Fall through to label ?Subroutine7

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   7401         MOV     A,#0x1
   \   000002   02....       LJMP    ??Subroutine204_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine127:
   \   000000   EE           MOV     A,R6
   \   000001   240F         ADD     A,#0xf
   \   000003   FA           MOV     R2,A
   \   000004   EF           MOV     A,R7
   \   000005                REQUIRE ??Subroutine227_0
   \   000005                ; // Fall through to label ??Subroutine227_0
   1581          
   1582          /*********************************************************************
   1583           * @fn          ZDO_ProcessMgmtLeaveReq
   1584           *
   1585           * @brief       This function processes a Management Leave Request
   1586           *              and generates the response.
   1587           *
   1588           * @param       inMsg - incoming message (request)
   1589           *
   1590           * @return      none
   1591           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine123:
   \   000000   12....       LCALL   ?Subroutine177 & 0xFFFF
   \                     ??CrossCallReturnLabel_306:
   \   000003                REQUIRE ??Subroutine209_0
   \   000003                ; // Fall through to label ??Subroutine209_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1592          void ZDO_ProcessMgmtLeaveReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtLeaveReq:
   1593          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV     A,#-0x6
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 0,R2
   \   00000C   8B..         MOV     ?V0 + 1,R3
   1594            NLME_LeaveReq_t req;
   1595            ZStatus_t       status;
   1596            uint8           option;
   1597            uint8 *msg = inMsg->asdu;
   \   00000E   12....       LCALL   ?Subroutine123 & 0xFFFF
   1598          
   1599            if ( ( AddrMgrExtAddrValid( msg ) == FALSE                 ) ||
   1600                 ( osal_ExtAddrEqual( msg, NLME_GetExtAddr() ) == TRUE )    )
   \                     ??CrossCallReturnLabel_361:
   \   000011                ; Setup parameters for call to function AddrMgrExtAddrValid
   \   000011   EE           MOV     A,R6
   \   000012   FA           MOV     R2,A
   \   000013   EF           MOV     A,R7
   \   000014   FB           MOV     R3,A
   \   000015   12....       LCALL   ??AddrMgrExtAddrValid?relay
   \   000018   E9           MOV     A,R1
   \   000019   6013         JZ      ??ZDO_ProcessMgmtLeaveReq_0
   \   00001B                ; Setup parameters for call to function sAddrExtCmp
   \   00001B                ; Setup parameters for call to function NLME_GetExtAddr
   \   00001B   12....       LCALL   ??NLME_GetExtAddr?relay
   \   00001E   EA           MOV     A,R2
   \   00001F   FC           MOV     R4,A
   \   000020   EB           MOV     A,R3
   \   000021   FD           MOV     R5,A
   \   000022   EE           MOV     A,R6
   \   000023   FA           MOV     R2,A
   \   000024   EF           MOV     A,R7
   \   000025   FB           MOV     R3,A
   \   000026   12....       LCALL   ??sAddrExtCmp?relay
   \   000029   E9           MOV     A,R1
   \   00002A   6401         XRL     A,#0x1
   \   00002C   700A         JNZ     ??ZDO_ProcessMgmtLeaveReq_1
   1601            {
   1602              // Remove this device
   1603              req.extAddr = NULL;
   \                     ??ZDO_ProcessMgmtLeaveReq_0:
   \   00002E   7401         MOV     A,#0x1
   \   000030   12....       LCALL   ?XSTACK_DISP0_8
   \   000033   E4           CLR     A
   \   000034   F0           MOVX    @DPTR,A
   \   000035   A3           INC     DPTR
   \   000036   8009         SJMP    ??ZDO_ProcessMgmtLeaveReq_2
   1604            }
   1605            else
   1606            {
   1607              // Remove child device
   1608              req.extAddr = msg;
   \                     ??ZDO_ProcessMgmtLeaveReq_1:
   \   000038   7401         MOV     A,#0x1
   \   00003A   12....       LCALL   ?XSTACK_DISP0_8
   \   00003D   EE           MOV     A,R6
   \   00003E   F0           MOVX    @DPTR,A
   \   00003F   A3           INC     DPTR
   \   000040   EF           MOV     A,R7
   1609            }
   \                     ??ZDO_ProcessMgmtLeaveReq_2:
   \   000041   12....       LCALL   ?Subroutine49 & 0xFFFF
   1610            
   1611            option = msg[Z_EXTADDR_LEN];
   \                     ??CrossCallReturnLabel_92:
   \   000044   A3           INC     DPTR
   \   000045   A3           INC     DPTR
   \   000046   A3           INC     DPTR
   \   000047   A3           INC     DPTR
   \   000048   A3           INC     DPTR
   \   000049   A3           INC     DPTR
   \   00004A   A3           INC     DPTR
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   F8           MOV     R0,A
   1612            if ( option & ZDP_MGMT_LEAVE_REQ_RC )
   \   00004D   A2E6         MOV     C,0xE0 /* A   */.6
   \   00004F   5008         JNC     ??ZDO_ProcessMgmtLeaveReq_3
   1613            {
   1614              req.removeChildren = TRUE;
   \   000051   7403         MOV     A,#0x3
   \   000053   12....       LCALL   ?XSTACK_DISP0_8
   \   000056   7401         MOV     A,#0x1
   \   000058   F0           MOVX    @DPTR,A
   1615            }
   1616            
   1617            if ( option & ZDP_MGMT_LEAVE_REQ_REJOIN )
   \                     ??ZDO_ProcessMgmtLeaveReq_3:
   \   000059   E8           MOV     A,R0
   \   00005A   A2E7         MOV     C,0xE0 /* A   */.7
   \   00005C   5008         JNC     ??ZDO_ProcessMgmtLeaveReq_4
   1618            {
   1619               req.rejoin = TRUE;
   \   00005E   7404         MOV     A,#0x4
   \   000060   12....       LCALL   ?XSTACK_DISP0_8
   \   000063   7401         MOV     A,#0x1
   \   000065   F0           MOVX    @DPTR,A
   1620            }
   1621          
   1622            req.silent = FALSE;
   \                     ??ZDO_ProcessMgmtLeaveReq_4:
   \   000066   7405         MOV     A,#0x5
   \   000068   12....       LCALL   ?XSTACK_DISP0_8
   \   00006B   E4           CLR     A
   \   00006C   F0           MOVX    @DPTR,A
   1623          
   1624            status = NLME_LeaveReq( &req );
   \   00006D                ; Setup parameters for call to function NLME_LeaveReq
   \   00006D   04           INC     A
   \   00006E   12....       LCALL   ?XSTACK_DISP0_8
   \   000071   AA82         MOV     R2,DPL
   \   000073   AB83         MOV     R3,DPH
   \   000075   12....       LCALL   ??NLME_LeaveReq?relay
   \   000078   E9           MOV     A,R1
   \   000079   85..82       MOV     DPL,?XSP + 0
   \   00007C   85..83       MOV     DPH,?XSP + 1
   \   00007F   F0           MOVX    @DPTR,A
   1625          
   1626            ZDP_MgmtLeaveRsp( inMsg->TransSeq, &(inMsg->srcAddr), status, FALSE );
   \   000080                ; Setup parameters for call to function ZDP_SendData
   \   000080   75..00       MOV     ?V0 + 2,#0x0
   \   000083   78..         MOV     R0,#?V0 + 2
   \   000085   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000088   7401         MOV     A,#0x1
   \   00008A   12....       LCALL   ?XSTACK_DISP0_8
   \   00008D   8582..       MOV     ?V0 + 2,DPL
   \   000090   8583..       MOV     ?V0 + 3,DPH
   \   000093   78..         MOV     R0,#?V0 + 2
   \   000095   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000098   75..34       MOV     ?V0 + 2,#0x34
   \   00009B   75..80       MOV     ?V0 + 3,#-0x80
   \   00009E   78..         MOV     R0,#?V0 + 2
   \   0000A0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A3   7901         MOV     R1,#0x1
   \   0000A5   E5..         MOV     A,?V0 + 0
   \   0000A7   2402         ADD     A,#0x2
   \   0000A9   FC           MOV     R4,A
   \   0000AA   E5..         MOV     A,?V0 + 1
   \   0000AC   3400         ADDC    A,#0x0
   \   0000AE   FD           MOV     R5,A
   \   0000AF   E5..         MOV     A,?V0 + 0
   \   0000B1   240F         ADD     A,#0xf
   \   0000B3   FA           MOV     R2,A
   \   0000B4   E5..         MOV     A,?V0 + 1
   \   0000B6   12....       LCALL   ??Subroutine227_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_441:
   \   0000B9   12....       LCALL   ?DEALLOC_XSTACK8
   1627          }
   \   0000BC   7406         MOV     A,#0x6
   \   0000BE   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000C1   02....       LJMP    ?Subroutine2 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine177:
   \   000000   12....       LCALL   ?Subroutine197 & 0xFFFF
   \                     ??CrossCallReturnLabel_333:
   \   000003   22           RET
   1628          
   1629          
   1630          /*********************************************************************
   1631           * @fn          ZDO_ProcessMgmtPermitJoinReq
   1632           *
   1633           * @brief       This function processes a Management Permit Join Request
   1634           *              and generates the response.
   1635           *
   1636           * @param       inMsg - incoming message (request)
   1637           *
   1638           * @return      none
   1639           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1640          void ZDO_ProcessMgmtPermitJoinReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtPermitJoinReq:
   1641          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine126 & 0xFFFF
   1642            uint8 stat;
   1643            uint8 duration;
   1644            uint8 tcsig;
   1645          
   1646            duration = inMsg->asdu[ZDP_MGMT_PERMIT_JOIN_REQ_DURATION];
   1647            tcsig    = inMsg->asdu[ZDP_MGMT_PERMIT_JOIN_REQ_TC_SIG];
   1648          
   1649            // Set the network layer permit join duration
   1650            stat = (byte) NLME_PermitJoiningRequest( duration );
   \                     ??CrossCallReturnLabel_238:
   \   00000D   12....       LCALL   ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_156:
   \   000010   F9           MOV     R1,A
   \   000011   12....       LCALL   ??NLME_PermitJoiningRequest?relay
   \   000014   E9           MOV     A,R1
   \   000015   85..82       MOV     DPL,?XSP + 0
   \   000018   85..83       MOV     DPH,?XSP + 1
   \   00001B   F0           MOVX    @DPTR,A
   1651          
   1652            // Handle the Trust Center Significance
   1653            if ( ZG_SECURE_ENABLED && ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1654            {
   1655              if ( tcsig == TRUE )
   1656              {
   1657                ZDSecMgrPermitJoining( duration );
   1658              }
   1659            }
   1660          
   1661            // Send a response if unicast
   1662            if (inMsg->srcAddr.addr.shortAddr != NWK_BROADCAST_SHORTADDR)
   \   00001C   EE           MOV     A,R6
   \   00001D   2402         ADD     A,#0x2
   \   00001F   FC           MOV     R4,A
   \   000020   EF           MOV     A,R7
   \   000021   3400         ADDC    A,#0x0
   \   000023   FD           MOV     R5,A
   \   000024   8C82         MOV     DPL,R4
   \   000026   8D83         MOV     DPH,R5
   \   000028   E0           MOVX    A,@DPTR
   \   000029   F4           CPL     A
   \   00002A   7003         JNZ     ??ZDO_ProcessMgmtPermitJoinReq_0
   \   00002C   A3           INC     DPTR
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   F4           CPL     A
   \                     ??ZDO_ProcessMgmtPermitJoinReq_0:
   \   00002F   602B         JZ      ??ZDO_ProcessMgmtPermitJoinReq_1
   1663            {
   1664              ZDP_MgmtPermitJoinRsp( inMsg->TransSeq, &(inMsg->srcAddr), stat, false );
   \   000031                ; Setup parameters for call to function ZDP_SendData
   \   000031   75..00       MOV     ?V0 + 0,#0x0
   \   000034   78..         MOV     R0,#?V0 + 0
   \   000036   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000039   7401         MOV     A,#0x1
   \   00003B   12....       LCALL   ?XSTACK_DISP0_8
   \   00003E   8582..       MOV     ?V0 + 0,DPL
   \   000041   8583..       MOV     ?V0 + 1,DPH
   \   000044   78..         MOV     R0,#?V0 + 0
   \   000046   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000049   75..36       MOV     ?V0 + 0,#0x36
   \   00004C   75..80       MOV     ?V0 + 1,#-0x80
   \   00004F   78..         MOV     R0,#?V0 + 0
   \   000051   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000054   7901         MOV     R1,#0x1
   \   000056   12....       LCALL   ?Subroutine127 & 0xFFFF
   1665            }
   \                     ??CrossCallReturnLabel_439:
   \   000059   12....       LCALL   ?DEALLOC_XSTACK8
   1666          }
   \                     ??ZDO_ProcessMgmtPermitJoinReq_1:
   \   00005C   02....       LJMP    ?Subroutine7 & 0xFFFF
   1667          
   1668          /*
   1669           * This function stub allows the next higher layer to be notified of
   1670           * a permit joining timeout.
   1671           */
   1672          /*********************************************************************
   1673           * @fn          ZDO_ProcessMgmtPermitJoinTimeout
   1674           *
   1675           * @brief       This function stub allows the next higher layer to be
   1676           *              notified of a permit joining timeout. Currently, this
   1677           *              directly bypasses the APS layer.
   1678           *
   1679           * @param       none
   1680           *
   1681           * @return      none
   1682           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1683          void ZDO_ProcessMgmtPermitJoinTimeout( void )
   \                     NLME_PermitJoiningTimeout:
   1684          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   1685            #if defined( ZDO_MGMT_PERMIT_JOIN_RESPONSE )
   1686            // Currently, only the ZDSecMgr needs to be notified
   1687            if ( ZG_SECURE_ENABLED && ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1688            {
   1689              ZDSecMgrPermitJoiningTimeout();
   1690            }
   1691            #endif
   1692          }
   \   000000   02....       LJMP    ?BRET
   1693          
   1694          /*********************************************************************
   1695           * @fn          ZDO_ProcessUserDescReq
   1696           *
   1697           * @brief       This function finishes the processing of the User
   1698           *              Descriptor Request and generates the response.
   1699           *
   1700           * @param       inMsg - incoming message (request)
   1701           *
   1702           * @return      none
   1703           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1704          void ZDO_ProcessUserDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessUserDescReq:
   1705          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV     A,#-0x11
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 0,R2
   \   00000C   8B..         MOV     ?V0 + 1,R3
   1706            uint16 aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \   00000E   12....       LCALL   ?Subroutine69 & 0xFFFF
   1707            UserDescriptorFormat_t userDesc;
   1708          
   1709            if ( (aoi == ZDAppNwkAddr.addr.shortAddr) && (ZSUCCESS == osal_nv_read(
   1710                       ZCD_NV_USERDESC, 0, sizeof(UserDescriptorFormat_t), &userDesc )) )
   \                     ??CrossCallReturnLabel_135:
   \   000011   E5..         MOV     A,?V0 + 0
   \   000013   240F         ADD     A,#0xf
   \   000015   F5..         MOV     ?V0 + 6,A
   \   000017   EB           MOV     A,R3
   \   000018   3400         ADDC    A,#0x0
   \   00001A   F5..         MOV     ?V0 + 7,A
   \   00001C   E5..         MOV     A,?V0 + 0
   \   00001E   2402         ADD     A,#0x2
   \   000020   F5..         MOV     ?V0 + 2,A
   \   000022   EB           MOV     A,R3
   \   000023   3400         ADDC    A,#0x0
   \   000025   F5..         MOV     ?V0 + 3,A
   \   000027   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   6E           XRL     A,R6
   \   00002C   7003         JNZ     ??ZDO_ProcessUserDescReq_0
   \   00002E   A3           INC     DPTR
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   6F           XRL     A,R7
   \                     ??ZDO_ProcessUserDescReq_0:
   \   000031   7061         JNZ     ??ZDO_ProcessUserDescReq_1
   \   000033                ; Setup parameters for call to function osal_nv_read
   \   000033   85..82       MOV     DPL,?XSP + 0
   \   000036   85..83       MOV     DPH,?XSP + 1
   \   000039   8582..       MOV     ?V0 + 4,DPL
   \   00003C   8583..       MOV     ?V0 + 5,DPH
   \   00003F   78..         MOV     R0,#?V0 + 4
   \   000041   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000044   75..11       MOV     ?V0 + 4,#0x11
   \   000047   75..00       MOV     ?V0 + 5,#0x0
   \   00004A   78..         MOV     R0,#?V0 + 4
   \   00004C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004F   7C00         MOV     R4,#0x0
   \   000051   7D00         MOV     R5,#0x0
   \   000053   7A81         MOV     R2,#-0x7f
   \   000055   7B00         MOV     R3,#0x0
   \   000057   12....       LCALL   ??osal_nv_read?relay
   \   00005A   7404         MOV     A,#0x4
   \   00005C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00005F   E9           MOV     A,R1
   \   000060   7032         JNZ     ??ZDO_ProcessUserDescReq_1
   1711            {
   1712              ZDP_UserDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), aoi, &userDesc, false );
   \   000062                ; Setup parameters for call to function ZDP_UserDescRsp
   \   000062   75..00       MOV     ?V0 + 0,#0x0
   \   000065   78..         MOV     R0,#?V0 + 0
   \   000067   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00006A   7401         MOV     A,#0x1
   \   00006C   12....       LCALL   ?XSTACK_DISP0_8
   \   00006F   8582..       MOV     ?V0 + 0,DPL
   \   000072   8583..       MOV     ?V0 + 1,DPH
   \   000075   78..         MOV     R0,#?V0 + 0
   \   000077   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007A   EE           MOV     A,R6
   \   00007B   FC           MOV     R4,A
   \   00007C   EF           MOV     A,R7
   \   00007D   FD           MOV     R5,A
   \   00007E   AA..         MOV     R2,?V0 + 2
   \   000080   AB..         MOV     R3,?V0 + 3
   \   000082   85..82       MOV     DPL,?V0 + 6
   \   000085   85..83       MOV     DPH,?V0 + 7
   \   000088   E0           MOVX    A,@DPTR
   \   000089   F9           MOV     R1,A
   \   00008A   12....       LCALL   ??ZDP_UserDescRsp?relay
   \   00008D   7403         MOV     A,#0x3
   \   00008F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000092   8035         SJMP    ??ZDO_ProcessUserDescReq_2
   1713            }
   1714            else
   1715            {
   1716              ZDP_GenericRsp(inMsg->TransSeq, &(inMsg->srcAddr), 
   1717                     ZDP_NOT_SUPPORTED, aoi, User_Desc_rsp, inMsg->SecurityUse );
   \                     ??ZDO_ProcessUserDescReq_1:
   \   000094                ; Setup parameters for call to function ZDP_GenericRsp
   \   000094   75..11       MOV     ?V0 + 4,#0x11
   \   000097   75..80       MOV     ?V0 + 5,#-0x80
   \   00009A   78..         MOV     R0,#?V0 + 4
   \   00009C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00009F   8E..         MOV     ?V0 + 4,R6
   \   0000A1   8F..         MOV     ?V0 + 5,R7
   \   0000A3   78..         MOV     R0,#?V0 + 4
   \   0000A5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A8   E5..         MOV     A,?V0 + 0
   \   0000AA   12....       LCALL   ??Subroutine242_0 & 0xFFFF
   1718            }
   \                     ??CrossCallReturnLabel_581:
   \   0000AD   E5..         MOV     A,?V0 + 1
   \   0000AF   12....       LCALL   ??Subroutine226_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_432:
   \   0000B2   FD           MOV     R5,A
   \   0000B3   7C84         MOV     R4,#-0x7c
   \   0000B5   AA..         MOV     R2,?V0 + 2
   \   0000B7   AB..         MOV     R3,?V0 + 3
   \   0000B9   85..82       MOV     DPL,?V0 + 6
   \   0000BC   85..83       MOV     DPH,?V0 + 7
   \   0000BF   E0           MOVX    A,@DPTR
   \   0000C0   F9           MOV     R1,A
   \   0000C1   12....       LCALL   ??ZDP_GenericRsp?relay
   \   0000C4   7404         MOV     A,#0x4
   \   0000C6   12....       LCALL   ?DEALLOC_XSTACK8
   1719          }
   \                     ??ZDO_ProcessUserDescReq_2:
   \   0000C9   7411         MOV     A,#0x11
   \   0000CB   02....       LJMP    ?Subroutine6 & 0xFFFF
   1720          
   1721          /*********************************************************************
   1722           * @fn          ZDO_ProcessUserDescSet
   1723           *
   1724           * @brief       This function finishes the processing of the User
   1725           *              Descriptor Set and generates the response.
   1726           *
   1727           * @param       inMsg - incoming message (request)
   1728           *
   1729           * @return      none
   1730           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1731          void ZDO_ProcessUserDescSet( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessUserDescSet:
   1732          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 4,R2
   \   00000C   8B..         MOV     ?V0 + 5,R3
   1733            uint8 *msg;
   1734            uint16 aoi;
   1735            UserDescriptorFormat_t userDesc;
   1736            uint8 outMsg[3];
   1737            uint8 status;
   1738          
   1739            msg = inMsg->asdu;
   \   00000E   12....       LCALL   ?Subroutine178 & 0xFFFF
   \                     ??CrossCallReturnLabel_307:
   \   000011   12....       LCALL   ?Subroutine86 & 0xFFFF
   1740            aoi = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_167:
   \   000014   2400         ADD     A,#0x0
   \   000016   FE           MOV     R6,A
   \   000017   E4           CLR     A
   \   000018   3B           ADDC    A,R3
   \   000019   FF           MOV     R7,A
   1741          
   1742            if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \   00001A   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   6E           XRL     A,R6
   \   00001F   7003         JNZ     ??ZDO_ProcessUserDescSet_0
   \   000021   A3           INC     DPTR
   \   000022   E0           MOVX    A,@DPTR
   \   000023   6F           XRL     A,R7
   \                     ??ZDO_ProcessUserDescSet_0:
   \   000024   6003         JZ      $+5
   \   000026   02....       LJMP    ??ZDO_ProcessUserDescSet_1 & 0xFFFF
   1743            {
   1744              userDesc.len = (msg[2] < AF_MAX_USER_DESCRIPTOR_LEN) ? msg[2] : AF_MAX_USER_DESCRIPTOR_LEN;
   \   000029   8882         MOV     DPL,R0
   \   00002B   8983         MOV     DPH,R1
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   FA           MOV     R2,A
   \   000031   9410         SUBB    A,#0x10
   \   000033   5004         JNC     ??ZDO_ProcessUserDescSet_2
   \   000035   8A..         MOV     ?V0 + 3,R2
   \   000037   8003         SJMP    ??ZDO_ProcessUserDescSet_3
   \                     ??ZDO_ProcessUserDescSet_2:
   \   000039   75..10       MOV     ?V0 + 3,#0x10
   \                     ??ZDO_ProcessUserDescSet_3:
   \   00003C   7404         MOV     A,#0x4
   \   00003E   12....       LCALL   ?XSTACK_DISP0_8
   \   000041   E5..         MOV     A,?V0 + 3
   \   000043   12....       LCALL   ?Subroutine51 & 0xFFFF
   1745              msg ++;  // increment one for the length field
   1746              
   1747              osal_memcpy( userDesc.desc, &msg[2], userDesc.len );
   \                     ??CrossCallReturnLabel_97:
   \   000046   A3           INC     DPTR
   \   000047   A3           INC     DPTR
   \   000048   A982         MOV     R1,DPL
   \   00004A   AA83         MOV     R2,DPH
   \   00004C   89..         MOV     ?V0 + 0,R1
   \   00004E   8A..         MOV     ?V0 + 1,R2
   \   000050   75..00       MOV     ?V0 + 2,#0x0
   \   000053   78..         MOV     R0,#?V0 + 0
   \   000055   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000058   7407         MOV     A,#0x7
   \   00005A   12....       LCALL   ?XSTACK_DISP0_8
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   FC           MOV     R4,A
   \   00005F   7D00         MOV     R5,#0x0
   \   000061   7408         MOV     A,#0x8
   \   000063   12....       LCALL   ?XSTACK_DISP0_8
   \   000066   AA82         MOV     R2,DPL
   \   000068   AB83         MOV     R3,DPH
   \   00006A   12....       LCALL   ??Subroutine233_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_498:
   \   00006D   12....       LCALL   ?DEALLOC_XSTACK8
   1748              osal_nv_write( ZCD_NV_USERDESC, 0, sizeof(UserDescriptorFormat_t), &userDesc );
   \   000070                ; Setup parameters for call to function osal_nv_write
   \   000070   7404         MOV     A,#0x4
   \   000072   12....       LCALL   ?XSTACK_DISP0_8
   \   000075   8582..       MOV     ?V0 + 0,DPL
   \   000078   8583..       MOV     ?V0 + 1,DPH
   \   00007B   78..         MOV     R0,#?V0 + 0
   \   00007D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000080   75..11       MOV     ?V0 + 0,#0x11
   \   000083   75..00       MOV     ?V0 + 1,#0x0
   \   000086   78..         MOV     R0,#?V0 + 0
   \   000088   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00008B   7C00         MOV     R4,#0x0
   \   00008D   7D00         MOV     R5,#0x0
   \   00008F   7A81         MOV     R2,#-0x7f
   \   000091   7B00         MOV     R3,#0x0
   \   000093   12....       LCALL   ??osal_nv_write?relay
   \   000096   7404         MOV     A,#0x4
   \   000098   12....       LCALL   ?DEALLOC_XSTACK8
   1749              if ( userDesc.len != 0 )
   \   00009B   7404         MOV     A,#0x4
   \   00009D   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A0   E0           MOVX    A,@DPTR
   \   0000A1   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   0000A4   6005         JZ      ??ZDO_ProcessUserDescSet_4
   1750              {
   1751                ZDO_Config_Node_Descriptor.UserDescAvail = TRUE;
   \   0000A6   E0           MOVX    A,@DPTR
   \   0000A7   D2E4         SETB    0xE0 /* A   */.4
   \   0000A9   8003         SJMP    ??ZDO_ProcessUserDescSet_5
   1752              }
   1753              else
   1754              {
   1755                ZDO_Config_Node_Descriptor.UserDescAvail = FALSE;
   \                     ??ZDO_ProcessUserDescSet_4:
   \   0000AB   E0           MOVX    A,@DPTR
   \   0000AC   C2E4         CLR     0xE0 /* A   */.4
   1756              }
   1757          
   1758              status = ZDP_SUCCESS;
   1759            }
   \                     ??ZDO_ProcessUserDescSet_5:
   \   0000AE   12....       LCALL   ?Subroutine200 & 0xFFFF
   \                     ??CrossCallReturnLabel_338:
   \   0000B1   E4           CLR     A
   \   0000B2   8008         SJMP    ??ZDO_ProcessUserDescSet_6
   1760            else
   1761            {
   1762              status =  ZDP_NOT_SUPPORTED;
   \                     ??ZDO_ProcessUserDescSet_1:
   \   0000B4   85..82       MOV     DPL,?XSP + 0
   \   0000B7   85..83       MOV     DPH,?XSP + 1
   \   0000BA   7484         MOV     A,#-0x7c
   \                     ??ZDO_ProcessUserDescSet_6:
   \   0000BC   F0           MOVX    @DPTR,A
   1763            }
   1764          
   1765            outMsg[0] = status;
   \   0000BD   E0           MOVX    A,@DPTR
   \   0000BE   C0E0         PUSH    A
   \   0000C0   7401         MOV     A,#0x1
   \   0000C2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C5   D0E0         POP     A
   \   0000C7   F0           MOVX    @DPTR,A
   1766            outMsg[1] = LO_UINT16( aoi );
   \   0000C8   7402         MOV     A,#0x2
   \   0000CA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CD   EE           MOV     A,R6
   \   0000CE   F0           MOVX    @DPTR,A
   1767            outMsg[2] = LO_UINT16( aoi );
   \   0000CF   7403         MOV     A,#0x3
   \   0000D1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D4   EE           MOV     A,R6
   \   0000D5   F0           MOVX    @DPTR,A
   1768          
   1769            ZDP_SendData( &(inMsg->TransSeq), &(inMsg->srcAddr), User_Desc_conf, 3, outMsg, 
   1770                         inMsg->SecurityUse );
   \   0000D6                ; Setup parameters for call to function ZDP_SendData
   \   0000D6   E5..         MOV     A,?V0 + 4
   \   0000D8   12....       LCALL   ??Subroutine242_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_582:
   \   0000DB   E5..         MOV     A,?V0 + 5
   \   0000DD   12....       LCALL   ??Subroutine239_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_539:
   \   0000E0   12....       LCALL   ??Subroutine225_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_425:
   \   0000E3   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000E6   7402         MOV     A,#0x2
   \   0000E8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EB   8582..       MOV     ?V0 + 0,DPL
   \   0000EE   8583..       MOV     ?V0 + 1,DPH
   \   0000F1   78..         MOV     R0,#?V0 + 0
   \   0000F3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000F6   75..14       MOV     ?V0 + 0,#0x14
   \   0000F9   75..80       MOV     ?V0 + 1,#-0x80
   \   0000FC   78..         MOV     R0,#?V0 + 0
   \   0000FE   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000101   7903         MOV     R1,#0x3
   \   000103   12....       LCALL   ?Subroutine139 & 0xFFFF
   \                     ??CrossCallReturnLabel_250:
   \   000106   FA           MOV     R2,A
   \   000107   E5..         MOV     A,?V0 + 5
   \   000109   12....       LCALL   ??Subroutine227_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_442:
   \   00010C   12....       LCALL   ?DEALLOC_XSTACK8
   1771          }
   \   00010F   7415         MOV     A,#0x15
   \   000111   02....       LJMP    ??Subroutine259_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000   12....       LCALL   ?Subroutine153 & 0xFFFF
   \                     ??CrossCallReturnLabel_589:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine153:
   \   000000   12....       LCALL   ?Subroutine191 & 0xFFFF
   \                     ??CrossCallReturnLabel_601:
   \   000003   A3           INC     DPTR
   \   000004   22           RET
   1772          
   1773          /*********************************************************************
   1774           * @fn          ZDO_ProcessDeviceAnnce
   1775           *
   1776           * @brief       This function processes a device annouce message.
   1777           *
   1778           * @param       inMsg - incoming message
   1779           *
   1780           * @return      none
   1781           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1782          void ZDO_ProcessDeviceAnnce( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessDeviceAnnce:
   1783          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 32
   \   000005   74E0         MOV     A,#-0x20
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1784            ZDO_DeviceAnnce_t Annce;
   1785            AddrMgrEntry_t addrEntry;
   1786            uint8 parentExt[Z_EXTADDR_LEN];
   1787          
   1788            // Parse incoming message
   1789            ZDO_ParseDeviceAnnce( inMsg, &Annce );
   \   00000A                ; Setup parameters for call to function ZDO_ParseDeviceAnnce
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   AC82         MOV     R4,DPL
   \   000012   AD83         MOV     R5,DPH
   \   000014   12....       LCALL   ??ZDO_ParseDeviceAnnce?relay
   1790          
   1791            if ( ZSTACK_END_DEVICE_BUILD )
   1792            {
   1793              // Make sure the message didn't come from myself - end device only
   1794              if ( osal_ExtAddrEqual( NLME_GetExtAddr(), Annce.extAddr ) && Annce.nwkAddr == NLME_GetShortAddr() )
   \   000017                ; Setup parameters for call to function sAddrExtCmp
   \   000017   7402         MOV     A,#0x2
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   AE82         MOV     R6,DPL
   \   00001E   AF83         MOV     R7,DPH
   \   000020                ; Setup parameters for call to function NLME_GetExtAddr
   \   000020   12....       LCALL   ??NLME_GetExtAddr?relay
   \   000023   EE           MOV     A,R6
   \   000024   FC           MOV     R4,A
   \   000025   EF           MOV     A,R7
   \   000026   FD           MOV     R5,A
   \   000027   12....       LCALL   ??sAddrExtCmp?relay
   \   00002A   E9           MOV     A,R1
   \   00002B   601D         JZ      ??ZDO_ProcessDeviceAnnce_0
   \   00002D                ; Setup parameters for call to function NLME_GetShortAddr
   \   00002D   12....       LCALL   ??NLME_GetShortAddr?relay
   \   000030   8A..         MOV     ?V0 + 0,R2
   \   000032   8B..         MOV     ?V0 + 1,R3
   \   000034   A8..         MOV     R0,?V0 + 0
   \   000036   A9..         MOV     R1,?V0 + 1
   \   000038   85..82       MOV     DPL,?XSP + 0
   \   00003B   85..83       MOV     DPH,?XSP + 1
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   68           XRL     A,R0
   \   000040   7003         JNZ     ??ZDO_ProcessDeviceAnnce_1
   \   000042   A3           INC     DPTR
   \   000043   E0           MOVX    A,@DPTR
   \   000044   69           XRL     A,R1
   \                     ??ZDO_ProcessDeviceAnnce_1:
   \   000045   7003         JNZ     $+5
   \   000047   02....       LJMP    ??ZDO_ProcessDeviceAnnce_2 & 0xFFFF
   1795              {
   1796                return;
   1797              }
   1798            }
   1799            
   1800          #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
   1801            // Clean up the neighbor table
   1802            nwkNeighborRemoveAllStranded();
   \                     ??ZDO_ProcessDeviceAnnce_0:
   \   00004A                ; Setup parameters for call to function nwkNeighborRemoveAllStranded
   \   00004A   12....       LCALL   ??nwkNeighborRemoveAllStranded?relay
   1803            
   1804            // If address conflict is detected, no need to update the address manager
   1805            if ( NLME_CheckNewAddrSet( Annce.nwkAddr, Annce.extAddr )== ZFailure )
   \   00004D                ; Setup parameters for call to function NLME_CheckNewAddrSet
   \   00004D   7402         MOV     A,#0x2
   \   00004F   12....       LCALL   ?XSTACK_DISP0_8
   \   000052   AC82         MOV     R4,DPL
   \   000054   AD83         MOV     R5,DPH
   \   000056   85..82       MOV     DPL,?XSP + 0
   \   000059   85..83       MOV     DPH,?XSP + 1
   \   00005C   12....       LCALL   ??Subroutine228_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_453:
   \   00005F   12....       LCALL   ??NLME_CheckNewAddrSet?relay
   \   000062   E9           MOV     A,R1
   \   000063   6401         XRL     A,#0x1
   \   000065   7003         JNZ     $+5
   \   000067   02....       LJMP    ??ZDO_ProcessDeviceAnnce_2 & 0xFFFF
   1806            {
   1807              return;
   1808            }
   1809          #endif  
   1810          
   1811          #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
   1812            // Check for parent's address
   1813            NLME_GetCoordExtAddr( parentExt );
   \   00006A                ; Setup parameters for call to function NLME_GetCoordExtAddr
   \   00006A   740B         MOV     A,#0xb
   \   00006C   12....       LCALL   ?XSTACK_DISP0_8
   \   00006F   AA82         MOV     R2,DPL
   \   000071   AB83         MOV     R3,DPH
   \   000073   12....       LCALL   ??NLME_GetCoordExtAddr?relay
   1814            if ( osal_ExtAddrEqual( parentExt, Annce.extAddr ) )
   \   000076                ; Setup parameters for call to function sAddrExtCmp
   \   000076   7402         MOV     A,#0x2
   \   000078   12....       LCALL   ?XSTACK_DISP0_8
   \   00007B   AC82         MOV     R4,DPL
   \   00007D   AD83         MOV     R5,DPH
   \   00007F   740B         MOV     A,#0xb
   \   000081   12....       LCALL   ?XSTACK_DISP0_8
   \   000084   AA82         MOV     R2,DPL
   \   000086   AB83         MOV     R3,DPH
   \   000088   12....       LCALL   ??sAddrExtCmp?relay
   \   00008B   E9           MOV     A,R1
   \   00008C   6032         JZ      ??ZDO_ProcessDeviceAnnce_3
   1815            {
   1816              if ( Annce.nwkAddr != NLME_GetCoordShortAddr() )
   \   00008E                ; Setup parameters for call to function NLME_GetCoordShortAddr
   \   00008E   12....       LCALL   ??NLME_GetCoordShortAddr?relay
   \   000091   8A..         MOV     ?V0 + 0,R2
   \   000093   8B..         MOV     ?V0 + 1,R3
   \   000095   A8..         MOV     R0,?V0 + 0
   \   000097   A9..         MOV     R1,?V0 + 1
   \   000099   85..82       MOV     DPL,?XSP + 0
   \   00009C   85..83       MOV     DPH,?XSP + 1
   \   00009F   E0           MOVX    A,@DPTR
   \   0000A0   68           XRL     A,R0
   \   0000A1   7003         JNZ     ??ZDO_ProcessDeviceAnnce_4
   \   0000A3   A3           INC     DPTR
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   69           XRL     A,R1
   \                     ??ZDO_ProcessDeviceAnnce_4:
   \   0000A6   6018         JZ      ??ZDO_ProcessDeviceAnnce_3
   1817              {
   1818                // Set the Parent's MAC's new short address
   1819                _NIB.nwkCoordAddress = Annce.nwkAddr;
   \   0000A8   85..82       MOV     DPL,?XSP + 0
   \   0000AB   85..83       MOV     DPH,?XSP + 1
   \   0000AE   12....       LCALL   ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_414:
   \   0000B1   90....       MOV     DPTR,#_NIB + 23
   \   0000B4   12....       LCALL   ??Subroutine217_0 & 0xFFFF
   1820                ZMacSetReq( ZMacCoordShortAddress, (byte*)&(_NIB.nwkCoordAddress) );
   \                     ??CrossCallReturnLabel_391:
   \   0000B7                ; Setup parameters for call to function ZMacSetReq
   \   0000B7   7A..         MOV     R2,#(_NIB + 23) & 0xff
   \   0000B9   7B..         MOV     R3,#((_NIB + 23) >> 8) & 0xff
   \   0000BB   794B         MOV     R1,#0x4b
   \   0000BD   12....       LCALL   ??ZMacSetReq?relay
   1821              }
   1822            }
   1823            
   1824            if ( ZSTACK_ROUTER_BUILD )
   1825            {
   1826              // If the device annce comes from a end device child that has moved 
   1827              // to another parent, remove it from associated device list
   1828          
   1829              // If the dev annce is coming from other device's children,
   1830              // (The dev annce from its own children shall be unicast to itself, 
   1831              // So check the mac destination address)
   1832              // Remove it from the associated device list. If it is not
   1833              // a child, no action will be taken in AssocRemove() anyway.
   1834              if ( inMsg->macDestAddr != NLME_GetShortAddr() )
   1835              {
   1836                associated_devices_t *dev_ptr;
   1837          
   1838                // If it's an end device child
   1839                dev_ptr = AssocGetWithExt( Annce.extAddr );
   1840                if ( dev_ptr )
   1841                {
   1842                  if ( dev_ptr->nodeRelation == CHILD_RFD ||
   1843                       dev_ptr->nodeRelation == CHILD_RFD_RX_IDLE )
   1844                  {
   1845                    AssocRemove( Annce.extAddr );
   1846                  }        
   1847                }
   1848              }
   1849          
   1850              if ( Annce.nwkAddr != NLME_GetShortAddr() )
   1851              {
   1852                // If an associated device is found with matched extended Address, 
   1853                // update its short address
   1854                if ( AssocChangeNwkAddr( Annce.nwkAddr, Annce.extAddr ) )
   1855                {
   1856                  // Update the neighbor table
   1857                  nwkNeighborUpdateNwkAddr( Annce.nwkAddr, Annce.extAddr );
   1858                
   1859                  // Set event to save NV 
   1860                  ZDApp_NVUpdate();
   1861                }
   1862              }
   1863            }
   1864          #endif // ZIGBEE_STOCHASTIC_ADDRESSING
   1865            
   1866            
   1867            // Fill in the extended address in address manager if we don't have it already.
   1868            addrEntry.user = ADDRMGR_USER_DEFAULT;
   \                     ??ZDO_ProcessDeviceAnnce_3:
   \   0000C0   7413         MOV     A,#0x13
   \   0000C2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C5   E4           CLR     A
   \   0000C6   12....       LCALL   ?Subroutine53 & 0xFFFF
   1869            addrEntry.nwkAddr = Annce.nwkAddr;
   \                     ??CrossCallReturnLabel_102:
   \   0000C9   F8           MOV     R0,A
   \   0000CA   A3           INC     DPTR
   \   0000CB   E0           MOVX    A,@DPTR
   \   0000CC   F9           MOV     R1,A
   \   0000CD   7414         MOV     A,#0x14
   \   0000CF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D2   12....       LCALL   ??Subroutine217_0 & 0xFFFF
   1870            if ( AddrMgrEntryLookupNwk( &addrEntry ) )
   \                     ??CrossCallReturnLabel_392:
   \   0000D5                ; Setup parameters for call to function AddrMgrEntryLookupNwk
   \   0000D5   7413         MOV     A,#0x13
   \   0000D7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DA   AA82         MOV     R2,DPL
   \   0000DC   AB83         MOV     R3,DPH
   \   0000DE   12....       LCALL   ??AddrMgrEntryLookupNwk?relay
   \   0000E1   E9           MOV     A,R1
   \   0000E2   604B         JZ      ??ZDO_ProcessDeviceAnnce_2
   1871            {
   1872              osal_memset( parentExt, 0, Z_EXTADDR_LEN );
   \   0000E4                ; Setup parameters for call to function osal_memset
   \   0000E4   7C08         MOV     R4,#0x8
   \   0000E6   7D00         MOV     R5,#0x0
   \   0000E8   7900         MOV     R1,#0x0
   \   0000EA   740B         MOV     A,#0xb
   \   0000EC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EF   AA82         MOV     R2,DPL
   \   0000F1   AB83         MOV     R3,DPH
   \   0000F3   12....       LCALL   ??osal_memset?relay
   1873              if ( osal_ExtAddrEqual( parentExt, addrEntry.extAddr ) )
   \   0000F6                ; Setup parameters for call to function sAddrExtCmp
   \   0000F6   7416         MOV     A,#0x16
   \   0000F8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FB   AC82         MOV     R4,DPL
   \   0000FD   AD83         MOV     R5,DPH
   \   0000FF   740B         MOV     A,#0xb
   \   000101   12....       LCALL   ?XSTACK_DISP0_8
   \   000104   AA82         MOV     R2,DPL
   \   000106   AB83         MOV     R3,DPH
   \   000108   12....       LCALL   ??sAddrExtCmp?relay
   \   00010B   E9           MOV     A,R1
   \   00010C   6021         JZ      ??ZDO_ProcessDeviceAnnce_2
   1874              {
   1875                AddrMgrExtAddrSet( addrEntry.extAddr, Annce.extAddr );
   \   00010E                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   00010E   7402         MOV     A,#0x2
   \   000110   12....       LCALL   ?XSTACK_DISP0_8
   \   000113   AC82         MOV     R4,DPL
   \   000115   AD83         MOV     R5,DPH
   \   000117   7416         MOV     A,#0x16
   \   000119   12....       LCALL   ?XSTACK_DISP0_8
   \   00011C   AA82         MOV     R2,DPL
   \   00011E   AB83         MOV     R3,DPH
   \   000120   12....       LCALL   ??AddrMgrExtAddrSet?relay
   1876                AddrMgrEntryUpdate( &addrEntry );
   \   000123                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   000123   7413         MOV     A,#0x13
   \   000125   12....       LCALL   ?XSTACK_DISP0_8
   \   000128   AA82         MOV     R2,DPL
   \   00012A   AB83         MOV     R3,DPH
   \   00012C   12....       LCALL   ??AddrMgrEntryUpdate?relay
   \                     ??ZDO_ProcessDeviceAnnce_2:
   \   00012F   7420         MOV     A,#0x20
   1877              }
   1878            }
   \   000131   02....       LJMP    ??Subroutine204_0 & 0xFFFF
   1879          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000   12....       LCALL   ?Subroutine155 & 0xFFFF
   \                     ??CrossCallReturnLabel_271:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine155:
   \   000000   12....       LCALL   ?Subroutine192 & 0xFFFF
   \                     ??CrossCallReturnLabel_326:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine192:
   \   000000   12....       LCALL   ?Subroutine200 & 0xFFFF
   \                     ??CrossCallReturnLabel_339:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET
   1880          
   1881          /*********************************************************************
   1882           * @fn          ZDO_BuildSimpleDescBuf
   1883           *
   1884           * @brief       Build a byte sequence representation of a Simple Descriptor.
   1885           *
   1886           * @param       buf  - pointer to a byte array big enough for data.
   1887           * @param       desc - SimpleDescriptionFormat_t *
   1888           *
   1889           * @return      none
   1890           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1891          void ZDO_BuildSimpleDescBuf( uint8 *buf, SimpleDescriptionFormat_t *desc )
   \                     ZDO_BuildSimpleDescBuf:
   1892          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   1893            byte cnt;
   1894            uint16 *ptr;
   1895          
   1896            *buf++ = desc->EndPoint;
   \   000005   8C82         MOV     DPL,R4
   \   000007   8D83         MOV     DPH,R5
   \   000009   12....       LCALL   ?Subroutine104 & 0xFFFF
   1897            *buf++ = HI_UINT16( desc->AppProfId );
   \                     ??CrossCallReturnLabel_199:
   \   00000C   8C82         MOV     DPL,R4
   \   00000E   8D83         MOV     DPH,R5
   \   000010   A3           INC     DPTR
   \   000011   A882         MOV     R0,DPL
   \   000013   A983         MOV     R1,DPH
   \   000015   12....       LCALL   ?Subroutine20 & 0xFFFF
   1898            *buf++ = LO_UINT16( desc->AppProfId );
   1899            *buf++ = HI_UINT16( desc->AppDeviceId );
   \                     ??CrossCallReturnLabel_23:
   \   000018   EC           MOV     A,R4
   \   000019   2403         ADD     A,#0x3
   \   00001B   F8           MOV     R0,A
   \   00001C   ED           MOV     A,R5
   \   00001D   12....       LCALL   ?Subroutine198 & 0xFFFF
   \                     ??CrossCallReturnLabel_334:
   \   000020   12....       LCALL   ?Subroutine20 & 0xFFFF
   1900            *buf++ = LO_UINT16( desc->AppDeviceId );
   1901          
   1902            *buf++ = (byte)(desc->AppDevVer << 4);
   \                     ??CrossCallReturnLabel_24:
   \   000023   8C82         MOV     DPL,R4
   \   000025   8D83         MOV     DPH,R5
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   A3           INC     DPTR
   \   00002B   A3           INC     DPTR
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   C4           SWAP    A
   \   00002E   54F0         ANL     A,#0xf0
   \   000030   12....       LCALL   ??Subroutine230_0 & 0xFFFF
   1903          
   1904            *buf++ = desc->AppNumInClusters;
   \                     ??CrossCallReturnLabel_462:
   \   000033   EC           MOV     A,R4
   \   000034   2406         ADD     A,#0x6
   \   000036   12....       LCALL   ?Subroutine130 & 0xFFFF
   \                     ??CrossCallReturnLabel_460:
   \   000039   12....       LCALL   ?Subroutine150 & 0xFFFF
   1905            ptr = desc->pAppInClusterList;
   \                     ??CrossCallReturnLabel_463:
   \   00003C   8C82         MOV     DPL,R4
   \   00003E   8D83         MOV     DPH,R5
   \   000040   12....       LCALL   ?Subroutine122 & 0xFFFF
   1906            for ( cnt = 0; cnt < desc->AppNumInClusters; ptr++, cnt++ )
   \                     ??CrossCallReturnLabel_232:
   \   000043   800B         SJMP    ??CrossCallReturnLabel_32
   1907            {
   1908              *buf++ = HI_UINT16( *ptr );
   \                     ??ZDO_BuildSimpleDescBuf_0:
   \   000045   8E82         MOV     DPL,R6
   \   000047   8F83         MOV     DPH,R7
   \   000049   A3           INC     DPTR
   \   00004A   12....       LCALL   ?Subroutine106 & 0xFFFF
   1909              *buf++ = LO_UINT16( *ptr );
   \                     ??CrossCallReturnLabel_203:
   \   00004D   12....       LCALL   ?Subroutine26 & 0xFFFF
   1910            }
   \                     ??CrossCallReturnLabel_32:
   \   000050   8A82         MOV     DPL,R2
   \   000052   8B83         MOV     DPH,R3
   \   000054   A3           INC     DPTR
   \   000055   A882         MOV     R0,DPL
   \   000057   A983         MOV     R1,DPH
   \   000059   85..82       MOV     DPL,?V0 + 2
   \   00005C   85..83       MOV     DPH,?V0 + 3
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   F5..         MOV     ?V0 + 1,A
   \   000062   E5..         MOV     A,?V0 + 0
   \   000064   C3           CLR     C
   \   000065   95..         SUBB    A,?V0 + 1
   \   000067   40DC         JC      ??ZDO_BuildSimpleDescBuf_0
   1911          
   1912            *buf++ = desc->AppNumOutClusters;
   \   000069   EC           MOV     A,R4
   \   00006A   2409         ADD     A,#0x9
   \   00006C   12....       LCALL   ?Subroutine130 & 0xFFFF
   \                     ??CrossCallReturnLabel_461:
   \   00006F   12....       LCALL   ?Subroutine106 & 0xFFFF
   1913            ptr = desc->pAppOutClusterList;
   \                     ??CrossCallReturnLabel_204:
   \   000072   8C82         MOV     DPL,R4
   \   000074   8D83         MOV     DPH,R5
   \   000076   A3           INC     DPTR
   \   000077   A3           INC     DPTR
   \   000078   A3           INC     DPTR
   \   000079   12....       LCALL   ?Subroutine122 & 0xFFFF
   1914            for ( cnt = 0; cnt < desc->AppNumOutClusters; ptr++, cnt++ )
   \                     ??CrossCallReturnLabel_233:
   \   00007C   800B         SJMP    ??CrossCallReturnLabel_33
   1915            {
   1916              *buf++ = HI_UINT16( *ptr );
   \                     ??ZDO_BuildSimpleDescBuf_1:
   \   00007E   8E82         MOV     DPL,R6
   \   000080   8F83         MOV     DPH,R7
   \   000082   A3           INC     DPTR
   \   000083   12....       LCALL   ?Subroutine104 & 0xFFFF
   1917              *buf++ = LO_UINT16( *ptr );
   \                     ??CrossCallReturnLabel_200:
   \   000086   12....       LCALL   ?Subroutine26 & 0xFFFF
   1918            }
   \                     ??CrossCallReturnLabel_33:
   \   000089   85..82       MOV     DPL,?V0 + 2
   \   00008C   85..83       MOV     DPH,?V0 + 3
   \   00008F   E0           MOVX    A,@DPTR
   \   000090   F8           MOV     R0,A
   \   000091   E5..         MOV     A,?V0 + 0
   \   000093   C3           CLR     C
   \   000094   98           SUBB    A,R0
   \   000095   40E7         JC      ??ZDO_BuildSimpleDescBuf_1
   1919          }
   \   000097   02....       LJMP    ??Subroutine260_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine130:
   \   000000   F5..         MOV     ?V0 + 2,A
   \   000002   ED           MOV     A,R5
   \   000003                REQUIRE ??Subroutine229_0
   \   000003                ; // Fall through to label ??Subroutine229_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine229_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F5..         MOV     ?V0 + 3,A
   \   000004   85..82       MOV     DPL,?V0 + 2
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine122:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   FE           MOV     R6,A
   \   000009   A3           INC     DPTR
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   FF           MOV     R7,A
   \   00000C   75..00       MOV     ?V0 + 0,#0x0
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine106:
   \   000000   12....       LCALL   ?Subroutine174 & 0xFFFF
   \                     ??CrossCallReturnLabel_299:
   \   000003   F0           MOVX    @DPTR,A
   \   000004   E8           MOV     A,R0
   \   000005   FA           MOV     R2,A
   \   000006   E9           MOV     A,R1
   \   000007   FB           MOV     R3,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine104:
   \   000000   12....       LCALL   ?Subroutine174 & 0xFFFF
   \                     ??CrossCallReturnLabel_298:
   \   000003   F0           MOVX    @DPTR,A
   \   000004   A3           INC     DPTR
   \   000005   AA82         MOV     R2,DPL
   \   000007   AB83         MOV     R3,DPH
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   12....       LCALL   ?Subroutine150 & 0xFFFF
   \                     ??CrossCallReturnLabel_466:
   \   000007   12....       LCALL   ?Subroutine184 & 0xFFFF
   \                     ??CrossCallReturnLabel_317:
   \   00000A   05..         INC     ?V0 + 0
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   A3           INC     DPTR
   \   000001   12....       LCALL   ?Subroutine150 & 0xFFFF
   \                     ??CrossCallReturnLabel_464:
   \   000004   8882         MOV     DPL,R0
   \   000006   8983         MOV     DPH,R1
   \   000008   12....       LCALL   ?Subroutine150 & 0xFFFF
   \                     ??CrossCallReturnLabel_465:
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine150:
   \   000000   E0           MOVX    A,@DPTR
   \   000001                REQUIRE ??Subroutine230_0
   \   000001                ; // Fall through to label ??Subroutine230_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine230_0:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   F0           MOVX    @DPTR,A
   \   000005   A3           INC     DPTR
   \   000006   0A           INC     R2
   \   000007   AB83         MOV     R3,DPH
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine184:
   \   000000   12....       LCALL   ?Subroutine202 & 0xFFFF
   \                     ??CrossCallReturnLabel_654:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine174:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine202:
   \   000000   EE           MOV     A,R6
   \   000001   2402         ADD     A,#0x2
   \   000003   0E           INC     R6
   \   000004   0E           INC     R6
   \   000005   EF           MOV     A,R7
   \   000006   3400         ADDC    A,#0x0
   \   000008   FF           MOV     R7,A
   \   000009   22           RET
   1920          
   1921          /*********************************************************************
   1922           * @fn      ZDO_MatchEndDeviceBind()
   1923           *
   1924           * @brief
   1925           *
   1926           *   Called to match end device binding requests
   1927           *
   1928           * @param  bindReq  - binding request information
   1929           * @param  SecurityUse - Security enable/disable
   1930           *
   1931           * @return  none
   1932           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1933          void ZDO_MatchEndDeviceBind( ZDEndDeviceBind_t *bindReq )
   \                     ZDO_MatchEndDeviceBind:
   1934          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 6,R2
   \   00000C   8B..         MOV     ?V0 + 7,R3
   1935            zAddrType_t dstAddr;
   1936            uint8 sendRsp = FALSE;
   \   00000E   7E00         MOV     R6,#0x0
   1937            uint8 status;
   1938          
   1939            // Is this the first request?
   1940            if ( matchED == NULL )
   \   000010   90....       MOV     DPTR,#matchED
   \   000013   12....       LCALL   ??Subroutine232_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_481:
   \   000016   7045         JNZ     ??ZDO_MatchEndDeviceBind_0
   1941            {
   1942              // Create match info structure
   1943              matchED = (ZDMatchEndDeviceBind_t *)osal_mem_alloc( sizeof ( ZDMatchEndDeviceBind_t ) );
   \   000018                ; Setup parameters for call to function osal_mem_alloc
   \   000018   7A37         MOV     R2,#0x37
   \   00001A   7B00         MOV     R3,#0x0
   \   00001C   12....       LCALL   ??osal_mem_alloc?relay
   \   00001F   90....       MOV     DPTR,#matchED
   \   000022   12....       LCALL   ?Subroutine38 & 0xFFFF
   1944              if ( matchED )
   \                     ??CrossCallReturnLabel_70:
   \   000025   90....       MOV     DPTR,#matchED
   \   000028   12....       LCALL   ??Subroutine232_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_482:
   \   00002B   6019         JZ      ??ZDO_MatchEndDeviceBind_1
   1945              {
   1946                // Clear the structure
   1947                osal_memset( (uint8 *)matchED, 0, sizeof ( ZDMatchEndDeviceBind_t ) );
   \   00002D                ; Setup parameters for call to function osal_memset
   \   00002D   7C37         MOV     R4,#0x37
   \   00002F   7D00         MOV     R5,#0x0
   \   000031   7900         MOV     R1,#0x0
   \   000033   12....       LCALL   ??osal_memset?relay
   1948          
   1949                // Copy the first request's information
   1950                if ( !ZDO_CopyMatchInfo( &(matchED->ed1), bindReq ) )
   \   000036                ; Setup parameters for call to function ZDO_CopyMatchInfo
   \   000036   AC..         MOV     R4,?V0 + 6
   \   000038   AD..         MOV     R5,?V0 + 7
   \   00003A   90....       MOV     DPTR,#matchED
   \   00003D   12....       LCALL   ??Subroutine228_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_454:
   \   000040   12....       LCALL   ??ZDO_CopyMatchInfo?relay
   \   000043   E9           MOV     A,R1
   \   000044   700B         JNZ     ??ZDO_MatchEndDeviceBind_2
   1951                {
   1952          
   1953                  status = ZDP_NO_ENTRY;
   \                     ??ZDO_MatchEndDeviceBind_1:
   \   000046   85..82       MOV     DPL,?XSP + 0
   \   000049   85..83       MOV     DPH,?XSP + 1
   \   00004C   7488         MOV     A,#-0x78
   \   00004E   02....       LJMP    ??ZDO_MatchEndDeviceBind_3 & 0xFFFF
   1954                  sendRsp = TRUE;
   1955                }
   1956              }
   1957              else
   1958              {
   1959                status = ZDP_NO_ENTRY;
   1960                sendRsp = TRUE;
   1961              }
   1962          
   1963              if ( !sendRsp )
   1964              {
   1965                // Set into the correct state
   1966                matchED->state = ZDMATCH_WAIT_REQ;
   \                     ??ZDO_MatchEndDeviceBind_2:
   \   000051   12....       LCALL   ?Subroutine94 & 0xFFFF
   \                     ??CrossCallReturnLabel_179:
   \   000054   7401         MOV     A,#0x1
   \   000056   F0           MOVX    @DPTR,A
   1967          
   1968                // Setup the timeout
   1969                APS_SetEndDeviceBindTimeout( AIB_MaxBindingTime, ZDO_EndDeviceBindMatchTimeoutCB );
   \   000057                ; Setup parameters for call to function APS_SetEndDeviceBindTimeout
   \   000057   12....       LCALL   ?Subroutine112 & 0xFFFF
   1970              }
   1971            }
   \                     ??CrossCallReturnLabel_214:
   \   00005A   02....       LJMP    ??ZDO_MatchEndDeviceBind_4 & 0xFFFF
   1972            else
   1973            {
   1974                matchED->state = ZDMATCH_SENDING_BINDS;
   \                     ??ZDO_MatchEndDeviceBind_0:
   \   00005D   12....       LCALL   ?Subroutine94 & 0xFFFF
   \                     ??CrossCallReturnLabel_180:
   \   000060   7402         MOV     A,#0x2
   \   000062   F0           MOVX    @DPTR,A
   1975          
   1976                // Copy the 2nd request's information
   1977                if ( !ZDO_CopyMatchInfo( &(matchED->ed2), bindReq ) )
   \   000063                ; Setup parameters for call to function ZDO_CopyMatchInfo
   \   000063   AC..         MOV     R4,?V0 + 6
   \   000065   AD..         MOV     R5,?V0 + 7
   \   000067   12....       LCALL   ?Subroutine118 & 0xFFFF
   \                     ??CrossCallReturnLabel_224:
   \   00006A   12....       LCALL   ??ZDO_CopyMatchInfo?relay
   \   00006D   E9           MOV     A,R1
   \   00006E   700A         JNZ     ??ZDO_MatchEndDeviceBind_5
   1978                {
   1979                  status = ZDP_NO_ENTRY;
   \   000070   85..82       MOV     DPL,?XSP + 0
   \   000073   85..83       MOV     DPH,?XSP + 1
   \   000076   7488         MOV     A,#-0x78
   \   000078   F0           MOVX    @DPTR,A
   1980                  sendRsp = TRUE;
   \   000079   0E           INC     R6
   1981                }
   1982          
   1983                // Make a source match for ed1
   1984                matchED->ed1numMatched = ZDO_CompareClusterLists(
   1985                            matchED->ed1.numOutClusters, matchED->ed1.outClusters,
   1986                            matchED->ed2.numInClusters, matchED->ed2.inClusters, ZDOBuildBuf );
   \                     ??ZDO_MatchEndDeviceBind_5:
   \   00007A                ; Setup parameters for call to function ZDO_CompareClusterLists
   \   00007A   75....       MOV     ?V0 + 0,#ZDOBuildBuf & 0xff
   \   00007D   75....       MOV     ?V0 + 1,#(ZDOBuildBuf >> 8) & 0xff
   \   000080   78..         MOV     R0,#?V0 + 0
   \   000082   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000085   90....       MOV     DPTR,#matchED
   \   000088   E0           MOVX    A,@DPTR
   \   000089   2429         ADD     A,#0x29
   \   00008B   12....       LCALL   ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_189:
   \   00008E   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000091   90....       MOV     DPTR,#matchED
   \   000094   E0           MOVX    A,@DPTR
   \   000095   2428         ADD     A,#0x28
   \   000097   12....       LCALL   ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_173:
   \   00009A   2415         ADD     A,#0x15
   \   00009C   12....       LCALL   ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_157:
   \   00009F   2414         ADD     A,#0x14
   \   0000A1   12....       LCALL   ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_171:
   \   0000A4   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A7   E9           MOV     A,R1
   \   0000A8   C0E0         PUSH    A
   \   0000AA   90....       MOV     DPTR,#matchED
   \   0000AD   E0           MOVX    A,@DPTR
   \   0000AE   2431         ADD     A,#0x31
   \   0000B0   12....       LCALL   ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_190:
   \   0000B3   D0E0         POP     A
   \   0000B5   F0           MOVX    @DPTR,A
   1987                if ( matchED->ed1numMatched )
   \   0000B6   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_121:
   \   0000B9   75..00       MOV     ?V0 + 2,#0x0
   \   0000BC   6025         JZ      ??ZDO_MatchEndDeviceBind_6
   1988                {
   1989                  // Save the match list
   1990                  matchED->ed1Matched = osal_mem_alloc( (short)(matchED->ed1numMatched * sizeof ( uint16 )) );
   \   0000BE                ; Setup parameters for call to function osal_mem_alloc
   \   0000BE   12....       LCALL   ?Subroutine143 & 0xFFFF
   \                     ??CrossCallReturnLabel_253:
   \   0000C1   2432         ADD     A,#0x32
   \   0000C3   12....       LCALL   ?Subroutine27 & 0xFFFF
   1991                  if ( matchED->ed1Matched )
   \                     ??CrossCallReturnLabel_34:
   \   0000C6   6010         JZ      ??ZDO_MatchEndDeviceBind_7
   1992                  {
   1993                    osal_memcpy( matchED->ed1Matched, ZDOBuildBuf, (matchED->ed1numMatched * sizeof ( uint16 )) );
   \   0000C8                ; Setup parameters for call to function osal_memcpy
   \   0000C8   78..         MOV     R0,#?V0 + 0
   \   0000CA   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000CD   12....       LCALL   ?Subroutine61 & 0xFFFF
   1994                  }
   \                     ??CrossCallReturnLabel_122:
   \   0000D0   12....       LCALL   ?Subroutine142 & 0xFFFF
   \                     ??CrossCallReturnLabel_495:
   \   0000D3   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000D6   800B         SJMP    ??ZDO_MatchEndDeviceBind_6
   1995                  else
   1996                  {
   1997                    // Allocation error, stop
   1998                    status = ZDP_NO_ENTRY;
   \                     ??ZDO_MatchEndDeviceBind_7:
   \   0000D8   85..82       MOV     DPL,?XSP + 0
   \   0000DB   85..83       MOV     DPH,?XSP + 1
   \   0000DE   7488         MOV     A,#-0x78
   \   0000E0   F0           MOVX    @DPTR,A
   1999                    sendRsp = TRUE;
   \   0000E1   7E01         MOV     R6,#0x1
   2000                  }
   2001                }
   2002          
   2003                // Make a source match for ed2
   2004                matchED->ed2numMatched = ZDO_CompareClusterLists(
   2005                            matchED->ed2.numOutClusters, matchED->ed2.outClusters,
   2006                            matchED->ed1.numInClusters, matchED->ed1.inClusters, ZDOBuildBuf );
   \                     ??ZDO_MatchEndDeviceBind_6:
   \   0000E3                ; Setup parameters for call to function ZDO_CompareClusterLists
   \   0000E3   75....       MOV     ?V0 + 4,#ZDOBuildBuf & 0xff
   \   0000E6   75....       MOV     ?V0 + 5,#(ZDOBuildBuf >> 8) & 0xff
   \   0000E9   78..         MOV     R0,#?V0 + 4
   \   0000EB   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000EE   90....       MOV     DPTR,#matchED
   \   0000F1   E0           MOVX    A,@DPTR
   \   0000F2   2412         ADD     A,#0x12
   \   0000F4   12....       LCALL   ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_191:
   \   0000F7   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0000FA   90....       MOV     DPTR,#matchED
   \   0000FD   E0           MOVX    A,@DPTR
   \   0000FE   2411         ADD     A,#0x11
   \   000100   12....       LCALL   ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_174:
   \   000103   242C         ADD     A,#0x2c
   \   000105   12....       LCALL   ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_158:
   \   000108   242B         ADD     A,#0x2b
   \   00010A   12....       LCALL   ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_172:
   \   00010D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000110   E9           MOV     A,R1
   \   000111   C0E0         PUSH    A
   \   000113   90....       MOV     DPTR,#matchED
   \   000116   E0           MOVX    A,@DPTR
   \   000117   2434         ADD     A,#0x34
   \   000119   12....       LCALL   ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_192:
   \   00011C   D0E0         POP     A
   \   00011E   F0           MOVX    @DPTR,A
   2007                if ( matchED->ed2numMatched )
   \   00011F   12....       LCALL   ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_468:
   \   000122   6018         JZ      ??ZDO_MatchEndDeviceBind_8
   2008                {
   2009                  // Save the match list
   2010                  matchED->ed2Matched = osal_mem_alloc( (short)(matchED->ed2numMatched * sizeof ( uint16 )) );
   \   000124                ; Setup parameters for call to function osal_mem_alloc
   \   000124   12....       LCALL   ?Subroutine143 & 0xFFFF
   \                     ??CrossCallReturnLabel_254:
   \   000127   2435         ADD     A,#0x35
   \   000129   12....       LCALL   ?Subroutine27 & 0xFFFF
   2011                  if ( matchED->ed2Matched )
   \                     ??CrossCallReturnLabel_35:
   \   00012C   6029         JZ      ??ZDO_MatchEndDeviceBind_9
   2012                  {
   2013                    osal_memcpy( matchED->ed2Matched, ZDOBuildBuf, (matchED->ed2numMatched * sizeof ( uint16 )) );
   \   00012E                ; Setup parameters for call to function osal_memcpy
   \   00012E   78..         MOV     R0,#?V0 + 0
   \   000130   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000133   12....       LCALL   ?Subroutine65 & 0xFFFF
   2014                  }
   \                     ??CrossCallReturnLabel_469:
   \   000136   12....       LCALL   ?Subroutine142 & 0xFFFF
   \                     ??CrossCallReturnLabel_496:
   \   000139   12....       LCALL   ?DEALLOC_XSTACK8
   2015                  else
   2016                  {
   2017                    // Allocation error, stop
   2018                    status = ZDP_NO_ENTRY;
   2019                    sendRsp = TRUE;
   2020                  }
   2021                }
   2022          
   2023                if ( (sendRsp == FALSE) && (matchED->ed1numMatched || matchED->ed2numMatched) )
   \                     ??ZDO_MatchEndDeviceBind_8:
   \   00013C   EE           MOV     A,R6
   \   00013D   A2E0         MOV     C,0xE0 /* A   */.0
   \   00013F   401F         JC      ??ZDO_MatchEndDeviceBind_10
   \   000141   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_123:
   \   000144   7005         JNZ     ??ZDO_MatchEndDeviceBind_11
   \   000146   12....       LCALL   ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_161:
   \   000149   6015         JZ      ??ZDO_MatchEndDeviceBind_10
   2024                {
   2025                  // Do the first unbind/bind state
   2026                  ZDMatchSendState( ZDMATCH_REASON_START, ZDP_SUCCESS, 0 );
   \                     ??ZDO_MatchEndDeviceBind_11:
   \   00014B                ; Setup parameters for call to function ZDMatchSendState
   \   00014B   7B00         MOV     R3,#0x0
   \   00014D   7A00         MOV     R2,#0x0
   \   00014F   7900         MOV     R1,#0x0
   \   000151   12....       LCALL   ??ZDMatchSendState?relay
   2027                }
   2028                else
   2029                {
   2030                  status = ZDP_NO_MATCH;
   2031                  sendRsp = TRUE;
   2032                }
   2033            }
   2034          
   2035            if ( sendRsp )
   \   000154   02....       LJMP    ??ZDO_MatchEndDeviceBind_4 & 0xFFFF
   \                     ??ZDO_MatchEndDeviceBind_9:
   \   000157   85..82       MOV     DPL,?XSP + 0
   \   00015A   85..83       MOV     DPH,?XSP + 1
   \   00015D   7488         MOV     A,#-0x78
   \   00015F   F0           MOVX    @DPTR,A
   \                     ??ZDO_MatchEndDeviceBind_10:
   \   000160   85..82       MOV     DPL,?XSP + 0
   \   000163   85..83       MOV     DPH,?XSP + 1
   \   000166   7486         MOV     A,#-0x7a
   \                     ??ZDO_MatchEndDeviceBind_3:
   \   000168   F0           MOVX    @DPTR,A
   2036            {
   2037              // send response to this requester
   2038              dstAddr.addrMode = Addr16Bit;
   \   000169   7409         MOV     A,#0x9
   \   00016B   12....       LCALL   ?XSTACK_DISP0_8
   \   00016E   7402         MOV     A,#0x2
   \   000170   F0           MOVX    @DPTR,A
   2039              dstAddr.addr.shortAddr = bindReq->srcAddr;
   \   000171   85..82       MOV     DPL,?V0 + 6
   \   000174   85..83       MOV     DPH,?V0 + 7
   \   000177   12....       LCALL   ??Subroutine223_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_416:
   \   00017A   7401         MOV     A,#0x1
   \   00017C   12....       LCALL   ?XSTACK_DISP0_8
   \   00017F   12....       LCALL   ??Subroutine217_0 & 0xFFFF
   2040              ZDP_EndDeviceBindRsp( bindReq->TransSeq, &dstAddr, status, bindReq->SecurityUse );
   \                     ??CrossCallReturnLabel_393:
   \   000182                ; Setup parameters for call to function ZDP_SendData
   \   000182   85..82       MOV     DPL,?V0 + 6
   \   000185   85..83       MOV     DPH,?V0 + 7
   \   000188   A3           INC     DPTR
   \   000189   12....       LCALL   ??Subroutine225_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_426:
   \   00018C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00018F   7401         MOV     A,#0x1
   \   000191   12....       LCALL   ?XSTACK_DISP0_8
   \   000194   8582..       MOV     ?V0 + 0,DPL
   \   000197   8583..       MOV     ?V0 + 1,DPH
   \   00019A   78..         MOV     R0,#?V0 + 0
   \   00019C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00019F   75..20       MOV     ?V0 + 0,#0x20
   \   0001A2   75..80       MOV     ?V0 + 1,#-0x80
   \   0001A5   78..         MOV     R0,#?V0 + 0
   \   0001A7   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001AA   7901         MOV     R1,#0x1
   \   0001AC   7406         MOV     A,#0x6
   \   0001AE   12....       LCALL   ?XSTACK_DISP0_8
   \   0001B1   AC82         MOV     R4,DPL
   \   0001B3   AD83         MOV     R5,DPH
   \   0001B5   AA..         MOV     R2,?V0 + 6
   \   0001B7   AB..         MOV     R3,?V0 + 7
   \   0001B9   12....       LCALL   ?Subroutine186 & 0xFFFF
   \                     ??CrossCallReturnLabel_445:
   \   0001BC   12....       LCALL   ?DEALLOC_XSTACK8
   2041          
   2042              if ( matchED->state == ZDMATCH_SENDING_BINDS )
   \   0001BF   12....       LCALL   ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_159:
   \   0001C2   7044         JNZ     ??ZDO_MatchEndDeviceBind_12
   2043              {
   2044                // send response to first requester
   2045                dstAddr.addrMode = Addr16Bit;
   \   0001C4   7409         MOV     A,#0x9
   \   0001C6   12....       LCALL   ?XSTACK_DISP0_8
   \   0001C9   7402         MOV     A,#0x2
   \   0001CB   12....       LCALL   ?Subroutine54 & 0xFFFF
   2046                dstAddr.addr.shortAddr = matchED->ed1.srcAddr;
   2047                ZDP_EndDeviceBindRsp( matchED->ed1.TransSeq, &dstAddr, status, matchED->ed1.SecurityUse );
   2048              }
   \                     ??CrossCallReturnLabel_104:
   \   0001CE   F583         MOV     DPH,A
   \   0001D0   8882         MOV     DPL,R0
   \   0001D2   12....       LCALL   ??Subroutine223_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_417:
   \   0001D5   7401         MOV     A,#0x1
   \   0001D7   12....       LCALL   ?XSTACK_DISP0_8
   \   0001DA   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   0001DD   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001E0   7401         MOV     A,#0x1
   \   0001E2   12....       LCALL   ?XSTACK_DISP0_8
   \   0001E5   8582..       MOV     ?V0 + 0,DPL
   \   0001E8   8583..       MOV     ?V0 + 1,DPH
   \   0001EB   78..         MOV     R0,#?V0 + 0
   \   0001ED   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001F0   75..20       MOV     ?V0 + 0,#0x20
   \   0001F3   75..80       MOV     ?V0 + 1,#-0x80
   \   0001F6   78..         MOV     R0,#?V0 + 0
   \   0001F8   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001FB   7901         MOV     R1,#0x1
   \   0001FD   7406         MOV     A,#0x6
   \   0001FF   12....       LCALL   ?XSTACK_DISP0_8
   \   000202   12....       LCALL   ?Subroutine105 & 0xFFFF
   \                     ??CrossCallReturnLabel_201:
   \   000205   12....       LCALL   ?DEALLOC_XSTACK8
   2049          
   2050              // Process ended - release memory used
   2051              ZDO_RemoveMatchMemory();
   \                     ??ZDO_MatchEndDeviceBind_12:
   \   000208                ; Setup parameters for call to function ZDO_RemoveMatchMemory
   \   000208   12....       LCALL   ??ZDO_RemoveMatchMemory?relay
   2052            }
   2053          }
   \                     ??ZDO_MatchEndDeviceBind_4:
   \   00020B   740A         MOV     A,#0xa
   \   00020D   02....       LJMP    ?Subroutine6 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine143:
   \   000000   C3           CLR     C
   \   000001   33           RLC     A
   \   000002   FA           MOV     R2,A
   \   000003   E4           CLR     A
   \   000004   33           RLC     A
   \   000005   FB           MOV     R3,A
   \   000006   12....       LCALL   ??osal_mem_alloc?relay
   \   000009   8A..         MOV     ?V0 + 4,R2
   \   00000B   8B..         MOV     ?V0 + 5,R3
   \   00000D   90....       MOV     DPTR,#matchED
   \   000010   E0           MOVX    A,@DPTR
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine94:
   \   000000   90....       MOV     DPTR,#matchED
   \   000003   E0           MOVX    A,@DPTR
   \   000004   242E         ADD     A,#0x2e
   \   000006   12....       LCALL   ?Subroutine165 & 0xFFFF
   \                     ??CrossCallReturnLabel_285:
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine90:
   \   000000   12....       LCALL   ?Subroutine164 & 0xFFFF
   \                     ??CrossCallReturnLabel_523:
   \   000003   FC           MOV     R4,A
   \   000004   90....       MOV     DPTR,#matchED
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine89:
   \   000000   18           DEC     R0
   \   000001   12....       LCALL   ??Subroutine221_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_406:
   \   000004   12....       LCALL   ??ZDO_CompareClusterLists?relay
   \   000007   7404         MOV     A,#0x4
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine80:
   \   000000   12....       LCALL   ?Subroutine163 & 0xFFFF
   \                     ??CrossCallReturnLabel_283:
   \   000003   90....       MOV     DPTR,#matchED
   \   000006   E0           MOVX    A,@DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine65:
   \   000000   90....       MOV     DPTR,#matchED
   \   000003                REQUIRE ??Subroutine231_0
   \   000003                ; // Fall through to label ??Subroutine231_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine231_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   2434         ADD     A,#0x34
   \   000003   12....       LCALL   ?Subroutine164 & 0xFFFF
   \                     ??CrossCallReturnLabel_525:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   12....       LCALL   ?Subroutine175 & 0xFFFF
   \                     ??CrossCallReturnLabel_300:
   \   000003   E5..         MOV     A,?V0 + 4
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   E5..         MOV     A,?V0 + 5
   \   000009   12....       LCALL   ?Subroutine189 & 0xFFFF
   \                     ??CrossCallReturnLabel_636:
   \   00000C   12....       LCALL   ?Subroutine166 & 0xFFFF
   \                     ??CrossCallReturnLabel_507:
   \   00000F   EA           MOV     A,R2
   \   000010   4B           ORL     A,R3
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine118:
   \   000000   90....       MOV     DPTR,#matchED
   \   000003   E0           MOVX    A,@DPTR
   \   000004   2417         ADD     A,#0x17
   \   000006   FA           MOV     R2,A
   \   000007   A3           INC     DPTR
   \   000008   E0           MOVX    A,@DPTR
   \   000009   3400         ADDC    A,#0x0
   \   00000B   FB           MOV     R3,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine112:
   \   000000   7C..         MOV     R4,#??ZDO_EndDeviceBindMatchTimeoutCB?relay & 0xff
   \   000002   7D..         MOV     R5,#(??ZDO_EndDeviceBindMatchTimeoutCB?relay >> 8) & 0xff
   \   000004   90....       MOV     DPTR,#AIB_MaxBindingTime
   \   000007   12....       LCALL   ?Subroutine166 & 0xFFFF
   \                     ??CrossCallReturnLabel_509:
   \   00000A   12....       LCALL   ??APS_SetEndDeviceBindTimeout?relay
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine105:
   \   000000   AC82         MOV     R4,DPL
   \   000002   AD83         MOV     R5,DPH
   \   000004   90....       MOV     DPTR,#matchED
   \   000007   12....       LCALL   ?Subroutine166 & 0xFFFF
   \                     ??CrossCallReturnLabel_508:
   \   00000A   12....       LCALL   ?Subroutine186 & 0xFFFF
   \                     ??CrossCallReturnLabel_447:
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine82:
   \   000000   90....       MOV     DPTR,#matchED
   \   000003   E0           MOVX    A,@DPTR
   \   000004   2434         ADD     A,#0x34
   \   000006   08           INC     R0
   \   000007   08           INC     R0
   \   000008   08           INC     R0
   \   000009   12....       LCALL   ??Subroutine237_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_518:
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine81:
   \   000000   90....       MOV     DPTR,#matchED
   \   000003   E0           MOVX    A,@DPTR
   \   000004   242E         ADD     A,#0x2e
   \   000006   12....       LCALL   ?Subroutine164 & 0xFFFF
   \                     ??CrossCallReturnLabel_521:
   \   000009   6402         XRL     A,#0x2
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine61:
   \   000000   90....       MOV     DPTR,#matchED
   \   000003   E0           MOVX    A,@DPTR
   \   000004   2431         ADD     A,#0x31
   \   000006   12....       LCALL   ?Subroutine164 & 0xFFFF
   \                     ??CrossCallReturnLabel_520:
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine175:
   \   000000   FA           MOV     R2,A
   \   000001   A3           INC     DPTR
   \   000002   E0           MOVX    A,@DPTR
   \   000003   3400         ADDC    A,#0x0
   \   000005   FB           MOV     R3,A
   \   000006   8A82         MOV     DPL,R2
   \   000008   8B83         MOV     DPH,R3
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   90....       MOV     DPTR,#matchED
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F8           MOV     R0,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine154:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005                ; Setup parameters for call to function ZDP_SendData
   \   000005                ; Setup parameters for call to function ZDP_SendData
   \   000005                ; Setup parameters for call to function ZDP_SendData
   \   000005   90....       MOV     DPTR,#matchED
   \   000008   E0           MOVX    A,@DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   12....       LCALL   ?Subroutine154 & 0xFFFF
   \                     ??CrossCallReturnLabel_270:
   \   000003   12....       LCALL   ?Subroutine171 & 0xFFFF
   \                     ??CrossCallReturnLabel_666:
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F5..         MOV     ?V0 + 0,A
   \   000009   78..         MOV     R0,#?V0 + 0
   \   00000B   22           RET
   2054          
   2055          /*********************************************************************
   2056           * @fn      ZDO_RemoveMatchMemory()
   2057           *
   2058           * @brief   Called to clear the memory used for the end device bind.
   2059           *
   2060           * @param  none
   2061           *
   2062           * @return  none
   2063           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2064          static void ZDO_RemoveMatchMemory( void )
   \                     ZDO_RemoveMatchMemory:
   2065          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2066            if ( matchED != NULL )
   \   000004   90....       MOV     DPTR,#matchED
   \   000007   12....       LCALL   ??Subroutine232_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_483:
   \   00000A   6061         JZ      ??ZDO_RemoveMatchMemory_0
   2067            {
   2068              if ( matchED->ed2Matched != NULL )
   \   00000C   90....       MOV     DPTR,#matchED
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   2435         ADD     A,#0x35
   \   000012   12....       LCALL   ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_110:
   \   000015   6003         JZ      ??ZDO_RemoveMatchMemory_1
   2069                osal_mem_free( matchED->ed2Matched );
   \   000017                ; Setup parameters for call to function osal_mem_free
   \   000017   12....       LCALL   ??osal_mem_free?relay
   2070              if ( matchED->ed1Matched != NULL )
   \                     ??ZDO_RemoveMatchMemory_1:
   \   00001A   90....       MOV     DPTR,#matchED
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   2432         ADD     A,#0x32
   \   000020   12....       LCALL   ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_111:
   \   000023   6003         JZ      ??ZDO_RemoveMatchMemory_2
   2071                osal_mem_free( matchED->ed1Matched );
   \   000025                ; Setup parameters for call to function osal_mem_free
   \   000025   12....       LCALL   ??osal_mem_free?relay
   2072          
   2073              if ( matchED->ed1.inClusters != NULL )
   \                     ??ZDO_RemoveMatchMemory_2:
   \   000028   90....       MOV     DPTR,#matchED
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   2412         ADD     A,#0x12
   \   00002E   12....       LCALL   ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_112:
   \   000031   6003         JZ      ??ZDO_RemoveMatchMemory_3
   2074                osal_mem_free( matchED->ed1.inClusters );
   \   000033                ; Setup parameters for call to function osal_mem_free
   \   000033   12....       LCALL   ??osal_mem_free?relay
   2075          
   2076              if ( matchED->ed1.outClusters != NULL )
   \                     ??ZDO_RemoveMatchMemory_3:
   \   000036   90....       MOV     DPTR,#matchED
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   2415         ADD     A,#0x15
   \   00003C   12....       LCALL   ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_113:
   \   00003F   6003         JZ      ??ZDO_RemoveMatchMemory_4
   2077                osal_mem_free( matchED->ed1.outClusters );
   \   000041                ; Setup parameters for call to function osal_mem_free
   \   000041   12....       LCALL   ??osal_mem_free?relay
   2078          
   2079              if ( matchED->ed2.inClusters != NULL )
   \                     ??ZDO_RemoveMatchMemory_4:
   \   000044   90....       MOV     DPTR,#matchED
   \   000047   E0           MOVX    A,@DPTR
   \   000048   2429         ADD     A,#0x29
   \   00004A   12....       LCALL   ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_114:
   \   00004D   6003         JZ      ??ZDO_RemoveMatchMemory_5
   2080                osal_mem_free( matchED->ed2.inClusters );
   \   00004F                ; Setup parameters for call to function osal_mem_free
   \   00004F   12....       LCALL   ??osal_mem_free?relay
   2081          
   2082              if ( matchED->ed2.outClusters != NULL )
   \                     ??ZDO_RemoveMatchMemory_5:
   \   000052   90....       MOV     DPTR,#matchED
   \   000055   E0           MOVX    A,@DPTR
   \   000056   242C         ADD     A,#0x2c
   \   000058   12....       LCALL   ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_115:
   \   00005B   6003         JZ      ??ZDO_RemoveMatchMemory_6
   2083                osal_mem_free( matchED->ed2.outClusters );
   \   00005D                ; Setup parameters for call to function osal_mem_free
   \   00005D   12....       LCALL   ??osal_mem_free?relay
   2084          
   2085              osal_mem_free( matchED );
   \                     ??ZDO_RemoveMatchMemory_6:
   \   000060                ; Setup parameters for call to function osal_mem_free
   \   000060   90....       MOV     DPTR,#matchED
   \   000063   12....       LCALL   ??Subroutine213_0 & 0xFFFF
   2086          
   2087              matchED = (ZDMatchEndDeviceBind_t *)NULL;
   \                     ??CrossCallReturnLabel_371:
   \   000066   90....       MOV     DPTR,#matchED
   \   000069   E4           CLR     A
   \   00006A   F0           MOVX    @DPTR,A
   \   00006B   A3           INC     DPTR
   \   00006C   F0           MOVX    @DPTR,A
   2088            }
   2089          }
   \                     ??ZDO_RemoveMatchMemory_0:
   \   00006D                REQUIRE ?Subroutine0
   \   00006D                ; // Fall through to label ?Subroutine0
   2090          
   2091          /*********************************************************************
   2092           * @fn      ZDO_CopyMatchInfo()
   2093           *
   2094           * @brief   Called to copy memory used for the end device bind.
   2095           *
   2096           * @param  srcReq - source information
   2097           * @param  dstReq - destination location
   2098           *
   2099           * @return  TRUE if copy was successful.
   2100           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2101          static uint8 ZDO_CopyMatchInfo( ZDEndDeviceBind_t *destReq, ZDEndDeviceBind_t *srcReq )
   \                     ZDO_CopyMatchInfo:
   2102          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 4,R2
   \   000007   8B..         MOV     ?V0 + 5,R3
   \   000009   8C..         MOV     ?V0 + 6,R4
   \   00000B   8D..         MOV     ?V0 + 7,R5
   2103            uint8 allOK = TRUE;
   \   00000D   7E01         MOV     R6,#0x1
   2104          
   2105            // Copy bind information into the match info structure
   2106            osal_memcpy( (uint8 *)destReq, srcReq, sizeof ( ZDEndDeviceBind_t ) );
   \   00000F                ; Setup parameters for call to function osal_memcpy
   \   00000F   8C..         MOV     ?V0 + 0,R4
   \   000011   8D..         MOV     ?V0 + 1,R5
   \   000013   75..00       MOV     ?V0 + 2,#0x0
   \   000016   78..         MOV     R0,#?V0 + 0
   \   000018   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00001B   7C17         MOV     R4,#0x17
   \   00001D   7D00         MOV     R5,#0x0
   \   00001F   12....       LCALL   ??Subroutine233_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_499:
   \   000022   12....       LCALL   ?DEALLOC_XSTACK8
   \   000025   E5..         MOV     A,?V0 + 4
   \   000027   2412         ADD     A,#0x12
   \   000029   F582         MOV     DPL,A
   \   00002B   E5..         MOV     A,?V0 + 5
   \   00002D   12....       LCALL   ??Subroutine239_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_540:
   \   000030   E4           CLR     A
   \   000031   F0           MOVX    @DPTR,A
   \   000032   A3           INC     DPTR
   \   000033   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   000036   E4           CLR     A
   \   000037   F0           MOVX    @DPTR,A
   \   000038   A3           INC     DPTR
   \   000039   F0           MOVX    @DPTR,A
   \   00003A   E5..         MOV     A,?V0 + 6
   \   00003C   2411         ADD     A,#0x11
   \   00003E   F582         MOV     DPL,A
   \   000040   E5..         MOV     A,?V0 + 7
   \   000042   12....       LCALL   ??Subroutine226_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_433:
   \   000045   6039         JZ      ??ZDO_CopyMatchInfo_0
   2107          
   2108            // Initialize the destination cluster pointers
   2109            destReq->inClusters = NULL;
   2110            destReq->outClusters = NULL;
   2111          
   2112            // Copy input cluster IDs
   2113            if ( srcReq->numInClusters )
   2114            {
   2115              destReq->inClusters = osal_mem_alloc( (short)(srcReq->numInClusters * sizeof ( uint16 )) );
   \   000047                ; Setup parameters for call to function osal_mem_alloc
   \   000047   C3           CLR     C
   \   000048   33           RLC     A
   \   000049   FA           MOV     R2,A
   \   00004A   E4           CLR     A
   \   00004B   33           RLC     A
   \   00004C   FB           MOV     R3,A
   \   00004D   12....       LCALL   ??osal_mem_alloc?relay
   \   000050   E5..         MOV     A,?V0 + 4
   \   000052   2412         ADD     A,#0x12
   \   000054   F582         MOV     DPL,A
   \   000056   E5..         MOV     A,?V0 + 5
   \   000058   12....       LCALL   ??Subroutine239_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_541:
   \   00005B   12....       LCALL   ?Subroutine38 & 0xFFFF
   2116              if ( destReq->inClusters )
   \                     ??CrossCallReturnLabel_71:
   \   00005E   E5..         MOV     A,?V0 + 4
   \   000060   2412         ADD     A,#0x12
   \   000062   12....       LCALL   ?Subroutine135 & 0xFFFF
   \                     ??CrossCallReturnLabel_437:
   \   000065   FA           MOV     R2,A
   \   000066   4B           ORL     A,R3
   \   000067   6016         JZ      ??ZDO_CopyMatchInfo_1
   2117              {
   2118                // Copy the clusters
   2119                osal_memcpy( (uint8*)(destReq->inClusters), (uint8 *)(srcReq->inClusters),
   2120                                (srcReq->numInClusters * sizeof ( uint16 )) );
   \   000069                ; Setup parameters for call to function osal_memcpy
   \   000069   E5..         MOV     A,?V0 + 6
   \   00006B   2412         ADD     A,#0x12
   \   00006D   12....       LCALL   ?Subroutine107 & 0xFFFF
   2121              }
   \                     ??CrossCallReturnLabel_205:
   \   000070   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000073   E5..         MOV     A,?V0 + 6
   \   000075   2411         ADD     A,#0x11
   \   000077   12....       LCALL   ?Subroutine97 & 0xFFFF
   \                     ??CrossCallReturnLabel_183:
   \   00007A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00007D   8001         SJMP    ??ZDO_CopyMatchInfo_0
   2122              else
   2123                allOK = FALSE;
   \                     ??ZDO_CopyMatchInfo_1:
   \   00007F   1E           DEC     R6
   \                     ??ZDO_CopyMatchInfo_0:
   \   000080   E5..         MOV     A,?V0 + 6
   \   000082   2414         ADD     A,#0x14
   \   000084   F582         MOV     DPL,A
   \   000086   E5..         MOV     A,?V0 + 7
   2124            }
   \   000088   12....       LCALL   ??Subroutine226_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_434:
   \   00008B   6030         JZ      ??ZDO_CopyMatchInfo_2
   2125          
   2126            // Copy output cluster IDs
   2127            if ( srcReq->numOutClusters )
   2128            {
   2129              destReq->outClusters = osal_mem_alloc( (short)(srcReq->numOutClusters * sizeof ( uint16 )) );
   \   00008D                ; Setup parameters for call to function osal_mem_alloc
   \   00008D   C3           CLR     C
   \   00008E   33           RLC     A
   \   00008F   FA           MOV     R2,A
   \   000090   E4           CLR     A
   \   000091   33           RLC     A
   \   000092   FB           MOV     R3,A
   \   000093   12....       LCALL   ??osal_mem_alloc?relay
   \   000096   E5..         MOV     A,?V0 + 4
   \   000098   2415         ADD     A,#0x15
   \   00009A   F582         MOV     DPL,A
   \   00009C   E5..         MOV     A,?V0 + 5
   \   00009E   12....       LCALL   ?Subroutine137 & 0xFFFF
   \                     ??CrossCallReturnLabel_247:
   \   0000A1   12....       LCALL   ?Subroutine33 & 0xFFFF
   2130              if ( destReq->outClusters )
   \                     ??CrossCallReturnLabel_47:
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   FA           MOV     R2,A
   \   0000A6   4B           ORL     A,R3
   \   0000A7   6036         JZ      ??ZDO_CopyMatchInfo_3
   2131              {
   2132                // Copy the clusters
   2133                osal_memcpy( (uint8 *)(destReq->outClusters), (uint8 *)(srcReq->outClusters),
   2134                                (srcReq->numOutClusters * sizeof ( uint16 )) );
   \   0000A9                ; Setup parameters for call to function osal_memcpy
   \   0000A9   E5..         MOV     A,?V0 + 6
   \   0000AB   2415         ADD     A,#0x15
   \   0000AD   12....       LCALL   ?Subroutine107 & 0xFFFF
   2135              }
   \                     ??CrossCallReturnLabel_206:
   \   0000B0   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000B3   E5..         MOV     A,?V0 + 6
   \   0000B5   2414         ADD     A,#0x14
   \   0000B7   12....       LCALL   ?Subroutine97 & 0xFFFF
   \                     ??CrossCallReturnLabel_184:
   \   0000BA   12....       LCALL   ?DEALLOC_XSTACK8
   2136              else
   2137                allOK = FALSE;
   2138            }
   2139          
   2140            if ( !allOK )
   \                     ??ZDO_CopyMatchInfo_2:
   \   0000BD   EE           MOV     A,R6
   \   0000BE   A2E0         MOV     C,0xE0 /* A   */.0
   \   0000C0   4018         JC      ??ZDO_CopyMatchInfo_4
   2141            {
   2142              if ( destReq->inClusters != NULL )
   \                     ??ZDO_CopyMatchInfo_5:
   \   0000C2   E5..         MOV     A,?V0 + 4
   \   0000C4   2412         ADD     A,#0x12
   \   0000C6   12....       LCALL   ?Subroutine101 & 0xFFFF
   \                     ??CrossCallReturnLabel_505:
   \   0000C9   6003         JZ      ??ZDO_CopyMatchInfo_6
   2143                osal_mem_free( destReq->inClusters );
   \   0000CB                ; Setup parameters for call to function osal_mem_free
   \   0000CB   12....       LCALL   ??osal_mem_free?relay
   2144              if ( destReq->outClusters != NULL )
   \                     ??ZDO_CopyMatchInfo_6:
   \   0000CE   E5..         MOV     A,?V0 + 4
   \   0000D0   2415         ADD     A,#0x15
   \   0000D2   12....       LCALL   ?Subroutine101 & 0xFFFF
   \                     ??CrossCallReturnLabel_506:
   \   0000D5   6003         JZ      ??ZDO_CopyMatchInfo_4
   2145                osal_mem_free( destReq->outClusters );
   \   0000D7                ; Setup parameters for call to function osal_mem_free
   \   0000D7   12....       LCALL   ??osal_mem_free?relay
   2146            }
   2147          
   2148            return ( allOK );
   \                     ??ZDO_CopyMatchInfo_4:
   \   0000DA   EE           MOV     A,R6
   \   0000DB   F9           MOV     R1,A
   \   0000DC   02....       LJMP    ??Subroutine222_0 & 0xFFFF
   \                     ??ZDO_CopyMatchInfo_3:
   \   0000DF   7E00         MOV     R6,#0x0
   \   0000E1   80DF         SJMP    ??ZDO_CopyMatchInfo_5
   2149          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine107:
   \   000000   F582         MOV     DPL,A
   \   000002   E5..         MOV     A,?V0 + 7
   \   000004   3400         ADDC    A,#0x0
   \   000006   12....       LCALL   ?Subroutine161 & 0xFFFF
   \                     ??CrossCallReturnLabel_503:
   \   000009   78..         MOV     R0,#?V0 + 0
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine161:
   \   000000   F583         MOV     DPH,A
   \   000002                REQUIRE ??Subroutine234_0
   \   000002                ; // Fall through to label ??Subroutine234_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine101:
   \   000000   F582         MOV     DPL,A
   \   000002   E5..         MOV     A,?V0 + 5
   \   000004   12....       LCALL   ??Subroutine215_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_561:
   \   000007                REQUIRE ??Subroutine235_0
   \   000007                ; // Fall through to label ??Subroutine235_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine235_0:
   \   000000   12....       LCALL   ?Subroutine166 & 0xFFFF
   \                     ??CrossCallReturnLabel_512:
   \   000003   EA           MOV     A,R2
   \   000004   4B           ORL     A,R3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine97:
   \   000000   F582         MOV     DPL,A
   \   000002   E5..         MOV     A,?V0 + 7
   \   000004   12....       LCALL   ??Subroutine236_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_513:
   \   000007   C3           CLR     C
   \   000008   33           RLC     A
   \   000009   FC           MOV     R4,A
   \   00000A   E4           CLR     A
   \   00000B   33           RLC     A
   \   00000C   FD           MOV     R5,A
   \   00000D   12....       LCALL   ??osal_memcpy?relay
   \   000010   7403         MOV     A,#0x3
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   E5..         MOV     A,?V0 + 4
   \   000003   2415         ADD     A,#0x15
   \   000005   F582         MOV     DPL,A
   \   000007   E5..         MOV     A,?V0 + 5
   \   000009   12....       LCALL   ??Subroutine215_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_560:
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine137:
   \   000000   12....       LCALL   ??Subroutine215_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_564:
   \   000003   EA           MOV     A,R2
   \   000004   F0           MOVX    @DPTR,A
   \   000005   A3           INC     DPTR
   \   000006   EB           MOV     A,R3
   \   000007   22           RET
   2150          
   2151          /*********************************************************************
   2152           * @fn      ZDMatchSendState()
   2153           *
   2154           * @brief   State machine for the End device match message algorithm.
   2155           *
   2156           * @param  reason - state of algoritm
   2157           * @param  status - initial message status
   2158           * @param  TransSeq - next transaction sequence number
   2159           *
   2160           * @return  FALSE if error and we are not currently matching, TRUE
   2161           *          if success.
   2162           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2163          uint8 ZDMatchSendState( uint8 reason, uint8 status, uint8 TransSeq )
   \                     ZDMatchSendState:
   2164          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 22
   \   000005   74EA         MOV     A,#-0x16
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7403         MOV     A,#0x3
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   EB           MOV     A,R3
   \   000010   F0           MOVX    @DPTR,A
   \   000011   89..         MOV     ?V0 + 6,R1
   \   000013   8A..         MOV     ?V0 + 7,R2
   2165            uint8 *dstIEEEAddr;
   2166            uint8 dstEP;
   2167            zAddrType_t dstAddr;
   2168            zAddrType_t destinationAddr;
   2169            uint16 msgType;
   2170            uint16 clusterID;
   2171            ZDEndDeviceBind_t *ed = NULL;
   \   000015   75..00       MOV     ?V0 + 2,#0x0
   \   000018   75..00       MOV     ?V0 + 3,#0x0
   2172            uint8 rspStatus = ZDP_SUCCESS;
   \   00001B   85..82       MOV     DPL,?XSP + 0
   \   00001E   85..83       MOV     DPH,?XSP + 1
   \   000021   E4           CLR     A
   \   000022   12....       LCALL   ?Subroutine54 & 0xFFFF
   2173          
   2174            if ( matchED == NULL )
   \                     ??CrossCallReturnLabel_105:
   \   000025   F9           MOV     R1,A
   \   000026   E8           MOV     A,R0
   \   000027   49           ORL     A,R1
   \   000028   7005         JNZ     ??ZDMatchSendState_0
   2175              return ( FALSE );
   \                     ??ZDMatchSendState_1:
   \   00002A   7900         MOV     R1,#0x0
   \   00002C   02....       LJMP    ??ZDMatchSendState_2 & 0xFFFF
   2176          
   2177            // Check sequence number
   2178            if ( reason == ZDMATCH_REASON_BIND_RSP || reason == ZDMATCH_REASON_UNBIND_RSP )
   \                     ??ZDMatchSendState_0:
   \   00002F   7403         MOV     A,#0x3
   \   000031   65..         XRL     A,?V0 + 6
   \   000033   6006         JZ      ??ZDMatchSendState_3
   \   000035   7402         MOV     A,#0x2
   \   000037   65..         XRL     A,?V0 + 6
   \   000039   700E         JNZ     ??ZDMatchSendState_4
   2179            {
   2180              if ( TransSeq != matchED->transSeq )
   \                     ??ZDMatchSendState_3:
   \   00003B   7403         MOV     A,#0x3
   \   00003D   12....       LCALL   ?XSTACK_DISP0_8
   \   000040   E0           MOVX    A,@DPTR
   \   000041   FA           MOV     R2,A
   \   000042   12....       LCALL   ?Subroutine95 & 0xFFFF
   2181                return( FALSE ); // ignore the message
   2182            }
   \                     ??CrossCallReturnLabel_181:
   \   000045   E0           MOVX    A,@DPTR
   \   000046   6A           XRL     A,R2
   \   000047   70E1         JNZ     ??ZDMatchSendState_1
   2183          
   2184            // turn off timer
   2185            APS_SetEndDeviceBindTimeout( 0, ZDO_EndDeviceBindMatchTimeoutCB );
   \                     ??ZDMatchSendState_4:
   \   000049                ; Setup parameters for call to function APS_SetEndDeviceBindTimeout
   \   000049   7C..         MOV     R4,#??ZDO_EndDeviceBindMatchTimeoutCB?relay & 0xff
   \   00004B   7D..         MOV     R5,#(??ZDO_EndDeviceBindMatchTimeoutCB?relay >> 8) & 0xff
   \   00004D   7A00         MOV     R2,#0x0
   \   00004F   7B00         MOV     R3,#0x0
   \   000051   12....       LCALL   ??APS_SetEndDeviceBindTimeout?relay
   2186          
   2187            if ( reason == ZDMATCH_REASON_TIMEOUT )
   \   000054   7401         MOV     A,#0x1
   \   000056   65..         XRL     A,?V0 + 6
   \   000058   700B         JNZ     ??ZDMatchSendState_5
   2188            {
   2189              rspStatus = ZDP_TIMEOUT;    // The process will stop
   \   00005A   85..82       MOV     DPL,?XSP + 0
   \   00005D   85..83       MOV     DPH,?XSP + 1
   \   000060   7485         MOV     A,#-0x7b
   \                     ??ZDMatchSendState_6:
   \   000062   F0           MOVX    @DPTR,A
   \   000063   803E         SJMP    ??ZDMatchSendState_7
   2190            }
   2191          
   2192            if ( reason == ZDMATCH_REASON_START || reason == ZDMATCH_REASON_BIND_RSP )
   \                     ??ZDMatchSendState_5:
   \   000065   90....       MOV     DPTR,#matchED
   \   000068   E0           MOVX    A,@DPTR
   \   000069   242F         ADD     A,#0x2f
   \   00006B   12....       LCALL   ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_193:
   \   00006E   E5..         MOV     A,?V0 + 6
   \   000070   6006         JZ      ??ZDMatchSendState_8
   \   000072   7403         MOV     A,#0x3
   \   000074   65..         XRL     A,?V0 + 6
   \   000076   7015         JNZ     ??ZDMatchSendState_9
   2193            {
   2194              matchED->sending = ZDMATCH_SENDING_UNBIND;
   \                     ??ZDMatchSendState_8:
   \   000078   7401         MOV     A,#0x1
   \   00007A   F0           MOVX    @DPTR,A
   2195          
   2196              if ( reason == ZDMATCH_REASON_BIND_RSP && status != ZDP_SUCCESS )
   \   00007B   7403         MOV     A,#0x3
   \   00007D   65..         XRL     A,?V0 + 6
   \   00007F   701E         JNZ     ??ZDMatchSendState_10
   \   000081   E5..         MOV     A,?V0 + 7
   \   000083   601E         JZ      ??ZDMatchSendState_7
   2197              {
   2198                rspStatus = status;
   \   000085   85..82       MOV     DPL,?XSP + 0
   \   000088   85..83       MOV     DPH,?XSP + 1
   \   00008B   80D5         SJMP    ??ZDMatchSendState_6
   2199              }
   2200            }
   2201            else if ( reason == ZDMATCH_REASON_UNBIND_RSP )
   \                     ??ZDMatchSendState_9:
   \   00008D   7402         MOV     A,#0x2
   \   00008F   65..         XRL     A,?V0 + 6
   \   000091   7010         JNZ     ??ZDMatchSendState_7
   2202            {
   2203              if ( status == ZDP_SUCCESS )
   \   000093   E5..         MOV     A,?V0 + 7
   \   000095   7004         JNZ     ??ZDMatchSendState_11
   2204              {
   2205                matchED->sending = ZDMATCH_SENDING_UNBIND;
   \   000097   7401         MOV     A,#0x1
   \   000099   80C7         SJMP    ??ZDMatchSendState_6
   2206              }
   2207              else
   2208              {
   2209                matchED->sending = ZDMATCH_SENDING_BIND;
   \                     ??ZDMatchSendState_11:
   \   00009B   7402         MOV     A,#0x2
   \   00009D   80C3         SJMP    ??ZDMatchSendState_6
   2210              }
   2211            }
   2212          
   2213            if ( reason != ZDMATCH_REASON_START && matchED->sending == ZDMATCH_SENDING_UNBIND )
   \                     ??ZDMatchSendState_10:
   \   00009F   E5..         MOV     A,?V0 + 6
   \   0000A1   6019         JZ      ??ZDMatchSendState_12
   \                     ??ZDMatchSendState_7:
   \   0000A3   12....       LCALL   ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_163:
   \   0000A6   7014         JNZ     ??ZDMatchSendState_12
   2214            {
   2215              // Move to the next cluster ID
   2216              if ( matchED->ed1numMatched )
   \   0000A8   90....       MOV     DPTR,#matchED
   \   0000AB   E0           MOVX    A,@DPTR
   \   0000AC   2431         ADD     A,#0x31
   \   0000AE   08           INC     R0
   \   0000AF   08           INC     R0
   \   0000B0   12....       LCALL   ??Subroutine220_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_401:
   \   0000B3   7005         JNZ     ??ZDMatchSendState_13
   2217                matchED->ed1numMatched--;
   2218              else if ( matchED->ed2numMatched )
   \   0000B5   12....       LCALL   ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_162:
   \   0000B8   6002         JZ      ??ZDMatchSendState_12
   2219                matchED->ed2numMatched--;
   \                     ??ZDMatchSendState_13:
   \   0000BA   14           DEC     A
   \   0000BB   F0           MOVX    @DPTR,A
   2220            }
   2221          
   2222            // What message do we send now
   2223            if ( matchED->ed1numMatched )
   \                     ??ZDMatchSendState_12:
   \   0000BC   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_124:
   \   0000BF   F8           MOV     R0,A
   \   0000C0   90....       MOV     DPTR,#matchED
   \   0000C3   6022         JZ      ??ZDMatchSendState_14
   2224            {
   2225              ed = &(matchED->ed1);
   \   0000C5   12....       LCALL   ?Subroutine98 & 0xFFFF
   2226              clusterID = matchED->ed1Matched[matchED->ed1numMatched-1];
   \                     ??CrossCallReturnLabel_187:
   \   0000C8   E8           MOV     A,R0
   \   0000C9   C3           CLR     C
   \   0000CA   33           RLC     A
   \   0000CB   F8           MOV     R0,A
   \   0000CC   E4           CLR     A
   \   0000CD   33           RLC     A
   \   0000CE   F9           MOV     R1,A
   \   0000CF   90....       MOV     DPTR,#matchED
   \   0000D2   E0           MOVX    A,@DPTR
   \   0000D3   2432         ADD     A,#0x32
   \   0000D5   12....       LCALL   ?Subroutine60 & 0xFFFF
   2227              dstIEEEAddr = matchED->ed2.ieeeAddr;
   2228              dstEP = matchED->ed2.endpoint;
   2229            }
   \                     ??CrossCallReturnLabel_119:
   \   0000D8   241D         ADD     A,#0x1d
   \   0000DA   12....       LCALL   ??Subroutine219_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_397:
   \   0000DD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E0   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   0000E3   2425         ADD     A,#0x25
   \   0000E5   802F         SJMP    ??ZDMatchSendState_15
   2230            else if ( matchED->ed2numMatched )
   \                     ??ZDMatchSendState_14:
   \   0000E7   12....       LCALL   ??Subroutine231_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_467:
   \   0000EA   F8           MOV     R0,A
   \   0000EB   602E         JZ      ??ZDMatchSendState_16
   2231            {
   2232              ed = &(matchED->ed2);
   \   0000ED   90....       MOV     DPTR,#matchED
   \   0000F0   E0           MOVX    A,@DPTR
   \   0000F1   2417         ADD     A,#0x17
   \   0000F3   F5..         MOV     ?V0 + 2,A
   \   0000F5   A3           INC     DPTR
   \   0000F6   E0           MOVX    A,@DPTR
   \   0000F7   3400         ADDC    A,#0x0
   \   0000F9   F5..         MOV     ?V0 + 3,A
   2233              clusterID = matchED->ed2Matched[matchED->ed2numMatched-1];
   \   0000FB   E8           MOV     A,R0
   \   0000FC   C3           CLR     C
   \   0000FD   33           RLC     A
   \   0000FE   F8           MOV     R0,A
   \   0000FF   E4           CLR     A
   \   000100   33           RLC     A
   \   000101   F9           MOV     R1,A
   \   000102   90....       MOV     DPTR,#matchED
   \   000105   E0           MOVX    A,@DPTR
   \   000106   2435         ADD     A,#0x35
   \   000108   12....       LCALL   ?Subroutine60 & 0xFFFF
   2234              dstIEEEAddr = matchED->ed1.ieeeAddr;
   2235              dstEP = matchED->ed1.endpoint;
   2236            }
   \                     ??CrossCallReturnLabel_120:
   \   00010B   12....       LCALL   ?Subroutine117 & 0xFFFF
   \                     ??CrossCallReturnLabel_399:
   \   00010E   12....       LCALL   ?XSTACK_DISP0_8
   \   000111   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   000114   240E         ADD     A,#0xe
   \                     ??ZDMatchSendState_15:
   \   000116   12....       LCALL   ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_404:
   \   000119   F5..         MOV     ?V0 + 5,A
   2237          
   2238            dstAddr.addrMode = Addr16Bit;
   \                     ??ZDMatchSendState_16:
   \   00011B   740C         MOV     A,#0xc
   \   00011D   12....       LCALL   ?XSTACK_DISP0_8
   \   000120   7402         MOV     A,#0x2
   \   000122   12....       LCALL   ?Subroutine53 & 0xFFFF
   2239          
   2240            // Send the next message
   2241            if ( rspStatus == ZDP_SUCCESS && ed )
   \                     ??CrossCallReturnLabel_103:
   \   000125   6003         JZ      $+5
   \   000127   02....       LJMP    ??ZDMatchSendState_17 & 0xFFFF
   \   00012A   E5..         MOV     A,?V0 + 2
   \   00012C   45..         ORL     A,?V0 + 3
   \   00012E   7003         JNZ     $+5
   \   000130   02....       LJMP    ??ZDMatchSendState_17 & 0xFFFF
   2242            {
   2243              // Send unbind/bind message to source
   2244              if ( matchED->sending == ZDMATCH_SENDING_UNBIND )
   \   000133   12....       LCALL   ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_164:
   \   000136   7004         JNZ     ??ZDMatchSendState_18
   2245                msgType = Unbind_req;
   \   000138   7E22         MOV     R6,#0x22
   \   00013A   8002         SJMP    ??ZDMatchSendState_19
   2246              else
   2247                msgType = Bind_req;
   \                     ??ZDMatchSendState_18:
   \   00013C   7E21         MOV     R6,#0x21
   2248          
   2249              dstAddr.addr.shortAddr = ed->srcAddr;
   \                     ??ZDMatchSendState_19:
   \   00013E   85..82       MOV     DPL,?V0 + 2
   \   000141   85..83       MOV     DPH,?V0 + 3
   \   000144   12....       LCALL   ??Subroutine223_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_418:
   \   000147   7404         MOV     A,#0x4
   \   000149   12....       LCALL   ?XSTACK_DISP0_8
   \   00014C   12....       LCALL   ??Subroutine217_0 & 0xFFFF
   2250          
   2251              // Save off the transaction sequence number
   2252              matchED->transSeq = ZDP_TransID;
   \                     ??CrossCallReturnLabel_394:
   \   00014F   90....       MOV     DPTR,#ZDP_TransID
   \   000152   E0           MOVX    A,@DPTR
   \   000153   C0E0         PUSH    A
   \   000155   12....       LCALL   ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_182:
   \   000158   D0E0         POP     A
   \   00015A   F0           MOVX    @DPTR,A
   2253          
   2254              destinationAddr.addrMode = Addr64Bit;
   \   00015B   7415         MOV     A,#0x15
   \   00015D   12....       LCALL   ?XSTACK_DISP0_8
   \   000160   7403         MOV     A,#0x3
   \   000162   F0           MOVX    @DPTR,A
   2255              osal_cpyExtAddr( destinationAddr.addr.extAddr, dstIEEEAddr );
   \   000163                ; Setup parameters for call to function sAddrExtCpy
   \   000163   7401         MOV     A,#0x1
   \   000165   12....       LCALL   ?XSTACK_DISP0_8
   \   000168   12....       LCALL   ?Subroutine110 & 0xFFFF
   \                     ??CrossCallReturnLabel_212:
   \   00016B   740D         MOV     A,#0xd
   \   00016D   12....       LCALL   ?XSTACK_DISP0_8
   \   000170   AA82         MOV     R2,DPL
   \   000172   AB83         MOV     R3,DPH
   \   000174   12....       LCALL   ??sAddrExtCpy?relay
   2256          
   2257              ZDP_BindUnbindReq( msgType, &dstAddr, ed->ieeeAddr, ed->endpoint, clusterID,
   2258                  &destinationAddr, dstEP, ed->SecurityUse );
   \   000177                ; Setup parameters for call to function ZDP_BindUnbindReq
   \   000177   85..82       MOV     DPL,?V0 + 2
   \   00017A   85..83       MOV     DPH,?V0 + 3
   \   00017D   A3           INC     DPTR
   \   00017E   E0           MOVX    A,@DPTR
   \   00017F   F5..         MOV     ?V0 + 4,A
   \   000181   78..         MOV     R0,#?V0 + 4
   \   000183   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000186   E5..         MOV     A,?V0 + 5
   \   000188   F5..         MOV     ?V0 + 4,A
   \   00018A   78..         MOV     R0,#?V0 + 4
   \   00018C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00018F   740F         MOV     A,#0xf
   \   000191   12....       LCALL   ?XSTACK_DISP0_8
   \   000194   8582..       MOV     ?V0 + 4,DPL
   \   000197   8583..       MOV     ?V0 + 5,DPH
   \   00019A   78..         MOV     R0,#?V0 + 4
   \   00019C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00019F   78..         MOV     R0,#?V0 + 0
   \   0001A1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001A4   E5..         MOV     A,?V0 + 2
   \   0001A6   2406         ADD     A,#0x6
   \   0001A8   F5..         MOV     ?V0 + 0,A
   \   0001AA   E5..         MOV     A,?V0 + 3
   \   0001AC   12....       LCALL   ??Subroutine248_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_615:
   \   0001AF   78..         MOV     R0,#?V0 + 0
   \   0001B1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001B4   12....       LCALL   ?Subroutine141 & 0xFFFF
   \                     ??CrossCallReturnLabel_585:
   \   0001B7   E5..         MOV     A,?V0 + 3
   \   0001B9   12....       LCALL   ?Subroutine134 & 0xFFFF
   \                     ??CrossCallReturnLabel_243:
   \   0001BC   740C         MOV     A,#0xc
   \   0001BE   12....       LCALL   ?XSTACK_DISP0_8
   \   0001C1   AC82         MOV     R4,DPL
   \   0001C3   AD83         MOV     R5,DPH
   \   0001C5   EE           MOV     A,R6
   \   0001C6   FA           MOV     R2,A
   \   0001C7   7B00         MOV     R3,#0x0
   \   0001C9   12....       LCALL   ??ZDP_BindUnbindReq?relay
   \   0001CC   7408         MOV     A,#0x8
   \   0001CE   12....       LCALL   ?DEALLOC_XSTACK8
   2259          
   2260              // Set timeout for response
   2261              APS_SetEndDeviceBindTimeout( AIB_MaxBindingTime, ZDO_EndDeviceBindMatchTimeoutCB );
   \   0001D1                ; Setup parameters for call to function APS_SetEndDeviceBindTimeout
   \   0001D1   12....       LCALL   ?Subroutine112 & 0xFFFF
   2262            }
   \                     ??CrossCallReturnLabel_215:
   \   0001D4   02....       LJMP    ??ZDMatchSendState_20 & 0xFFFF
   2263            else
   2264            {
   2265              // Send the response messages to requesting devices
   2266              // send response to first requester
   2267              dstAddr.addr.shortAddr = matchED->ed1.srcAddr;
   \                     ??ZDMatchSendState_17:
   \   0001D7   90....       MOV     DPTR,#matchED
   \   0001DA   12....       LCALL   ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_170:
   \   0001DD   7404         MOV     A,#0x4
   \   0001DF   12....       LCALL   ?XSTACK_DISP0_8
   \   0001E2   12....       LCALL   ?Subroutine15 & 0xFFFF
   2268              ZDP_EndDeviceBindRsp( matchED->ed1.TransSeq, &dstAddr, rspStatus, matchED->ed1.SecurityUse );
   \                     ??CrossCallReturnLabel_14:
   \   0001E5   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001E8   7401         MOV     A,#0x1
   \   0001EA   12....       LCALL   ?XSTACK_DISP0_8
   \   0001ED   8582..       MOV     ?V0 + 0,DPL
   \   0001F0   8583..       MOV     ?V0 + 1,DPH
   \   0001F3   78..         MOV     R0,#?V0 + 0
   \   0001F5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001F8   75..20       MOV     ?V0 + 0,#0x20
   \   0001FB   75..80       MOV     ?V0 + 1,#-0x80
   \   0001FE   78..         MOV     R0,#?V0 + 0
   \   000200   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000203   7901         MOV     R1,#0x1
   \   000205   7409         MOV     A,#0x9
   \   000207   12....       LCALL   ?XSTACK_DISP0_8
   \   00020A   12....       LCALL   ?Subroutine105 & 0xFFFF
   \                     ??CrossCallReturnLabel_202:
   \   00020D   12....       LCALL   ?DEALLOC_XSTACK8
   2269          
   2270              // send response to second requester
   2271              if ( matchED->state == ZDMATCH_SENDING_BINDS )
   \   000210   12....       LCALL   ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_160:
   \   000213   704B         JNZ     ??ZDMatchSendState_21
   2272              {
   2273                dstAddr.addr.shortAddr = matchED->ed2.srcAddr;
   \   000215   90....       MOV     DPTR,#matchED
   \   000218   E0           MOVX    A,@DPTR
   \   000219   2419         ADD     A,#0x19
   \   00021B   12....       LCALL   ?Subroutine100 & 0xFFFF
   2274                ZDP_EndDeviceBindRsp( matchED->ed2.TransSeq, &dstAddr, rspStatus, matchED->ed2.SecurityUse );
   2275              }
   \                     ??CrossCallReturnLabel_194:
   \   00021E   12....       LCALL   ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_415:
   \   000221   7404         MOV     A,#0x4
   \   000223   12....       LCALL   ?XSTACK_DISP0_8
   \   000226   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   000229   2418         ADD     A,#0x18
   \   00022B   12....       LCALL   ??Subroutine207_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_350:
   \   00022E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000231   7401         MOV     A,#0x1
   \   000233   12....       LCALL   ?XSTACK_DISP0_8
   \   000236   8582..       MOV     ?V0 + 0,DPL
   \   000239   8583..       MOV     ?V0 + 1,DPH
   \   00023C   78..         MOV     R0,#?V0 + 0
   \   00023E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000241   75..20       MOV     ?V0 + 0,#0x20
   \   000244   75..80       MOV     ?V0 + 1,#-0x80
   \   000247   78..         MOV     R0,#?V0 + 0
   \   000249   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00024C   7901         MOV     R1,#0x1
   \   00024E   7409         MOV     A,#0x9
   \   000250   12....       LCALL   ?XSTACK_DISP0_8
   \   000253   AC82         MOV     R4,DPL
   \   000255   AD83         MOV     R5,DPH
   \   000257   12....       LCALL   ?Subroutine118 & 0xFFFF
   \                     ??CrossCallReturnLabel_225:
   \   00025A   12....       LCALL   ?Subroutine186 & 0xFFFF
   \                     ??CrossCallReturnLabel_446:
   \   00025D   12....       LCALL   ?DEALLOC_XSTACK8
   2276          
   2277              // Process ended - release memory used
   2278              ZDO_RemoveMatchMemory();
   \                     ??ZDMatchSendState_21:
   \   000260                ; Setup parameters for call to function ZDO_RemoveMatchMemory
   \   000260   12....       LCALL   ??ZDO_RemoveMatchMemory?relay
   2279            }
   2280          
   2281            return ( TRUE );
   \                     ??ZDMatchSendState_20:
   \   000263   7901         MOV     R1,#0x1
   \                     ??ZDMatchSendState_2:
   \   000265   7416         MOV     A,#0x16
   \   000267   02....       LJMP    ?Subroutine6 & 0xFFFF
   2282          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine95:
   \   000000   90....       MOV     DPTR,#matchED
   \   000003   E0           MOVX    A,@DPTR
   \   000004   2430         ADD     A,#0x30
   \   000006   12....       LCALL   ?Subroutine165 & 0xFFFF
   \                     ??CrossCallReturnLabel_286:
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine83:
   \   000000   90....       MOV     DPTR,#matchED
   \   000003   E0           MOVX    A,@DPTR
   \   000004   242F         ADD     A,#0x2f
   \   000006   12....       LCALL   ?Subroutine164 & 0xFFFF
   \                     ??CrossCallReturnLabel_522:
   \   000009   6401         XRL     A,#0x1
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine60:
   \   000000   12....       LCALL   ?Subroutine175 & 0xFFFF
   \                     ??CrossCallReturnLabel_301:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   28           ADD     A,R0
   \   000005   F8           MOV     R0,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   39           ADDC    A,R1
   \   000009   F9           MOV     R1,A
   \   00000A   E8           MOV     A,R0
   \   00000B   24FE         ADD     A,#-0x2
   \   00000D   F582         MOV     DPL,A
   \   00000F   E9           MOV     A,R1
   \   000010   34FF         ADDC    A,#-0x1
   \   000012   12....       LCALL   ?Subroutine161 & 0xFFFF
   \                     ??CrossCallReturnLabel_502:
   \   000015   90....       MOV     DPTR,#matchED
   \   000018   E0           MOVX    A,@DPTR
   \   000019   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   12....       LCALL   ?Subroutine154 & 0xFFFF
   \                     ??CrossCallReturnLabel_269:
   \   000003   22           RET
   2283          
   2284          /*********************************************************************
   2285           * @fn      ZDO_EndDeviceBindMatchTimeoutCB()
   2286           *
   2287           * @brief   End device bind timeout.
   2288           *
   2289           * @param  none
   2290           *
   2291           * @return  none
   2292           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2293          static void ZDO_EndDeviceBindMatchTimeoutCB( void )
   \                     ZDO_EndDeviceBindMatchTimeoutCB:
   2294          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2295            ZDMatchSendState( ZDMATCH_REASON_TIMEOUT, ZDP_TIMEOUT, 0 );
   \   000004                ; Setup parameters for call to function ZDMatchSendState
   \   000004   7B00         MOV     R3,#0x0
   \   000006   7A85         MOV     R2,#-0x7b
   \   000008   7901         MOV     R1,#0x1
   \   00000A   12....       LCALL   ??ZDMatchSendState?relay
   2296          }
   \   00000D   02....       LJMP    ?Subroutine0 & 0xFFFF
   2297          
   2298          /*********************************************************************
   2299           * ZDO MESSAGE PARSING API FUNCTIONS
   2300           */
   2301          
   2302          /*********************************************************************
   2303           * @fn          ZDO_ParseEndDeviceBindReq
   2304           *
   2305           * @brief       This function parses the End_Device_Bind_req message.
   2306           * 
   2307           *     NOTE:  The clusters lists in bindReq are allocated in this
   2308           *            function and must be freed by that calling function.
   2309           *
   2310           * @param       inMsg  - incoming message (request)
   2311           * @param       bindReq - pointer to place to parse message to
   2312           *
   2313           * @return      none
   2314           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2315          void ZDO_ParseEndDeviceBindReq( zdoIncomingMsg_t *inMsg, ZDEndDeviceBind_t *bindReq )
   \                     ZDO_ParseEndDeviceBindReq:
   2316          {
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   8C..         MOV     ?V0 + 0,R4
   \   000007   8D..         MOV     ?V0 + 1,R5
   2317            uint8 *msg;
   2318          
   2319            // Parse the message
   2320            bindReq->TransSeq = inMsg->TransSeq;
   \   000009   EA           MOV     A,R2
   \   00000A   240F         ADD     A,#0xf
   \   00000C   12....       LCALL   ?Subroutine120 & 0xFFFF
   \                     ??CrossCallReturnLabel_644:
   \   00000F   12....       LCALL   ?Subroutine189 & 0xFFFF
   2321            bindReq->srcAddr = inMsg->srcAddr.addr.shortAddr;
   \                     ??CrossCallReturnLabel_637:
   \   000012   12....       LCALL   ??Subroutine223_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_419:
   \   000015   8C82         MOV     DPL,R4
   \   000017   8D83         MOV     DPH,R5
   \   000019   12....       LCALL   ?Subroutine45 & 0xFFFF
   2322            bindReq->SecurityUse = inMsg->SecurityUse;
   \                     ??CrossCallReturnLabel_396:
   \   00001C   EA           MOV     A,R2
   \   00001D   240E         ADD     A,#0xe
   \   00001F   12....       LCALL   ?Subroutine120 & 0xFFFF
   \                     ??CrossCallReturnLabel_645:
   \   000022   A3           INC     DPTR
   \   000023   12....       LCALL   ?Subroutine36 & 0xFFFF
   2323            msg = inMsg->asdu;
   \                     ??CrossCallReturnLabel_51:
   \   000026   FE           MOV     R6,A
   \   000027   A3           INC     DPTR
   \   000028   E0           MOVX    A,@DPTR
   \   000029   12....       LCALL   ?Subroutine96 & 0xFFFF
   2324          
   2325            bindReq->localCoordinator = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_569:
   \   00002C   8C82         MOV     DPL,R4
   \   00002E   8D83         MOV     DPH,R5
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   A3           INC     DPTR
   \   000033   A3           INC     DPTR
   \   000034   12....       LCALL   ?Subroutine18 & 0xFFFF
   2326            msg += 2;
   2327          
   2328            osal_cpyExtAddr( bindReq->ieeeAddr, msg );
   \                     ??CrossCallReturnLabel_19:
   \   000037   2406         ADD     A,#0x6
   \   000039   FA           MOV     R2,A
   \   00003A   E5..         MOV     A,?V0 + 1
   \   00003C   12....       LCALL   ?Subroutine55 & 0xFFFF
   2329            msg += Z_EXTADDR_LEN;
   2330          
   2331            bindReq->endpoint = *msg++;
   \                     ??CrossCallReturnLabel_573:
   \   00003F   C0E0         PUSH    A
   \   000041   E5..         MOV     A,?V0 + 0
   \   000043   240E         ADD     A,#0xe
   \   000045   12....       LCALL   ??Subroutine238_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_546:
   \   000048   D0E0         POP     A
   \   00004A   12....       LCALL   ?Subroutine28 & 0xFFFF
   2332            bindReq->profileID = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_36:
   \   00004D   F8           MOV     R0,A
   \   00004E   E5..         MOV     A,?V0 + 0
   \   000050   240F         ADD     A,#0xf
   \   000052   12....       LCALL   ??Subroutine238_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_547:
   \   000055   E8           MOV     A,R0
   \   000056   12....       LCALL   ?Subroutine29 & 0xFFFF
   2333            msg += 2;
   2334          
   2335            bindReq->inClusters = NULL;
   \                     ??CrossCallReturnLabel_38:
   \   000059   2412         ADD     A,#0x12
   \   00005B   F5..         MOV     ?V0 + 2,A
   \   00005D   E5..         MOV     A,?V0 + 1
   \   00005F   12....       LCALL   ??Subroutine229_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_459:
   \   000062   E4           CLR     A
   \   000063   F0           MOVX    @DPTR,A
   \   000064   A3           INC     DPTR
   \   000065   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   000068   E4           CLR     A
   \   000069   F0           MOVX    @DPTR,A
   \   00006A   A3           INC     DPTR
   \   00006B   12....       LCALL   ?Subroutine52 & 0xFFFF
   2336            bindReq->outClusters = NULL;
   2337            
   2338            if ((bindReq->numInClusters = *msg++) &&
   2339                (bindReq->inClusters = (uint16*)osal_mem_alloc( (bindReq->numInClusters * sizeof( uint16 )))))
   \                     ??CrossCallReturnLabel_101:
   \   00006E   0E           INC     R6
   \   00006F   AF83         MOV     R7,DPH
   \   000071   E5..         MOV     A,?V0 + 0
   \   000073   2411         ADD     A,#0x11
   \   000075   12....       LCALL   ?Subroutine133 & 0xFFFF
   \                     ??CrossCallReturnLabel_239:
   \   000078   6024         JZ      ??ZDO_ParseEndDeviceBindReq_0
   \   00007A                ; Setup parameters for call to function osal_mem_alloc
   \   00007A   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   00007D   FC           MOV     R4,A
   \   00007E   A3           INC     DPTR
   \   00007F   E0           MOVX    A,@DPTR
   \   000080   FD           MOV     R5,A
   \   000081   EC           MOV     A,R4
   \   000082   4D           ORL     A,R5
   \   000083   6019         JZ      ??ZDO_ParseEndDeviceBindReq_0
   2340            {
   2341              msg = ZDO_ConvertOTAClusters( bindReq->numInClusters, msg, bindReq->inClusters );
   \   000085                ; Setup parameters for call to function ZDO_ConvertOTAClusters
   \   000085   EE           MOV     A,R6
   \   000086   FA           MOV     R2,A
   \   000087   EF           MOV     A,R7
   \   000088   FB           MOV     R3,A
   \   000089   85..82       MOV     DPL,?V0 + 4
   \   00008C   85..83       MOV     DPH,?V0 + 5
   \   00008F   E0           MOVX    A,@DPTR
   \   000090   F9           MOV     R1,A
   \   000091   12....       LCALL   ??ZDO_ConvertOTAClusters?relay
   \   000094   8A..         MOV     ?V0 + 2,R2
   \   000096   8B..         MOV     ?V0 + 3,R3
   \   000098   AE..         MOV     R6,?V0 + 2
   \   00009A   AF..         MOV     R7,?V0 + 3
   \   00009C   8008         SJMP    ??ZDO_ParseEndDeviceBindReq_1
   2342            }
   2343            else
   2344            {
   2345              bindReq->numInClusters = 0;
   \                     ??ZDO_ParseEndDeviceBindReq_0:
   \   00009E   85..82       MOV     DPL,?V0 + 4
   \   0000A1   85..83       MOV     DPH,?V0 + 5
   \   0000A4   E4           CLR     A
   \   0000A5   F0           MOVX    @DPTR,A
   2346            }
   2347          
   2348            if ((bindReq->numOutClusters = *msg++) &&
   2349                (bindReq->outClusters = (uint16*)osal_mem_alloc((bindReq->numOutClusters * sizeof(uint16)))))
   \                     ??ZDO_ParseEndDeviceBindReq_1:
   \   0000A6   8E82         MOV     DPL,R6
   \   0000A8   8F83         MOV     DPH,R7
   \   0000AA   E0           MOVX    A,@DPTR
   \   0000AB   F8           MOV     R0,A
   \   0000AC   A3           INC     DPTR
   \   0000AD   AE82         MOV     R6,DPL
   \   0000AF   AF83         MOV     R7,DPH
   \   0000B1   E5..         MOV     A,?V0 + 0
   \   0000B3   2414         ADD     A,#0x14
   \   0000B5   12....       LCALL   ?Subroutine133 & 0xFFFF
   \                     ??CrossCallReturnLabel_240:
   \   0000B8   602F         JZ      ??ZDO_ParseEndDeviceBindReq_2
   \   0000BA                ; Setup parameters for call to function osal_mem_alloc
   \   0000BA   C3           CLR     C
   \   0000BB   33           RLC     A
   \   0000BC   FA           MOV     R2,A
   \   0000BD   E4           CLR     A
   \   0000BE   33           RLC     A
   \   0000BF   FB           MOV     R3,A
   \   0000C0   12....       LCALL   ??osal_mem_alloc?relay
   \   0000C3   E5..         MOV     A,?V0 + 0
   \   0000C5   2415         ADD     A,#0x15
   \   0000C7   F582         MOV     DPL,A
   \   0000C9   E5..         MOV     A,?V0 + 1
   \   0000CB   12....       LCALL   ?Subroutine137 & 0xFFFF
   \                     ??CrossCallReturnLabel_248:
   \   0000CE   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   0000D1   12....       LCALL   ?Subroutine110 & 0xFFFF
   \                     ??CrossCallReturnLabel_213:
   \   0000D4   EC           MOV     A,R4
   \   0000D5   4D           ORL     A,R5
   \   0000D6   6011         JZ      ??ZDO_ParseEndDeviceBindReq_2
   2350            {
   2351              msg = ZDO_ConvertOTAClusters( bindReq->numOutClusters, msg, bindReq->outClusters );
   \   0000D8                ; Setup parameters for call to function ZDO_ConvertOTAClusters
   \   0000D8   EE           MOV     A,R6
   \   0000D9   FA           MOV     R2,A
   \   0000DA   EF           MOV     A,R7
   \   0000DB   FB           MOV     R3,A
   \   0000DC   85..82       MOV     DPL,?V0 + 4
   \   0000DF   85..83       MOV     DPH,?V0 + 5
   \   0000E2   E0           MOVX    A,@DPTR
   \   0000E3   F9           MOV     R1,A
   \   0000E4   12....       LCALL   ??ZDO_ConvertOTAClusters?relay
   \   0000E7   8008         SJMP    ??ZDO_ParseEndDeviceBindReq_3
   2352            }
   2353            else
   2354            {
   2355              bindReq->numOutClusters = 0;
   \                     ??ZDO_ParseEndDeviceBindReq_2:
   \   0000E9   85..82       MOV     DPL,?V0 + 4
   \   0000EC   85..83       MOV     DPH,?V0 + 5
   \   0000EF   E4           CLR     A
   \   0000F0   F0           MOVX    @DPTR,A
   2356            }
   2357          }
   \                     ??ZDO_ParseEndDeviceBindReq_3:
   \   0000F1   7F07         MOV     R7,#0x7
   \   0000F3   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine238_0:
   \   000000   F582         MOV     DPL,A
   \   000002   E5..         MOV     A,?V0 + 1
   \   000004                REQUIRE ??Subroutine239_0
   \   000004                ; // Fall through to label ??Subroutine239_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine133:
   \   000000   F5..         MOV     ?V0 + 4,A
   \   000002   E5..         MOV     A,?V0 + 1
   \   000004   3400         ADDC    A,#0x0
   \   000006   F5..         MOV     ?V0 + 5,A
   \   000008   85..82       MOV     DPL,?V0 + 4
   \   00000B   F583         MOV     DPH,A
   \   00000D   E8           MOV     A,R0
   \   00000E   F0           MOVX    @DPTR,A
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine96:
   \   000000   FF           MOV     R7,A
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005                REQUIRE ??Subroutine240_0
   \   000005                ; // Fall through to label ??Subroutine240_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000   3400         ADDC    A,#0x0
   \   000002   FB           MOV     R3,A
   \   000003                REQUIRE ??Subroutine241_0
   \   000003                ; // Fall through to label ??Subroutine241_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine241_0:
   \   000000   12....       LCALL   ?Subroutine157 & 0xFFFF
   \                     ??CrossCallReturnLabel_576:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine157:
   \   000000   12....       LCALL   ??sAddrExtCpy?relay
   \   000003   EE           MOV     A,R6
   \   000004   2408         ADD     A,#0x8
   \   000006   12....       LCALL   ?Subroutine199 & 0xFFFF
   \                     ??CrossCallReturnLabel_579:
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   E5..         MOV     A,?V0 + 0
   \   000003   2415         ADD     A,#0x15
   \   000005   F582         MOV     DPL,A
   \   000007   E5..         MOV     A,?V0 + 1
   \   000009   12....       LCALL   ??Subroutine215_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_559:
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   12....       LCALL   ?Subroutine144 & 0xFFFF
   \                     ??CrossCallReturnLabel_255:
   \   000003   E5..         MOV     A,?V0 + 0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine188:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   A3           INC     DPTR
   \   000006   AE82         MOV     R6,DPL
   \   000008   AF83         MOV     R7,DPH
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine144:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E9           MOV     A,R1
   \   000003   12....       LCALL   ?Subroutine187 & 0xFFFF
   \                     ??CrossCallReturnLabel_653:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine187:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   12....       LCALL   ?Subroutine202 & 0xFFFF
   \                     ??CrossCallReturnLabel_655:
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine120:
   \   000000   F582         MOV     DPL,A
   \   000002   EB           MOV     A,R3
   \   000003   12....       LCALL   ??Subroutine215_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_563:
   \   000006                REQUIRE ??Subroutine252_0
   \   000006                ; // Fall through to label ??Subroutine252_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine252_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8C82         MOV     DPL,R4
   \   000003   8D83         MOV     DPH,R5
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   C3           CLR     C
   \   000001   33           RLC     A
   \   000002   FA           MOV     R2,A
   \   000003   E4           CLR     A
   \   000004   33           RLC     A
   \   000005   FB           MOV     R3,A
   \   000006   12....       LCALL   ??osal_mem_alloc?relay
   \   000009   85..82       MOV     DPL,?V0 + 2
   \   00000C   85..83       MOV     DPH,?V0 + 3
   \   00000F   EA           MOV     A,R2
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   EB           MOV     A,R3
   \   000013   F0           MOVX    @DPTR,A
   \   000014   85..82       MOV     DPL,?V0 + 2
   \   000017   85..83       MOV     DPH,?V0 + 3
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   12....       LCALL   ?Subroutine148 & 0xFFFF
   \                     ??CrossCallReturnLabel_263:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine148:
   \   000000   12....       LCALL   ?Subroutine188 & 0xFFFF
   \                     ??CrossCallReturnLabel_320:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FA           MOV     R2,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F9           MOV     R1,A
   \   000008   EA           MOV     A,R2
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   12....       LCALL   ?Subroutine144 & 0xFFFF
   \                     ??CrossCallReturnLabel_257:
   \   000003                ; Setup parameters for call to function sAddrExtCpy
   \   000003                ; Setup parameters for call to function sAddrExtCpy
   \   000003   EE           MOV     A,R6
   \   000004   FC           MOV     R4,A
   \   000005   EF           MOV     A,R7
   \   000006   FD           MOV     R5,A
   \   000007   E5..         MOV     A,?V0 + 0
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   12....       LCALL   ?Subroutine176 & 0xFFFF
   \                     ??CrossCallReturnLabel_302:
   \   000004   22           RET
   2358          
   2359          /*********************************************************************
   2360           * @fn          ZDO_ParseBindUnbindReq
   2361           *
   2362           * @brief       This function parses the Bind_req or Unbind_req message.
   2363           *
   2364           * @param       inMsg  - incoming message (request)
   2365           * @param       pReq - place to put parsed information
   2366           *
   2367           * @return      none
   2368           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2369          void ZDO_ParseBindUnbindReq( zdoIncomingMsg_t *inMsg, ZDO_BindUnbindReq_t *pReq )
   \                     ZDO_ParseBindUnbindReq:
   2370          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   8C..         MOV     ?V0 + 0,R4
   \   000007   8D..         MOV     ?V0 + 1,R5
   2371            uint8 *msg;
   2372          
   2373            msg = inMsg->asdu;
   \   000009   12....       LCALL   ?Subroutine123 & 0xFFFF
   2374            osal_cpyExtAddr( pReq->srcAddress, msg );
   \                     ??CrossCallReturnLabel_362:
   \   00000C                ; Setup parameters for call to function sAddrExtCpy
   \   00000C   12....       LCALL   ?Subroutine8 & 0xFFFF
   2375            msg += Z_EXTADDR_LEN;
   2376            pReq->srcEndpoint = *msg++;
   2377            pReq->clusterID = BUILD_UINT16( msg[0], msg[1] );
   2378            msg += 2;
   2379            pReq->dstAddress.addrMode = *msg++;
   2380            if ( pReq->dstAddress.addrMode == Addr64Bit )
   \                     ??CrossCallReturnLabel_0:
   \   00000F   7014         JNZ     ??ZDO_ParseBindUnbindReq_0
   2381            {
   2382              osal_cpyExtAddr( pReq->dstAddress.addr.extAddr, msg );
   \   000011                ; Setup parameters for call to function sAddrExtCpy
   \   000011   EE           MOV     A,R6
   \   000012   FC           MOV     R4,A
   \   000013   EF           MOV     A,R7
   \   000014   FD           MOV     R5,A
   \   000015   12....       LCALL   ?Subroutine56 & 0xFFFF
   2383              msg += Z_EXTADDR_LEN;
   2384              pReq->dstEndpoint = *msg;
   2385            }
   \                     ??CrossCallReturnLabel_106:
   \   000018   C0E0         PUSH    A
   \   00001A   E5..         MOV     A,?V0 + 0
   \   00001C   2414         ADD     A,#0x14
   \   00001E   12....       LCALL   ??Subroutine238_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_548:
   \   000021   D0E0         POP     A
   \   000023   8003         SJMP    ??CrossCallReturnLabel_177
   2386            else
   2387            {
   2388              // copy group address
   2389              pReq->dstAddress.addr.shortAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseBindUnbindReq_0:
   \   000025   12....       LCALL   ?Subroutine93 & 0xFFFF
   2390            }
   \                     ??CrossCallReturnLabel_177:
   \   000028   F0           MOVX    @DPTR,A
   2391          }
   \   000029   02....       LJMP    ??Subroutine205_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine93:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   EC           MOV     A,R4
   \   000006   8A82         MOV     DPL,R2
   \   000008   8B83         MOV     DPH,R3
   \   00000A   F0           MOVX    @DPTR,A
   \   00000B   A3           INC     DPTR
   \   00000C   E9           MOV     A,R1
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine149:
   \   000000   12....       LCALL   ?Subroutine190 & 0xFFFF
   \                     ??CrossCallReturnLabel_325:
   \   000003   A3           INC     DPTR
   \   000004   0E           INC     R6
   \   000005   AF83         MOV     R7,DPH
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   EE           MOV     A,R6
   \   000001   FC           MOV     R4,A
   \   000002   EF           MOV     A,R7
   \   000003   FD           MOV     R5,A
   \   000004   AA..         MOV     R2,?V0 + 0
   \   000006   AB..         MOV     R3,?V0 + 1
   \   000008   12....       LCALL   ?Subroutine157 & 0xFFFF
   \                     ??CrossCallReturnLabel_577:
   \   00000B   85..82       MOV     DPL,?V0 + 0
   \   00000E   85..83       MOV     DPH,?V0 + 1
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \   000019   12....       LCALL   ?Subroutine148 & 0xFFFF
   \                     ??CrossCallReturnLabel_262:
   \   00001C   85..82       MOV     DPL,?V0 + 0
   \   00001F   85..83       MOV     DPH,?V0 + 1
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   A3           INC     DPTR
   \   00002B   12....       LCALL   ?Subroutine144 & 0xFFFF
   \                     ??CrossCallReturnLabel_256:
   \   00002E   8E82         MOV     DPL,R6
   \   000030   8F83         MOV     DPH,R7
   \   000032   E0           MOVX    A,@DPTR
   \   000033   F8           MOV     R0,A
   \   000034   E5..         MOV     A,?V0 + 0
   \   000036   12....       LCALL   ??Subroutine206_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_344:
   \   000039   E5..         MOV     A,?V0 + 1
   \   00003B   12....       LCALL   ??Subroutine215_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_558:
   \   00003E   E8           MOV     A,R0
   \   00003F   12....       LCALL   ?Subroutine149 & 0xFFFF
   \                     ??CrossCallReturnLabel_264:
   \   000042   E5..         MOV     A,?V0 + 0
   \   000044   240B         ADD     A,#0xb
   \   000046   FA           MOV     R2,A
   \   000047   E5..         MOV     A,?V0 + 1
   \   000049   3400         ADDC    A,#0x0
   \   00004B   FB           MOV     R3,A
   \   00004C   7403         MOV     A,#0x3
   \   00004E   68           XRL     A,R0
   \   00004F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000   12....       LCALL   ??sAddrExtCpy?relay
   \   000003   8E82         MOV     DPL,R6
   \   000005   8F83         MOV     DPH,R7
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   22           RET
   2392          
   2393          /*********************************************************************
   2394           * @fn      ZDO_ParseAddrRsp
   2395           *
   2396           * @brief   Turns the inMsg (incoming message) into the out parsed
   2397           *          structure.
   2398           *
   2399           * @param   inMsg - incoming message
   2400           *
   2401           * @return  pointer to parsed structures.  This structure was 
   2402           *          allocated using osal_mem_alloc, so it must be freed
   2403           *          by the calling function [osal_mem_free()].
   2404           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine138:
   \   000000   E5..         MOV     A,?V0 + 0
   \   000002   240C         ADD     A,#0xc
   \   000004                REQUIRE ??Subroutine238_0
   \   000004                ; // Fall through to label ??Subroutine238_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2405          ZDO_NwkIEEEAddrResp_t *ZDO_ParseAddrRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseAddrRsp:
   2406          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   2407            ZDO_NwkIEEEAddrResp_t *rsp;
   2408            uint8 *msg;
   2409            byte cnt = 0;
   2410            
   2411            // Calculate the number of items in the list
   2412            if ( inMsg->asduLen > (1 + Z_EXTADDR_LEN + 2) )
   \   000005   EA           MOV     A,R2
   \   000006   2413         ADD     A,#0x13
   \   000008   FE           MOV     R6,A
   \   000009   EB           MOV     A,R3
   \   00000A   3400         ADDC    A,#0x0
   \   00000C   FF           MOV     R7,A
   \   00000D   EA           MOV     A,R2
   \   00000E   2410         ADD     A,#0x10
   \   000010   F582         MOV     DPL,A
   \   000012   EB           MOV     A,R3
   \   000013   12....       LCALL   ??Subroutine226_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_435:
   \   000016   C3           CLR     C
   \   000017   940C         SUBB    A,#0xc
   \   000019   400E         JC      ??ZDO_ParseAddrRsp_0
   2413              cnt = inMsg->asdu[1 + Z_EXTADDR_LEN + 2];
   \   00001B   8E82         MOV     DPL,R6
   \   00001D   8F83         MOV     DPH,R7
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   240B         ADD     A,#0xb
   \   000022   12....       LCALL   ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_405:
   \   000025   F5..         MOV     ?V0 + 2,A
   \   000027   8003         SJMP    ??ZDO_ParseAddrRsp_1
   2414            else 
   2415              cnt = 0;
   \                     ??ZDO_ParseAddrRsp_0:
   \   000029   75..00       MOV     ?V0 + 2,#0x0
   2416           
   2417            // Make buffer
   2418            rsp = (ZDO_NwkIEEEAddrResp_t *)osal_mem_alloc( sizeof(ZDO_NwkIEEEAddrResp_t) + (cnt * sizeof ( uint16 )) );
   \                     ??ZDO_ParseAddrRsp_1:
   \   00002C                ; Setup parameters for call to function osal_mem_alloc
   \   00002C   E5..         MOV     A,?V0 + 2
   \   00002E   C3           CLR     C
   \   00002F   33           RLC     A
   \   000030   F8           MOV     R0,A
   \   000031   E4           CLR     A
   \   000032   33           RLC     A
   \   000033   F9           MOV     R1,A
   \   000034   E8           MOV     A,R0
   \   000035   240D         ADD     A,#0xd
   \   000037   FA           MOV     R2,A
   \   000038   E9           MOV     A,R1
   \   000039   12....       LCALL   ??Subroutine255_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_659:
   \   00003C   8A..         MOV     ?V0 + 0,R2
   \   00003E   8B..         MOV     ?V0 + 1,R3
   2419            
   2420            if ( rsp )
   \   000040   EA           MOV     A,R2
   \   000041   45..         ORL     A,?V0 + 1
   \   000043   6075         JZ      ??ZDO_ParseAddrRsp_2
   2421            {
   2422              msg = inMsg->asdu;
   \   000045   8E82         MOV     DPL,R6
   \   000047   8F83         MOV     DPH,R7
   \   000049   12....       LCALL   ??Subroutine249_0 & 0xFFFF
   2423            
   2424              rsp->status = *msg++;
   \                     ??CrossCallReturnLabel_624:
   \   00004C   8A82         MOV     DPL,R2
   \   00004E   8B83         MOV     DPH,R3
   \   000050   12....       LCALL   ?Subroutine41 & 0xFFFF
   2425              if ( rsp->status == ZDO_SUCCESS )
   \                     ??CrossCallReturnLabel_79:
   \   000053   7065         JNZ     ??ZDO_ParseAddrRsp_2
   2426              {
   2427                osal_cpyExtAddr( rsp->extAddr, msg );
   \   000055                ; Setup parameters for call to function sAddrExtCpy
   \   000055   EE           MOV     A,R6
   \   000056   FC           MOV     R4,A
   \   000057   EF           MOV     A,R7
   \   000058   FD           MOV     R5,A
   \   000059   EA           MOV     A,R2
   \   00005A   2403         ADD     A,#0x3
   \   00005C   0A           INC     R2
   \   00005D   0A           INC     R2
   \   00005E   0A           INC     R2
   \   00005F   EB           MOV     A,R3
   \   000060   12....       LCALL   ?Subroutine55 & 0xFFFF
   2428                msg += Z_EXTADDR_LEN;
   2429                rsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_574:
   \   000063   12....       LCALL   ?Subroutine167 & 0xFFFF
   \                     ??CrossCallReturnLabel_288:
   \   000066   12....       LCALL   ?Subroutine29 & 0xFFFF
   2430          
   2431                msg += 2;
   2432                rsp->numAssocDevs = 0;
   \                     ??CrossCallReturnLabel_39:
   \   000069   240B         ADD     A,#0xb
   \   00006B   F8           MOV     R0,A
   \   00006C   E5..         MOV     A,?V0 + 1
   \   00006E   3400         ADDC    A,#0x0
   \   000070   F9           MOV     R1,A
   \   000071   E8           MOV     A,R0
   \   000072   FA           MOV     R2,A
   \   000073   E9           MOV     A,R1
   \   000074   FB           MOV     R3,A
   \   000075   8A82         MOV     DPL,R2
   \   000077   8B83         MOV     DPH,R3
   \   000079   E4           CLR     A
   \   00007A   F0           MOVX    @DPTR,A
   2433                
   2434                // StartIndex field is only present if NumAssocDev field is non-zero.
   2435                if ( cnt > 0 )
   \   00007B   E5..         MOV     A,?V0 + 2
   \   00007D   603B         JZ      ??ZDO_ParseAddrRsp_2
   2436                {
   2437                  uint16 *pList = &(rsp->devList[0]);
   \   00007F   E5..         MOV     A,?V0 + 0
   \   000081   240D         ADD     A,#0xd
   \   000083   08           INC     R0
   \   000084   08           INC     R0
   \   000085   E5..         MOV     A,?V0 + 1
   \   000087   3400         ADDC    A,#0x0
   \   000089   F9           MOV     R1,A
   2438                  byte n = cnt;
   \   00008A   AC..         MOV     R4,?V0 + 2
   2439                  
   2440                  rsp->numAssocDevs = *msg++;
   \   00008C   8E82         MOV     DPL,R6
   \   00008E   8F83         MOV     DPH,R7
   \   000090   12....       LCALL   ?Subroutine174 & 0xFFFF
   \                     ??CrossCallReturnLabel_296:
   \   000093   12....       LCALL   ?Subroutine23 & 0xFFFF
   2441                  rsp->startIndex = *msg++;
   \                     ??CrossCallReturnLabel_25:
   \   000096   C0E0         PUSH    A
   \   000098   12....       LCALL   ?Subroutine138 & 0xFFFF
   \                     ??CrossCallReturnLabel_555:
   \   00009B   D0E0         POP     A
   \   00009D   12....       LCALL   ?Subroutine24 & 0xFFFF
   2442                  
   2443                  while ( n != 0 )
   2444                  {
   2445                    *pList++ = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_28:
   \   0000A0   8E82         MOV     DPL,R6
   \   0000A2   8F83         MOV     DPH,R7
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   F5..         MOV     ?V0 + 2,A
   \   0000A7   A3           INC     DPTR
   \   0000A8   E0           MOVX    A,@DPTR
   \   0000A9   FB           MOV     R3,A
   \   0000AA   E5..         MOV     A,?V0 + 2
   \   0000AC   8882         MOV     DPL,R0
   \   0000AE   8983         MOV     DPH,R1
   \   0000B0   12....       LCALL   ?Subroutine30 & 0xFFFF
   2446                    msg += sizeof( uint16 );
   \                     ??CrossCallReturnLabel_41:
   \   0000B3   12....       LCALL   ?Subroutine184 & 0xFFFF
   2447                    n--;
   2448                  }
   \                     ??CrossCallReturnLabel_316:
   \   0000B6   1C           DEC     R4
   \   0000B7   EC           MOV     A,R4
   \   0000B8   70E6         JNZ     ??CrossCallReturnLabel_28
   2449                }
   2450              }
   2451            }
   2452            return ( rsp );
   \                     ??ZDO_ParseAddrRsp_2:
   \   0000BA   AA..         MOV     R2,?V0 + 0
   \   0000BC   AB..         MOV     R3,?V0 + 1
   \   0000BE   02....       LJMP    ??Subroutine260_0 & 0xFFFF
   2453          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   EB           MOV     A,R3
   \   000003   F0           MOVX    @DPTR,A
   \   000004   12....       LCALL   ?Subroutine185 & 0xFFFF
   \                     ??CrossCallReturnLabel_318:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine185:
   \   000000   E8           MOV     A,R0
   \   000001   2402         ADD     A,#0x2
   \   000003   08           INC     R0
   \   000004   08           INC     R0
   \   000005   E9           MOV     A,R1
   \   000006   3400         ADDC    A,#0x0
   \   000008   F9           MOV     R1,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   12....       LCALL   ?Subroutine152 & 0xFFFF
   \                     ??CrossCallReturnLabel_268:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine152:
   \   000000   12....       LCALL   ?Subroutine188 & 0xFFFF
   \                     ??CrossCallReturnLabel_321:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   12....       LCALL   ?Subroutine149 & 0xFFFF
   \                     ??CrossCallReturnLabel_265:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine249_0:
   \   000000   12....       LCALL   ?Subroutine172 & 0xFFFF
   \                     ??CrossCallReturnLabel_625:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine172:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FE           MOV     R6,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FF           MOV     R7,A
   \   000005   8E82         MOV     DPL,R6
   \   000007   8F83         MOV     DPH,R7
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   12....       LCALL   ?Subroutine149 & 0xFFFF
   \                     ??CrossCallReturnLabel_266:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine255_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   FB           MOV     R3,A
   \   000003   12....       LCALL   ??osal_mem_alloc?relay
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine167:
   \   000000   FA           MOV     R2,A
   \   000001   A3           INC     DPTR
   \   000002   E0           MOVX    A,@DPTR
   \   000003   F9           MOV     R1,A
   \   000004   EA           MOV     A,R2
   \   000005   85..82       MOV     DPL,?V0 + 0
   \   000008   85..83       MOV     DPH,?V0 + 1
   \   00000B   A3           INC     DPTR
   \   00000C   22           RET
   2454          
   2455          /*********************************************************************
   2456           * @fn          ZDO_ParseNodeDescRsp
   2457           *
   2458           * @brief       This function parses the Node_Desc_rsp message.
   2459           *
   2460           * @param       inMsg - incoming message
   2461           * @param       pNDRsp - place to parse the message into
   2462           *
   2463           * @return      none
   2464           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2465          void ZDO_ParseNodeDescRsp( zdoIncomingMsg_t *inMsg, ZDO_NodeDescRsp_t *pNDRsp )
   \                     ZDO_ParseNodeDescRsp:
   2466          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   2467            uint8 *msg;
   2468            
   2469            msg = inMsg->asdu;
   \   000005   12....       LCALL   ?Subroutine9 & 0xFFFF
   2470            
   2471            pNDRsp->status = *msg++;
   2472            pNDRsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   2473          
   2474            if ( pNDRsp->status == ZDP_SUCCESS )
   \                     ??CrossCallReturnLabel_2:
   \   000008   6003         JZ      $+5
   \   00000A   02....       LJMP    ??ZDO_ParseNodeDescRsp_0 & 0xFFFF
   2475            {
   2476              msg += 2;
   \   00000D   12....       LCALL   ?Subroutine140 & 0xFFFF
   2477              pNDRsp->nodeDesc.LogicalType = *msg & 0x07;
   \                     ??CrossCallReturnLabel_251:
   \   000010   FA           MOV     R2,A
   \   000011   ED           MOV     A,R5
   \   000012   3400         ADDC    A,#0x0
   \   000014   FB           MOV     R3,A
   \   000015   8882         MOV     DPL,R0
   \   000017   8983         MOV     DPH,R1
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   5407         ANL     A,#0x7
   \   00001C   FE           MOV     R6,A
   \   00001D   8A82         MOV     DPL,R2
   \   00001F   8B83         MOV     DPH,R3
   \   000021   E0           MOVX    A,@DPTR
   \   000022   54F8         ANL     A,#0xf8
   \   000024   4E           ORL     A,R6
   \   000025   12....       LCALL   ??Subroutine244_0 & 0xFFFF
   2478          
   2479              pNDRsp->nodeDesc.ComplexDescAvail = ( *msg & 0x08 ) >> 3;
   \                     ??CrossCallReturnLabel_597:
   \   000028   A2E3         MOV     C,0xE0 /* A   */.3
   \   00002A   8B83         MOV     DPH,R3
   \   00002C   8A82         MOV     DPL,R2
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   92E3         MOV     0xE0 /* A   */.3,C
   \   000031   12....       LCALL   ??Subroutine244_0 & 0xFFFF
   2480              pNDRsp->nodeDesc.UserDescAvail = ( *msg & 0x10 ) >> 4;
   \                     ??CrossCallReturnLabel_598:
   \   000034   A2E4         MOV     C,0xE0 /* A   */.4
   \   000036   8B83         MOV     DPH,R3
   \   000038   8A82         MOV     DPL,R2
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   92E4         MOV     0xE0 /* A   */.4,C
   \   00003D   12....       LCALL   ?Subroutine51 & 0xFFFF
   2481              
   2482              msg++;  // Reserved bits.
   \                     ??CrossCallReturnLabel_98:
   \   000040   08           INC     R0
   \   000041   A983         MOV     R1,DPH
   2483              pNDRsp->nodeDesc.FrequencyBand = (*msg >> 3) & 0x1f;
   \   000043   EC           MOV     A,R4
   \   000044   2404         ADD     A,#0x4
   \   000046   0A           INC     R2
   \   000047   ED           MOV     A,R5
   \   000048   3400         ADDC    A,#0x0
   \   00004A   FB           MOV     R3,A
   \   00004B   8A82         MOV     DPL,R2
   \   00004D   8B83         MOV     DPH,R3
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   5407         ANL     A,#0x7
   \   000052   FE           MOV     R6,A
   \   000053   8882         MOV     DPL,R0
   \   000055   8983         MOV     DPH,R1
   \   000057   E0           MOVX    A,@DPTR
   \   000058   54F8         ANL     A,#0xf8
   \   00005A   4E           ORL     A,R6
   \   00005B   FE           MOV     R6,A
   \   00005C   12....       LCALL   ?Subroutine35 & 0xFFFF
   2484              pNDRsp->nodeDesc.APSFlags = *msg++ & 0x07;
   \                     ??CrossCallReturnLabel_592:
   \   00005F   5407         ANL     A,#0x7
   \   000061   FF           MOV     R7,A
   \   000062   A3           INC     DPTR
   \   000063   08           INC     R0
   \   000064   A983         MOV     R1,DPH
   \   000066   74F8         MOV     A,#-0x8
   \   000068   5E           ANL     A,R6
   \   000069   4F           ORL     A,R7
   \   00006A   12....       LCALL   ?Subroutine35 & 0xFFFF
   2485              pNDRsp->nodeDesc.CapabilityFlags = *msg++;
   \                     ??CrossCallReturnLabel_593:
   \   00006D   8C82         MOV     DPL,R4
   \   00006F   8D83         MOV     DPH,R5
   \   000071   A3           INC     DPTR
   \   000072   A3           INC     DPTR
   \   000073   A3           INC     DPTR
   \   000074   A3           INC     DPTR
   \   000075   12....       LCALL   ?Subroutine25 & 0xFFFF
   2486              pNDRsp->nodeDesc.ManufacturerCode[0] = *msg++;
   \                     ??CrossCallReturnLabel_586:
   \   000078   8C82         MOV     DPL,R4
   \   00007A   8D83         MOV     DPH,R5
   \   00007C   A3           INC     DPTR
   \   00007D   A3           INC     DPTR
   \   00007E   A3           INC     DPTR
   \   00007F   A3           INC     DPTR
   \   000080   A3           INC     DPTR
   \   000081   A3           INC     DPTR
   \   000082   12....       LCALL   ?Subroutine16 & 0xFFFF
   2487              pNDRsp->nodeDesc.ManufacturerCode[1] = *msg++;
   \                     ??CrossCallReturnLabel_15:
   \   000085   12....       LCALL   ?Subroutine16 & 0xFFFF
   2488              pNDRsp->nodeDesc.MaxBufferSize = *msg++;
   \                     ??CrossCallReturnLabel_16:
   \   000088   A3           INC     DPTR
   \   000089   12....       LCALL   ?Subroutine14 & 0xFFFF
   2489              pNDRsp->nodeDesc.MaxInTransferSize[0] = *msg++;
   \                     ??CrossCallReturnLabel_11:
   \   00008C   12....       LCALL   ?Subroutine14 & 0xFFFF
   2490              pNDRsp->nodeDesc.MaxInTransferSize[1] = *msg++;
   \                     ??CrossCallReturnLabel_12:
   \   00008F   12....       LCALL   ?Subroutine25 & 0xFFFF
   2491              pNDRsp->nodeDesc.ServerMask = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_587:
   \   000092   FE           MOV     R6,A
   \   000093   A3           INC     DPTR
   \   000094   E0           MOVX    A,@DPTR
   \   000095   FB           MOV     R3,A
   \   000096   EE           MOV     A,R6
   \   000097   FA           MOV     R2,A
   \   000098   EC           MOV     A,R4
   \   000099   240B         ADD     A,#0xb
   \   00009B   F582         MOV     DPL,A
   \   00009D   ED           MOV     A,R5
   \   00009E   12....       LCALL   ??Subroutine239_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_542:
   \   0000A1   EA           MOV     A,R2
   \   0000A2   12....       LCALL   ?Subroutine30 & 0xFFFF
   2492              msg += 2;
   2493              pNDRsp->nodeDesc.MaxOutTransferSize[0] = *msg++;
   \                     ??CrossCallReturnLabel_40:
   \   0000A5   8882         MOV     DPL,R0
   \   0000A7   8983         MOV     DPH,R1
   \   0000A9   E0           MOVX    A,@DPTR
   \   0000AA   C0E0         PUSH    A
   \   0000AC   EC           MOV     A,R4
   \   0000AD   240D         ADD     A,#0xd
   \   0000AF   F582         MOV     DPL,A
   \   0000B1   ED           MOV     A,R5
   \   0000B2   12....       LCALL   ??Subroutine239_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_543:
   \   0000B5   D0E0         POP     A
   \   0000B7   12....       LCALL   ??Subroutine243_0 & 0xFFFF
   2494              pNDRsp->nodeDesc.MaxOutTransferSize[1] = *msg++;
   \                     ??CrossCallReturnLabel_588:
   \   0000BA   C0E0         PUSH    A
   \   0000BC   EC           MOV     A,R4
   \   0000BD   12....       LCALL   ??Subroutine242_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_583:
   \   0000C0   ED           MOV     A,R5
   \   0000C1   12....       LCALL   ??Subroutine239_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_544:
   \   0000C4   D0E0         POP     A
   \   0000C6   12....       LCALL   ?Subroutine51 & 0xFFFF
   2495              pNDRsp->nodeDesc.DescriptorCapability = *msg;
   \                     ??CrossCallReturnLabel_99:
   \   0000C9   E0           MOVX    A,@DPTR
   \   0000CA   C0E0         PUSH    A
   \   0000CC   EC           MOV     A,R4
   \   0000CD   240F         ADD     A,#0xf
   \   0000CF   F582         MOV     DPL,A
   \   0000D1   ED           MOV     A,R5
   \   0000D2   12....       LCALL   ??Subroutine239_0 & 0xFFFF
   2496            }
   \                     ??CrossCallReturnLabel_545:
   \   0000D5   D0E0         POP     A
   \   0000D7   F0           MOVX    @DPTR,A
   2497          }
   \                     ??ZDO_ParseNodeDescRsp_0:
   \   0000D8   02....       LJMP    ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine243_0
   \   000001                ; // Fall through to label ??Subroutine243_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine243_0:
   \   000000   12....       LCALL   ?Subroutine153 & 0xFFFF
   \                     ??CrossCallReturnLabel_591:
   \   000003   08           INC     R0
   \   000004   A983         MOV     R1,DPH
   \   000006   E0           MOVX    A,@DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   12....       LCALL   ?Subroutine145 & 0xFFFF
   \                     ??CrossCallReturnLabel_258:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine145:
   \   000000   12....       LCALL   ?Subroutine191 & 0xFFFF
   \                     ??CrossCallReturnLabel_604:
   \   000003   A3           INC     DPTR
   \   000004   08           INC     R0
   \   000005   A983         MOV     R1,DPH
   \   000007   E0           MOVX    A,@DPTR
   \   000008   8C82         MOV     DPL,R4
   \   00000A   8D83         MOV     DPH,R5
   \   00000C   A3           INC     DPTR
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   12....       LCALL   ?Subroutine145 & 0xFFFF
   \                     ??CrossCallReturnLabel_259:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine140:
   \   000000   12....       LCALL   ?Subroutine185 & 0xFFFF
   \                     ??CrossCallReturnLabel_319:
   \   000003   EC           MOV     A,R4
   \   000004   2403         ADD     A,#0x3
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004                REQUIRE ??Subroutine244_0
   \   000004                ; // Fall through to label ??Subroutine244_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   12....       LCALL   ?Subroutine178 & 0xFFFF
   \                     ??CrossCallReturnLabel_310:
   \   000003   12....       LCALL   ?Subroutine168 & 0xFFFF
   \                     ??CrossCallReturnLabel_291:
   \   000006   8C82         MOV     DPL,R4
   \   000008   8D83         MOV     DPH,R5
   \   00000A   12....       LCALL   ?Subroutine153 & 0xFFFF
   \                     ??CrossCallReturnLabel_590:
   \   00000D   A882         MOV     R0,DPL
   \   00000F   A983         MOV     R1,DPH
   \   000011   E0           MOVX    A,@DPTR
   \   000012   FE           MOV     R6,A
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   FB           MOV     R3,A
   \   000016   EE           MOV     A,R6
   \   000017   8C82         MOV     DPL,R4
   \   000019   8D83         MOV     DPH,R5
   \   00001B   A3           INC     DPTR
   \   00001C   F0           MOVX    @DPTR,A
   \   00001D   A3           INC     DPTR
   \   00001E   EB           MOV     A,R3
   \   00001F   F0           MOVX    @DPTR,A
   \   000020   8C82         MOV     DPL,R4
   \   000022   8D83         MOV     DPH,R5
   \   000024   E0           MOVX    A,@DPTR
   \   000025   22           RET
   2498          
   2499          /*********************************************************************
   2500           * @fn          ZDO_ParesPowerDescRsp
   2501           *
   2502           * @brief       This function parses the Power_Desc_rsp message.
   2503           *
   2504           * @param       inMsg  - incoming message
   2505           * @param       pNPRsp - place to parse the message into
   2506           *
   2507           * @return      none
   2508           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2509          void ZDO_ParsePowerDescRsp( zdoIncomingMsg_t *inMsg, ZDO_PowerRsp_t *pNPRsp )
   \                     ZDO_ParsePowerDescRsp:
   2510          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   2511            uint8 *msg;
   2512            
   2513            msg = inMsg->asdu;
   \   000005   12....       LCALL   ?Subroutine9 & 0xFFFF
   2514            pNPRsp->status = *msg++;
   2515            pNPRsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   2516          
   2517            if ( pNPRsp->status == ZDP_SUCCESS )
   \                     ??CrossCallReturnLabel_3:
   \   000008   7057         JNZ     ??CrossCallReturnLabel_72
   2518            {
   2519              msg += 2;
   \   00000A   12....       LCALL   ?Subroutine140 & 0xFFFF
   2520              pNPRsp->pwrDesc.AvailablePowerSources = *msg >> 4;
   2521              pNPRsp->pwrDesc.PowerMode = *msg++ & 0x0F;
   2522              pNPRsp->pwrDesc.CurrentPowerSourceLevel = *msg >> 4;
   2523              pNPRsp->pwrDesc.CurrentPowerSource = *msg++ & 0x0F;
   2524            }
   \                     ??CrossCallReturnLabel_252:
   \   00000D   ED           MOV     A,R5
   \   00000E   3400         ADDC    A,#0x0
   \   000010   0C           INC     R4
   \   000011   0C           INC     R4
   \   000012   0C           INC     R4
   \   000013   FD           MOV     R5,A
   \   000014   8C82         MOV     DPL,R4
   \   000016   8D83         MOV     DPH,R5
   \   000018   E0           MOVX    A,@DPTR
   \   000019   540F         ANL     A,#0xf
   \   00001B   FA           MOV     R2,A
   \   00001C   A3           INC     DPTR
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   FB           MOV     R3,A
   \   00001F   8882         MOV     DPL,R0
   \   000021   8983         MOV     DPH,R1
   \   000023   E0           MOVX    A,@DPTR
   \   000024   54F0         ANL     A,#0xf0
   \   000026   FE           MOV     R6,A
   \   000027   EA           MOV     A,R2
   \   000028   4E           ORL     A,R6
   \   000029   FE           MOV     R6,A
   \   00002A   EB           MOV     A,R3
   \   00002B   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   00002E   A3           INC     DPTR
   \   00002F   08           INC     R0
   \   000030   A983         MOV     R1,DPH
   \   000032   EE           MOV     A,R6
   \   000033   54F0         ANL     A,#0xf0
   \   000035   4A           ORL     A,R2
   \   000036   FA           MOV     R2,A
   \   000037   8C82         MOV     DPL,R4
   \   000039   8D83         MOV     DPH,R5
   \   00003B   F0           MOVX    @DPTR,A
   \   00003C   A3           INC     DPTR
   \   00003D   EB           MOV     A,R3
   \   00003E   12....       LCALL   ??Subroutine244_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_599:
   \   000041   54F0         ANL     A,#0xf0
   \   000043   FF           MOV     R7,A
   \   000044   EB           MOV     A,R3
   \   000045   540F         ANL     A,#0xf
   \   000047   FB           MOV     R3,A
   \   000048   EA           MOV     A,R2
   \   000049   FE           MOV     R6,A
   \   00004A   EF           MOV     A,R7
   \   00004B   4B           ORL     A,R3
   \   00004C   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   00004F   EF           MOV     A,R7
   \   000050   54F0         ANL     A,#0xf0
   \   000052   FF           MOV     R7,A
   \   000053   EA           MOV     A,R2
   \   000054   FB           MOV     R3,A
   \   000055   EE           MOV     A,R6
   \   000056   FA           MOV     R2,A
   \   000057   EF           MOV     A,R7
   \   000058   4B           ORL     A,R3
   \   000059   FB           MOV     R3,A
   \   00005A   8C82         MOV     DPL,R4
   \   00005C   8D83         MOV     DPH,R5
   \   00005E   12....       LCALL   ?Subroutine38 & 0xFFFF
   2525          }
   \                     ??CrossCallReturnLabel_72:
   \   000061   02....       LJMP    ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   FF           MOV     R7,A
   \   000001   8C82         MOV     DPL,R4
   \   000003   8D83         MOV     DPH,R5
   \   000005   EE           MOV     A,R6
   \   000006   F0           MOVX    @DPTR,A
   \   000007   A3           INC     DPTR
   \   000008   EF           MOV     A,R7
   \   000009   12....       LCALL   ?Subroutine191 & 0xFFFF
   \                     ??CrossCallReturnLabel_603:
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   540F         ANL     A,#0xf
   \   00000F   FA           MOV     R2,A
   \   000010   22           RET
   2526          
   2527          /*********************************************************************
   2528           * @fn          ZDO_ParseSimpleDescRsp
   2529           *
   2530           * @brief       This function parse the Simple_Desc_rsp message.
   2531           *
   2532           *   NOTE: The pAppInClusterList and pAppOutClusterList fields
   2533           *         in the SimpleDescriptionFormat_t structure are allocated
   2534           *         and the calling function needs to free [osal_msg_free()]
   2535           *         these buffers.
   2536           *
   2537           * @param       inMsg  - incoming message
   2538           * @param       pSimpleDescRsp - place to parse the message into
   2539           *
   2540           * @return      none
   2541           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2542          void ZDO_ParseSimpleDescRsp( zdoIncomingMsg_t *inMsg, ZDO_SimpleDescRsp_t *pSimpleDescRsp )
   \                     ZDO_ParseSimpleDescRsp:
   2543          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   2544            uint8 *msg;
   2545          
   2546            msg = inMsg->asdu;
   \   000005   12....       LCALL   ?Subroutine9 & 0xFFFF
   2547            pSimpleDescRsp->status = *msg++;
   2548            pSimpleDescRsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   2549            msg += sizeof ( uint16 );
   2550            msg++; // Skip past the length field.
   2551            
   2552            if ( pSimpleDescRsp->status == ZDP_SUCCESS )
   \                     ??CrossCallReturnLabel_4:
   \   000008   7015         JNZ     ??ZDO_ParseSimpleDescRsp_0
   2553            {
   2554              ZDO_ParseSimpleDescBuf( msg, &(pSimpleDescRsp->simpleDesc) );
   \   00000A                ; Setup parameters for call to function ZDO_ParseSimpleDescBuf
   \   00000A   EC           MOV     A,R4
   \   00000B   2403         ADD     A,#0x3
   \   00000D   0C           INC     R4
   \   00000E   0C           INC     R4
   \   00000F   0C           INC     R4
   \   000010   ED           MOV     A,R5
   \   000011   3400         ADDC    A,#0x0
   \   000013   FD           MOV     R5,A
   \   000014   E8           MOV     A,R0
   \   000015   2403         ADD     A,#0x3
   \   000017   FA           MOV     R2,A
   \   000018   E9           MOV     A,R1
   \   000019   3400         ADDC    A,#0x0
   \   00001B   FB           MOV     R3,A
   \   00001C   12....       LCALL   ??ZDO_ParseSimpleDescBuf?relay
   2555            }
   2556          }
   \                     ??ZDO_ParseSimpleDescRsp_0:
   \   00001F                REQUIRE ?Subroutine1
   \   00001F                ; // Fall through to label ?Subroutine1
   2557          
   2558          /*********************************************************************
   2559           * @fn          ZDO_ParseEPListRsp
   2560           *
   2561           * @brief       This parse the Active_EP_rsp or Match_Desc_rsp message.
   2562           *
   2563           * @param       inMsg  - incoming message
   2564           *
   2565           * @return      none
   2566           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2567          ZDO_ActiveEndpointRsp_t *ZDO_ParseEPListRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseEPListRsp:
   2568          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   2569            ZDO_ActiveEndpointRsp_t *pRsp;
   2570            uint8 *msg;
   2571            uint8 Status;
   2572            uint8 cnt;
   2573            
   2574            msg = inMsg->asdu;
   \   000005   12....       LCALL   ?Subroutine178 & 0xFFFF
   \                     ??CrossCallReturnLabel_308:
   \   000008   12....       LCALL   ?Subroutine111 & 0xFFFF
   2575            Status = *msg++;
   \                     ??CrossCallReturnLabel_356:
   \   00000B   85..82       MOV     DPL,?V0 + 0
   \   00000E   F583         MOV     DPH,A
   \   000010   E0           MOVX    A,@DPTR
   \   000011   F5..         MOV     ?V0 + 7,A
   \   000013   A3           INC     DPTR
   \   000014   8582..       MOV     ?V0 + 0,DPL
   \   000017   8583..       MOV     ?V0 + 1,DPH
   2576            cnt = msg[2];
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   2577            
   2578            pRsp = (ZDO_ActiveEndpointRsp_t *)osal_mem_alloc( sizeof(  ZDO_ActiveEndpointRsp_t ) + cnt );
   \   00001D   F582         MOV     DPL,A
   \   00001F   AE82         MOV     R6,DPL
   \   000021                ; Setup parameters for call to function osal_mem_alloc
   \   000021   12....       LCALL   ?Subroutine129 & 0xFFFF
   \                     ??CrossCallReturnLabel_656:
   \   000024   8A..         MOV     ?V0 + 4,R2
   \   000026   8B..         MOV     ?V0 + 5,R3
   2579            if ( pRsp )
   \   000028   EA           MOV     A,R2
   \   000029   45..         ORL     A,?V0 + 5
   \   00002B   6047         JZ      ??ZDO_ParseEPListRsp_0
   2580            {
   2581              pRsp->status = Status;
   \   00002D   8A82         MOV     DPL,R2
   \   00002F   8B83         MOV     DPH,R3
   \   000031   E5..         MOV     A,?V0 + 7
   \   000033   F0           MOVX    @DPTR,A
   2582              pRsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \   000034   85..82       MOV     DPL,?V0 + 0
   \   000037   85..83       MOV     DPH,?V0 + 1
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   FA           MOV     R2,A
   \   00003C   A3           INC     DPTR
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   F8           MOV     R0,A
   \   00003F   E4           CLR     A
   \   000040   C8           XCH     A,R0
   \   000041   F9           MOV     R1,A
   \   000042   EA           MOV     A,R2
   \   000043   85..82       MOV     DPL,?V0 + 4
   \   000046   8B83         MOV     DPH,R3
   \   000048   A3           INC     DPTR
   \   000049   12....       LCALL   ??Subroutine218_0 & 0xFFFF
   2583              msg += sizeof( uint16 );
   2584              pRsp->cnt = cnt;
   \                     ??CrossCallReturnLabel_379:
   \   00004C   85..82       MOV     DPL,?V0 + 4
   \   00004F   8B83         MOV     DPH,R3
   \   000051   A3           INC     DPTR
   \   000052   A3           INC     DPTR
   \   000053   A3           INC     DPTR
   \   000054   EE           MOV     A,R6
   \   000055   12....       LCALL   ?Subroutine50 & 0xFFFF
   2585              msg++; // pass cnt
   2586              osal_memcpy( pRsp->epList, msg, cnt );
   2587            }
   \                     ??CrossCallReturnLabel_96:
   \   000058   A3           INC     DPTR
   \   000059   A982         MOV     R1,DPL
   \   00005B   AA83         MOV     R2,DPH
   \   00005D   89..         MOV     ?V0 + 0,R1
   \   00005F   8A..         MOV     ?V0 + 1,R2
   \   000061   88..         MOV     ?V0 + 2,R0
   \   000063   78..         MOV     R0,#?V0 + 0
   \   000065   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000068   EE           MOV     A,R6
   \   000069   FC           MOV     R4,A
   \   00006A   7D00         MOV     R5,#0x0
   \   00006C   E5..         MOV     A,?V0 + 4
   \   00006E   12....       LCALL   ?Subroutine131 & 0xFFFF
   \                     ??CrossCallReturnLabel_605:
   \   000071   12....       LCALL   ?DEALLOC_XSTACK8
   2588            
   2589            return ( pRsp );
   \                     ??ZDO_ParseEPListRsp_0:
   \   000074   AA..         MOV     R2,?V0 + 4
   \   000076   AB..         MOV     R3,?V0 + 5
   \   000078   02....       LJMP    ??Subroutine222_0 & 0xFFFF
   2590          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine131:
   \   000000   2404         ADD     A,#0x4
   \   000002   FA           MOV     R2,A
   \   000003   EB           MOV     A,R3
   \   000004                REQUIRE ??Subroutine245_0
   \   000004                ; // Fall through to label ??Subroutine245_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine245_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   FB           MOV     R3,A
   \   000003   12....       LCALL   ??osal_memcpy?relay
   \   000006   7403         MOV     A,#0x3
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine129:
   \   000000   2404         ADD     A,#0x4
   \   000002                REQUIRE ??Subroutine254_0
   \   000002                ; // Fall through to label ??Subroutine254_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine254_0:
   \   000000   FA           MOV     R2,A
   \   000001   E4           CLR     A
   \   000002                REQUIRE ??Subroutine255_0
   \   000002                ; // Fall through to label ??Subroutine255_0
   2591          
   2592          /*********************************************************************
   2593           * @fn          ZDO_ParseServerDiscRsp
   2594           *
   2595           * @brief       Parse the Server_Discovery_rsp message.
   2596           *
   2597           * @param       inMsg - incoming message.
   2598           * @param       pRsp - place to put the parsed information.
   2599           *
   2600           * @return      none
   2601           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2602          void ZDO_ParseServerDiscRsp( zdoIncomingMsg_t *inMsg, ZDO_ServerDiscRsp_t *pRsp )
   \                     ZDO_ParseServerDiscRsp:
   2603          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   2604            pRsp->status = inMsg->asdu[0];
   \   000005   EA           MOV     A,R2
   \   000006   2413         ADD     A,#0x13
   \   000008   F8           MOV     R0,A
   \   000009   EB           MOV     A,R3
   \   00000A   12....       LCALL   ?Subroutine198 & 0xFFFF
   \                     ??CrossCallReturnLabel_335:
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   FA           MOV     R2,A
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   F583         MOV     DPH,A
   \   000013   8A82         MOV     DPL,R2
   \   000015   12....       LCALL   ??Subroutine252_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_642:
   \   000018   12....       LCALL   ??Subroutine244_0 & 0xFFFF
   2605            pRsp->serverMask = BUILD_UINT16( inMsg->asdu[1], inMsg->asdu[2] );
   \                     ??CrossCallReturnLabel_600:
   \   00001B   F8           MOV     R0,A
   \   00001C   A3           INC     DPTR
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   F9           MOV     R1,A
   \   00001F   8882         MOV     DPL,R0
   \   000021   8983         MOV     DPH,R1
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   FA           MOV     R2,A
   \   000026   8882         MOV     DPL,R0
   \   000028   8983         MOV     DPH,R1
   \   00002A   A3           INC     DPTR
   \   00002B   12....       LCALL   ?Subroutine121 & 0xFFFF
   \                     ??CrossCallReturnLabel_230:
   \   00002E   12....       LCALL   ??Subroutine218_0 & 0xFFFF
   2606          }
   \                     ??CrossCallReturnLabel_380:
   \   000031   02....       LJMP    ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine121:
   \   000000   A3           INC     DPTR
   \   000001   E0           MOVX    A,@DPTR
   \   000002   F9           MOV     R1,A
   \   000003   EA           MOV     A,R2
   \   000004   8C82         MOV     DPL,R4
   \   000006   8D83         MOV     DPH,R5
   \   000008   A3           INC     DPTR
   \   000009   22           RET
   2607          
   2608          /*********************************************************************
   2609           * @fn          ZDO_ParseMgmtLqiRsp
   2610           *
   2611           * @brief       This function parses the incoming Management
   2612           *              LQI response
   2613           *
   2614           * @param       inMsg - incoming message
   2615           *
   2616           * @return      a pointer to parsed response structure (NULL if not allocated).  
   2617           *          This structure was allocated using osal_mem_alloc, so it must be freed
   2618           *          by the calling function [osal_mem_free()].
   2619           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   AA..         MOV     R2,?V0 + 2
   \   000002   AB..         MOV     R3,?V0 + 3
   \   000004                REQUIRE ??Subroutine222_0
   \   000004                ; // Fall through to label ??Subroutine222_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2620          ZDO_MgmtLqiRsp_t *ZDO_ParseMgmtLqiRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmtLqiRsp:
   2621          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   2622            ZDO_MgmtLqiRsp_t *pRsp;
   2623            uint8 status;
   2624            uint8 startIndex = 0;
   \   000005   75..00       MOV     ?V0 + 6,#0x0
   2625            uint8 neighborLqiCount = 0;
   \   000008   75..00       MOV     ?V0 + 5,#0x0
   2626            uint8 neighborLqiEntries = 0;
   \   00000B   75..00       MOV     ?V0 + 4,#0x0
   2627            uint8 *msg;
   2628            
   2629            msg = inMsg->asdu;
   \   00000E   12....       LCALL   ?Subroutine75 & 0xFFFF
   2630          
   2631            status = *msg++;
   2632            if ( status == ZSuccess )
   \                     ??CrossCallReturnLabel_148:
   \   000011   700F         JNZ     ??ZDO_ParseMgmtLqiRsp_0
   2633            {
   2634              neighborLqiEntries = *msg++;
   \   000013   12....       LCALL   ?Subroutine119 & 0xFFFF
   2635              startIndex = *msg++;
   \                     ??CrossCallReturnLabel_226:
   \   000016   F5..         MOV     ?V0 + 6,A
   \   000018   A3           INC     DPTR
   2636              neighborLqiCount = *msg++;
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F5..         MOV     ?V0 + 5,A
   \   00001C   A3           INC     DPTR
   \   00001D   0E           INC     R6
   \   00001E   0E           INC     R6
   \   00001F   0E           INC     R6
   \   000020   AF83         MOV     R7,DPH
   2637            }
   2638          
   2639            // Allocate a buffer big enough to handle the list.
   2640            pRsp = (ZDO_MgmtLqiRsp_t *)osal_mem_alloc( 
   2641                      sizeof( ZDO_MgmtLqiRsp_t ) + (neighborLqiCount * sizeof( neighborLqiItem_t )) );
   \                     ??ZDO_ParseMgmtLqiRsp_0:
   \   000022                ; Setup parameters for call to function osal_mem_alloc
   \   000022   E5..         MOV     A,?V0 + 5
   \   000024   75F00E       MOV     B,#0xe
   \   000027   12....       LCALL   ?Subroutine128 & 0xFFFF
   2642            if ( pRsp )
   \                     ??CrossCallReturnLabel_608:
   \   00002A   605B         JZ      ??ZDO_ParseMgmtLqiRsp_1
   2643            {
   2644              uint8 x;
   2645              neighborLqiItem_t *pList = pRsp->list;
   \   00002C   12....       LCALL   ?Subroutine21 & 0xFFFF
   2646              pRsp->status = status;
   2647              pRsp->neighborLqiEntries = neighborLqiEntries;
   2648              pRsp->startIndex = startIndex;
   \                     ??CrossCallReturnLabel_611:
   \   00002F   E5..         MOV     A,?V0 + 6
   \   000031   12....       LCALL   ??Subroutine250_0 & 0xFFFF
   2649              pRsp->neighborLqiCount = neighborLqiCount;
   \                     ??CrossCallReturnLabel_630:
   \   000034   E5..         MOV     A,?V0 + 5
   \   000036   F0           MOVX    @DPTR,A
   2650          
   2651              for ( x = 0; x < neighborLqiCount; x++ )
   \   000037   75..00       MOV     ?V0 + 4,#0x0
   \   00003A   8044         SJMP    ??CrossCallReturnLabel_244
   2652              {
   2653                osal_cpyExtAddr(pList->extPANId, msg);   //Copy extended PAN ID
   \                     ??ZDO_ParseMgmtLqiRsp_2:
   \   00003C                ; Setup parameters for call to function sAddrExtCpy
   \   00003C   EE           MOV     A,R6
   \   00003D   FC           MOV     R4,A
   \   00003E   EF           MOV     A,R7
   \   00003F   FD           MOV     R5,A
   \   000040   E5..         MOV     A,?V0 + 0
   \   000042   2404         ADD     A,#0x4
   \   000044   FA           MOV     R2,A
   \   000045   E5..         MOV     A,?V0 + 1
   \   000047   3400         ADDC    A,#0x0
   \   000049   FB           MOV     R3,A
   \   00004A   12....       LCALL   ??sAddrExtCpy?relay
   2654                msg += Z_EXTADDR_LEN;
   2655              
   2656                msg += Z_EXTADDR_LEN;  // Throwing away IEEE.
   \   00004D   EE           MOV     A,R6
   \   00004E   2410         ADD     A,#0x10
   \   000050   FE           MOV     R6,A
   \   000051   EF           MOV     A,R7
   \   000052   3400         ADDC    A,#0x0
   \   000054   12....       LCALL   ?Subroutine96 & 0xFFFF
   2657                pList->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_570:
   \   000057   85..82       MOV     DPL,?V0 + 0
   \   00005A   85..83       MOV     DPH,?V0 + 1
   \   00005D   12....       LCALL   ??Subroutine218_0 & 0xFFFF
   2658                msg += 2 + 1 + 1 + 1;      // Skip DeviceType, RxOnIdle, Rlationship, PermitJoining and Depth
   \                     ??CrossCallReturnLabel_381:
   \   000060   EE           MOV     A,R6
   \   000061   2405         ADD     A,#0x5
   \   000063   12....       LCALL   ??Subroutine216_0 & 0xFFFF
   2659                pList->rxLqi = *msg++;
   \                     ??CrossCallReturnLabel_378:
   \   000066   C0E0         PUSH    A
   \   000068   E5..         MOV     A,?V0 + 0
   \   00006A   240D         ADD     A,#0xd
   \   00006C   12....       LCALL   ??Subroutine238_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_549:
   \   00006F   D0E0         POP     A
   \   000071   12....       LCALL   ?Subroutine41 & 0xFFFF
   2660                pList->txQuality = 0;  // This is not specified OTA by ZigBee 1.1.
   \                     ??CrossCallReturnLabel_80:
   \   000074   12....       LCALL   ?Subroutine138 & 0xFFFF
   \                     ??CrossCallReturnLabel_556:
   \   000077   E4           CLR     A
   \   000078   F0           MOVX    @DPTR,A
   2661                pList++;
   \   000079   E5..         MOV     A,?V0 + 0
   \   00007B   240E         ADD     A,#0xe
   \   00007D   12....       LCALL   ?Subroutine136 & 0xFFFF
   2662              }
   \                     ??CrossCallReturnLabel_244:
   \   000080   E5..         MOV     A,?V0 + 4
   \   000082   C3           CLR     C
   \   000083   95..         SUBB    A,?V0 + 5
   \   000085   40B5         JC      ??ZDO_ParseMgmtLqiRsp_2
   2663            }
   2664            
   2665            return ( pRsp );
   \                     ??ZDO_ParseMgmtLqiRsp_1:
   \   000087   02....       LJMP    ?Subroutine3 & 0xFFFF
   2666          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine128:
   \   000000   A4           MUL     AB
   \   000001   2404         ADD     A,#0x4
   \   000003   FA           MOV     R2,A
   \   000004   E5F0         MOV     A,B
   \   000006                REQUIRE ??Subroutine246_0
   \   000006                ; // Fall through to label ??Subroutine246_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine246_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   FB           MOV     R3,A
   \   000003   12....       LCALL   ??osal_mem_alloc?relay
   \   000006   8A..         MOV     ?V0 + 2,R2
   \   000008   8B..         MOV     ?V0 + 3,R3
   \   00000A   EA           MOV     A,R2
   \   00000B   45..         ORL     A,?V0 + 3
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   EA           MOV     A,R2
   \   000001   2404         ADD     A,#0x4
   \   000003   F5..         MOV     ?V0 + 0,A
   \   000005   EB           MOV     A,R3
   \   000006   12....       LCALL   ??Subroutine248_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_617:
   \   000009   8A82         MOV     DPL,R2
   \   00000B   8B83         MOV     DPH,R3
   \   00000D   E5..         MOV     A,?V0 + 7
   \   00000F                REQUIRE ??Subroutine247_0
   \   00000F                ; // Fall through to label ??Subroutine247_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine247_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E5..         MOV     A,?V0 + 4
   \   000004   12....       LCALL   ?Subroutine151 & 0xFFFF
   \                     ??CrossCallReturnLabel_632:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine182:
   \   000000   F5..         MOV     ?V0 + 0,A
   \   000002   E5..         MOV     A,?V0 + 1
   \   000004                REQUIRE ??Subroutine248_0
   \   000004                ; // Fall through to label ??Subroutine248_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine136:
   \   000000   12....       LCALL   ?Subroutine182 & 0xFFFF
   \                     ??CrossCallReturnLabel_620:
   \   000003   05..         INC     ?V0 + 4
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine119:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 4,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine75:
   \   000000   12....       LCALL   ?Subroutine177 & 0xFFFF
   \                     ??CrossCallReturnLabel_304:
   \   000003   12....       LCALL   ?Subroutine172 & 0xFFFF
   \                     ??CrossCallReturnLabel_626:
   \   000006   F5..         MOV     ?V0 + 7,A
   \   000008   A3           INC     DPTR
   \   000009   AE82         MOV     R6,DPL
   \   00000B   AF83         MOV     R7,DPH
   \   00000D   22           RET
   2667          
   2668          /*********************************************************************
   2669           * @fn          ZDO_ParseMgmNwkDiscRsp
   2670           *
   2671           * @brief       This function parses the incoming Management
   2672           *              Network Discover response.
   2673           *
   2674           * @param       inMsg - incoming message
   2675           *
   2676           * @return      pointer to parsed response.  This structure was 
   2677           *          allocated using osal_mem_alloc, so it must be freed
   2678           *          by the calling function [osal_mem_free()].
   2679           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2680          ZDO_MgmNwkDiscRsp_t *ZDO_ParseMgmNwkDiscRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmNwkDiscRsp:
   2681          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   2682            ZDO_MgmNwkDiscRsp_t *pRsp;
   2683            uint8 status;
   2684            uint8 networkCount = 0;
   \   000005   75..00       MOV     ?V0 + 0,#0x0
   2685            uint8 startIndex = 0;
   \   000008   75..00       MOV     ?V0 + 1,#0x0
   2686            uint8 networkListCount = 0;
   \   00000B   75..00       MOV     ?V0 + 7,#0x0
   2687            uint8 *msg;
   2688            
   2689            msg = inMsg->asdu;
   \   00000E   12....       LCALL   ?Subroutine76 & 0xFFFF
   2690            status = *msg++;
   \                     ??CrossCallReturnLabel_621:
   \   000011   F5..         MOV     ?V0 + 6,A
   \   000013   A3           INC     DPTR
   \   000014   AE82         MOV     R6,DPL
   \   000016   AF83         MOV     R7,DPH
   2691            
   2692            if ( status == ZSuccess )
   \   000018   700D         JNZ     ??ZDO_ParseMgmNwkDiscRsp_0
   2693            {
   2694              networkCount = *msg++;
   \   00001A   12....       LCALL   ??Subroutine203_0 & 0xFFFF
   2695              startIndex = *msg++;
   \                     ??CrossCallReturnLabel_340:
   \   00001D   A3           INC     DPTR
   2696              networkListCount = *msg++;
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F5..         MOV     ?V0 + 7,A
   \   000021   A3           INC     DPTR
   \   000022   0E           INC     R6
   \   000023   0E           INC     R6
   \   000024   0E           INC     R6
   \   000025   AF83         MOV     R7,DPH
   2697            }
   2698          
   2699            // Allocate a buffer big enough to handle the list.
   2700            pRsp = (ZDO_MgmNwkDiscRsp_t *)osal_mem_alloc( sizeof( ZDO_MgmNwkDiscRsp_t ) 
   2701                                            + (networkListCount * sizeof( mgmtNwkDiscItem_t )) );
   \                     ??ZDO_ParseMgmNwkDiscRsp_0:
   \   000027                ; Setup parameters for call to function osal_mem_alloc
   \   000027   85....       MOV     ?V0 + 2,?V0 + 7
   \   00002A   75..00       MOV     ?V0 + 3,#0x0
   \   00002D   7404         MOV     A,#0x4
   \   00002F   78..         MOV     R0,#?V0 + 2
   \   000031   12....       LCALL   ?S_SHL
   \   000034   E5..         MOV     A,?V0 + 2
   \   000036   2404         ADD     A,#0x4
   \   000038   FA           MOV     R2,A
   \   000039   E5..         MOV     A,?V0 + 3
   \   00003B   12....       LCALL   ??Subroutine246_0 & 0xFFFF
   2702            if ( pRsp )
   \                     ??CrossCallReturnLabel_610:
   \   00003E   7003         JNZ     $+5
   \   000040   02....       LJMP    ??ZDO_ParseMgmNwkDiscRsp_1 & 0xFFFF
   2703            {
   2704              uint8 x;
   2705              mgmtNwkDiscItem_t *pList;
   2706              
   2707              pRsp->status = status;
   \   000043   8A82         MOV     DPL,R2
   \   000045   8B83         MOV     DPH,R3
   \   000047   E5..         MOV     A,?V0 + 6
   \   000049   F0           MOVX    @DPTR,A
   2708              pRsp->networkCount = networkCount;
   \   00004A   A3           INC     DPTR
   \   00004B   E5..         MOV     A,?V0 + 0
   \   00004D   12....       LCALL   ?Subroutine151 & 0xFFFF
   2709              pRsp->startIndex = startIndex;
   \                     ??CrossCallReturnLabel_633:
   \   000050   12....       LCALL   ?Subroutine46 & 0xFFFF
   2710              pRsp->networkListCount = networkListCount;
   \                     ??CrossCallReturnLabel_627:
   \   000053   E5..         MOV     A,?V0 + 7
   \   000055   F0           MOVX    @DPTR,A
   2711              pList = pRsp->list;
   \   000056   EA           MOV     A,R2
   \   000057   2404         ADD     A,#0x4
   \   000059   F5..         MOV     ?V0 + 0,A
   \   00005B   EB           MOV     A,R3
   \   00005C   12....       LCALL   ??Subroutine248_0 & 0xFFFF
   2712              
   2713              for ( x = 0; x < networkListCount; x++ )
   \                     ??CrossCallReturnLabel_616:
   \   00005F   75..00       MOV     ?V0 + 4,#0x0
   \   000062   8071         SJMP    ??CrossCallReturnLabel_245
   2714              {
   2715                osal_cpyExtAddr(pList->extendedPANID, msg);   //Copy extended PAN ID
   \                     ??ZDO_ParseMgmNwkDiscRsp_2:
   \   000064                ; Setup parameters for call to function sAddrExtCpy
   \   000064   EE           MOV     A,R6
   \   000065   FC           MOV     R4,A
   \   000066   EF           MOV     A,R7
   \   000067   FD           MOV     R5,A
   \   000068   AA..         MOV     R2,?V0 + 0
   \   00006A   AB..         MOV     R3,?V0 + 1
   \   00006C   12....       LCALL   ??sAddrExtCpy?relay
   2716                pList->PANId = BUILD_UINT16( msg[0], msg[1] );
   \   00006F   12....       LCALL   ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_144:
   \   000072   A3           INC     DPTR
   \   000073   12....       LCALL   ??Subroutine218_0 & 0xFFFF
   2717                msg += Z_EXTADDR_LEN;
   \                     ??CrossCallReturnLabel_382:
   \   000076   EE           MOV     A,R6
   \   000077   2408         ADD     A,#0x8
   \   000079   FE           MOV     R6,A
   \   00007A   EF           MOV     A,R7
   \   00007B   3400         ADDC    A,#0x0
   \   00007D   FF           MOV     R7,A
   2718          
   2719                pList->logicalChannel = *msg++;
   \   00007E   8E82         MOV     DPL,R6
   \   000080   8F83         MOV     DPH,R7
   \   000082   12....       LCALL   ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_139:
   \   000085   12....       LCALL   ?Subroutine40 & 0xFFFF
   2720                pList->stackProfile = (*msg) & 0x0F;
   \                     ??CrossCallReturnLabel_77:
   \   000088   540F         ANL     A,#0xf
   \   00008A   C0E0         PUSH    A
   \   00008C   E5..         MOV     A,?V0 + 0
   \   00008E   240B         ADD     A,#0xb
   \   000090   12....       LCALL   ??Subroutine238_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_550:
   \   000093   D0E0         POP     A
   \   000095   12....       LCALL   ?Subroutine48 & 0xFFFF
   2721                pList->version = (*msg++ >> 4) & 0x0F;
   \                     ??CrossCallReturnLabel_90:
   \   000098   C0E0         PUSH    A
   \   00009A   12....       LCALL   ?Subroutine138 & 0xFFFF
   \                     ??CrossCallReturnLabel_557:
   \   00009D   D0E0         POP     A
   \   00009F   12....       LCALL   ?Subroutine23 & 0xFFFF
   2722                pList->beaconOrder = (*msg) & 0x0F;
   \                     ??CrossCallReturnLabel_26:
   \   0000A2   540F         ANL     A,#0xf
   \   0000A4   C0E0         PUSH    A
   \   0000A6   E5..         MOV     A,?V0 + 0
   \   0000A8   240D         ADD     A,#0xd
   \   0000AA   12....       LCALL   ??Subroutine238_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_551:
   \   0000AD   D0E0         POP     A
   \   0000AF   12....       LCALL   ?Subroutine48 & 0xFFFF
   2723                pList->superFrameOrder = (*msg++ >> 4) & 0x0F;
   \                     ??CrossCallReturnLabel_91:
   \   0000B2   C0E0         PUSH    A
   \   0000B4   E5..         MOV     A,?V0 + 0
   \   0000B6   240E         ADD     A,#0xe
   \   0000B8   12....       LCALL   ??Subroutine238_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_552:
   \   0000BB   D0E0         POP     A
   \   0000BD   12....       LCALL   ?Subroutine23 & 0xFFFF
   2724                pList->permitJoining = *msg++;
   \                     ??CrossCallReturnLabel_27:
   \   0000C0   C0E0         PUSH    A
   \   0000C2   E5..         MOV     A,?V0 + 0
   \   0000C4   240F         ADD     A,#0xf
   \   0000C6   12....       LCALL   ??Subroutine238_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_553:
   \   0000C9   D0E0         POP     A
   \   0000CB   12....       LCALL   ?Subroutine24 & 0xFFFF
   2725                pList++;
   \                     ??CrossCallReturnLabel_29:
   \   0000CE   E5..         MOV     A,?V0 + 0
   \   0000D0   2410         ADD     A,#0x10
   \   0000D2   12....       LCALL   ?Subroutine136 & 0xFFFF
   2726              }
   \                     ??CrossCallReturnLabel_245:
   \   0000D5   E5..         MOV     A,?V0 + 4
   \   0000D7   C3           CLR     C
   \   0000D8   95..         SUBB    A,?V0 + 7
   \   0000DA   4088         JC      ??ZDO_ParseMgmNwkDiscRsp_2
   2727            }
   2728            
   2729            return ( pRsp );
   \                     ??ZDO_ParseMgmNwkDiscRsp_1:
   \   0000DC   02....       LJMP    ?Subroutine3 & 0xFFFF
   2730          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   12....       LCALL   ?Subroutine190 & 0xFFFF
   \                     ??CrossCallReturnLabel_324:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   C4           SWAP    A
   \   000005   540F         ANL     A,#0xf
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine76:
   \   000000   12....       LCALL   ?Subroutine177 & 0xFFFF
   \                     ??CrossCallReturnLabel_305:
   \   000003                REQUIRE ??Subroutine249_0
   \   000003                ; // Fall through to label ??Subroutine249_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   12....       LCALL   ?Subroutine152 & 0xFFFF
   \                     ??CrossCallReturnLabel_267:
   \   000008   E0           MOVX    A,@DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   E5..         MOV     A,?V0 + 1
   \   000002                REQUIRE ??Subroutine250_0
   \   000002                ; // Fall through to label ??Subroutine250_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine73:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   E0           MOVX    A,@DPTR
   \   000005   12....       LCALL   ?Subroutine167 & 0xFFFF
   \                     ??CrossCallReturnLabel_289:
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   A3           INC     DPTR
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine71:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   85..82       MOV     DPL,?V0 + 0
   \   000004   85..83       MOV     DPH,?V0 + 1
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   22           RET
   2731          
   2732          /*********************************************************************
   2733           * @fn          ZDO_ParseMgmtRtgRsp
   2734           *
   2735           * @brief       This function parses the incoming Management
   2736           *              Routing response.
   2737           *
   2738           * @param       inMsg - incoming message
   2739           *
   2740           * @return      a pointer to parsed response structure (NULL if not allocated).  
   2741           *          This structure was allocated using osal_mem_alloc, so it must be freed
   2742           *          by the calling function [osal_mem_free()].
   2743           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2744          ZDO_MgmtRtgRsp_t *ZDO_ParseMgmtRtgRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmtRtgRsp:
   2745          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   2746            ZDO_MgmtRtgRsp_t *pRsp;
   2747            uint8 status;
   2748            uint8 rtgCount = 0;
   \   000005   75..00       MOV     ?V0 + 4,#0x0
   2749            uint8 startIndex = 0;
   \   000008   75..00       MOV     ?V0 + 1,#0x0
   2750            uint8 rtgListCount = 0;
   \   00000B   75..00       MOV     ?V0 + 0,#0x0
   2751            uint8 *msg;
   2752            
   2753            msg = inMsg->asdu;
   \   00000E   12....       LCALL   ?Subroutine76 & 0xFFFF
   2754          
   2755            status = *msg++;
   \                     ??CrossCallReturnLabel_622:
   \   000011   F5..         MOV     ?V0 + 5,A
   \   000013   A3           INC     DPTR
   \   000014   AE82         MOV     R6,DPL
   \   000016   AF83         MOV     R7,DPH
   2756            if ( status == ZSuccess )
   \   000018   700F         JNZ     ??ZDO_ParseMgmtRtgRsp_0
   2757            {
   2758              rtgCount = *msg++;
   \   00001A   12....       LCALL   ?Subroutine119 & 0xFFFF
   2759              startIndex = *msg++;
   \                     ??CrossCallReturnLabel_227:
   \   00001D   F5..         MOV     ?V0 + 1,A
   \   00001F   A3           INC     DPTR
   2760              rtgListCount = *msg++;
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F5..         MOV     ?V0 + 0,A
   \   000023   A3           INC     DPTR
   \   000024   0E           INC     R6
   \   000025   0E           INC     R6
   \   000026   0E           INC     R6
   \   000027   AF83         MOV     R7,DPH
   2761            }
   2762             
   2763            // Allocate a buffer big enough to handle the list
   2764            pRsp = (ZDO_MgmtRtgRsp_t *)osal_mem_alloc( 
   2765                    sizeof( ZDO_MgmtRtgRsp_t ) + (rtgListCount * sizeof( rtgItem_t )) );
   \                     ??ZDO_ParseMgmtRtgRsp_0:
   \   000029                ; Setup parameters for call to function osal_mem_alloc
   \   000029   E5..         MOV     A,?V0 + 0
   \   00002B   75F006       MOV     B,#0x6
   \   00002E   A4           MUL     AB
   \   00002F   2404         ADD     A,#0x4
   \   000031   FA           MOV     R2,A
   \   000032   E5F0         MOV     A,B
   \   000034   12....       LCALL   ??Subroutine255_0 & 0xFFFF
   2766            if ( pRsp )
   \                     ??CrossCallReturnLabel_660:
   \   000037   EA           MOV     A,R2
   \   000038   4B           ORL     A,R3
   \   000039   605C         JZ      ??ZDO_ParseMgmtRtgRsp_1
   2767            {
   2768              uint8 x;
   2769              rtgItem_t *pList = pRsp->list;
   \   00003B   EA           MOV     A,R2
   \   00003C   2404         ADD     A,#0x4
   \   00003E   F8           MOV     R0,A
   \   00003F   EB           MOV     A,R3
   \   000040   3400         ADDC    A,#0x0
   \   000042   F9           MOV     R1,A
   2770              pRsp->status = status;
   \   000043   8A82         MOV     DPL,R2
   \   000045   8B83         MOV     DPH,R3
   \   000047   E5..         MOV     A,?V0 + 5
   \   000049   12....       LCALL   ??Subroutine247_0 & 0xFFFF
   2771              pRsp->rtgCount = rtgCount;
   2772              pRsp->startIndex = startIndex;
   \                     ??CrossCallReturnLabel_613:
   \   00004C   12....       LCALL   ?Subroutine46 & 0xFFFF
   2773              pRsp->rtgListCount = rtgListCount;
   \                     ??CrossCallReturnLabel_628:
   \   00004F   E5..         MOV     A,?V0 + 0
   \   000051   F0           MOVX    @DPTR,A
   2774              
   2775              for ( x = 0; x < rtgListCount; x++ )
   \   000052   7C00         MOV     R4,#0x0
   \   000054   803B         SJMP    ??ZDO_ParseMgmtRtgRsp_2
   2776              {
   2777                pList->dstAddress = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseMgmtRtgRsp_3:
   \   000056   8E82         MOV     DPL,R6
   \   000058   8F83         MOV     DPH,R7
   \   00005A   12....       LCALL   ?Subroutine119 & 0xFFFF
   \                     ??CrossCallReturnLabel_229:
   \   00005D   F5..         MOV     ?V0 + 3,A
   \   00005F   E5..         MOV     A,?V0 + 4
   \   000061   8882         MOV     DPL,R0
   \   000063   8983         MOV     DPH,R1
   \   000065   F0           MOVX    @DPTR,A
   \   000066   A3           INC     DPTR
   \   000067   E5..         MOV     A,?V0 + 3
   \   000069   12....       LCALL   ??Subroutine253_0 & 0xFFFF
   2778                msg += 2;
   2779                pList->status = *msg++;
   \                     ??CrossCallReturnLabel_648:
   \   00006C   8882         MOV     DPL,R0
   \   00006E   8983         MOV     DPH,R1
   \   000070   12....       LCALL   ?Subroutine40 & 0xFFFF
   2780                pList->nextHopAddress = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_78:
   \   000073   F5..         MOV     ?V0 + 4,A
   \   000075   A3           INC     DPTR
   \   000076   E0           MOVX    A,@DPTR
   \   000077   F5..         MOV     ?V0 + 3,A
   \   000079   E5..         MOV     A,?V0 + 4
   \   00007B   8882         MOV     DPL,R0
   \   00007D   8983         MOV     DPH,R1
   \   00007F   A3           INC     DPTR
   \   000080   A3           INC     DPTR
   \   000081   F0           MOVX    @DPTR,A
   \   000082   A3           INC     DPTR
   \   000083   E5..         MOV     A,?V0 + 3
   \   000085   12....       LCALL   ?Subroutine44 & 0xFFFF
   2781                msg += 2;
   2782                pList++;
   \                     ??CrossCallReturnLabel_86:
   \   000088   E8           MOV     A,R0
   \   000089   2406         ADD     A,#0x6
   \   00008B   F8           MOV     R0,A
   \   00008C   E9           MOV     A,R1
   \   00008D   3400         ADDC    A,#0x0
   \   00008F   F9           MOV     R1,A
   2783              }
   \   000090   0C           INC     R4
   \                     ??ZDO_ParseMgmtRtgRsp_2:
   \   000091   EC           MOV     A,R4
   \   000092   C3           CLR     C
   \   000093   95..         SUBB    A,?V0 + 0
   \   000095   40BF         JC      ??ZDO_ParseMgmtRtgRsp_3
   2784            }
   2785            
   2786            return ( pRsp );
   \                     ??ZDO_ParseMgmtRtgRsp_1:
   \   000097   02....       LJMP    ??Subroutine260_0 & 0xFFFF
   2787          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   12....       LCALL   ?Subroutine147 & 0xFFFF
   \                     ??CrossCallReturnLabel_649:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine147:
   \   000000   12....       LCALL   ?Subroutine187 & 0xFFFF
   \                     ??CrossCallReturnLabel_652:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine253_0:
   \   000000   12....       LCALL   ?Subroutine147 & 0xFFFF
   \                     ??CrossCallReturnLabel_651:
   \   000003   8E82         MOV     DPL,R6
   \   000005   8F83         MOV     DPH,R7
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET
   2788          
   2789          /*********************************************************************
   2790           * @fn          ZDO_ParseMgmtBindRsp
   2791           *
   2792           * @brief       This function parses the incoming Management
   2793           *              Binding response.
   2794           *
   2795           * @param       inMsg - pointer to message to parse
   2796           *
   2797           * @return      a pointer to parsed response structure (NULL if not allocated).  
   2798           *          This structure was allocated using osal_mem_alloc, so it must be freed
   2799           *          by the calling function [osal_mem_free()].
   2800           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2801          ZDO_MgmtBindRsp_t *ZDO_ParseMgmtBindRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmtBindRsp:
   2802          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   2803            ZDO_MgmtBindRsp_t *pRsp;
   2804            uint8 status;
   2805            uint8 bindingCount = 0;
   \   000005   75..00       MOV     ?V0 + 4,#0x0
   2806            uint8 startIndex = 0;
   \   000008   75..00       MOV     ?V0 + 5,#0x0
   2807            uint8 bindingListCount = 0;
   \   00000B   75..00       MOV     ?V0 + 6,#0x0
   2808            uint8 *msg;
   2809            
   2810            msg = inMsg->asdu;
   \   00000E   12....       LCALL   ?Subroutine75 & 0xFFFF
   2811          
   2812            status = *msg++;
   2813            if ( status == ZSuccess )
   \                     ??CrossCallReturnLabel_149:
   \   000011   700F         JNZ     ??ZDO_ParseMgmtBindRsp_0
   2814            {
   2815              bindingCount = *msg++;
   \   000013   12....       LCALL   ?Subroutine119 & 0xFFFF
   2816              startIndex = *msg++;
   \                     ??CrossCallReturnLabel_228:
   \   000016   F5..         MOV     ?V0 + 5,A
   \   000018   A3           INC     DPTR
   2817              bindingListCount = *msg++;
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F5..         MOV     ?V0 + 6,A
   \   00001C   A3           INC     DPTR
   \   00001D   0E           INC     R6
   \   00001E   0E           INC     R6
   \   00001F   0E           INC     R6
   \   000020   AF83         MOV     R7,DPH
   2818            }
   2819          
   2820            // Allocate a buffer big enough to handle the list
   2821            pRsp = (ZDO_MgmtBindRsp_t *)osal_mem_alloc( 
   2822                    (sizeof ( ZDO_MgmtBindRsp_t ) + (bindingListCount * sizeof( apsBindingItem_t ))) );
   \                     ??ZDO_ParseMgmtBindRsp_0:
   \   000022                ; Setup parameters for call to function osal_mem_alloc
   \   000022   E5..         MOV     A,?V0 + 6
   \   000024   75F015       MOV     B,#0x15
   \   000027   12....       LCALL   ?Subroutine128 & 0xFFFF
   2823            if ( pRsp )
   \                     ??CrossCallReturnLabel_609:
   \   00002A   6040         JZ      ??ZDO_ParseMgmtBindRsp_1
   2824            {
   2825              uint8 x;
   2826              apsBindingItem_t *pList = pRsp->list;
   \   00002C   12....       LCALL   ?Subroutine21 & 0xFFFF
   2827              pRsp->status = status;
   2828              pRsp->bindingCount = bindingCount;
   2829              pRsp->startIndex = startIndex;
   \                     ??CrossCallReturnLabel_612:
   \   00002F   E5..         MOV     A,?V0 + 5
   \   000031   12....       LCALL   ??Subroutine250_0 & 0xFFFF
   2830              pRsp->bindingListCount = bindingListCount;
   \                     ??CrossCallReturnLabel_631:
   \   000034   E5..         MOV     A,?V0 + 6
   \   000036   F0           MOVX    @DPTR,A
   2831              
   2832              for ( x = 0; x < bindingListCount; x++ )
   \   000037   75..00       MOV     ?V0 + 4,#0x0
   \   00003A   800D         SJMP    ??CrossCallReturnLabel_246
   2833              {
   2834                osal_cpyExtAddr( pList->srcAddr, msg );
   2835                msg += Z_EXTADDR_LEN;
   2836                pList->srcEP = *msg++;
   2837          
   2838                // Get the Cluster ID
   2839          
   2840                pList->clusterID = BUILD_UINT16( msg[0], msg[1] );
   2841                msg += 2;
   2842                pList->dstAddr.addrMode = *msg++;
   2843                if ( pList->dstAddr.addrMode == Addr64Bit )
   2844                {
   2845                  osal_cpyExtAddr( pList->dstAddr.addr.extAddr, msg );
   2846                  msg += Z_EXTADDR_LEN;
   2847                  pList->dstEP = *msg++;
   2848                }
   2849                else
   2850                {
   2851                  pList->dstAddr.addr.shortAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseMgmtBindRsp_2:
   \   00003C   12....       LCALL   ?Subroutine93 & 0xFFFF
   2852                  msg += 2;
   2853                }
   \                     ??CrossCallReturnLabel_178:
   \   00003F   12....       LCALL   ?Subroutine44 & 0xFFFF
   2854                   
   2855                pList++;
   \                     ??CrossCallReturnLabel_87:
   \   000042   E5..         MOV     A,?V0 + 0
   \   000044   2415         ADD     A,#0x15
   \   000046   12....       LCALL   ?Subroutine136 & 0xFFFF
   \                     ??CrossCallReturnLabel_246:
   \   000049   E5..         MOV     A,?V0 + 4
   \   00004B   C3           CLR     C
   \   00004C   95..         SUBB    A,?V0 + 6
   \   00004E   501C         JNC     ??ZDO_ParseMgmtBindRsp_1
   \   000050                ; Setup parameters for call to function sAddrExtCpy
   \   000050   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000053   70E7         JNZ     ??ZDO_ParseMgmtBindRsp_2
   \   000055                ; Setup parameters for call to function sAddrExtCpy
   \   000055   EE           MOV     A,R6
   \   000056   FC           MOV     R4,A
   \   000057   EF           MOV     A,R7
   \   000058   FD           MOV     R5,A
   \   000059   12....       LCALL   ??Subroutine241_0 & 0xFFFF
   2856              }
   2857            }
   \                     ??CrossCallReturnLabel_575:
   \   00005C   C0E0         PUSH    A
   \   00005E   E5..         MOV     A,?V0 + 0
   \   000060   2414         ADD     A,#0x14
   \   000062   12....       LCALL   ??Subroutine238_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_554:
   \   000065   D0E0         POP     A
   \   000067   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   00006A   80D6         SJMP    ??CrossCallReturnLabel_87
   2858            
   2859            return ( pRsp );
   \                     ??ZDO_ParseMgmtBindRsp_1:
   \   00006C   02....       LJMP    ?Subroutine3 & 0xFFFF
   2860          }
   2861          
   2862          /*********************************************************************
   2863           * @fn          ZDO_ParseUserDescRsp
   2864           *
   2865           * @brief       This function parses the incoming User
   2866           *              Descriptor Response.
   2867           *
   2868           * @param       inMsg - incoming response message
   2869           *
   2870           * @return      a pointer to parsed response structure (NULL if not allocated).  
   2871           *          This structure was allocated using osal_mem_alloc, so it must be freed
   2872           *          by the calling function [osal_mem_free()].
   2873           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2874          ZDO_UserDescRsp_t *ZDO_ParseUserDescRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseUserDescRsp:
   2875          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   2876            ZDO_UserDescRsp_t *pRsp;
   2877            uint8 *msg;
   2878            uint8 descLen = 0;
   \   000005   75..00       MOV     ?V0 + 2,#0x0
   2879            
   2880            msg = inMsg->asdu;
   \   000008   12....       LCALL   ?Subroutine178 & 0xFFFF
   \                     ??CrossCallReturnLabel_309:
   \   00000B   3400         ADDC    A,#0x0
   \   00000D   12....       LCALL   ?Subroutine108 & 0xFFFF
   2881            
   2882            if ( msg[0] == ZSuccess )
   \                     ??CrossCallReturnLabel_343:
   \   000010   85..82       MOV     DPL,?V0 + 0
   \   000013   F583         MOV     DPH,A
   \   000015   E0           MOVX    A,@DPTR
   \   000016   7006         JNZ     ??ZDO_ParseUserDescRsp_0
   2883              descLen = msg[3];
   \   000018   A3           INC     DPTR
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F5..         MOV     ?V0 + 2,A
   2884            
   2885            pRsp = (ZDO_UserDescRsp_t *)osal_mem_alloc( sizeof ( ZDO_UserDescRsp_t ) + descLen );
   \                     ??ZDO_ParseUserDescRsp_0:
   \   00001E   85..82       MOV     DPL,?V0 + 2
   \   000021   AE82         MOV     R6,DPL
   \   000023                ; Setup parameters for call to function osal_mem_alloc
   \   000023   EE           MOV     A,R6
   \   000024   12....       LCALL   ?Subroutine129 & 0xFFFF
   \                     ??CrossCallReturnLabel_657:
   \   000027   8A..         MOV     ?V0 + 6,R2
   \   000029   8B..         MOV     ?V0 + 7,R3
   2886            if ( pRsp )
   \   00002B   EA           MOV     A,R2
   \   00002C   45..         ORL     A,?V0 + 7
   \   00002E   604B         JZ      ??ZDO_ParseUserDescRsp_1
   2887            {
   2888              pRsp->status = msg[0];
   \   000030   85..82       MOV     DPL,?V0 + 0
   \   000033   85..83       MOV     DPH,?V0 + 1
   \   000036   12....       LCALL   ?Subroutine174 & 0xFFFF
   \                     ??CrossCallReturnLabel_297:
   \   000039   12....       LCALL   ?Subroutine156 & 0xFFFF
   2889              pRsp->nwkAddr = BUILD_UINT16( msg[1], msg[2] );
   \                     ??CrossCallReturnLabel_274:
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   FA           MOV     R2,A
   \   00003E   85..82       MOV     DPL,?V0 + 0
   \   000041   85..83       MOV     DPH,?V0 + 1
   \   000044   A3           INC     DPTR
   \   000045   A3           INC     DPTR
   \   000046   E0           MOVX    A,@DPTR
   \   000047   F8           MOV     R0,A
   \   000048   E4           CLR     A
   \   000049   C8           XCH     A,R0
   \   00004A   F9           MOV     R1,A
   \   00004B   EA           MOV     A,R2
   \   00004C   85..82       MOV     DPL,?V0 + 6
   \   00004F   8B83         MOV     DPH,R3
   \   000051   A3           INC     DPTR
   \   000052   12....       LCALL   ??Subroutine218_0 & 0xFFFF
   2890              pRsp->length = descLen;
   \                     ??CrossCallReturnLabel_383:
   \   000055   85..82       MOV     DPL,?V0 + 6
   \   000058   8B83         MOV     DPH,R3
   \   00005A   A3           INC     DPTR
   \   00005B   A3           INC     DPTR
   \   00005C   A3           INC     DPTR
   \   00005D   EE           MOV     A,R6
   \   00005E   F0           MOVX    @DPTR,A
   2891              if ( descLen )
   \   00005F   601A         JZ      ??ZDO_ParseUserDescRsp_1
   2892                osal_memcpy( pRsp->desc, &msg[4], descLen );
   \   000061                ; Setup parameters for call to function osal_memcpy
   \   000061   E5..         MOV     A,?V0 + 0
   \   000063   2404         ADD     A,#0x4
   \   000065   12....       LCALL   ?Subroutine182 & 0xFFFF
   2893            }
   \                     ??CrossCallReturnLabel_618:
   \   000068   88..         MOV     ?V0 + 2,R0
   \   00006A   78..         MOV     R0,#?V0 + 0
   \   00006C   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00006F   EE           MOV     A,R6
   \   000070   FC           MOV     R4,A
   \   000071   7D00         MOV     R5,#0x0
   \   000073   E5..         MOV     A,?V0 + 6
   \   000075   12....       LCALL   ?Subroutine131 & 0xFFFF
   \                     ??CrossCallReturnLabel_606:
   \   000078   12....       LCALL   ?DEALLOC_XSTACK8
   2894            
   2895            return ( pRsp );
   \                     ??ZDO_ParseUserDescRsp_1:
   \   00007B   AA..         MOV     R2,?V0 + 6
   \   00007D   AB..         MOV     R3,?V0 + 7
   \   00007F   02....       LJMP    ??Subroutine222_0 & 0xFFFF
   2896          }
   2897          
   2898          /*********************************************************************
   2899           * @fn          ZDO_ParseSimpleDescBuf
   2900           *
   2901           * @brief       Parse a byte sequence representation of a Simple Descriptor.
   2902           *
   2903           * @param       buf  - pointer to a byte array representing a Simple Desc.
   2904           * @param       desc - SimpleDescriptionFormat_t *
   2905           *
   2906           *              This routine allocates storage for the cluster IDs because
   2907           *              they are 16-bit and need to be aligned to be properly processed.
   2908           *              This routine returns non-zero if an allocation fails.
   2909           *
   2910           *              NOTE: This means that the caller or user of the input structure
   2911           *                    is responsible for freeing the memory
   2912           *
   2913           * @return      0: success
   2914           *              1: failure due to malloc failure.
   2915           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2916          uint8 ZDO_ParseSimpleDescBuf( uint8 *buf, SimpleDescriptionFormat_t *desc )
   \                     ZDO_ParseSimpleDescBuf:
   2917          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0 + 0,R4
   \   00000B   8D..         MOV     ?V0 + 1,R5
   2918            uint8 num, i;
   2919          
   2920            desc->EndPoint = *buf++;
   \   00000D   8E82         MOV     DPL,R6
   \   00000F   8F83         MOV     DPH,R7
   \   000011   12....       LCALL   ??Subroutine252_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_643:
   \   000014   12....       LCALL   ?Subroutine28 & 0xFFFF
   2921            desc->AppProfId = BUILD_UINT16( buf[0], buf[1] );
   \                     ??CrossCallReturnLabel_37:
   \   000017   8C82         MOV     DPL,R4
   \   000019   8D83         MOV     DPH,R5
   \   00001B   12....       LCALL   ?Subroutine13 & 0xFFFF
   2922            buf += 2;
   2923            desc->AppDeviceId = BUILD_UINT16( buf[0], buf[1] );
   \                     ??CrossCallReturnLabel_646:
   \   00001E   FA           MOV     R2,A
   \   00001F   12....       LCALL   ?Subroutine121 & 0xFFFF
   \                     ??CrossCallReturnLabel_231:
   \   000022   A3           INC     DPTR
   \   000023   12....       LCALL   ?Subroutine13 & 0xFFFF
   2924            buf += 2;
   2925            desc->AppDevVer = *buf >> 4;
   2926          
   2927            desc->Reserved = 0;
   \                     ??CrossCallReturnLabel_647:
   \   000026   C4           SWAP    A
   \   000027   540F         ANL     A,#0xf
   \   000029   8C82         MOV     DPL,R4
   \   00002B   8D83         MOV     DPH,R5
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   12....       LCALL   ?Subroutine49 & 0xFFFF
   2928            buf++;
   2929          
   2930            // move in input cluster list (if any). allocate aligned memory.
   2931            num = desc->AppNumInClusters = *buf++;
   \                     ??CrossCallReturnLabel_93:
   \   000035   E0           MOVX    A,@DPTR
   \   000036   F8           MOV     R0,A
   \   000037   A3           INC     DPTR
   \   000038   0E           INC     R6
   \   000039   0E           INC     R6
   \   00003A   AF83         MOV     R7,DPH
   \   00003C   8C82         MOV     DPL,R4
   \   00003E   8D83         MOV     DPH,R5
   \   000040   A3           INC     DPTR
   \   000041   A3           INC     DPTR
   \   000042   A3           INC     DPTR
   \   000043   A3           INC     DPTR
   \   000044   A3           INC     DPTR
   \   000045   A3           INC     DPTR
   \   000046   F0           MOVX    @DPTR,A
   \   000047   88..         MOV     ?V0 + 4,R0
   2932            if ( num )  
   \   000049   EC           MOV     A,R4
   \   00004A   2407         ADD     A,#0x7
   \   00004C   F5..         MOV     ?V0 + 2,A
   \   00004E   ED           MOV     A,R5
   \   00004F   3400         ADDC    A,#0x0
   \   000051   F5..         MOV     ?V0 + 3,A
   \   000053   E8           MOV     A,R0
   \   000054   6038         JZ      ??ZDO_ParseSimpleDescBuf_0
   2933            {
   2934              if (!(desc->pAppInClusterList = (uint16 *)osal_mem_alloc(num*sizeof(uint16))))  
   \   000056                ; Setup parameters for call to function osal_mem_alloc
   \   000056   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   000059   F8           MOV     R0,A
   \   00005A   A3           INC     DPTR
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   F9           MOV     R1,A
   \   00005D   E8           MOV     A,R0
   \   00005E   49           ORL     A,R1
   \   00005F   7005         JNZ     ??ZDO_ParseSimpleDescBuf_1
   2935              {
   2936                // malloc failed. we're done.
   2937                return 1;
   \                     ??ZDO_ParseSimpleDescBuf_2:
   \   000061   7901         MOV     R1,#0x1
   \   000063   02....       LJMP    ??ZDO_ParseSimpleDescBuf_3 & 0xFFFF
   2938              }
   2939              for (i=0; i<num; ++i)  
   \                     ??ZDO_ParseSimpleDescBuf_1:
   \   000066   7A00         MOV     R2,#0x0
   \   000068   801E         SJMP    ??CrossCallReturnLabel_84
   2940              {
   2941                desc->pAppInClusterList[i] = BUILD_UINT16( buf[0], buf[1] );
   \                     ??ZDO_ParseSimpleDescBuf_4:
   \   00006A   8E82         MOV     DPL,R6
   \   00006C   8F83         MOV     DPH,R7
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   F5..         MOV     ?V0 + 6,A
   \   000071   A3           INC     DPTR
   \   000072   E0           MOVX    A,@DPTR
   \   000073   FD           MOV     R5,A
   \   000074   E5..         MOV     A,?V0 + 6
   \   000076   2400         ADD     A,#0x0
   \   000078   E4           CLR     A
   \   000079   3D           ADDC    A,R5
   \   00007A   F5..         MOV     ?V0 + 7,A
   \   00007C   12....       LCALL   ?Subroutine124 & 0xFFFF
   2942                buf += 2;
   2943              }
   \                     ??CrossCallReturnLabel_640:
   \   00007F   E5..         MOV     A,?V0 + 6
   \   000081   F0           MOVX    @DPTR,A
   \   000082   A3           INC     DPTR
   \   000083   E5..         MOV     A,?V0 + 7
   \   000085   12....       LCALL   ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   000088   EA           MOV     A,R2
   \   000089   C3           CLR     C
   \   00008A   95..         SUBB    A,?V0 + 4
   \   00008C   40DC         JC      ??ZDO_ParseSimpleDescBuf_4
   2944            }
   2945          
   2946            // move in output cluster list (if any). allocate aligned memory.
   2947            num = desc->AppNumOutClusters = *buf++;
   \                     ??ZDO_ParseSimpleDescBuf_0:
   \   00008E   8E82         MOV     DPL,R6
   \   000090   8F83         MOV     DPH,R7
   \   000092   E0           MOVX    A,@DPTR
   \   000093   F8           MOV     R0,A
   \   000094   A3           INC     DPTR
   \   000095   AE82         MOV     R6,DPL
   \   000097   AF83         MOV     R7,DPH
   \   000099   85..82       MOV     DPL,?V0 + 0
   \   00009C   85..83       MOV     DPH,?V0 + 1
   \   00009F   A3           INC     DPTR
   \   0000A0   A3           INC     DPTR
   \   0000A1   A3           INC     DPTR
   \   0000A2   A3           INC     DPTR
   \   0000A3   A3           INC     DPTR
   \   0000A4   A3           INC     DPTR
   \   0000A5   A3           INC     DPTR
   \   0000A6   A3           INC     DPTR
   \   0000A7   A3           INC     DPTR
   \   0000A8   F0           MOVX    @DPTR,A
   \   0000A9   88..         MOV     ?V0 + 4,R0
   2948            if (num)  
   \   0000AB   605C         JZ      ??ZDO_ParseSimpleDescBuf_5
   2949            {
   2950              if (!(desc->pAppOutClusterList = (uint16 *)osal_mem_alloc(num*sizeof(uint16))))  
   \   0000AD   E5..         MOV     A,?V0 + 0
   \   0000AF   240A         ADD     A,#0xa
   \   0000B1   12....       LCALL   ?Subroutine182 & 0xFFFF
   \                     ??CrossCallReturnLabel_619:
   \   0000B4                ; Setup parameters for call to function osal_mem_alloc
   \   0000B4   E8           MOV     A,R0
   \   0000B5   C3           CLR     C
   \   0000B6   33           RLC     A
   \   0000B7   FA           MOV     R2,A
   \   0000B8   E4           CLR     A
   \   0000B9   33           RLC     A
   \   0000BA   FB           MOV     R3,A
   \   0000BB   12....       LCALL   ??osal_mem_alloc?relay
   \   0000BE   85..82       MOV     DPL,?V0 + 0
   \   0000C1   85..83       MOV     DPH,?V0 + 1
   \   0000C4   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   0000C7   85..82       MOV     DPL,?V0 + 0
   \   0000CA   85..83       MOV     DPH,?V0 + 1
   \   0000CD   12....       LCALL   ??Subroutine232_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_484:
   \   0000D0   7011         JNZ     ??ZDO_ParseSimpleDescBuf_6
   2951              {
   2952                // malloc failed. free input cluster list memory if there is any
   2953                if ( desc->pAppInClusterList != NULL )  
   \   0000D2   85..82       MOV     DPL,?V0 + 2
   \   0000D5   85..83       MOV     DPH,?V0 + 3
   \   0000D8   12....       LCALL   ??Subroutine235_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_504:
   \   0000DB   6084         JZ      ??ZDO_ParseSimpleDescBuf_2
   2954                {
   2955                  osal_mem_free(desc->pAppInClusterList);
   \   0000DD                ; Setup parameters for call to function osal_mem_free
   \   0000DD   12....       LCALL   ??osal_mem_free?relay
   \   0000E0   02....       LJMP    ??ZDO_ParseSimpleDescBuf_2 & 0xFFFF
   2956                }
   2957                return 1;
   2958              }
   2959              for (i=0; i<num; ++i)  
   \                     ??ZDO_ParseSimpleDescBuf_6:
   \   0000E3   7A00         MOV     R2,#0x0
   \   0000E5   801C         SJMP    ??CrossCallReturnLabel_85
   2960              {
   2961                desc->pAppOutClusterList[i] = BUILD_UINT16( buf[0], buf[1] );
   \                     ??ZDO_ParseSimpleDescBuf_7:
   \   0000E7   8E82         MOV     DPL,R6
   \   0000E9   8F83         MOV     DPH,R7
   \   0000EB   12....       LCALL   ??Subroutine208_0 & 0xFFFF
   2962                buf += 2;
   2963              }
   \                     ??CrossCallReturnLabel_354:
   \   0000EE   FD           MOV     R5,A
   \   0000EF   E5..         MOV     A,?V0 + 0
   \   0000F1   2400         ADD     A,#0x0
   \   0000F3   E4           CLR     A
   \   0000F4   3D           ADDC    A,R5
   \   0000F5   F5..         MOV     ?V0 + 1,A
   \   0000F7   12....       LCALL   ?Subroutine124 & 0xFFFF
   \                     ??CrossCallReturnLabel_641:
   \   0000FA   E5..         MOV     A,?V0 + 0
   \   0000FC   F0           MOVX    @DPTR,A
   \   0000FD   A3           INC     DPTR
   \   0000FE   E5..         MOV     A,?V0 + 1
   \   000100   12....       LCALL   ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   000103   EA           MOV     A,R2
   \   000104   C3           CLR     C
   \   000105   95..         SUBB    A,?V0 + 4
   \   000107   40DE         JC      ??ZDO_ParseSimpleDescBuf_7
   2964            }
   2965            return 0;
   \                     ??ZDO_ParseSimpleDescBuf_5:
   \   000109   7900         MOV     R1,#0x0
   \                     ??ZDO_ParseSimpleDescBuf_3:
   \   00010B   02....       LJMP    ??Subroutine222_0 & 0xFFFF
   2966          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine124:
   \   000000   EA           MOV     A,R2
   \   000001                REQUIRE ??Subroutine251_0
   \   000001                ; // Fall through to label ??Subroutine251_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   12....       LCALL   ?Subroutine147 & 0xFFFF
   \                     ??CrossCallReturnLabel_650:
   \   000003   0A           INC     R2
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   A3           INC     DPTR
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004                REQUIRE ??Subroutine253_0
   \   000004                ; // Fall through to label ??Subroutine253_0
   2967          
   2968          /*********************************************************************
   2969           * @fn          ZDO_ParseDeviceAnnce
   2970           *
   2971           * @brief       Parse a Device Announce message.
   2972           *
   2973           * @param       inMsg - Incoming message
   2974           * @param       pAnnce - place to put the parsed information
   2975           *
   2976           * @return      none
   2977           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2978          void ZDO_ParseDeviceAnnce( zdoIncomingMsg_t *inMsg, ZDO_DeviceAnnce_t *pAnnce )
   \                     ZDO_ParseDeviceAnnce:
   2979          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   8C..         MOV     ?V0 + 0,R4
   \   000007   8D..         MOV     ?V0 + 1,R5
   2980            uint8 *msg;
   2981          
   2982            // Parse incoming message
   2983            msg = inMsg->asdu;
   \   000009   12....       LCALL   ?Subroutine76 & 0xFFFF
   2984            pAnnce->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_623:
   \   00000C   FA           MOV     R2,A
   \   00000D   A3           INC     DPTR
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   F9           MOV     R1,A
   \   000010   EA           MOV     A,R2
   \   000011   8C82         MOV     DPL,R4
   \   000013   8D83         MOV     DPH,R5
   \   000015   12....       LCALL   ?Subroutine18 & 0xFFFF
   2985            msg += 2;
   2986            osal_cpyExtAddr( pAnnce->extAddr, msg );
   \                     ??CrossCallReturnLabel_20:
   \   000018   2402         ADD     A,#0x2
   \   00001A   FA           MOV     R2,A
   \   00001B   E5..         MOV     A,?V0 + 1
   \   00001D   3400         ADDC    A,#0x0
   \   00001F   FB           MOV     R3,A
   \   000020   12....       LCALL   ?Subroutine56 & 0xFFFF
   2987            msg += Z_EXTADDR_LEN;
   2988            pAnnce->capabilities = *msg;
   \                     ??CrossCallReturnLabel_107:
   \   000023   85..82       MOV     DPL,?V0 + 0
   \   000026   85..83       MOV     DPH,?V0 + 1
   \   000029   A3           INC     DPTR
   \   00002A   A3           INC     DPTR
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   A3           INC     DPTR
   \   000033   F0           MOVX    @DPTR,A
   2989          }
   \   000034   02....       LJMP    ??Subroutine205_0 & 0xFFFF
   2990          
   2991          /*********************************************************************
   2992           * @fn          ZDO_ParseMgmtNwkUpdateNotify
   2993           *
   2994           * @brief       This function handles parsing of the incoming Management
   2995           *              Network Update notify.
   2996           *
   2997           * @param       inMsg - incoming message (request)
   2998           *
   2999           * @return      a pointer to parsed response structure (NULL if not allocated).  
   3000           *          This structure was allocated using osal_mem_alloc, so it must be freed
   3001           *          by the calling function [osal_mem_free()].
   3002           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3003          ZDO_MgmtNwkUpdateNotify_t *ZDO_ParseMgmtNwkUpdateNotify( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmtNwkUpdateNotify:
   3004          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV     A,#-0x6
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   3005            uint8 status;
   3006            uint32 scannedChannels = 0;
   \   00000A   90....       MOV     DPTR,#__Constant_0
   \   00000D   78..         MOV     R0,#?V0 + 0
   \   00000F   12....       LCALL   ?L_MOV_X
   3007            uint16 totalTransmissions = 0;
   \   000012   75..00       MOV     ?V0 + 4,#0x0
   \   000015   75..00       MOV     ?V0 + 5,#0x0
   3008            uint16 transmissionFailures = 0;
   \   000018   7E00         MOV     R6,#0x0
   \   00001A   7F00         MOV     R7,#0x0
   3009            uint8 listCount = 0;
   \   00001C   7402         MOV     A,#0x2
   \   00001E   12....       LCALL   ?XSTACK_DISP0_8
   \   000021   E4           CLR     A
   \   000022   12....       LCALL   ?Subroutine36 & 0xFFFF
   3010            uint8 *msg = inMsg->asdu;
   \                     ??CrossCallReturnLabel_52:
   \   000025   F8           MOV     R0,A
   \   000026   A3           INC     DPTR
   \   000027   E0           MOVX    A,@DPTR
   \   000028   12....       LCALL   ?Subroutine19 & 0xFFFF
   3011            ZDO_MgmtNwkUpdateNotify_t *pRsp;
   3012          
   3013            status = *msg++;
   \                     ??CrossCallReturnLabel_21:
   \   00002B   C0E0         PUSH    A
   \   00002D   7405         MOV     A,#0x5
   \   00002F   12....       LCALL   ?XSTACK_DISP0_8
   \   000032   D0E0         POP     A
   \   000034   12....       LCALL   ?Subroutine11 & 0xFFFF
   3014            if ( status == ZSuccess )
   \                     ??CrossCallReturnLabel_7:
   \   000037   7405         MOV     A,#0x5
   \   000039   12....       LCALL   ?XSTACK_DISP0_8
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   7059         JNZ     ??CrossCallReturnLabel_8
   3015            {
   3016              scannedChannels = osal_build_uint32( msg, 4 );
   \   00003F                ; Setup parameters for call to function osal_build_uint32
   \   00003F   7904         MOV     R1,#0x4
   \   000041   85..82       MOV     DPL,?XSP + 0
   \   000044   85..83       MOV     DPH,?XSP + 1
   \   000047   12....       LCALL   ??Subroutine228_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_455:
   \   00004A   12....       LCALL   ??osal_build_uint32?relay
   \   00004D   8A..         MOV     ?V0 + 0,R2
   \   00004F   8B..         MOV     ?V0 + 1,R3
   \   000051   8C..         MOV     ?V0 + 2,R4
   \   000053   8D..         MOV     ?V0 + 3,R5
   3017              msg += 4;
   \   000055   85..82       MOV     DPL,?XSP + 0
   \   000058   85..83       MOV     DPH,?XSP + 1
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   2404         ADD     A,#0x4
   \   00005E   F8           MOV     R0,A
   \   00005F   12....       LCALL   ?Subroutine10 & 0xFFFF
   3018              totalTransmissions = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_5:
   \   000062   F5..         MOV     ?V0 + 4,A
   \   000064   E4           CLR     A
   \   000065   39           ADDC    A,R1
   \   000066   F5..         MOV     ?V0 + 5,A
   3019              msg += 2;
   \   000068   85..82       MOV     DPL,?XSP + 0
   \   00006B   85..83       MOV     DPH,?XSP + 1
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   2402         ADD     A,#0x2
   \   000071   08           INC     R0
   \   000072   08           INC     R0
   \   000073   12....       LCALL   ?Subroutine10 & 0xFFFF
   3020              transmissionFailures = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_6:
   \   000076   FE           MOV     R6,A
   \   000077   E4           CLR     A
   \   000078   39           ADDC    A,R1
   \   000079   FF           MOV     R7,A
   3021              msg += 2;
   \   00007A   85..82       MOV     DPL,?XSP + 0
   \   00007D   85..83       MOV     DPH,?XSP + 1
   \   000080   E0           MOVX    A,@DPTR
   \   000081   2402         ADD     A,#0x2
   \   000083   08           INC     R0
   \   000084   08           INC     R0
   \   000085   A3           INC     DPTR
   \   000086   E0           MOVX    A,@DPTR
   \   000087   3400         ADDC    A,#0x0
   \   000089   12....       LCALL   ?Subroutine19 & 0xFFFF
   3022              listCount = *msg++;
   3023            }
   \                     ??CrossCallReturnLabel_22:
   \   00008C   C0E0         PUSH    A
   \   00008E   7402         MOV     A,#0x2
   \   000090   12....       LCALL   ?XSTACK_DISP0_8
   \   000093   D0E0         POP     A
   \   000095   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000098                ; Setup parameters for call to function osal_mem_alloc
   \   000098   7402         MOV     A,#0x2
   \   00009A   12....       LCALL   ?XSTACK_DISP0_8
   \   00009D   E0           MOVX    A,@DPTR
   \   00009E   240A         ADD     A,#0xa
   \   0000A0   12....       LCALL   ??Subroutine254_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_658:
   \   0000A3   7403         MOV     A,#0x3
   \   0000A5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A8   12....       LCALL   ?Subroutine38 & 0xFFFF
   3024            
   3025            pRsp = (ZDO_MgmtNwkUpdateNotify_t *)osal_mem_alloc( sizeof ( ZDO_MgmtNwkUpdateNotify_t ) + listCount );
   3026          
   3027            if ( pRsp )
   \                     ??CrossCallReturnLabel_74:
   \   0000AB   7403         MOV     A,#0x3
   \   0000AD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B0   12....       LCALL   ??Subroutine232_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_485:
   \   0000B3   607E         JZ      ??ZDO_ParseMgmtNwkUpdateNotify_0
   3028            {
   3029              pRsp->status = status;
   \   0000B5   7405         MOV     A,#0x5
   \   0000B7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BA   E0           MOVX    A,@DPTR
   \   0000BB   C0E0         PUSH    A
   \   0000BD   7403         MOV     A,#0x3
   \   0000BF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C2   12....       LCALL   ?Subroutine116 & 0xFFFF
   \                     ??CrossCallReturnLabel_223:
   \   0000C5   D0E0         POP     A
   \   0000C7   F0           MOVX    @DPTR,A
   3030              pRsp->scannedChannels = scannedChannels;
   \   0000C8   7403         MOV     A,#0x3
   \   0000CA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CD   12....       LCALL   ?Subroutine115 & 0xFFFF
   \                     ??CrossCallReturnLabel_219:
   \   0000D0   78..         MOV     R0,#?V0 + 0
   \   0000D2   12....       LCALL   ?L_MOV_TO_X
   3031              pRsp->totalTransmissions = totalTransmissions;
   \   0000D5   7403         MOV     A,#0x3
   \   0000D7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DA   12....       LCALL   ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_663:
   \   0000DD   E5..         MOV     A,?V0 + 4
   \   0000DF   F0           MOVX    @DPTR,A
   \   0000E0   A3           INC     DPTR
   \   0000E1   E5..         MOV     A,?V0 + 5
   \   0000E3   F0           MOVX    @DPTR,A
   3032              pRsp->transmissionFailures = transmissionFailures;
   \   0000E4   7403         MOV     A,#0x3
   \   0000E6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E9   12....       LCALL   ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_176:
   \   0000EC   A3           INC     DPTR
   \   0000ED   EE           MOV     A,R6
   \   0000EE   F0           MOVX    @DPTR,A
   \   0000EF   A3           INC     DPTR
   \   0000F0   EF           MOV     A,R7
   \   0000F1   F0           MOVX    @DPTR,A
   3033              pRsp->listCount = listCount;
   \   0000F2   7402         MOV     A,#0x2
   \   0000F4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F7   E0           MOVX    A,@DPTR
   \   0000F8   C0E0         PUSH    A
   \   0000FA   7403         MOV     A,#0x3
   \   0000FC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FF   12....       LCALL   ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_151:
   \   000102   D0E0         POP     A
   \   000104   F0           MOVX    @DPTR,A
   3034              
   3035              // Allocate a buffer big enough to handle the list.
   3036              if ( listCount > 0 )
   \   000105   7402         MOV     A,#0x2
   \   000107   12....       LCALL   ?XSTACK_DISP0_8
   \   00010A   E0           MOVX    A,@DPTR
   \   00010B   6026         JZ      ??ZDO_ParseMgmtNwkUpdateNotify_0
   3037                osal_memcpy( pRsp->energyValues, msg, listCount );
   \   00010D                ; Setup parameters for call to function osal_memcpy
   \   00010D   85..82       MOV     DPL,?XSP + 0
   \   000110   85..83       MOV     DPH,?XSP + 1
   \   000113   12....       LCALL   ?Subroutine70 & 0xFFFF
   3038            }
   \                     ??CrossCallReturnLabel_138:
   \   000116   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000119   7405         MOV     A,#0x5
   \   00011B   12....       LCALL   ?XSTACK_DISP0_8
   \   00011E   E0           MOVX    A,@DPTR
   \   00011F   FC           MOV     R4,A
   \   000120   7D00         MOV     R5,#0x0
   \   000122   7406         MOV     A,#0x6
   \   000124   12....       LCALL   ?XSTACK_DISP0_8
   \   000127   E0           MOVX    A,@DPTR
   \   000128   240A         ADD     A,#0xa
   \   00012A   FA           MOV     R2,A
   \   00012B   A3           INC     DPTR
   \   00012C   E0           MOVX    A,@DPTR
   \   00012D   12....       LCALL   ??Subroutine245_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_607:
   \   000130   12....       LCALL   ?DEALLOC_XSTACK8
   3039            
   3040            return ( pRsp );
   \                     ??ZDO_ParseMgmtNwkUpdateNotify_0:
   \   000133   7403         MOV     A,#0x3
   \   000135   12....       LCALL   ?XSTACK_DISP0_8
   \   000138   12....       LCALL   ??Subroutine228_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_456:
   \   00013B   7406         MOV     A,#0x6
   \   00013D   02....       LJMP    ??Subroutine259_0 & 0xFFFF
   3041          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   12....       LCALL   ?Subroutine146 & 0xFFFF
   \                     ??CrossCallReturnLabel_260:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine146:
   \   000000   F9           MOV     R1,A
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   E8           MOV     A,R0
   \   000008   F0           MOVX    @DPTR,A
   \   000009   A3           INC     DPTR
   \   00000A   E9           MOV     A,R1
   \   00000B   12....       LCALL   ?Subroutine192 & 0xFFFF
   \                     ??CrossCallReturnLabel_327:
   \   00000E   12....       LCALL   ?Subroutine195 & 0xFFFF
   \                     ??CrossCallReturnLabel_670:
   \   000011   E0           MOVX    A,@DPTR
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   12....       LCALL   ?Subroutine155 & 0xFFFF
   \                     ??CrossCallReturnLabel_272:
   \   000003   2401         ADD     A,#0x1
   \   000005   F8           MOV     R0,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   3400         ADDC    A,#0x0
   \   00000A   F9           MOV     R1,A
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   E8           MOV     A,R0
   \   000012   F0           MOVX    @DPTR,A
   \   000013   A3           INC     DPTR
   \   000014   E9           MOV     A,R1
   \   000015   F0           MOVX    @DPTR,A
   \   000016   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   A3           INC     DPTR
   \   000001   E0           MOVX    A,@DPTR
   \   000002   3400         ADDC    A,#0x0
   \   000004   12....       LCALL   ?Subroutine146 & 0xFFFF
   \                     ??CrossCallReturnLabel_261:
   \   000007   FA           MOV     R2,A
   \   000008   85..82       MOV     DPL,?XSP + 0
   \   00000B   85..83       MOV     DPH,?XSP + 1
   \   00000E   12....       LCALL   ??Subroutine256_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_665:
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F9           MOV     R1,A
   \   000013   EA           MOV     A,R2
   \   000014   2400         ADD     A,#0x0
   \   000016   22           RET
   3042          
   3043          /*********************************************************************
   3044           * @fn          ZDO_ParseMgmtNwkUpdateReq
   3045           *
   3046           * @brief       This function handles parsing the incoming Management
   3047           *              Network Update request and starts the request (if needed).
   3048           *
   3049           * @param       inMsg - incoming message (request)
   3050           * @param       pReq - pointer to place to parse message to
   3051           *
   3052           * @return      none
   3053           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3054          void ZDO_ParseMgmtNwkUpdateReq( zdoIncomingMsg_t *inMsg, ZDO_MgmtNwkUpdateReq_t *pReq )
   \                     ZDO_ParseMgmtNwkUpdateReq:
   3055          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   8C..         MOV     ?V0 + 0,R4
   \   000007   8D..         MOV     ?V0 + 1,R5
   3056            uint8 *msg = inMsg->asdu;
   \   000009   12....       LCALL   ?Subroutine84 & 0xFFFF
   3057            
   3058            pReq->channelMask = osal_build_uint32( msg, 4 );
   \                     ??CrossCallReturnLabel_166:
   \   00000C   85..82       MOV     DPL,?V0 + 0
   \   00000F   85..83       MOV     DPH,?V0 + 1
   \   000012   12....       LCALL   ?XSTORE_R2345
   3059            msg += 4;
   \   000015   12....       LCALL   ?Subroutine132 & 0xFFFF
   3060            pReq->scanDuration = *msg++;
   \                     ??CrossCallReturnLabel_377:
   \   000018   FA           MOV     R2,A
   \   000019   E5..         MOV     A,?V0 + 0
   \   00001B   2404         ADD     A,#0x4
   \   00001D   F8           MOV     R0,A
   \   00001E   E5..         MOV     A,?V0 + 1
   \   000020   3400         ADDC    A,#0x0
   \   000022   F9           MOV     R1,A
   \   000023   EA           MOV     A,R2
   \   000024   8882         MOV     DPL,R0
   \   000026   8983         MOV     DPH,R1
   \   000028   12....       LCALL   ?Subroutine41 & 0xFFFF
   3061            
   3062            if ( pReq->scanDuration <= 0x05 )
   \                     ??CrossCallReturnLabel_81:
   \   00002B   C3           CLR     C
   \   00002C   9406         SUBB    A,#0x6
   \   00002E   5005         JNC     ??ZDO_ParseMgmtNwkUpdateReq_0
   3063            {
   3064              // Request is to scan over channelMask
   3065              pReq->scanCount = *msg;
   \   000030   12....       LCALL   ?Subroutine71 & 0xFFFF
   3066            }
   \                     ??CrossCallReturnLabel_140:
   \   000033   801F         SJMP    ??ZDO_ParseMgmtNwkUpdateReq_1
   3067            else if ( ( pReq->scanDuration == 0xFE ) || ( pReq->scanDuration == 0xFF ) )
   \                     ??ZDO_ParseMgmtNwkUpdateReq_0:
   \   000035   74FE         MOV     A,#-0x2
   \   000037   6A           XRL     A,R2
   \   000038   6005         JZ      ??ZDO_ParseMgmtNwkUpdateReq_2
   \   00003A   74FF         MOV     A,#-0x1
   \   00003C   6A           XRL     A,R2
   \   00003D   7016         JNZ     ??ZDO_ParseMgmtNwkUpdateReq_3
   3068            {
   3069              // Request is to change Channel (0xFE) or apsChannelMask and NwkManagerAddr (0xFF)
   3070              pReq->nwkUpdateId = *msg++;
   \                     ??ZDO_ParseMgmtNwkUpdateReq_2:
   \   00003F   12....       LCALL   ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_141:
   \   000042   A3           INC     DPTR
   \   000043   12....       LCALL   ?Subroutine24 & 0xFFFF
   3071              
   3072              if ( pReq->scanDuration == 0xFF )
   \                     ??CrossCallReturnLabel_31:
   \   000046   8882         MOV     DPL,R0
   \   000048   8983         MOV     DPH,R1
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   F4           CPL     A
   \   00004C   7007         JNZ     ??ZDO_ParseMgmtNwkUpdateReq_3
   3073              {
   3074                pReq->nwkManagerAddr = BUILD_UINT16( msg[0], msg[1] );
   \   00004E   12....       LCALL   ?Subroutine73 & 0xFFFF
   3075              }
   3076            }
   \                     ??CrossCallReturnLabel_145:
   \   000051   F0           MOVX    @DPTR,A
   \   000052   A3           INC     DPTR
   \   000053   E9           MOV     A,R1
   \                     ??ZDO_ParseMgmtNwkUpdateReq_1:
   \   000054   F0           MOVX    @DPTR,A
   3077          }
   \                     ??ZDO_ParseMgmtNwkUpdateReq_3:
   \   000055   02....       LJMP    ??Subroutine205_0 & 0xFFFF

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_StartDevice?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_StartDevice

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_UpdateNwkStatus?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_UpdateNwkStatus

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_CompareClusterLists?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_CompareClusterLists

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_AnyClusterMatches?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_AnyClusterMatches

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessNodeDescReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessNodeDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessPowerDescReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessPowerDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessSimpleDescReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessSimpleDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessActiveEPReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessActiveEPReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ConvertOTAClusters?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ConvertOTAClusters

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessMatchDescReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMatchDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessBindUnbindReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessBindUnbindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_UpdateAddrManager?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_UpdateAddrManager

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessServerDiscReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessServerDiscReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_EndDeviceTimeoutCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_EndDeviceTimeoutCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessMgmtLqiReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtLqiReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessMgmtNwkDiscReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtNwkDiscReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessMgmtRtgReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtRtgReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessMgmtBindReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtBindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessMgmtDirectJoinReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtDirectJoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessMgmtLeaveReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtLeaveReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessMgmtPermitJoinReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtPermitJoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??NLME_PermitJoiningTimeout?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    NLME_PermitJoiningTimeout

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessUserDescReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessUserDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessUserDescSet?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessUserDescSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessDeviceAnnce?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessDeviceAnnce

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_BuildSimpleDescBuf?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_BuildSimpleDescBuf

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_MatchEndDeviceBind?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_MatchEndDeviceBind

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_RemoveMatchMemory?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_RemoveMatchMemory

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_CopyMatchInfo?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_CopyMatchInfo

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDMatchSendState?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDMatchSendState

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_EndDeviceBindMatchTimeoutCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_EndDeviceBindMatchTimeoutCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseEndDeviceBindReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseEndDeviceBindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseBindUnbindReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseBindUnbindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseAddrRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseAddrRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseNodeDescRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseNodeDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParsePowerDescRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParsePowerDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseSimpleDescRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseSimpleDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseEPListRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseEPListRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseServerDiscRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseServerDiscRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseMgmtLqiRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtLqiRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseMgmNwkDiscRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmNwkDiscRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseMgmtRtgRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtRtgRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseMgmtBindRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtBindRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseUserDescRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseUserDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseSimpleDescBuf?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseSimpleDescBuf

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseDeviceAnnce?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseDeviceAnnce

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseMgmtNwkUpdateNotify?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtNwkUpdateNotify

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseMgmtNwkUpdateReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtNwkUpdateReq

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "StartDevice ERR">`:
   \   000000   53746172     DB "StartDevice ERR"
   \            74446576
   \            69636520
   \            45525200

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "MODE unknown">`:
   \   000000   4D4F4445     DB "MODE unknown"
   \            20756E6B
   \            6E6F776E
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "End Device Bind">`:
   \   000000   456E6420     DB "End Device Bind"
   \            44657669
   \            63652042
   \            696E6400

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Success Sent">`:
   \   000000   53756363     DB "Success Sent"
   \            65737320
   \            53656E74
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Timeout">`:
   \   000000   54696D65     DB "Timeout"
   \            6F757400

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Match Desc Req">`:
   \   000000   4D617463     DB "Match Desc Req"
   \            68204465
   \            73632052
   \            657100  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Rsp Sent">`:
   \   000000   52737020     DB "Rsp Sent"
   \            53656E74
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Non Matched">`:
   \   000000   4E6F6E20     DB "Non Matched"
   \            4D617463
   \            68656400

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_7fff800:
   \   000000   00F8FF07     DD 134215680

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_0:
   \   000000   00000000     DD 0
   3078          
   3079          /*********************************************************************
   3080          *********************************************************************/
   3081          
   3082          

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     NLME_PermitJoiningTimeout          0      0      0
     ZDMatchSendState                   1      0     72
       -> APS_SetEndDeviceBindTimeout
                                        0      0     76
       -> sAddrExtCpy                   0      0     76
       -> ZDP_BindUnbindReq             0      0     92
       -> APS_SetEndDeviceBindTimeout
                                        0      0     76
       -> ZDP_SendData                  0      0     86
       -> ZDP_SendData                  0      0     86
       -> ZDO_RemoveMatchMemory         0      0     76
     ZDO_AnyClusterMatches              0      0     41
     ZDO_BuildSimpleDescBuf             1      0     14
     ZDO_CompareClusterLists            0      0     46
     ZDO_ConvertOTAClusters             0      0     37
     ZDO_CopyMatchInfo                  0      0     45
       -> osal_memcpy                   0      0     38
       -> osal_mem_alloc                0      0     32
       -> osal_memcpy                   0      0     38
       -> osal_mem_alloc                0      0     32
       -> osal_memcpy                   0      0     38
       -> osal_mem_free                 0      0     32
       -> osal_mem_free                 0      0     32
     ZDO_EndDeviceBindMatchTimeoutCB
                                        2      0      0
       -> ZDMatchSendState              4      0      0
     ZDO_EndDeviceTimeoutCB             1      0     17
       -> ZDP_SendData                  0      0     34
       -> HalLcdWriteString             0      0     24
       -> HalLcdWriteString             0      0     24
       -> HalLcdWriteString             0      0     24
       -> osal_mem_free                 0      0     24
       -> osal_mem_free                 0      0     24
       -> osal_mem_free                 0      0     24
     ZDO_Init                           2      0      0
       -> sAddrExtCpy                   4      0      0
       -> APS_ReflectorInit             4      0      0
       -> NLME_DeviceJoiningInit        4      0      0
     ZDO_MatchEndDeviceBind             1      0     31
       -> osal_mem_alloc                0      0     52
       -> osal_memset                   0      0     52
       -> ZDO_CopyMatchInfo             0      0     52
       -> APS_SetEndDeviceBindTimeout
                                        0      0     52
       -> ZDO_CopyMatchInfo             0      0     52
       -> ZDO_CompareClusterLists       0      0     60
       -> osal_mem_alloc                0      0     52
       -> osal_memcpy                   0      0     58
       -> ZDO_CompareClusterLists       0      0     60
       -> osal_mem_alloc                0      0     52
       -> osal_memcpy                   0      0     58
       -> ZDMatchSendState              0      0     52
       -> ZDP_SendData                  0      0     62
       -> ZDP_SendData                  0      0     62
       -> ZDO_RemoveMatchMemory         0      0     52
     ZDO_ParseAddrRsp                   1      0     14
       -> osal_mem_alloc                0      0     28
       -> sAddrExtCpy                   0      0     28
     ZDO_ParseBindUnbindReq             1      0     10
       -> sAddrExtCpy                   0      0     20
       -> sAddrExtCpy                   0      0     20
     ZDO_ParseDeviceAnnce               1      0     52
       -> sAddrExtCpy                   0      0     20
     ZDO_ParseEPListRsp                 1      0     19
       -> osal_mem_alloc                0      0     32
       -> osal_memcpy                   0      0     38
     ZDO_ParseEndDeviceBindReq          1      0     15
       -> sAddrExtCpy                   0      0     30
       -> osal_mem_alloc                0      0     30
       -> ZDO_ConvertOTAClusters        0      0     30
       -> osal_mem_alloc                0      0     30
       -> ZDO_ConvertOTAClusters        0      0     30
     ZDO_ParseMgmNwkDiscRsp             1      0     16
       -> osal_mem_alloc                0      0     32
       -> sAddrExtCpy                   0      0     32
     ZDO_ParseMgmtBindRsp               1      0     16
       -> osal_mem_alloc                0      0     32
       -> sAddrExtCpy                   0      0     32
       -> sAddrExtCpy                   0      0     32
     ZDO_ParseMgmtLqiRsp                1      0     16
       -> osal_mem_alloc                0      0     32
       -> sAddrExtCpy                   0      0     32
     ZDO_ParseMgmtNwkUpdateNotify       1      0     23
       -> osal_build_uint32             0      0     40
       -> osal_mem_alloc                0      0     40
       -> osal_memcpy                   0      0     46
     ZDO_ParseMgmtNwkUpdateReq          1      0     10
       -> osal_build_uint32             0      0     20
     ZDO_ParseMgmtRtgRsp                1      0     14
       -> osal_mem_alloc                0      0     28
     ZDO_ParseNodeDescRsp               2      0      9
     ZDO_ParsePowerDescRsp              1      0      9
     ZDO_ParseServerDiscRsp             1      0      9
     ZDO_ParseSimpleDescBuf             1      0     25
       -> osal_mem_alloc                0      0     32
       -> osal_mem_alloc                0      0     32
       -> osal_mem_free                 0      0     32
     ZDO_ParseSimpleDescRsp             1      0      9
       -> ZDO_ParseSimpleDescBuf        0      0     18
     ZDO_ParseUserDescRsp               1      0     19
       -> osal_mem_alloc                0      0     32
       -> osal_memcpy                   0      0     38
     ZDO_ProcessActiveEPReq             0      0     21
       -> NLME_GetShortAddr             0      0     28
       -> afNumEndPoints                0      0     28
       -> afEndPoints                   0      0     28
       -> ZDP_EPRsp                     0      0     42
     ZDO_ProcessBindUnbindReq           0      0     33
       -> sAddrExtCpy                   0      0     56
       -> NLME_GetExtAddr               0      0     56
       -> sAddrExtCmp                   0      0     56
       -> bindNumOfEntries              0      0     56
       -> APSME_BindRequest             0      0     58
       -> ZDApp_NVUpdate                0      0     56
       -> APSME_LookupNwkAddr           0      0     56
       -> ZDP_NwkAddrReq                0      0     56
       -> APSME_UnBindRequest           0      0     58
       -> ZDApp_NVUpdate                0      0     56
       -> ZDP_SendData                  0      0     66
     ZDO_ProcessDeviceAnnce             0      0     42
       -> ZDO_ParseDeviceAnnce          0      0     84
       -> NLME_GetExtAddr               0      0     84
       -> sAddrExtCmp                   0      0     84
       -> NLME_GetShortAddr             0      0     84
       -> nwkNeighborRemoveAllStranded
                                        0      0     84
       -> NLME_CheckNewAddrSet          0      0     84
       -> NLME_GetCoordExtAddr          0      0     84
       -> sAddrExtCmp                   0      0     84
       -> NLME_GetCoordShortAddr        0      0     84
       -> ZMacSetReq                    0      0     84
       -> AddrMgrEntryLookupNwk         0      0     84
       -> osal_memset                   0      0     84
       -> sAddrExtCmp                   0      0     84
       -> AddrMgrExtAddrSet             0      0     84
       -> AddrMgrEntryUpdate            0      0     84
     ZDO_ProcessMatchDescReq            1      0     34
       -> NLME_IsAddressBroadcast       0      0     54
       -> ZDP_EPRsp                     0      0     68
       -> NLME_IsAddressBroadcast       0      0     54
       -> osal_mem_alloc                0      0     54
       -> ZDO_ConvertOTAClusters        0      0     54
       -> osal_mem_alloc                0      0     54
       -> ZDO_ConvertOTAClusters        0      0     54
       -> osal_msg_send                 0      0     54
       -> osal_mem_free                 0      0     54
       -> ZDO_AnyClusterMatches         0      0     58
       -> ZDO_AnyClusterMatches         0      0     58
       -> osal_msg_allocate             0      0     54
       -> osal_memcpy                   0      0     60
       -> osal_memcpy                   0      0     60
       -> ZDP_EPRsp                     0      0     68
       -> HalLcdWriteScreen             0      0     54
       -> HalLcdWriteScreen             0      0     54
       -> osal_mem_free                 0      0     54
       -> osal_mem_free                 0      0     54
     ZDO_ProcessMgmtBindReq             1      0     26
       -> APSME_GetRequest              0      0     42
       -> osal_mem_alloc                0      0     42
       -> APSME_GetRequest              0      0     42
       -> ZDP_MgmtBindRsp               0      0     52
       -> osal_mem_free                 0      0     42
     ZDO_ProcessMgmtDirectJoinReq       1      0     16
       -> NLME_DirectJoinRequest        0      0     22
       -> ZDP_SendData                  0      0     32
     ZDO_ProcessMgmtLeaveReq            1      0     23
       -> AddrMgrExtAddrValid           0      0     36
       -> NLME_GetExtAddr               0      0     36
       -> sAddrExtCmp                   0      0     36
       -> NLME_LeaveReq                 0      0     36
       -> ZDP_SendData                  0      0     46
     ZDO_ProcessMgmtLqiReq              1      0     64
       -> NLME_GetRequest               0      0    118
       -> AssocCount                    0      0    118
       -> osal_mem_alloc                0      0    118
       -> osal_memset                   0      0    118
       -> AssocFindDevice               0      0    118
       -> sAddrExtCpy                   0      0    118
       -> AddrMgrEntryLookupNwk         0      0    118
       -> sAddrExtCpy                   0      0    118
       -> NLME_GetRequest               0      0    118
       -> sAddrExtCpy                   0      0    118
       -> osal_memset                   0      0    118
       -> ZDP_MgmtLqiRsp                0      0    128
       -> osal_mem_free                 0      0    118
     ZDO_ProcessMgmtNwkDiscReq          1      0     17
       -> osal_build_uint32             0      0     34
       -> NLME_NwkDiscReq2              0      0     34
       -> NLME_NwkDiscTerm              0      0     34
     ZDO_ProcessMgmtPermitJoinReq       1      0     16
       -> NLME_PermitJoiningRequest     0      0     22
       -> ZDP_SendData                  0      0     32
     ZDO_ProcessMgmtRtgReq              0      0     26
       -> NLME_GetRequest               0      0     42
       -> osal_mem_alloc                0      0     42
       -> NLME_GetRequest               0      0     42
       -> ZDP_MgmtRtgRsp                0      0     52
       -> osal_mem_free                 0      0     42
     ZDO_ProcessNodeDescReq             0      0     14
       -> ZDP_NodeDescMsg               0      0     24
       -> ZDP_GenericRsp                0      0     28
     ZDO_ProcessPowerDescReq            0      0     14
       -> ZDP_PowerDescMsg              0      0     24
       -> ZDP_GenericRsp                0      0     28
     ZDO_ProcessServerDiscReq           0      0     14
       -> ZDP_ServerDiscRsp             0      0     28
     ZDO_ProcessSimpleDescReq           0      0     12
       -> afFindSimpleDesc              0      0     24
       -> ZDP_SimpleDescMsg             0      0     24
       -> osal_mem_free                 0      0     24
     ZDO_ProcessUserDescReq             0      0     37
       -> osal_nv_read                  0      0     74
       -> ZDP_UserDescRsp               0      0     72
       -> ZDP_GenericRsp                0      0     74
     ZDO_ProcessUserDescSet             1      0     40
       -> osal_memcpy                   0      0     76
       -> osal_nv_write                 0      0     78
       -> ZDP_SendData                  0      0     80
     ZDO_RemoveMatchMemory              2      0     38
       -> osal_mem_free                 4      0      0
       -> osal_mem_free                 4      0      0
       -> osal_mem_free                 4      0      0
       -> osal_mem_free                 4      0      0
       -> osal_mem_free                 4      0      0
       -> osal_mem_free                 4      0      0
       -> osal_mem_free                 4      0      0
     ZDO_StartDevice                    0      0     20
       -> NLME_NetworkDiscoveryRequest
                                        0      0     40
       -> osal_start_timerEx            0      0     40
       -> nwk_ScanJoiningOrphan         0      0     40
       -> NLME_OrphanJoinRequest        0      0     40
       -> HalLcdWriteScreen             0      0     40
     ZDO_UpdateAddrManager              2      0     13
       -> AddrMgrExtAddrSet             4      0     26
       -> AddrMgrEntryUpdate            4      0     26
     ZDO_UpdateNwkStatus                1      0     12
       -> NLME_GetShortAddr             0      0     24
       -> NLME_GetExtAddr               0      0     24
       -> osal_msg_allocate             0      0     24
       -> osal_msg_send                 0      0     24


   Segment part sizes:

     Function/Label                          Bytes
     --------------                          -----
     ZDOBuildBuf                               52
     ZDO_EDBind                                 2
     matchED                                    2
     apsChannelMask                             4
     ZDO_Init                                  43
     ?Subroutine0                               7
     ZDO_StartDevice                          227
     ?Subroutine47                             10
     ?Subroutine39                              8
     ?Subroutine200                             8
     ?Subroutine1                               5
     discRetries                                1
     scanCnt                                    1
     ZDO_UpdateNwkStatus                       79
     ?Subroutine2                               5
     ?Subroutine72                             11
     ?Subroutine79                              4
     ??Subroutine209_0                          6
     ?Subroutine195                             1
     ??Subroutine211_0                          1
     ??Subroutine212_0                          6
     ?Subroutine162                             6
     ?Subroutine38                              6
     ?Subroutine52                              7
     ?Subroutine190                             6
     ??Subroutine257_0                          5
     ZDO_CompareClusterLists                  129
     ??Subroutine203_0                          4
     ?Subroutine98                              8
     ??Subroutine222_0                          5
     ??Subroutine234_0                          8
     ZDO_AnyClusterMatches                     86
     ?Subroutine108                             2
     ??Subroutine224_0                          4
     ?Subroutine169                             6
     ??Subroutine251_0                         14
     ZDO_ProcessNodeDescReq                    66
     ??Subroutine205_0                          5
     ?Subroutine64                             21
     ?Subroutine201                             1
     ??Subroutine206_0                          5
     ?Subroutine63                             22
     ?Subroutine183                            12
     ?Subroutine158                            11
     ?Subroutine180                             3
     ??Subroutine236_0                          6
     ?Subroutine196                            15
     ZDO_ProcessPowerDescReq                   66
     ?Subroutine4                               2
     ??Subroutine204_0                          3
     ZDO_ProcessSimpleDescReq                 132
     ?Subroutine62                              6
     ??Subroutine213_0                          7
     ?Subroutine110                             6
     ?Subroutine86                              9
     ?Subroutine166                             6
     ?Subroutine58                              6
     ??Subroutine232_0                          6
     ?Subroutine168                             4
     ZDO_ProcessActiveEPReq                   118
     ?Subroutine134                             5
     ?Subroutine135                             4
     ??Subroutine226_0                          4
     ?Subroutine69                             11
     ?Subroutine139                            15
     ?Subroutine178                             6
     ?Subroutine5                               2
     ??Subroutine259_0                          3
     ??Subroutine260_0                          5
     ZDO_ConvertOTAClusters                    66
     ??Subroutine208_0                          6
     ZDO_ProcessMatchDescReq                  985
     ?Subroutine114                            16
     ?Subroutine109                            10
     ?Subroutine102                            12
     ?Subroutine68                              3
     ??Subroutine207_0                          8
     ?Subroutine66                             13
     ?Subroutine116                             4
     ??Subroutine210_0                          7
     ?Subroutine74                              5
     ??Subroutine215_0                          5
     ?Subroutine45                              2
     ??Subroutine217_0                          1
     ??Subroutine218_0                          5
     ?Subroutine6                               5
     ?Subroutine160                             4
     ??Subroutine221_0                          5
     ?Subroutine88                              1
     ??Subroutine223_0                          2
     ??Subroutine225_0                          6
     ??Subroutine228_0                          4
     ?Subroutine100                             4
     ?Subroutine165                             7
     ?Subroutine198                             8
     ?Subroutine142                             6
     ??Subroutine233_0                          6
     ?Subroutine87                              7
     ?Subroutine164                             1
     ??Subroutine237_0                          4
     ?Subroutine193                            11
     ?Subroutine189                             6
     ??Subroutine239_0                          4
     ??Subroutine240_0                          7
     ?Subroutine151                             6
     ??Subroutine250_0                          5
     ?Subroutine115                             5
     ?Subroutine171                             1
     ??Subroutine256_0                          1
     ?Subroutine92                              2
     ??Subroutine258_0                          8
     ?Subroutine91                              8
     ?Subroutine170                             4
     ?Subroutine194                            11
     ?Subroutine77                              4
     ?Subroutine159                            11
     ?Subroutine70                              9
     ZDO_ProcessBindUnbindReq                 403
     ?Subroutine125                             5
     ?Subroutine111                             3
     ?Subroutine85                              6
     ?Subroutine179                             9
     ??Subroutine227_0                          7
     ?Subroutine113                            17
     ?Subroutine186                             6
     ?Subroutine141                             2
     ??Subroutine242_0                          5
     ??Subroutine248_0                          5
     ZDO_UpdateAddrManager                     57
     ZDO_ProcessServerDiscReq                  79
     ?Subroutine126                             8
     ZDO_EndDeviceTimeoutCB                   213
     ?Subroutine99                              1
     ??Subroutine220_0                          4
     ?Subroutine57                              6
     ?Subroutine163                             9
     ZDO_ProcessMgmtLqiReq                    761
     ?Subroutine78                              2
     ?Subroutine42                             12
     ?Subroutine22                              2
     ??Subroutine214_0                          8
     ?Subroutine181                             3
     ?Subroutine17                             28
     ?Subroutine12                             20
     ?Subroutine67                              4
     ?Subroutine59                             10
     ?Subroutine103                             6
     ?Subroutine173                            10
     ??Subroutine244_0                          5
     ?Subroutine191                             6
     ZDO_ProcessMgmtNwkDiscReq                115
     ?Subroutine132                             3
     ??Subroutine216_0                          4
     ?Subroutine49                              5
     ?Subroutine199                            11
     ?Subroutine50                              5
     ?Subroutine197                            10
     ?Subroutine156                             9
     ?Subroutine176                             5
     ?Subroutine84                             17
     ZDO_ProcessMgmtRtgReq                    277
     ?Subroutine117                             2
     ??Subroutine219_0                          9
     ZDO_ProcessMgmtBindReq                   311
     ZDO_ProcessMgmtDirectJoinReq              92
     ?Subroutine7                               5
     ?Subroutine127                             5
     ?Subroutine123                             3
     ZDO_ProcessMgmtLeaveReq                  196
     ?Subroutine177                             4
     ZDO_ProcessMgmtPermitJoinReq              95
     NLME_PermitJoiningTimeout                  3
     ZDO_ProcessUserDescReq                   206
     ZDO_ProcessUserDescSet                   276
     ?Subroutine51                              4
     ?Subroutine153                             5
     ZDO_ProcessDeviceAnnce                   308
     ?Subroutine53                              4
     ?Subroutine155                             4
     ?Subroutine192                             5
     ZDO_BuildSimpleDescBuf                   154
     ?Subroutine130                             3
     ??Subroutine229_0                         10
     ?Subroutine122                            16
     ?Subroutine106                             9
     ?Subroutine104                            10
     ?Subroutine26                             13
     ?Subroutine20                             12
     ?Subroutine150                             1
     ??Subroutine230_0                         10
     ?Subroutine184                             4
     ?Subroutine174                             6
     ?Subroutine202                            10
     ZDO_MatchEndDeviceBind                   528
     ?Subroutine143                            18
     ?Subroutine94                             10
     ?Subroutine90                              9
     ?Subroutine89                             10
     ?Subroutine80                              8
     ?Subroutine65                              3
     ??Subroutine231_0                          7
     ?Subroutine27                             18
     ?Subroutine118                            13
     ?Subroutine112                            14
     ?Subroutine105                            14
     ?Subroutine82                             13
     ?Subroutine81                             12
     ?Subroutine61                             10
     ?Subroutine175                            11
     ?Subroutine54                              9
     ?Subroutine154                            10
     ?Subroutine15                             12
     ZDO_RemoveMatchMemory                    109
     ZDO_CopyMatchInfo                        227
     ?Subroutine107                            12
     ?Subroutine161                             2
     ?Subroutine101                             7
     ??Subroutine235_0                          6
     ?Subroutine97                             19
     ?Subroutine33                             13
     ?Subroutine137                             8
     ZDMatchSendState                         618
     ?Subroutine95                             10
     ?Subroutine83                             12
     ?Subroutine60                             26
     ?Subroutine31                              4
     ZDO_EndDeviceBindMatchTimeoutCB
                                               16
     ZDO_ParseEndDeviceBindReq                246
     ??Subroutine238_0                          4
     ?Subroutine133                            16
     ?Subroutine96                              5
     ?Subroutine55                              3
     ??Subroutine241_0                          4
     ?Subroutine157                            10
     ?Subroutine32                             13
     ?Subroutine29                              6
     ?Subroutine188                            11
     ?Subroutine144                             7
     ?Subroutine187                             5
     ?Subroutine120                             6
     ??Subroutine252_0                          6
     ?Subroutine37                             28
     ?Subroutine28                              4
     ?Subroutine148                            10
     ?Subroutine18                             10
     ?Subroutine36                              5
     ZDO_ParseBindUnbindReq                    44
     ?Subroutine93                             14
     ?Subroutine149                             8
     ?Subroutine8                              80
     ?Subroutine56                             17
     ?Subroutine138                             4
     ZDO_ParseAddrRsp                         193
     ?Subroutine30                              8
     ?Subroutine185                            10
     ?Subroutine41                              4
     ?Subroutine152                             4
     ?Subroutine23                              5
     ??Subroutine249_0                          4
     ?Subroutine172                            11
     ?Subroutine24                              4
     ??Subroutine255_0                          7
     ?Subroutine167                            13
     ZDO_ParseNodeDescRsp                     219
     ?Subroutine25                              1
     ??Subroutine243_0                          8
     ?Subroutine16                              4
     ?Subroutine145                            20
     ?Subroutine14                              6
     ?Subroutine140                             7
     ?Subroutine35                              4
     ?Subroutine9                              38
     ZDO_ParsePowerDescRsp                    100
     ?Subroutine34                             17
     ZDO_ParseSimpleDescRsp                    31
     ZDO_ParseEPListRsp                       123
     ?Subroutine131                             4
     ??Subroutine245_0                          9
     ?Subroutine129                             2
     ??Subroutine254_0                          2
     ZDO_ParseServerDiscRsp                    52
     ?Subroutine121                            10
     ?Subroutine3                               4
     ZDO_ParseMgmtLqiRsp                      138
     ?Subroutine128                             6
     ??Subroutine246_0                         14
     ?Subroutine21                             15
     ??Subroutine247_0                          8
     ?Subroutine182                             4
     ?Subroutine136                             6
     ?Subroutine119                             6
     ?Subroutine75                             14
     ZDO_ParseMgmNwkDiscRsp                   223
     ?Subroutine48                              8
     ?Subroutine76                              3
     ?Subroutine40                             10
     ?Subroutine46                              2
     ?Subroutine73                             15
     ?Subroutine71                             13
     ZDO_ParseMgmtRtgRsp                      154
     ?Subroutine44                              4
     ?Subroutine147                             4
     ??Subroutine253_0                          9
     ZDO_ParseMgmtBindRsp                     111
     ZDO_ParseUserDescRsp                     130
     ZDO_ParseSimpleDescBuf                   270
     ?Subroutine124                             1
     ?Subroutine43                              5
     ?Subroutine13                              4
     ZDO_ParseDeviceAnnce                      55
     ZDO_ParseMgmtNwkUpdateNotify             320
     ?Subroutine19                              4
     ?Subroutine146                            19
     ?Subroutine11                             23
     ?Subroutine10                             23
     ZDO_ParseMgmtNwkUpdateReq                 88
     ??ZDO_Init?relay                           6
     ??ZDO_StartDevice?relay                    6
     ??ZDO_UpdateNwkStatus?relay                6
     ??ZDO_CompareClusterLists?relay            6
     ??ZDO_AnyClusterMatches?relay              6
     ??ZDO_ProcessNodeDescReq?relay             6
     ??ZDO_ProcessPowerDescReq?relay            6
     ??ZDO_ProcessSimpleDescReq?relay           6
     ??ZDO_ProcessActiveEPReq?relay             6
     ??ZDO_ConvertOTAClusters?relay             6
     ??ZDO_ProcessMatchDescReq?relay            6
     ??ZDO_ProcessBindUnbindReq?relay           6
     ??ZDO_UpdateAddrManager?relay              6
     ??ZDO_ProcessServerDiscReq?relay           6
     ??ZDO_EndDeviceTimeoutCB?relay             6
     ??ZDO_ProcessMgmtLqiReq?relay              6
     ??ZDO_ProcessMgmtNwkDiscReq?relay          6
     ??ZDO_ProcessMgmtRtgReq?relay              6
     ??ZDO_ProcessMgmtBindReq?relay             6
     ??ZDO_ProcessMgmtDirectJoinReq?relay       6
     ??ZDO_ProcessMgmtLeaveReq?relay            6
     ??ZDO_ProcessMgmtPermitJoinReq?relay       6
     ??NLME_PermitJoiningTimeout?relay          6
     ??ZDO_ProcessUserDescReq?relay             6
     ??ZDO_ProcessUserDescSet?relay             6
     ??ZDO_ProcessDeviceAnnce?relay             6
     ??ZDO_BuildSimpleDescBuf?relay             6
     ??ZDO_MatchEndDeviceBind?relay             6
     ??ZDO_RemoveMatchMemory?relay              6
     ??ZDO_CopyMatchInfo?relay                  6
     ??ZDMatchSendState?relay                   6
     ??ZDO_EndDeviceBindMatchTimeoutCB?relay    6
     ??ZDO_ParseEndDeviceBindReq?relay          6
     ??ZDO_ParseBindUnbindReq?relay             6
     ??ZDO_ParseAddrRsp?relay                   6
     ??ZDO_ParseNodeDescRsp?relay               6
     ??ZDO_ParsePowerDescRsp?relay              6
     ??ZDO_ParseSimpleDescRsp?relay             6
     ??ZDO_ParseEPListRsp?relay                 6
     ??ZDO_ParseServerDiscRsp?relay             6
     ??ZDO_ParseMgmtLqiRsp?relay                6
     ??ZDO_ParseMgmNwkDiscRsp?relay             6
     ??ZDO_ParseMgmtRtgRsp?relay                6
     ??ZDO_ParseMgmtBindRsp?relay               6
     ??ZDO_ParseUserDescRsp?relay               6
     ??ZDO_ParseSimpleDescBuf?relay             6
     ??ZDO_ParseDeviceAnnce?relay               6
     ??ZDO_ParseMgmtNwkUpdateNotify?relay       6
     ??ZDO_ParseMgmtNwkUpdateReq?relay          6
     ?<Constant "StartDevice ERR">             16
     ?<Constant "MODE unknown">                13
     ?<Constant "End Device Bind">             16
     ?<Constant "Success Sent">                13
     ?<Constant "Timeout">                      8
     ?<Constant "Match Desc Req">              15
     ?<Constant "Rsp Sent">                     9
     ?<Constant "Non Matched">                 12
     __Constant_7fff800                         4
     __Constant_0                               4

 
 11 626 bytes in segment BANKED_CODE
    294 bytes in segment BANK_RELAYS
    110 bytes in segment XDATA_ROM_C
     62 bytes in segment XDATA_Z
 
 11 920 bytes of CODE  memory
    102 bytes of CONST memory (+ 8 bytes shared)
     62 bytes of XDATA memory

Errors: none
Warnings: none
