///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.3.10338/W32 for 8051        10/Jul/2018  16:37:20 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\ZMain\TI2530DB\OnBoard.c         /
//    Command line       =  -f D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_Ð /
//                          Þ¸Ä\Projects\zstack\Utilities\SerialApp\CC2530DB\ /
//                          ..\..\..\Tools\CC2530DB\f8wEndev.cfg (-DCPU32MHZ  /
//                          -DROOT=__near_func -DBLINK_LEDS) -f               /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\Tools\CC2530DB\f8wConfig.cfg (-DSECURE=0    /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xfFF1                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          "-DCONST=const __code" -DGENERIC=__generic        /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµ /
//                          Ï°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\Projects\zstack\ZMain\TI2 /
//                          530DB\OnBoard.c -D ZIGBEEPRO -D NWK_AUTO_POLL -D  /
//                          HAL_UART=TRUE -D SERIAL_APP_PORT=0 -D             /
//                          LCD_SUPPORTED -D xPOWER_SAVING -lC                /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\End /
//                          DeviceEB-Pro\List\ -lA D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµ /
//                          Ï°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\Projects\zstack\Utilities /
//                          \SerialApp\CC2530DB\EndDeviceEB-Pro\List\         /
//                          --diag_suppress Pe001,Pa010 -o                    /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\End /
//                          DeviceEB-Pro\Obj\ -e --debug --core=plain         /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 8 -I D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµ /
//                          Ï°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\Projects\zstack\Utilities /
//                          \SerialApp\CC2530DB\ -I                           /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          SOURCE\ -I D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ /
//                          ZigBee_ÐÞ¸Ä\Projects\zstack\Utilities\SerialApp\C /
//                          C2530DB\..\..\..\ZMAIN\TI2530DB\ -I               /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\MT\ -I                     /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\HAL\INCLUDE\ -I            /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\ -I    /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\ -I         /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\OSAL\INCLUDE\ -I           /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\STACK\AF\ -I               /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\STACK\NWK\ -I              /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\STACK\SEC\ -I              /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\STACK\SAPI\ -I             /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\STACK\SYS\ -I              /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\STACK\ZDO\ -I              /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\ZMAC\F8W\ -I               /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\ZMAC\ -I                   /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\SERVICES\SADDR\ -I         /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\SERVICES\SDATA\ -I         /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\MAC\INCLUDE\ -I            /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\ -I         /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\ -I    /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE /
//                          _CHIP\ -Ohz --require_prototypes                  /
//    List file          =  D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\End /
//                          DeviceEB-Pro\List\OnBoard.s51                     /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME OnBoard

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?US_DIV_MOD
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC ??BigLight_Off?relay
        FUNCTION ??BigLight_Off?relay,0203H
        PUBLIC ??BigLight_On?relay
        FUNCTION ??BigLight_On?relay,0203H
        PUBLIC ??BuzzerControl?relay
        FUNCTION ??BuzzerControl?relay,0203H
        PUBLIC ??Dimmer?relay
        FUNCTION ??Dimmer?relay,0203H
        PUBLIC ??GetUserDipSw?relay
        FUNCTION ??GetUserDipSw?relay,0203H
        PUBLIC ??InitBoard?relay
        FUNCTION ??InitBoard?relay,0203H
        PUBLIC ??OnBoard_KeyCallback?relay
        FUNCTION ??OnBoard_KeyCallback?relay,0203H
        PUBLIC ??OnBoard_SendKeys?relay
        FUNCTION ??OnBoard_SendKeys?relay,0203H
        PUBLIC ??OnBoard_stack_used?relay
        FUNCTION ??OnBoard_stack_used?relay,0203H
        PUBLIC ??Onboard_rand?relay
        FUNCTION ??Onboard_rand?relay,0203H
        PUBLIC ??Onboard_wait?relay
        FUNCTION ??Onboard_wait?relay,0203H
        PUBLIC ??RegisterForKeys?relay
        FUNCTION ??RegisterForKeys?relay,0203H
        PUBLIC ??_itoa?relay
        FUNCTION ??_itoa?relay,0203H
        PUBLIC BigLight_Off
        FUNCTION BigLight_Off,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC BigLight_On
        FUNCTION BigLight_On,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC BuzzerControl
        FUNCTION BuzzerControl,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC Dimmer
        FUNCTION Dimmer,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC GetUserDipSw
        FUNCTION GetUserDipSw,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC InitBoard
        FUNCTION InitBoard,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC OnBoard_KeyCallback
        FUNCTION OnBoard_KeyCallback,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC OnBoard_SendKeys
        FUNCTION OnBoard_SendKeys,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC OnBoard_stack_used
        FUNCTION OnBoard_stack_used,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC OnboardKeyIntEnable
        PUBLIC Onboard_rand
        FUNCTION Onboard_rand,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC Onboard_wait
        FUNCTION Onboard_wait,080203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC RegisterForKeys
        FUNCTION RegisterForKeys,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBWEAK SLEEPSTA
        PUBWEAK _A_IEN0
        PUBLIC _itoa
        FUNCTION _itoa,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 21, STACK
        PUBLIC aExtendedAddress
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
osal_int_disable    SYMBOL "osal_int_disable"
HalLedSet           SYMBOL "HalLedSet"
HalKeyConfig        SYMBOL "HalKeyConfig"
osal_msg_allocate   SYMBOL "osal_msg_allocate"
osal_msg_send       SYMBOL "osal_msg_send"
macMcuRandomByte    SYMBOL "macMcuRandomByte"
??HalKeyConfig?relay SYMBOL "?relay", HalKeyConfig
??HalLedSet?relay   SYMBOL "?relay", HalLedSet
??macMcuRandomByte?relay SYMBOL "?relay", macMcuRandomByte
??osal_int_disable?relay SYMBOL "?relay", osal_int_disable
??osal_msg_allocate?relay SYMBOL "?relay", osal_msg_allocate
??osal_msg_send?relay SYMBOL "?relay", osal_msg_send
BigLight_Off        SYMBOL "BigLight_Off"
??BigLight_Off?relay SYMBOL "?relay", BigLight_Off
BigLight_On         SYMBOL "BigLight_On"
??BigLight_On?relay SYMBOL "?relay", BigLight_On
BuzzerControl       SYMBOL "BuzzerControl"
??BuzzerControl?relay SYMBOL "?relay", BuzzerControl
Dimmer              SYMBOL "Dimmer"
??Dimmer?relay      SYMBOL "?relay", Dimmer
GetUserDipSw        SYMBOL "GetUserDipSw"
??GetUserDipSw?relay SYMBOL "?relay", GetUserDipSw
InitBoard           SYMBOL "InitBoard"
??InitBoard?relay   SYMBOL "?relay", InitBoard
OnBoard_KeyCallback SYMBOL "OnBoard_KeyCallback"
??OnBoard_KeyCallback?relay SYMBOL "?relay", OnBoard_KeyCallback
OnBoard_SendKeys    SYMBOL "OnBoard_SendKeys"
??OnBoard_SendKeys?relay SYMBOL "?relay", OnBoard_SendKeys
OnBoard_stack_used  SYMBOL "OnBoard_stack_used"
??OnBoard_stack_used?relay SYMBOL "?relay", OnBoard_stack_used
Onboard_rand        SYMBOL "Onboard_rand"
??Onboard_rand?relay SYMBOL "?relay", Onboard_rand
Onboard_wait        SYMBOL "Onboard_wait"
??Onboard_wait?relay SYMBOL "?relay", Onboard_wait
RegisterForKeys     SYMBOL "RegisterForKeys"
??RegisterForKeys?relay SYMBOL "?relay", RegisterForKeys
_itoa               SYMBOL "_itoa"
??_itoa?relay       SYMBOL "?relay", _itoa

        EXTERN osal_int_disable
        FUNCTION osal_int_disable,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedSet
        FUNCTION HalLedSet,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalKeyConfig
        FUNCTION HalKeyConfig,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_allocate
        FUNCTION osal_msg_allocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_send
        FUNCTION osal_msg_send,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN macMcuRandomByte
        FUNCTION macMcuRandomByte,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??HalKeyConfig?relay
        FUNCTION ??HalKeyConfig?relay,00H
        EXTERN ??HalLedSet?relay
        FUNCTION ??HalLedSet?relay,00H
        EXTERN ??macMcuRandomByte?relay
        FUNCTION ??macMcuRandomByte?relay,00H
        EXTERN ??osal_int_disable?relay
        FUNCTION ??osal_int_disable?relay,00H
        EXTERN ??osal_msg_allocate?relay
        FUNCTION ??osal_msg_allocate?relay,00H
        EXTERN ??osal_msg_send?relay
        FUNCTION ??osal_msg_send?relay,00H

// D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\Projects\zstack\ZMain\TI2530DB\OnBoard.c
//    1 /**************************************************************************************************
//    2   Filename:       OnBoard.c
//    3   Revised:        $Date: 2009-03-12 16:26:27 -0700 (Thu, 12 Mar 2009) $
//    4   Revision:       $Revision: 19405 $
//    5 
//    6   Description:    This file contains the UI and control for the
//    7                   peripherals on the EVAL development board
//    8   Notes:          This file targets the Chipcon CC2530
//    9 
//   10 
//   11   Copyright 2005-2008 Texas Instruments Incorporated. All rights reserved.
//   12 
//   13   IMPORTANT: Your use of this Software is limited to those specific rights
//   14   granted under the terms of a software license agreement between the user
//   15   who downloaded the software, his/her employer (which must be your employer)
//   16   and Texas Instruments Incorporated (the "License").  You may not use this
//   17   Software unless you agree to abide by the terms of the License. The License
//   18   limits your use, and you acknowledge, that the Software may not be modified,
//   19   copied or distributed unless embedded on a Texas Instruments microcontroller
//   20   or used solely and exclusively in conjunction with a Texas Instruments radio
//   21   frequency transceiver, which is integrated into your product.  Other than for
//   22   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   23   works of, modify, distribute, perform, display or sell this Software and/or
//   24   its documentation for any purpose.
//   25 
//   26   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   27   PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   28   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   29   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   30   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   31   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   32   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   33   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   34   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   35   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   36   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   37 
//   38   Should you have any questions regarding your right to use this Software,
//   39   contact Texas Instruments Incorporated at www.TI.com.
//   40 **************************************************************************************************/
//   41 
//   42 /*********************************************************************
//   43  * INCLUDES
//   44  */
//   45 
//   46 #include "ZComDef.h"
//   47 #include "OnBoard.h"

        ASEGN SFR_AN:DATA:NOROOT,09dH
// unsigned char volatile __sfr SLEEPSTA
SLEEPSTA:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0a8H
// union <unnamed> volatile __sfr _A_IEN0
_A_IEN0:
        DATA8
        DS 1
//   48 #include "OSAL.h"
//   49 #include "MT.h"
//   50 #include "MT_SYS.h"
//   51 #include "DebugTrace.h"
//   52 
//   53 /* Hal */
//   54 #include "hal_lcd.h"
//   55 #include "hal_mcu.h"
//   56 #include "hal_timer.h"
//   57 #include "hal_key.h"
//   58 #include "hal_led.h"
//   59 
//   60 /*********************************************************************
//   61  * MACROS
//   62  */
//   63 
//   64 /*********************************************************************
//   65  * CONSTANTS
//   66  */
//   67 
//   68 // Task ID not initialized
//   69 #define NO_TASK_ID 0xFF
//   70 
//   71 // Minimum length RAM "pattern" for Stack check
//   72 #define MIN_RAM_INIT 12
//   73 
//   74 /*********************************************************************
//   75  * TYPEDEFS
//   76  */
//   77 
//   78 /*********************************************************************
//   79  * GLOBAL VARIABLES
//   80  */
//   81 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   82 uint8 OnboardKeyIntEnable;
OnboardKeyIntEnable:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   83 
//   84 // 64-bit Extended Address of this device

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   85 uint8 aExtendedAddress[8];
aExtendedAddress:
        DS 8
        REQUIRE __INIT_XDATA_Z
//   86 
//   87 /*********************************************************************
//   88  * EXTERNAL VARIABLES
//   89  */
//   90 
//   91 /*********************************************************************
//   92  * EXTERNAL FUNCTIONS
//   93  */
//   94 
//   95 extern uint8 macMcuRandomByte(void);
//   96 
//   97 /*********************************************************************
//   98  * LOCAL VARIABLES
//   99  */
//  100 
//  101 // Registered keys task ID, initialized to NOT USED.

        RSEG XDATA_I:XDATA:NOROOT(0)
//  102 static byte registeredKeysTaskID = NO_TASK_ID;
registeredKeysTaskID:
        DATA8
        DS 1
        REQUIRE `?<Initializer for registeredKeysTaskID>`
        REQUIRE __INIT_XDATA_I
//  103 
//  104 /*********************************************************************
//  105  * LOCAL FUNCTIONS
//  106  */
//  107 
//  108 static void ChkReset( void );
//  109 
//  110 /*********************************************************************
//  111  * @fn      InitBoard()
//  112  * @brief   Initialize the CC2420DB Board Peripherals
//  113  * @param   level: COLD,WARM,READY
//  114  * @return  None
//  115  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  116 void InitBoard( byte level )
InitBoard:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function InitBoard
        CODE
//  117 {
        FUNCALL InitBoard, osal_int_disable
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL InitBoard, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL InitBoard, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL InitBoard, Onboard_wait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL InitBoard, Onboard_wait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL InitBoard, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL InitBoard, Onboard_wait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL InitBoard, Onboard_wait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL InitBoard, HalKeyConfig
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
//  118   if ( level == OB_COLD )
        JNZ     ??InitBoard_0
//  119   {
//  120     // Interrupts off
//  121     osal_int_disable( INTS_ALL );
        ; Setup parameters for call to function osal_int_disable
        MOV     R1,#-0x1
        LCALL   ??osal_int_disable?relay
//  122     // Turn all LEDs off
//  123     HalLedSet( HAL_LED_ALL, HAL_LED_MODE_OFF );
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
        MOV     R1,#0xf
        LCALL   ??HalLedSet?relay
//  124     // Check for Brown-Out reset
//  125     ChkReset();
        MOV     A,0x9d
        ANL     A,#0x18
        MOV     R0,A
        JZ      ??InitBoard_1
        MOV     A,#0x8
        XRL     A,R0
        JZ      ??InitBoard_1
        MOV     A,#0x10
        XRL     A,R0
        JZ      ??InitBoard_1
        CLR     0xa8.7
??InitBoard_2:
        MOV     R6,#0x8
??InitBoard_3:
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
        MOV     A,R6
        MOV     R1,A
        LCALL   ??HalLedSet?relay
        ; Setup parameters for call to function Onboard_wait
        MOV     R2,#0x24
        MOV     R3,#-0xc
        LCALL   ??Onboard_wait?relay
        ; Setup parameters for call to function Onboard_wait
        MOV     R2,#0x24
        MOV     R3,#-0xc
        LCALL   ??Onboard_wait?relay
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
        MOV     A,R6
        MOV     R1,A
        LCALL   ??HalLedSet?relay
        ; Setup parameters for call to function Onboard_wait
        MOV     R2,#0x7c
        MOV     R3,#-0x6e
        LCALL   ??Onboard_wait?relay
        ; Setup parameters for call to function Onboard_wait
        MOV     R2,#0x7c
        MOV     R3,#-0x6e
        LCALL   ??Onboard_wait?relay
        MOV     A,R6
        CLR     C
        RRC     A
        MOV     R6,A
        JNZ     ??InitBoard_3
        SJMP    ??InitBoard_2
//  126   }
//  127   else  // !OB_COLD
//  128   {
//  129 #ifdef ZTOOL_PORT
//  130     MT_SysResetInd();
//  131 #endif
//  132 
//  133      /* Initialize Key stuff */
//  134     OnboardKeyIntEnable = HAL_KEY_INTERRUPT_DISABLE;
??InitBoard_0:
        MOV     DPTR,#OnboardKeyIntEnable
        CLR     A
        MOVX    @DPTR,A
//  135     HalKeyConfig( OnboardKeyIntEnable, OnBoard_KeyCallback);
        ; Setup parameters for call to function HalKeyConfig
        MOV     R2,#??OnBoard_KeyCallback?relay & 0xff
        MOV     R3,#(??OnBoard_KeyCallback?relay >> 8) & 0xff
        MOV     R1,A
        LCALL   ??HalKeyConfig?relay
        CFI EndBlock cfiBlock0
//  136   }
//  137 }
??InitBoard_1:
        REQUIRE ?Subroutine0
        REQUIRE SLEEPSTA
        REQUIRE _A_IEN0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock1
//  138 
//  139 /*********************************************************************
//  140  * @fn      ChkReset()
//  141  * @brief   Check reset bits - if reset cause is unknown, assume a
//  142  *          brown-out (low power), assume batteries are not reliable,
//  143  *          hang in a loop and sequence through the LEDs.
//  144  * @param   None
//  145  * @return  None
//  146  *********************************************************************/
//  147 void ChkReset( void )
//  148 {
//  149   uint8 led;
//  150   uint8 rib;
//  151 
//  152   // Isolate reset indicator bits
//  153   rib = SLEEPSTA & LRESET;
//  154 
//  155   if ( rib == RESETPO )
//  156   {
//  157     // Put code here to handle Power-On reset
//  158   }
//  159   else if ( rib == RESETEX )
//  160   {
//  161     // Put code here to handle External reset
//  162   }
//  163   else if ( rib == RESETWD )
//  164   {
//  165     // Put code here to handle WatchDog reset
//  166   }
//  167   else
//  168   {
//  169     // Unknown, hang and blink
//  170     HAL_DISABLE_INTERRUPTS();
//  171     led = HAL_LED_4;
//  172     while ( 1 ) {
//  173       HalLedSet( led, HAL_LED_MODE_ON );
//  174       MicroWait( 62500 );
//  175       MicroWait( 62500 );
//  176       HalLedSet( led, HAL_LED_MODE_OFF );
//  177       MicroWait( 37500 );
//  178       MicroWait( 37500 );
//  179       if ( !(led >>= 1) )
//  180         led = HAL_LED_4;
//  181     }
//  182   }
//  183 }
//  184 
//  185 /*********************************************************************
//  186  *                        "Keyboard" Support
//  187  *********************************************************************/
//  188 
//  189 /*********************************************************************
//  190  * Keyboard Register function
//  191  *
//  192  * The keyboard handler is setup to send all keyboard changes to
//  193  * one task (if a task is registered).
//  194  *
//  195  * If a task registers, it will get all the keys. You can change this
//  196  * to register for individual keys.
//  197  *********************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  198 byte RegisterForKeys( byte task_id )
RegisterForKeys:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function RegisterForKeys
        CODE
//  199 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        MOV     A,R1
        MOV     R0,A
//  200   // Allow only the first task
//  201   if ( registeredKeysTaskID == NO_TASK_ID )
        MOV     DPTR,#registeredKeysTaskID
        MOVX    A,@DPTR
        CPL     A
        JNZ     ??RegisterForKeys_0
//  202   {
//  203     registeredKeysTaskID = task_id;
        MOV     A,R0
        MOVX    @DPTR,A
//  204     return ( true );
        MOV     R1,#0x1
        SJMP    ??RegisterForKeys_1
//  205   }
//  206   else
//  207     return ( false );
??RegisterForKeys_0:
        MOV     R1,#0x0
        CFI EndBlock cfiBlock2
??RegisterForKeys_1:
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1
//  208 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP     DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP    ?BRET
        CFI EndBlock cfiBlock3
//  209 
//  210 /*********************************************************************
//  211  * @fn      OnBoard_SendKeys
//  212  *
//  213  * @brief   Send "Key Pressed" message to application.
//  214  *
//  215  * @param   keys  - keys that were pressed
//  216  *          state - shifted
//  217  *
//  218  * @return  status
//  219  *********************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  220 byte OnBoard_SendKeys( byte keys, byte state )
OnBoard_SendKeys:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI Function OnBoard_SendKeys
        CODE
//  221 {
        FUNCALL OnBoard_SendKeys, osal_msg_allocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL OnBoard_SendKeys, osal_msg_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
        MOV     A,R2
        MOV     R7,A
//  222   keyChange_t *msgPtr;
//  223 
//  224   if ( registeredKeysTaskID != NO_TASK_ID )
        MOV     DPTR,#registeredKeysTaskID
        MOVX    A,@DPTR
        CPL     A
        JZ      ??OnBoard_SendKeys_0
//  225   {
//  226     // Send the address to the task
//  227     msgPtr = (keyChange_t *)osal_msg_allocate( sizeof(keyChange_t) );
        ; Setup parameters for call to function osal_msg_allocate
        MOV     R2,#0x4
        MOV     R3,#0x0
        LCALL   ??osal_msg_allocate?relay
//  228     if ( msgPtr )
        MOV     A,R2
        ORL     A,R3
        JZ      ??OnBoard_SendKeys_1
//  229     {
//  230       msgPtr->hdr.event = KEY_CHANGE;
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,#-0x40
        MOVX    @DPTR,A
//  231       msgPtr->state = state;
        MOV     A,R7
        INC     DPTR
        INC     DPTR
        MOVX    @DPTR,A
//  232       msgPtr->keys = keys;
        MOV     A,R6
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    @DPTR,A
//  233 
//  234       osal_msg_send( registeredKeysTaskID, (uint8 *)msgPtr );
        ; Setup parameters for call to function osal_msg_send
        MOV     DPTR,#registeredKeysTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_send?relay
//  235     }
//  236     return ( ZSuccess );
??OnBoard_SendKeys_1:
        MOV     R1,#0x0
        SJMP    ??OnBoard_SendKeys_2
//  237   }
//  238   else
//  239     return ( ZFailure );
??OnBoard_SendKeys_0:
        MOV     R1,#0x1
        CFI EndBlock cfiBlock4
??OnBoard_SendKeys_2:
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2
//  240 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiBlock5 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock5
//  241 
//  242 /*********************************************************************
//  243  * @fn      OnBoard_KeyCallback
//  244  *
//  245  * @brief   Callback service for keys
//  246  *
//  247  * @param   keys  - keys that were pressed
//  248  *          state - shifted
//  249  *
//  250  * @return  void
//  251  *********************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  252 void OnBoard_KeyCallback ( uint8 keys, uint8 state )
OnBoard_KeyCallback:
        CFI Block cfiBlock6 Using cfiCommon0
        CFI Function OnBoard_KeyCallback
        CODE
//  253 {
        FUNCALL OnBoard_KeyCallback, OnBoard_SendKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  254   uint8 shift;
//  255   
//  256   (void)state;  // Intentionally unreferenced parameter
//  257 
//  258   // shift key (S1) is used to generate key interrupt
//  259   // applications should not use S1 when key interrupt is enabled
//  260   shift = (OnboardKeyIntEnable == HAL_KEY_INTERRUPT_ENABLE) ? false : ((keys & HAL_KEY_SW_6) ? true : false);
        MOV     DPTR,#OnboardKeyIntEnable
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??OnBoard_KeyCallback_0
        MOV     R2,#0x0
        SJMP    ??OnBoard_KeyCallback_1
??OnBoard_KeyCallback_0:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.5
        JNC     ??OnBoard_KeyCallback_2
        SETB    B.0
        SJMP    ??OnBoard_KeyCallback_3
??OnBoard_KeyCallback_2:
        CLR     B.0
??OnBoard_KeyCallback_3:
        MOV     C,B.0
        CLR     A
        RLC     A
        MOV     R2,A
//  261 
//  262   if ( OnBoard_SendKeys( keys, shift ) != ZSuccess )
??OnBoard_KeyCallback_1:
        ; Setup parameters for call to function OnBoard_SendKeys
        LCALL   ??OnBoard_SendKeys?relay
//  263   {
//  264     // Process SW1 here
//  265     if ( keys & HAL_KEY_SW_1 )  // Switch 1
//  266     {
//  267     }
//  268     // Process SW2 here
//  269     if ( keys & HAL_KEY_SW_2 )  // Switch 2
//  270     {
//  271     }
//  272     // Process SW3 here
//  273     if ( keys & HAL_KEY_SW_3 )  // Switch 3
//  274     {
//  275     }
//  276     // Process SW4 here
//  277     if ( keys & HAL_KEY_SW_4 )  // Switch 4
//  278     {
//  279     }
//  280     // Process SW5 here
//  281     if ( keys & HAL_KEY_SW_5 )  // Switch 5
//  282     {
//  283     }
//  284     // Process SW6 here
//  285     if ( keys & HAL_KEY_SW_6 )  // Switch 6
//  286     {
//  287     }
//  288   }
//  289 }
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock6
//  290 
//  291 /*********************************************************************
//  292  *                    SLEEP MANAGEMENT FUNCTIONS
//  293  *
//  294  * These functions support processing of MAC and ZStack power mode
//  295  * transitions, used when the system goes into or awakes from sleep.
//  296  */
//  297 
//  298  /*********************************************************************
//  299  * @fn      OnBoard_stack_used()
//  300  *
//  301  * @brief
//  302  *
//  303  *   Runs through the stack looking for touched memory.
//  304  *
//  305  * @param   none
//  306  *
//  307  * @return  number of bytes used by the stack
//  308  *********************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  309 uint16 OnBoard_stack_used( void )
OnBoard_stack_used:
        CFI Block cfiBlock7 Using cfiCommon0
        CFI Function OnBoard_stack_used
        CODE
//  310 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  311   byte *pStack = (byte*)MCU_RAM_END;
        MOV     R0,#-0x1
        MOV     R1,#-0x1
//  312   byte *pHold;
//  313   byte found = false;
//  314   byte x;
//  315 
//  316   // Look from the end of RAM for MIN_RAM_INIT number of "pattern" bytes
//  317   // This should be the high water stack mark.
//  318   while ( !found && pStack )
//  319   {
//  320     // Found an init value?
//  321     if ( *pStack == STACK_INIT_VALUE )
??OnBoard_stack_used_0:
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        XRL     A,#0xcd
        JNZ     ??OnBoard_stack_used_1
//  322     {
//  323       // Look for a bunch in a row
//  324       pHold = pStack;
//  325       for ( x = 0; x < MIN_RAM_INIT; x++ )
        MOV     R2,#0x0
//  326       {
//  327         if ( *pHold != STACK_INIT_VALUE )
??OnBoard_stack_used_2:
        MOVX    A,@DPTR
        XRL     A,#0xcd
        JNZ     ??OnBoard_stack_used_3
//  328           break;
//  329         else
//  330           pHold--;
        MOV     A,DPL
        ADD     A,#-0x1
        MOV     DPL,A
        MOV     A,DPH
        ADDC    A,#-0x1
        MOV     DPH,A
//  331       }
        INC     R2
        MOV     A,R2
        CLR     C
        SUBB    A,#0xc
        JC      ??OnBoard_stack_used_2
//  332       // Did we find the needed minimum number in a row
//  333       if ( x >= MIN_RAM_INIT )
??OnBoard_stack_used_3:
        MOV     A,R2
        CLR     C
        SUBB    A,#0xc
        JNC     ??OnBoard_stack_used_4
//  334         found = true;
//  335     }
//  336     if ( !found )
//  337       pStack--;
??OnBoard_stack_used_1:
        MOV     A,R0
        ADD     A,#-0x1
        DEC     R0
        MOV     A,R1
        ADDC    A,#-0x1
        MOV     R1,A
//  338   }
        MOV     A,R0
        ORL     A,R1
        JNZ     ??OnBoard_stack_used_0
//  339 
//  340   if ( pStack )
//  341     return ( (uint16)((byte*)MCU_RAM_END - pStack) );
//  342   else
//  343     return ( 0 );
??OnBoard_stack_used_5:
        MOV     R2,#0x0
        MOV     R3,#0x0
??OnBoard_stack_used_6:
        LJMP    ?Subroutine1 & 0xFFFF
??OnBoard_stack_used_4:
        MOV     A,R0
        ORL     A,R1
        JZ      ??OnBoard_stack_used_5
        MOV     A,#-0x1
        CLR     C
        SUBB    A,R0
        MOV     R2,A
        MOV     A,#-0x1
        SUBB    A,R1
        MOV     R3,A
        SJMP    ??OnBoard_stack_used_6
        CFI EndBlock cfiBlock7
//  344 }
//  345 
//  346 /*********************************************************************
//  347  * @fn      _itoa
//  348  *
//  349  * @brief   convert a 16bit number to ASCII
//  350  *
//  351  * @param   num -
//  352  *          buf -
//  353  *          radix -
//  354  *
//  355  * @return  void
//  356  *
//  357  *********************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  358 void _itoa(uint16 num, byte *buf, byte radix)
_itoa:
        CFI Block cfiBlock8 Using cfiCommon0
        CFI Function _itoa
        CODE
//  359 {
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 5
        MOV     A,#-0x5
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 21)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0 + 0,R4
        MOV     ?V0 + 1,R5
//  360   char c,i;
//  361   byte *p, rst[5];
//  362 
//  363   p = rst;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
//  364   for ( i=0; i<5; i++,p++ )
        MOV     ?V0 + 4,#0x0
        MOV     DPL,R1
        MOV     ?V0 + 6,DPL
        MOV     ?V0 + 7,#0x0
//  365   {
//  366     c = num % radix;  // Isolate a digit
??_itoa_0:
        MOV     A,R6
        MOV     R0,A
        MOV     A,R7
        MOV     R1,A
        MOV     R2,?V0 + 6
        MOV     R3,?V0 + 7
        LCALL   ?US_DIV_MOD
        MOV     A,R2
//  367     *p = c + (( c < 10 ) ? '0' : '7');  // Convert to Ascii
        SUBB    A,#0xa
        JNC     ??_itoa_1
        MOV     R0,#0x30
        SJMP    ??_itoa_2
??_itoa_1:
        MOV     R0,#0x37
??_itoa_2:
        MOV     A,R0
        ADD     A,R2
        MOV     DPL,R4
        MOV     DPH,R5
        MOVX    @DPTR,A
//  368     num /= radix;
        MOV     A,R6
        MOV     R0,A
        MOV     A,R7
        MOV     R1,A
        MOV     R2,?V0 + 6
        MOV     R3,?V0 + 7
        LCALL   ?US_DIV_MOD
        MOV     ?V0 + 2,R0
        MOV     ?V0 + 3,R1
        MOV     R6,?V0 + 2
        MOV     R7,?V0 + 3
//  369     if ( !num )
        MOV     A,R6
        ORL     A,R7
        JZ      ??_itoa_3
//  370       break;
//  371   }
        INC     ?V0 + 4
        INC     DPTR
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,?V0 + 4
        SUBB    A,#0x5
        JC      ??_itoa_0
//  372 
//  373   for ( c=0 ; c<=i; c++ )
??_itoa_3:
        MOV     R2,#0x0
//  374     *buf++ = *p--;  // Reverse character order
??_itoa_4:
        MOV     DPL,R4
        MOV     DPH,R5
        MOVX    A,@DPTR
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    @DPTR,A
        MOV     A,R4
        ADD     A,#-0x1
        DEC     R4
        MOV     A,R5
        ADDC    A,#-0x1
        MOV     R5,A
        INC     DPTR
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        INC     R2
        MOV     A,?V0 + 4
        CLR     C
        SUBB    A,R2
        JNC     ??_itoa_4
//  375 
//  376   *buf = '\0';
        CLR     A
        MOVX    @DPTR,A
//  377 }
        MOV     A,#0x5
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock8
//  378 
//  379 /*********************************************************************
//  380  * @fn        Onboard_rand
//  381  *
//  382  * @brief    Random number generator
//  383  *
//  384  * @param   none
//  385  *
//  386  * @return  uint16 - new random number
//  387  *
//  388  *********************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  389 uint16 Onboard_rand( void )
Onboard_rand:
        CFI Block cfiBlock9 Using cfiCommon0
        CFI Function Onboard_rand
        CODE
//  390 {
        FUNCALL Onboard_rand, macMcuRandomByte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Onboard_rand, macMcuRandomByte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  391   uint16 randNum;
//  392 
//  393   randNum = macMcuRandomByte();
        ; Setup parameters for call to function macMcuRandomByte
        LCALL   ??macMcuRandomByte?relay
        MOV     A,R1
        MOV     ?V0 + 0,A
//  394   randNum += (macMcuRandomByte() << 8);
//  395   return ( randNum );
        ; Setup parameters for call to function macMcuRandomByte
        LCALL   ??macMcuRandomByte?relay
        MOV     A,?V0 + 0
        ADD     A,#0x0
        MOV     R2,A
        CLR     A
        ADDC    A,R1
        MOV     R3,A
        LJMP    ?Subroutine2 & 0xFFFF
        CFI EndBlock cfiBlock9
//  396 }
//  397 
//  398 /*********************************************************************
//  399  * @fn        Onboard_wait
//  400  *
//  401  * @brief    Random number generator
//  402  *
//  403  * @param   uint16 - time to wait
//  404  *
//  405  * @return  none
//  406  *
//  407  *********************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  408 void Onboard_wait( uint16 timeout )
Onboard_wait:
        CFI Block cfiBlock10 Using cfiCommon0
        CFI Function Onboard_wait
        CODE
//  409 {
        ; Saved register size: 0
        ; Auto size: 0
        SJMP    ??Onboard_wait_0
//  410   while (timeout--)
//  411   {
//  412     asm("NOP");
??Onboard_wait_1:
        NOP
//  413     asm("NOP");
        NOP
//  414     asm("NOP");
        NOP
//  415   }
??Onboard_wait_0:
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
        MOV     A,R0
        ADD     A,#-0x1
        DEC     R2
        MOV     A,R1
        ADDC    A,#-0x1
        MOV     R3,A
        MOV     A,R0
        ORL     A,R1
        JNZ     ??Onboard_wait_1
//  416 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock10
//  417 
//  418 /*********************************************************************
//  419  *                    EXTERNAL I/O FUNCTIONS
//  420  *
//  421  * User defined functions to control external devices. Add your code
//  422  * to the following functions to control devices wired to DB outputs.
//  423  *
//  424  *********************************************************************/
//  425 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  426 void BigLight_On( void )
BigLight_On:
        CFI Block cfiBlock11 Using cfiCommon0
        CFI Function BigLight_On
        CODE
//  427 {
        ; Saved register size: 0
        ; Auto size: 0
//  428   // Put code here to turn on an external light
//  429 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock11
//  430 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  431 void BigLight_Off( void )
BigLight_Off:
        CFI Block cfiBlock12 Using cfiCommon0
        CFI Function BigLight_Off
        CODE
//  432 {
        ; Saved register size: 0
        ; Auto size: 0
//  433   // Put code here to turn off an external light
//  434 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock12
//  435 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  436 void BuzzerControl( byte on )
BuzzerControl:
        CFI Block cfiBlock13 Using cfiCommon0
        CFI Function BuzzerControl
        CODE
//  437 {
        ; Saved register size: 0
        ; Auto size: 0
//  438   // Put code here to turn a buzzer on/off
//  439   (void)on;
//  440 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock13
//  441 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  442 void Dimmer( byte lvl )
Dimmer:
        CFI Block cfiBlock14 Using cfiCommon0
        CFI Function Dimmer
        CODE
//  443 {
        ; Saved register size: 0
        ; Auto size: 0
//  444   // Put code here to control a dimmer
//  445   (void)lvl;
//  446 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock14
//  447 
//  448 // No dip switches on this board

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  449 byte GetUserDipSw( void )
GetUserDipSw:
        CFI Block cfiBlock15 Using cfiCommon0
        CFI Function GetUserDipSw
        CODE
//  450 {
        ; Saved register size: 0
        ; Auto size: 0
//  451   return 0;
        MOV     R1,#0x0
        LJMP    ?BRET
        CFI EndBlock cfiBlock15
//  452 }

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for registeredKeysTaskID>`:
        DATA8
        DB 255

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??InitBoard?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    InitBoard

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??RegisterForKeys?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    RegisterForKeys

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??OnBoard_SendKeys?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    OnBoard_SendKeys

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??OnBoard_KeyCallback?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    OnBoard_KeyCallback

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??OnBoard_stack_used?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    OnBoard_stack_used

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??_itoa?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    _itoa

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Onboard_rand?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Onboard_rand

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Onboard_wait?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Onboard_wait

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??BigLight_On?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    BigLight_On

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??BigLight_Off?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    BigLight_Off

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??BuzzerControl?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    BuzzerControl

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Dimmer?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Dimmer

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??GetUserDipSw?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    GetUserDipSw

        END
//  453 
//  454 /*********************************************************************
//  455 *********************************************************************/
// 
// 545 bytes in segment BANKED_CODE
//  78 bytes in segment BANK_RELAYS
//   2 bytes in segment SFR_AN
//   1 byte  in segment XDATA_I
//   1 byte  in segment XDATA_ID
//   9 bytes in segment XDATA_Z
// 
// 624 bytes of CODE  memory
//   0 bytes of DATA  memory (+ 2 bytes shared)
//  10 bytes of XDATA memory
//
//Errors: none
//Warnings: none
