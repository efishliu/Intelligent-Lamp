///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.3.10338/W32 for 8051        10/Jul/2018  16:37:41 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Components\hal\target\CC2530EB\hal_flash.c       /
//    Command line       =  -f D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_Ð /
//                          Þ¸Ä\Projects\zstack\Utilities\SerialApp\CC2530DB\ /
//                          ..\..\..\Tools\CC2530DB\f8wEndev.cfg (-DCPU32MHZ  /
//                          -DROOT=__near_func -DBLINK_LEDS) -f               /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\Tools\CC2530DB\f8wConfig.cfg (-DSECURE=0    /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xfFF1                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          "-DCONST=const __code" -DGENERIC=__generic        /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµ /
//                          Ï°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\Components\hal\target\CC2 /
//                          530EB\hal_flash.c -D ZIGBEEPRO -D NWK_AUTO_POLL   /
//                          -D HAL_UART=TRUE -D SERIAL_APP_PORT=0 -D          /
//                          LCD_SUPPORTED -D xPOWER_SAVING -lC                /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\End /
//                          DeviceEB-Pro\List\ -lA D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµ /
//                          Ï°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\Projects\zstack\Utilities /
//                          \SerialApp\CC2530DB\EndDeviceEB-Pro\List\         /
//                          --diag_suppress Pe001,Pa010 -o                    /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\End /
//                          DeviceEB-Pro\Obj\ -e --debug --core=plain         /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 8 -I D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµ /
//                          Ï°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\Projects\zstack\Utilities /
//                          \SerialApp\CC2530DB\ -I                           /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          SOURCE\ -I D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ /
//                          ZigBee_ÐÞ¸Ä\Projects\zstack\Utilities\SerialApp\C /
//                          C2530DB\..\..\..\ZMAIN\TI2530DB\ -I               /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\MT\ -I                     /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\HAL\INCLUDE\ -I            /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\ -I    /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\ -I         /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\OSAL\INCLUDE\ -I           /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\STACK\AF\ -I               /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\STACK\NWK\ -I              /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\STACK\SEC\ -I              /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\STACK\SAPI\ -I             /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\STACK\SYS\ -I              /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\STACK\ZDO\ -I              /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\ZMAC\F8W\ -I               /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\ZMAC\ -I                   /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\SERVICES\SADDR\ -I         /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\SERVICES\SDATA\ -I         /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\MAC\INCLUDE\ -I            /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\ -I         /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\ -I    /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE /
//                          _CHIP\ -Ohz --require_prototypes                  /
//    List file          =  D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\End /
//                          DeviceEB-Pro\List\hal_flash.s51                   /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME hal_flash

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?S_SHL
        EXTERN ?US_SHR
        EXTERN ?V0
        EXTERN ?XSTACK_DISP0_8

        PUBLIC ??HalFlashErase?relay
        FUNCTION ??HalFlashErase?relay,0203H
        PUBLIC ??HalFlashInit?relay
        FUNCTION ??HalFlashInit?relay,0203H
        PUBLIC ??HalFlashRead?relay
        FUNCTION ??HalFlashRead?relay,0203H
        PUBLIC ??HalFlashWrite?relay
        FUNCTION ??HalFlashWrite?relay,0203H
        FUNCTION ??HalFlashWriteTrigger?relay,0203H
        PUBWEAK DMAARM
        PUBWEAK DMAIRQ
        PUBLIC HalFlashErase
        FUNCTION HalFlashErase,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC HalFlashInit
        FUNCTION HalFlashInit,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC HalFlashRead
        FUNCTION HalFlashRead,0203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC HalFlashWrite
        FUNCTION HalFlashWrite,021203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME XSTACK, 10, STACK
        FUNCTION HalFlashWriteTrigger,020bH
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 3, STACK
        PUBWEAK MEMCTR
        PUBWEAK _A_IEN0
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
HalFlashErase       SYMBOL "HalFlashErase"
??HalFlashErase?relay SYMBOL "?relay", HalFlashErase
HalFlashInit        SYMBOL "HalFlashInit"
??HalFlashInit?relay SYMBOL "?relay", HalFlashInit
HalFlashRead        SYMBOL "HalFlashRead"
??HalFlashRead?relay SYMBOL "?relay", HalFlashRead
HalFlashWrite       SYMBOL "HalFlashWrite"
??HalFlashWrite?relay SYMBOL "?relay", HalFlashWrite

        EXTERN dmaCh0

// D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\Components\hal\target\CC2530EB\hal_flash.c
//    1 /**************************************************************************************************
//    2   Filename:       _hal_flash.c
//    3   Revised:        $Date:$
//    4   Revision:       $Revision:$
//    5 
//    6   Description: This file contains the interface to the H/W Flash driver.
//    7 
//    8 
//    9   Copyright 2006-2009 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License").  You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product.  Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 
//   40 /* ------------------------------------------------------------------------------------------------
//   41  *                                          Includes
//   42  * ------------------------------------------------------------------------------------------------
//   43  */
//   44 
//   45 #include "hal_board_cfg.h"

        ASEGN SFR_AN:DATA:NOROOT,0a8H
// union <unnamed> volatile __sfr _A_IEN0
_A_IEN0:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0c7H
// unsigned char volatile __sfr MEMCTR
MEMCTR:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0d1H
// unsigned char volatile __sfr DMAIRQ
DMAIRQ:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0d6H
// unsigned char volatile __sfr DMAARM
DMAARM:
        DATA8
        DS 1
//   46 #include "hal_dma.h"
//   47 #include "hal_flash.h"
//   48 #include "hal_types.h"
//   49 
//   50 /* ------------------------------------------------------------------------------------------------
//   51  *                                           Macros
//   52  * ------------------------------------------------------------------------------------------------
//   53  */
//   54 
//   55 /* ------------------------------------------------------------------------------------------------
//   56  *                                          Constants
//   57  * ------------------------------------------------------------------------------------------------
//   58  */
//   59 
//   60 // These values depend on RAM_CODE_FLASH in the .xcl file used.
//   61 #if defined CC2530F64  // RemoTI is using 0x01DDD --> pg 3, offset 0x5DD.
//   62 #define OSET_OF_RAM_CODE  0x5DD
//   63 #define PAGE_OF_RAM_CODE  3
//   64 #define SIZE_OF_RAM_CODE  0x23
//   65 #elif defined HAL_OAD_BOOT_CODE // OAD boot code does not use RAM copy
//   66 #define OSET_OF_RAM_CODE  0x7E5
//   67 #define PAGE_OF_RAM_CODE  0
//   68 #define SIZE_OF_RAM_CODE  0x1B
//   69 #else                   // Z-Stack is using 0x39DDD --> pg 51, offset 0x5DD.
//   70 #define OSET_OF_RAM_CODE  0x5DD
//   71 #define PAGE_OF_RAM_CODE  51
//   72 #define SIZE_OF_RAM_CODE  0x23
//   73 #endif
//   74 
//   75 /* ------------------------------------------------------------------------------------------------
//   76  *                                          Typedefs
//   77  * ------------------------------------------------------------------------------------------------
//   78  */
//   79 
//   80 /* ------------------------------------------------------------------------------------------------
//   81  *                                       Global Variables
//   82  * ------------------------------------------------------------------------------------------------
//   83  */
//   84 
//   85 /* ------------------------------------------------------------------------------------------------
//   86  *                                       Global Functions
//   87  * ------------------------------------------------------------------------------------------------
//   88  */
//   89 
//   90 /* ------------------------------------------------------------------------------------------------
//   91  *                                       Local Variables
//   92  * ------------------------------------------------------------------------------------------------
//   93  */
//   94 
//   95 #pragma location="RAM_CODE_XDATA"

        RSEG RAM_CODE_XDATA:XDATA:REORDER:NOROOT(0)
        DATA8
//   96 static __no_init uint8 ramCode[SIZE_OF_RAM_CODE];
ramCode:
        DS 35
//   97 
//   98 /* ------------------------------------------------------------------------------------------------
//   99  *                                       Local Functions
//  100  * ------------------------------------------------------------------------------------------------
//  101  */
//  102 
//  103 #pragma location="RAM_CODE_FLASH"
//  104 #if defined HAL_OAD_BOOT_CODE
//  105 static void HalFlashWriteTrigger(void);
//  106 #else
//  107 static __monitor void HalFlashWriteTrigger(void);
//  108 #endif
//  109 
//  110 /**************************************************************************************************
//  111  * @fn          HalFlashInit
//  112  *
//  113  * @brief       This function initializes the environment for this module.
//  114  *
//  115  * input parameters
//  116  *
//  117  * None.
//  118  *
//  119  * output parameters
//  120  *
//  121  * None.
//  122  *
//  123  * @return      None.
//  124  **************************************************************************************************
//  125  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  126 void HalFlashInit(void)
HalFlashInit:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function HalFlashInit
        CODE
//  127 {
        FUNCALL HalFlashInit, HalFlashRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  128   // Load the code to run from RAM into its reserved area of RAM once at startup.
//  129   HalFlashRead(PAGE_OF_RAM_CODE, OSET_OF_RAM_CODE, ramCode, SIZE_OF_RAM_CODE);
        ; Setup parameters for call to function HalFlashRead
        MOV     ?V0 + 0,#0x23
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     R4,#ramCode & 0xff
        MOV     R5,#(ramCode >> 8) & 0xff
        MOV     R2,#-0x23
        MOV     R3,#0x5
        MOV     R1,#0x33
        LCALL   ??HalFlashRead?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock0
//  130 }
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock1
//  131 
//  132 /**************************************************************************************************
//  133  * @fn          HalFlashRead
//  134  *
//  135  * @brief       This function reads 'cnt' bytes from the internal flash.
//  136  *
//  137  * input parameters
//  138  *
//  139  * @param       pg - A valid flash page number.
//  140  * @param       offset - A valid offset into the page.
//  141  * @param       buf - A valid buffer space at least as big as the 'cnt' parameter.
//  142  * @param       cnt - A valid number of bytes to read.
//  143  *
//  144  * output parameters
//  145  *
//  146  * None.
//  147  *
//  148  * @return      None.
//  149  **************************************************************************************************
//  150  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  151 void HalFlashRead(uint8 pg, uint16 offset, uint8 *buf, uint16 cnt)
HalFlashRead:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function HalFlashRead
        CODE
//  152 {
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 3,A
//  153   // Calculate the offset into the containing flash bank as it gets mapped into XDATA.
//  154   uint8 *ptr = (uint8 *)(offset + HAL_FLASH_PAGE_MAP) +
//  155                ((pg % HAL_FLASH_PAGE_PER_BANK) * HAL_FLASH_PAGE_SIZE);
        MOV     A,#0xf
        ANL     A,R6
        MOV     ?V0 + 0,A
        MOV     ?V0 + 1,#0x0
        MOV     A,#0xb
        MOV     R0,#?V0 + 0
        LCALL   ?S_SHL
        MOV     A,R2
        ADD     A,#0x0
        MOV     R0,A
        MOV     A,R3
        ADDC    A,#-0x80
        MOV     R1,A
        MOV     A,R0
        ADD     A,#0x0
        MOV     A,R1
        ADDC    A,?V0 + 1
        MOV     R1,A
//  156   uint8 memctr = MEMCTR;  // Save to restore.
        MOV     A,0xc7
        MOV     R7,A
//  157 
//  158 #if !defined HAL_OAD_BOOT_CODE
//  159   halIntState_t is;
//  160 #endif
//  161 
//  162   pg /= HAL_FLASH_PAGE_PER_BANK;  // Calculate the flash bank from the flash page.
//  163 
//  164 #if !defined HAL_OAD_BOOT_CODE
//  165   HAL_ENTER_CRITICAL_SECTION(is);
        MOV     C,0xa8.7
        CLR     A
        RLC     A
        MOV     ?V0 + 0,A
        CLR     0xa8.7
//  166 #endif
//  167 
//  168   // Calculate and map the containing flash bank into XDATA.
//  169   MEMCTR = (MEMCTR & 0xF8) | pg;
        MOV     A,R6
        SWAP    A
        ANL     A,#0xf
        MOV     R2,A
        MOV     A,0xc7
        ANL     A,#0xf8
        ORL     A,R2
        MOV     0xc7,A
        SJMP    ??HalFlashRead_0
//  170 
//  171   while (cnt--)
//  172   {
//  173     *buf++ = *ptr++;
??HalFlashRead_1:
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        MOV     DPL,R4
        MOV     DPH,R5
        MOVX    @DPTR,A
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        MOV     R0,DPL
        MOV     R1,DPH
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        MOV     R4,DPL
        MOV     R5,DPH
//  174   }
??HalFlashRead_0:
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        MOV     A,R2
        ADD     A,#-0x1
        MOV     ?V0 + 2,A
        MOV     A,R3
        ADDC    A,#-0x1
        MOV     ?V0 + 3,A
        MOV     A,R2
        ORL     A,R3
        JNZ     ??HalFlashRead_1
//  175 
//  176   MEMCTR = memctr;
        MOV     0xc7,R7
//  177 
//  178 #if !defined HAL_OAD_BOOT_CODE
//  179   HAL_EXIT_CRITICAL_SECTION(is);
        MOV     A,?V0 + 0
        MOV     C,0xE0 /* A   */.0
        MOV     0xa8.7,C
//  180 #endif
//  181 }
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock2
        REQUIRE MEMCTR
        REQUIRE _A_IEN0
//  182 
//  183 /**************************************************************************************************
//  184  * @fn          HalFlashWrite
//  185  *
//  186  * @brief       This function writes 'cnt' bytes to the internal flash.
//  187  *
//  188  * input parameters
//  189  *
//  190  * @param       addr - Valid HAL flash write address: actual addr / 4 and quad-aligned.
//  191  * @param       buf - Valid buffer space at least as big as 'cnt' X 4.
//  192  * @param       cnt - Number of 4-byte blocks to write.
//  193  *
//  194  * output parameters
//  195  *
//  196  * None.
//  197  *
//  198  * @return      None.
//  199  **************************************************************************************************
//  200  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  201 void HalFlashWrite(uint16 addr, uint8 *buf, uint16 cnt)
HalFlashWrite:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function HalFlashWrite
        CODE
//  202 {
        FUNCALL HalFlashWrite, HalFlashWriteTrigger
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
//  203   halDMADesc_t *ch = HAL_NV_DMA_GET_DESC();
//  204 
//  205   HAL_DMA_SET_SOURCE(ch, buf);
        MOV     A,R5
        MOV     DPTR,#dmaCh0
        MOVX    @DPTR,A
        MOV     A,R4
        INC     DPTR
        MOVX    @DPTR,A
//  206   HAL_DMA_SET_DEST(ch, &FWDATA);
        INC     DPTR
        MOV     A,#0x62
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x73
        MOVX    @DPTR,A
//  207   HAL_DMA_SET_VLEN(ch, HAL_DMA_VLEN_USE_LEN);
        INC     DPTR
        MOVX    A,@DPTR
        ANL     A,#0x1f
        MOVX    @DPTR,A
//  208   HAL_DMA_SET_LEN(ch, (cnt * HAL_FLASH_WORD_SIZE));
        MOV     A,?V0 + 0
        RLC     A
        RLC     A
        ANL     A,#0xfc
        INC     DPTR
        MOVX    @DPTR,A
        MOV     A,#0x6
        MOV     R0,#?V0 + 0
        LCALL   ?US_SHR
        MOV     A,?V0 + 0
        MOV     DPTR,#dmaCh0 + 4
        MOVX    @DPTR,A
//  209   HAL_DMA_SET_WORD_SIZE(ch, HAL_DMA_WORDSIZE_BYTE);
//  210   HAL_DMA_SET_TRIG_MODE(ch, HAL_DMA_TMODE_SINGLE);
//  211   HAL_DMA_SET_TRIG_SRC(ch, HAL_DMA_TRIG_FLASH);
        MOV     DPTR,#dmaCh0 + 6
        MOV     A,#0x12
        MOVX    @DPTR,A
//  212   HAL_DMA_SET_SRC_INC(ch, HAL_DMA_SRCINC_1);
//  213   HAL_DMA_SET_DST_INC(ch, HAL_DMA_DSTINC_0);
//  214   // The DMA is to be polled and shall not issue an IRQ upon completion.
//  215   HAL_DMA_SET_IRQ(ch, HAL_DMA_IRQMASK_DISABLE);
//  216   HAL_DMA_SET_M8( ch, HAL_DMA_M8_USE_8_BITS);
//  217   HAL_DMA_SET_PRIORITY(ch, HAL_DMA_PRI_HIGH);
        INC     DPTR
        MOV     A,#0x42
        MOVX    @DPTR,A
//  218   HAL_DMA_CLEAR_IRQ(HAL_NV_DMA_CH);
        ANL     0xd1,#0xfe
//  219   HAL_DMA_ARM_CH(HAL_NV_DMA_CH);
        MOV     0xd6,#0x1
//  220 
//  221   FADDRL = (uint8)addr;
        MOV     A,R2
        MOV     DPTR,#0x6271
        MOVX    @DPTR,A
//  222   FADDRH = (uint8)(addr >> 8);
        MOV     A,R3
        INC     DPTR
        MOVX    @DPTR,A
//  223   HalFlashWriteTrigger();
        ; Setup parameters for call to function HalFlashWriteTrigger
        LCALL   ??HalFlashWriteTrigger?relay
//  224 }
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock3
        REQUIRE DMAIRQ
        REQUIRE DMAARM
//  225 
//  226 /**************************************************************************************************
//  227  * @fn          HalFlashErase
//  228  *
//  229  * @brief       This function erases the specified page of the internal flash.
//  230  *
//  231  * input parameters
//  232  *
//  233  * @param       pg - A valid flash page number to erase.
//  234  *
//  235  * output parameters
//  236  *
//  237  * None.
//  238  *
//  239  * @return      None.
//  240  **************************************************************************************************
//  241  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  242 void HalFlashErase(uint8 pg)
HalFlashErase:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI Function HalFlashErase
        CODE
//  243 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  244   FADDRH = pg * (HAL_FLASH_PAGE_SIZE / HAL_FLASH_WORD_SIZE / 256);
        MOV     A,R1
        CLR     C
        RLC     A
        MOV     DPTR,#0x6272
        MOVX    @DPTR,A
//  245   FCTL |= 0x01;
        MOV     DPTR,#0x6270
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.0
        MOVX    @DPTR,A
//  246 }
        POP     DPH
        CFI DPH0 SameValue
        CFI CFA_SP SP+-4
        POP     DPL
        CFI DPL0 SameValue
        CFI CFA_SP SP+-3
        LJMP    ?BRET
        CFI EndBlock cfiBlock4
//  247 
//  248 /**************************************************************************************************
//  249  * @fn          HalFlashWriteTrigger
//  250  *
//  251  * @brief       This function must be copied to RAM before running because it triggers and then
//  252  *              awaits completion of Flash write, which can only be done from RAM.
//  253  *
//  254  * input parameters
//  255  *
//  256  * None.
//  257  *
//  258  * output parameters
//  259  *
//  260  * None.
//  261  *
//  262  * @return      None.
//  263  **************************************************************************************************
//  264  */
//  265 #if defined HAL_OAD_BOOT_CODE
//  266 #pragma optimize=medium
//  267 static void HalFlashWriteTrigger(void)
//  268 #else

        RSEG RAM_CODE_FLASH:CODE:NOROOT(0)
//  269 static __monitor void HalFlashWriteTrigger(void)
HalFlashWriteTrigger:
        CFI Block cfiBlock5 Using cfiCommon0
        CFI Function HalFlashWriteTrigger
        CODE
//  270 #endif
//  271 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        PUSH    0xA8 /* IE  */
        CFI CFA_SP SP+-6
        CLR     0xA8 /* IE  */.7
//  272   MEMCTR |= 0x08;       // Start the Memory Arbiter running CODE from RAM.
        ORL     0xc7,#0x8
//  273   FCTL |= 0x02;         // Trigger the DMA writes.
        MOV     DPTR,#0x6270
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.1
        MOVX    @DPTR,A
//  274   while (FCTL & 0x80);  // Wait until writing is done.
??HalFlashWriteTrigger_0:
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.7
        JC      ??HalFlashWriteTrigger_0
//  275   MEMCTR &= ~0x08;      // Stop the Memory Arbiter.
        ANL     0xc7,#0xf7
//  276 }
        POP     0xA8 /* IE  */
        CFI CFA_SP SP+-5
        POP     DPH
        CFI DPH0 SameValue
        CFI CFA_SP SP+-4
        POP     DPL
        CFI DPL0 SameValue
        CFI CFA_SP SP+-3
        LJMP    ?BRET
        CFI EndBlock cfiBlock5
        REQUIRE MEMCTR

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalFlashInit?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalFlashInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalFlashRead?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalFlashRead

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalFlashWrite?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalFlashWrite

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalFlashErase?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalFlashErase

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalFlashWriteTrigger?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalFlashWriteTrigger

        END
//  277 
//  278 /**************************************************************************************************
//  279 */
// 
// 286 bytes in segment BANKED_CODE
//  30 bytes in segment BANK_RELAYS
//  35 bytes in segment RAM_CODE_FLASH
//  35 bytes in segment RAM_CODE_XDATA
//   4 bytes in segment SFR_AN
// 
// 351 bytes of CODE  memory
//   0 bytes of DATA  memory (+ 4 bytes shared)
//  35 bytes of XDATA memory
//
//Errors: none
//Warnings: none
