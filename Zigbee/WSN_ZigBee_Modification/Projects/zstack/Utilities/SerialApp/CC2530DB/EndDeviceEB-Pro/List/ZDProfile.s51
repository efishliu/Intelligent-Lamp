///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.3.10338/W32 for 8051        10/Jul/2018  16:37:38 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Components\stack\zdo\ZDProfile.c                 /
//    Command line       =  -f D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_Ð /
//                          Þ¸Ä\Projects\zstack\Utilities\SerialApp\CC2530DB\ /
//                          ..\..\..\Tools\CC2530DB\f8wEndev.cfg (-DCPU32MHZ  /
//                          -DROOT=__near_func -DBLINK_LEDS) -f               /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\Tools\CC2530DB\f8wConfig.cfg (-DSECURE=0    /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xfFF1                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          "-DCONST=const __code" -DGENERIC=__generic        /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµ /
//                          Ï°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\Components\stack\zdo\ZDPr /
//                          ofile.c -D ZIGBEEPRO -D NWK_AUTO_POLL -D          /
//                          HAL_UART=TRUE -D SERIAL_APP_PORT=0 -D             /
//                          LCD_SUPPORTED -D xPOWER_SAVING -lC                /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\End /
//                          DeviceEB-Pro\List\ -lA D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµ /
//                          Ï°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\Projects\zstack\Utilities /
//                          \SerialApp\CC2530DB\EndDeviceEB-Pro\List\         /
//                          --diag_suppress Pe001,Pa010 -o                    /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\End /
//                          DeviceEB-Pro\Obj\ -e --debug --core=plain         /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 8 -I D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµ /
//                          Ï°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\Projects\zstack\Utilities /
//                          \SerialApp\CC2530DB\ -I                           /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          SOURCE\ -I D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ /
//                          ZigBee_ÐÞ¸Ä\Projects\zstack\Utilities\SerialApp\C /
//                          C2530DB\..\..\..\ZMAIN\TI2530DB\ -I               /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\MT\ -I                     /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\HAL\INCLUDE\ -I            /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\ -I    /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\ -I         /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\OSAL\INCLUDE\ -I           /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\STACK\AF\ -I               /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\STACK\NWK\ -I              /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\STACK\SEC\ -I              /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\STACK\SAPI\ -I             /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\STACK\SYS\ -I              /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\STACK\ZDO\ -I              /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\ZMAC\F8W\ -I               /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\ZMAC\ -I                   /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\SERVICES\SADDR\ -I         /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\SERVICES\SDATA\ -I         /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\MAC\INCLUDE\ -I            /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\ -I         /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\ -I    /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE /
//                          _CHIP\ -Ohz --require_prototypes                  /
//    List file          =  D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\End /
//                          DeviceEB-Pro\List\ZDProfile.s51                   /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME ZDProfile

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?CALL_IND
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_MOV_X
        EXTERN ?PUSH_XSTACK_I_FOUR
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?S_SHL
        EXTERN ?US_SHR
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC ??ZDO_RegisterForZDOMsg?relay
        FUNCTION ??ZDO_RegisterForZDOMsg?relay,0203H
        PUBLIC ??ZDO_RemoveRegisteredCB?relay
        FUNCTION ??ZDO_RemoveRegisteredCB?relay,0203H
        PUBLIC ??ZDO_SendMsgCBs?relay
        FUNCTION ??ZDO_SendMsgCBs?relay,0203H
        PUBLIC ??ZDP_BindUnbindReq?relay
        FUNCTION ??ZDP_BindUnbindReq?relay,0203H
        PUBLIC ??ZDP_DeviceAnnce?relay
        FUNCTION ??ZDP_DeviceAnnce?relay,0203H
        PUBLIC ??ZDP_EPRsp?relay
        FUNCTION ??ZDP_EPRsp?relay,0203H
        PUBLIC ??ZDP_EndDeviceBindReq?relay
        FUNCTION ??ZDP_EndDeviceBindReq?relay,0203H
        PUBLIC ??ZDP_GenericRsp?relay
        FUNCTION ??ZDP_GenericRsp?relay,0203H
        PUBLIC ??ZDP_IEEEAddrReq?relay
        FUNCTION ??ZDP_IEEEAddrReq?relay,0203H
        PUBLIC ??ZDP_IncomingData?relay
        FUNCTION ??ZDP_IncomingData?relay,0203H
        PUBLIC ??ZDP_MatchDescReq?relay
        FUNCTION ??ZDP_MatchDescReq?relay,0203H
        PUBLIC ??ZDP_MgmtBindRsp?relay
        FUNCTION ??ZDP_MgmtBindRsp?relay,0203H
        PUBLIC ??ZDP_MgmtDirectJoinReq?relay
        FUNCTION ??ZDP_MgmtDirectJoinReq?relay,0203H
        PUBLIC ??ZDP_MgmtLeaveReq?relay
        FUNCTION ??ZDP_MgmtLeaveReq?relay,0203H
        PUBLIC ??ZDP_MgmtLqiRsp?relay
        FUNCTION ??ZDP_MgmtLqiRsp?relay,0203H
        PUBLIC ??ZDP_MgmtNwkDiscReq?relay
        FUNCTION ??ZDP_MgmtNwkDiscReq?relay,0203H
        PUBLIC ??ZDP_MgmtNwkDiscRsp?relay
        FUNCTION ??ZDP_MgmtNwkDiscRsp?relay,0203H
        PUBLIC ??ZDP_MgmtNwkUpdateNotify?relay
        FUNCTION ??ZDP_MgmtNwkUpdateNotify?relay,0203H
        PUBLIC ??ZDP_MgmtNwkUpdateReq?relay
        FUNCTION ??ZDP_MgmtNwkUpdateReq?relay,0203H
        PUBLIC ??ZDP_MgmtPermitJoinReq?relay
        FUNCTION ??ZDP_MgmtPermitJoinReq?relay,0203H
        PUBLIC ??ZDP_MgmtRtgRsp?relay
        FUNCTION ??ZDP_MgmtRtgRsp?relay,0203H
        PUBLIC ??ZDP_NWKAddrOfInterestReq?relay
        FUNCTION ??ZDP_NWKAddrOfInterestReq?relay,0203H
        PUBLIC ??ZDP_NodeDescMsg?relay
        FUNCTION ??ZDP_NodeDescMsg?relay,0203H
        PUBLIC ??ZDP_NwkAddrReq?relay
        FUNCTION ??ZDP_NwkAddrReq?relay,0203H
        PUBLIC ??ZDP_PowerDescMsg?relay
        FUNCTION ??ZDP_PowerDescMsg?relay,0203H
        PUBLIC ??ZDP_SendData?relay
        FUNCTION ??ZDP_SendData?relay,0203H
        PUBLIC ??ZDP_ServerDiscReq?relay
        FUNCTION ??ZDP_ServerDiscReq?relay,0203H
        PUBLIC ??ZDP_ServerDiscRsp?relay
        FUNCTION ??ZDP_ServerDiscRsp?relay,0203H
        PUBLIC ??ZDP_SimpleDescMsg?relay
        FUNCTION ??ZDP_SimpleDescMsg?relay,0203H
        PUBLIC ??ZDP_SimpleDescReq?relay
        FUNCTION ??ZDP_SimpleDescReq?relay,0203H
        PUBLIC ??ZDP_UserDescRsp?relay
        FUNCTION ??ZDP_UserDescRsp?relay,0203H
        PUBLIC ??ZDP_UserDescSet?relay
        FUNCTION ??ZDP_UserDescSet?relay,0203H
        FUNCTION ??fillAndSend?relay,0203H
        PUBLIC ??zdpProcessAddrReq?relay
        FUNCTION ??zdpProcessAddrReq?relay,0203H
        PUBLIC ZDO_RegisterForZDOMsg
        FUNCTION ZDO_RegisterForZDOMsg,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDO_RemoveRegisteredCB
        FUNCTION ZDO_RemoveRegisteredCB,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDO_SendMsgCBs
        FUNCTION ZDO_SendMsgCBs,021203H
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 19, STACK
        PUBLIC ZDP_AF_ENDPOINT
        PUBLIC ZDP_BindUnbindReq
        FUNCTION ZDP_BindUnbindReq,021203H
        ARGFRAME XSTACK, 8, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 21, STACK
        PUBLIC ZDP_DeviceAnnce
        FUNCTION ZDP_DeviceAnnce,021203H
        ARGFRAME XSTACK, 1, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 21, STACK
        PUBLIC ZDP_EPRsp
        FUNCTION ZDP_EPRsp,021203H
        ARGFRAME XSTACK, 7, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 20, STACK
        PUBLIC ZDP_EndDeviceBindReq
        FUNCTION ZDP_EndDeviceBindReq,021203H
        ARGFRAME XSTACK, 9, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 22, STACK
        PUBLIC ZDP_GenericRsp
        FUNCTION ZDP_GenericRsp,021203H
        ARGFRAME XSTACK, 4, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 13, STACK
        PUBLIC ZDP_IEEEAddrReq
        FUNCTION ZDP_IEEEAddrReq,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 21, STACK
        PUBLIC ZDP_IncomingData
        FUNCTION ZDP_IncomingData,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 31, STACK
        PUBLIC ZDP_MatchDescReq
        FUNCTION ZDP_MatchDescReq,021203H
        ARGFRAME XSTACK, 8, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 18, STACK
        PUBLIC ZDP_MgmtBindRsp
        FUNCTION ZDP_MgmtBindRsp,021203H
        ARGFRAME XSTACK, 5, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 22, STACK
        PUBLIC ZDP_MgmtDirectJoinReq
        FUNCTION ZDP_MgmtDirectJoinReq,021203H
        ARGFRAME XSTACK, 1, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDP_MgmtLeaveReq
        FUNCTION ZDP_MgmtLeaveReq,021203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDP_MgmtLqiRsp
        FUNCTION ZDP_MgmtLqiRsp,021203H
        ARGFRAME XSTACK, 5, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 23, STACK
        PUBLIC ZDP_MgmtNwkDiscReq
        FUNCTION ZDP_MgmtNwkDiscReq,021203H
        ARGFRAME XSTACK, 4, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 18, STACK
        PUBLIC ZDP_MgmtNwkDiscRsp
        FUNCTION ZDP_MgmtNwkDiscRsp,021203H
        ARGFRAME XSTACK, 5, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 24, STACK
        PUBLIC ZDP_MgmtNwkUpdateNotify
        FUNCTION ZDP_MgmtNwkUpdateNotify,021203H
        ARGFRAME XSTACK, 12, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 28, STACK
        PUBLIC ZDP_MgmtNwkUpdateReq
        FUNCTION ZDP_MgmtNwkUpdateReq,021203H
        ARGFRAME XSTACK, 6, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 22, STACK
        PUBLIC ZDP_MgmtPermitJoinReq
        FUNCTION ZDP_MgmtPermitJoinReq,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC ZDP_MgmtRtgRsp
        FUNCTION ZDP_MgmtRtgRsp,021203H
        ARGFRAME XSTACK, 5, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 24, STACK
        PUBLIC ZDP_NWKAddrOfInterestReq
        FUNCTION ZDP_NWKAddrOfInterestReq,021203H
        ARGFRAME XSTACK, 1, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC ZDP_NodeDescMsg
        FUNCTION ZDP_NodeDescMsg,021203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC ZDP_NwkAddrReq
        FUNCTION ZDP_NwkAddrReq,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 23, STACK
        PUBLIC ZDP_PowerDescMsg
        FUNCTION ZDP_PowerDescMsg,021203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC ZDP_SendData
        FUNCTION ZDP_SendData,021203H
        ARGFRAME XSTACK, 5, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC ZDP_ServerDiscReq
        FUNCTION ZDP_ServerDiscReq,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 21, STACK
        PUBLIC ZDP_ServerDiscRsp
        FUNCTION ZDP_ServerDiscRsp,021203H
        ARGFRAME XSTACK, 4, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 13, STACK
        PUBLIC ZDP_SimpleDescMsg
        FUNCTION ZDP_SimpleDescMsg,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 21, STACK
        PUBLIC ZDP_SimpleDescReq
        FUNCTION ZDP_SimpleDescReq,021203H
        ARGFRAME XSTACK, 1, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC ZDP_TransID
        PUBLIC ZDP_UserDescRsp
        FUNCTION ZDP_UserDescRsp,021203H
        ARGFRAME XSTACK, 3, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 20, STACK
        PUBLIC ZDP_UserDescSet
        FUNCTION ZDP_UserDescSet,021203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 20, STACK
        FUNCTION fillAndSend,021203H
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 35, STACK
        PUBLIC zdoMsgCBs
        PUBLIC zdpMsgProcs
        PUBLIC zdpProcessAddrReq
        FUNCTION zdpProcessAddrReq,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 18, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
osal_memset         SYMBOL "osal_memset"
AF_DataRequest      SYMBOL "AF_DataRequest"
sAddrExtCmp         SYMBOL "sAddrExtCmp"
sAddrExtCpy         SYMBOL "sAddrExtCpy"
osal_memcpy         SYMBOL "osal_memcpy"
NLME_GetShortAddr   SYMBOL "NLME_GetShortAddr"
NLME_GetExtAddr     SYMBOL "NLME_GetExtAddr"
osal_buffer_uint32  SYMBOL "osal_buffer_uint32"
osal_mem_alloc      SYMBOL "osal_mem_alloc"
osal_mem_free       SYMBOL "osal_mem_free"
osal_msg_allocate   SYMBOL "osal_msg_allocate"
osal_msg_send       SYMBOL "osal_msg_send"
ZDApp_InMsgCB       SYMBOL "ZDApp_InMsgCB"
??AF_DataRequest?relay SYMBOL "?relay", AF_DataRequest
??NLME_GetExtAddr?relay SYMBOL "?relay", NLME_GetExtAddr
??NLME_GetShortAddr?relay SYMBOL "?relay", NLME_GetShortAddr
??ZDApp_InMsgCB?relay SYMBOL "?relay", ZDApp_InMsgCB
`?<Name ZDO_ProcessActiveEPR 17>` SYMBOL "ZDO_ProcessActiveEPReq"
??ZDO_ProcessActiveEPReq?relay SYMBOL "?relay", `?<Name ZDO_ProcessActiveEPR 17>`
`?<Name ZDO_ProcessMatchDesc 19>` SYMBOL "ZDO_ProcessMatchDescReq"
??ZDO_ProcessMatchDescReq?relay SYMBOL "?relay", `?<Name ZDO_ProcessMatchDesc 19>`
`?<Name ZDO_ProcessNodeDescR 21>` SYMBOL "ZDO_ProcessNodeDescReq"
??ZDO_ProcessNodeDescReq?relay SYMBOL "?relay", `?<Name ZDO_ProcessNodeDescR 21>`
`?<Name ZDO_ProcessPowerDesc 23>` SYMBOL "ZDO_ProcessPowerDescReq"
??ZDO_ProcessPowerDescReq?relay SYMBOL "?relay", `?<Name ZDO_ProcessPowerDesc 23>`
`?<Name ZDO_ProcessSimpleDes 25>` SYMBOL "ZDO_ProcessSimpleDescReq"
??ZDO_ProcessSimpleDescReq?relay SYMBOL "?relay", `?<Name ZDO_ProcessSimpleDes 25>`
??osal_buffer_uint32?relay SYMBOL "?relay", osal_buffer_uint32
??osal_mem_alloc?relay SYMBOL "?relay", osal_mem_alloc
??osal_mem_free?relay SYMBOL "?relay", osal_mem_free
??osal_memcpy?relay SYMBOL "?relay", osal_memcpy
??osal_memset?relay SYMBOL "?relay", osal_memset
??osal_msg_allocate?relay SYMBOL "?relay", osal_msg_allocate
??osal_msg_send?relay SYMBOL "?relay", osal_msg_send
??sAddrExtCmp?relay SYMBOL "?relay", sAddrExtCmp
??sAddrExtCpy?relay SYMBOL "?relay", sAddrExtCpy
ZDO_RegisterForZDOMsg SYMBOL "ZDO_RegisterForZDOMsg"
??ZDO_RegisterForZDOMsg?relay SYMBOL "?relay", ZDO_RegisterForZDOMsg
ZDO_RemoveRegisteredCB SYMBOL "ZDO_RemoveRegisteredCB"
??ZDO_RemoveRegisteredCB?relay SYMBOL "?relay", ZDO_RemoveRegisteredCB
ZDO_SendMsgCBs      SYMBOL "ZDO_SendMsgCBs"
??ZDO_SendMsgCBs?relay SYMBOL "?relay", ZDO_SendMsgCBs
ZDP_BindUnbindReq   SYMBOL "ZDP_BindUnbindReq"
??ZDP_BindUnbindReq?relay SYMBOL "?relay", ZDP_BindUnbindReq
ZDP_DeviceAnnce     SYMBOL "ZDP_DeviceAnnce"
??ZDP_DeviceAnnce?relay SYMBOL "?relay", ZDP_DeviceAnnce
ZDP_EPRsp           SYMBOL "ZDP_EPRsp"
??ZDP_EPRsp?relay   SYMBOL "?relay", ZDP_EPRsp
ZDP_EndDeviceBindReq SYMBOL "ZDP_EndDeviceBindReq"
??ZDP_EndDeviceBindReq?relay SYMBOL "?relay", ZDP_EndDeviceBindReq
ZDP_GenericRsp      SYMBOL "ZDP_GenericRsp"
??ZDP_GenericRsp?relay SYMBOL "?relay", ZDP_GenericRsp
ZDP_IEEEAddrReq     SYMBOL "ZDP_IEEEAddrReq"
??ZDP_IEEEAddrReq?relay SYMBOL "?relay", ZDP_IEEEAddrReq
ZDP_IncomingData    SYMBOL "ZDP_IncomingData"
??ZDP_IncomingData?relay SYMBOL "?relay", ZDP_IncomingData
ZDP_MatchDescReq    SYMBOL "ZDP_MatchDescReq"
??ZDP_MatchDescReq?relay SYMBOL "?relay", ZDP_MatchDescReq
ZDP_MgmtBindRsp     SYMBOL "ZDP_MgmtBindRsp"
??ZDP_MgmtBindRsp?relay SYMBOL "?relay", ZDP_MgmtBindRsp
ZDP_MgmtDirectJoinReq SYMBOL "ZDP_MgmtDirectJoinReq"
??ZDP_MgmtDirectJoinReq?relay SYMBOL "?relay", ZDP_MgmtDirectJoinReq
ZDP_MgmtLeaveReq    SYMBOL "ZDP_MgmtLeaveReq"
??ZDP_MgmtLeaveReq?relay SYMBOL "?relay", ZDP_MgmtLeaveReq
ZDP_MgmtLqiRsp      SYMBOL "ZDP_MgmtLqiRsp"
??ZDP_MgmtLqiRsp?relay SYMBOL "?relay", ZDP_MgmtLqiRsp
ZDP_MgmtNwkDiscReq  SYMBOL "ZDP_MgmtNwkDiscReq"
??ZDP_MgmtNwkDiscReq?relay SYMBOL "?relay", ZDP_MgmtNwkDiscReq
ZDP_MgmtNwkDiscRsp  SYMBOL "ZDP_MgmtNwkDiscRsp"
??ZDP_MgmtNwkDiscRsp?relay SYMBOL "?relay", ZDP_MgmtNwkDiscRsp
ZDP_MgmtNwkUpdateNotify SYMBOL "ZDP_MgmtNwkUpdateNotify"
??ZDP_MgmtNwkUpdateNotify?relay SYMBOL "?relay", ZDP_MgmtNwkUpdateNotify
ZDP_MgmtNwkUpdateReq SYMBOL "ZDP_MgmtNwkUpdateReq"
??ZDP_MgmtNwkUpdateReq?relay SYMBOL "?relay", ZDP_MgmtNwkUpdateReq
ZDP_MgmtPermitJoinReq SYMBOL "ZDP_MgmtPermitJoinReq"
??ZDP_MgmtPermitJoinReq?relay SYMBOL "?relay", ZDP_MgmtPermitJoinReq
ZDP_MgmtRtgRsp      SYMBOL "ZDP_MgmtRtgRsp"
??ZDP_MgmtRtgRsp?relay SYMBOL "?relay", ZDP_MgmtRtgRsp
ZDP_NWKAddrOfInterestReq SYMBOL "ZDP_NWKAddrOfInterestReq"
??ZDP_NWKAddrOfInterestReq?relay SYMBOL "?relay", ZDP_NWKAddrOfInterestReq
ZDP_NodeDescMsg     SYMBOL "ZDP_NodeDescMsg"
??ZDP_NodeDescMsg?relay SYMBOL "?relay", ZDP_NodeDescMsg
ZDP_NwkAddrReq      SYMBOL "ZDP_NwkAddrReq"
??ZDP_NwkAddrReq?relay SYMBOL "?relay", ZDP_NwkAddrReq
ZDP_PowerDescMsg    SYMBOL "ZDP_PowerDescMsg"
??ZDP_PowerDescMsg?relay SYMBOL "?relay", ZDP_PowerDescMsg
ZDP_SendData        SYMBOL "ZDP_SendData"
??ZDP_SendData?relay SYMBOL "?relay", ZDP_SendData
ZDP_ServerDiscReq   SYMBOL "ZDP_ServerDiscReq"
??ZDP_ServerDiscReq?relay SYMBOL "?relay", ZDP_ServerDiscReq
ZDP_ServerDiscRsp   SYMBOL "ZDP_ServerDiscRsp"
??ZDP_ServerDiscRsp?relay SYMBOL "?relay", ZDP_ServerDiscRsp
ZDP_SimpleDescMsg   SYMBOL "ZDP_SimpleDescMsg"
??ZDP_SimpleDescMsg?relay SYMBOL "?relay", ZDP_SimpleDescMsg
ZDP_SimpleDescReq   SYMBOL "ZDP_SimpleDescReq"
??ZDP_SimpleDescReq?relay SYMBOL "?relay", ZDP_SimpleDescReq
ZDP_UserDescRsp     SYMBOL "ZDP_UserDescRsp"
??ZDP_UserDescRsp?relay SYMBOL "?relay", ZDP_UserDescRsp
ZDP_UserDescSet     SYMBOL "ZDP_UserDescSet"
??ZDP_UserDescSet?relay SYMBOL "?relay", ZDP_UserDescSet
zdpProcessAddrReq   SYMBOL "zdpProcessAddrReq"
??zdpProcessAddrReq?relay SYMBOL "?relay", zdpProcessAddrReq

        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AF_DataRequest
        FUNCTION AF_DataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN sAddrExtCmp
        FUNCTION sAddrExtCmp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN sAddrExtCpy
        FUNCTION sAddrExtCpy,0202H
        ARGFRAME ISTACK, 1, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 1, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetShortAddr
        FUNCTION NLME_GetShortAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetExtAddr
        FUNCTION NLME_GetExtAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_buffer_uint32
        FUNCTION osal_buffer_uint32,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_allocate
        FUNCTION osal_msg_allocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_send
        FUNCTION osal_msg_send,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDApp_InMsgCB
        FUNCTION ZDApp_InMsgCB,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??AF_DataRequest?relay
        FUNCTION ??AF_DataRequest?relay,00H
        EXTERN ??NLME_GetExtAddr?relay
        FUNCTION ??NLME_GetExtAddr?relay,00H
        EXTERN ??NLME_GetShortAddr?relay
        FUNCTION ??NLME_GetShortAddr?relay,00H
        EXTERN ??ZDApp_InMsgCB?relay
        FUNCTION ??ZDApp_InMsgCB?relay,00H
        EXTERN ??ZDO_ProcessActiveEPReq?relay
        FUNCTION ??ZDO_ProcessActiveEPReq?relay,00H
        EXTERN ??ZDO_ProcessMatchDescReq?relay
        FUNCTION ??ZDO_ProcessMatchDescReq?relay,00H
        EXTERN ??ZDO_ProcessNodeDescReq?relay
        FUNCTION ??ZDO_ProcessNodeDescReq?relay,00H
        EXTERN ??ZDO_ProcessPowerDescReq?relay
        FUNCTION ??ZDO_ProcessPowerDescReq?relay,00H
        EXTERN ??ZDO_ProcessSimpleDescReq?relay
        FUNCTION ??ZDO_ProcessSimpleDescReq?relay,00H
        EXTERN ??osal_buffer_uint32?relay
        FUNCTION ??osal_buffer_uint32?relay,00H
        EXTERN ??osal_mem_alloc?relay
        FUNCTION ??osal_mem_alloc?relay,00H
        EXTERN ??osal_mem_free?relay
        FUNCTION ??osal_mem_free?relay,00H
        EXTERN ??osal_memcpy?relay
        FUNCTION ??osal_memcpy?relay,00H
        EXTERN ??osal_memset?relay
        FUNCTION ??osal_memset?relay,00H
        EXTERN ??osal_msg_allocate?relay
        FUNCTION ??osal_msg_allocate?relay,00H
        EXTERN ??osal_msg_send?relay
        FUNCTION ??osal_msg_send?relay,00H
        EXTERN ??sAddrExtCmp?relay
        FUNCTION ??sAddrExtCmp?relay,00H
        EXTERN ??sAddrExtCpy?relay
        FUNCTION ??sAddrExtCpy?relay,00H
        EXTERN ZDAppNwkAddr
        EXTERN ZDApp_epDesc
        EXTERN saveExtAddr

// D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\Components\stack\zdo\ZDProfile.c
//    1 /**************************************************************************************************
//    2   Filename:       ZDProfile.c
//    3   Revised:        $Date: 2009-03-12 16:25:22 -0700 (Thu, 12 Mar 2009) $
//    4   Revision:       $Revision: 19404 $
//    5 
//    6   Description:    This is the Zigbee Device Profile.
//    7 
//    8 
//    9   Copyright 2004-2009 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License").  You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product.  Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 
//   40 /*********************************************************************
//   41  * INCLUDES
//   42  */
//   43 #include "ZComdef.h"
//   44 #include "OSAL.h"
//   45 #include "AF.h"
//   46 #include "NLMEDE.h"
//   47 #include "nwk_util.h"
//   48 #include "APS.h"
//   49 
//   50 #include "AddrMgr.h"
//   51 #include "ZDConfig.h"
//   52 #include "ZDProfile.h"
//   53 #include "ZDObject.h"
//   54 #include "ZDNwkMgr.h"
//   55 
//   56 #if defined( LCD_SUPPORTED )
//   57   #include "OnBoard.h"
//   58 #endif
//   59 
//   60 #include "nwk_util.h"
//   61 
//   62 #if defined( MT_ZDO_FUNC )
//   63   #include "MT_ZDO.h"
//   64 #endif
//   65 
//   66 /*********************************************************************
//   67  * MACROS
//   68  */
//   69 
//   70 #define ZADDR_TO_AFADDR( pZADDR, AFADDR ) {                            \ 
//   71   (AFADDR).endPoint = ZDP_AF_ENDPOINT;                                 \ 
//   72   (AFADDR).addrMode = (afAddrMode_t)(pZADDR)->addrMode;                \ 
//   73   (AFADDR).addr.shortAddr = (pZADDR)->addr.shortAddr;                  \ 
//   74 }
//   75 
//   76 #define FillAndSendBuffer( TRANSSEQ, ADDR, ID, LEN, BUF ) {     \ 
//   77   afStatus_t stat;                                    \ 
//   78   ZDP_TmpBuf = (BUF)+1;                               \ 
//   79   stat = fillAndSend( (TRANSSEQ), (ADDR), (ID), (LEN) );          \ 
//   80   osal_mem_free( (BUF) );                             \ 
//   81   ZDP_TmpBuf = ZDP_Buf+1;                             \ 
//   82   return stat;                                        \ 
//   83 }
//   84 
//   85 #define FillAndSendTxOptions( TRANSSEQ, ADDR, ID, LEN, TxO ) {  \ 
//   86   afStatus_t stat;                                    \ 
//   87   ZDP_TxOptions = (TxO);                              \ 
//   88   stat = fillAndSend( (TRANSSEQ), (ADDR), (ID), (LEN) );          \ 
//   89   ZDP_TxOptions = AF_TX_OPTIONS_NONE;                 \ 
//   90   return stat;                                        \ 
//   91 }
//   92 
//   93 #define FillAndSendBufferTxOptions( TRANSSEQ, ADDR, ID, LEN, BUF, TxO ) { \ 
//   94   afStatus_t stat;                                    \ 
//   95   ZDP_TmpBuf = (BUF)+1;                               \ 
//   96   ZDP_TxOptions = (TxO);                              \ 
//   97   stat = fillAndSend( (TRANSSEQ), (ADDR), (ID), (LEN) );          \ 
//   98   osal_mem_free( (BUF) );                             \ 
//   99   ZDP_TmpBuf = ZDP_Buf+1;                             \ 
//  100   ZDP_TxOptions = AF_TX_OPTIONS_NONE;                 \ 
//  101   return stat;                                        \ 
//  102 }
//  103 
//  104 /*********************************************************************
//  105  * CONSTANTS
//  106  */
//  107 
//  108 #define ZDP_BUF_SZ          80
//  109 

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA8
//  110 CONST byte ZDP_AF_ENDPOINT = 0;
ZDP_AF_ENDPOINT:
        DB 0
//  111 
//  112 /*********************************************************************
//  113  * TYPEDEFS
//  114  */
//  115 typedef struct
//  116 {
//  117   void *next;
//  118   uint8 taskID;
//  119   uint16 clusterID;
//  120 } ZDO_MsgCB_t;
//  121 
//  122 
//  123 /*********************************************************************
//  124  * GLOBAL VARIABLES
//  125  */
//  126 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  127 byte ZDP_TransID = 0;
ZDP_TransID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  128 
//  129 /*********************************************************************
//  130  * EXTERNAL VARIABLES
//  131  */
//  132 
//  133 extern endPointDesc_t ZDApp_epDesc;
//  134 
//  135 /*********************************************************************
//  136  * EXTERNAL FUNCTIONS
//  137  */
//  138 
//  139 /*********************************************************************
//  140  * LOCAL FUNCTIONS
//  141  */
//  142 
//  143 static afStatus_t fillAndSend( uint8 *transSeq, zAddrType_t *addr, cId_t clusterID, byte len );
//  144 uint8 ZDO_SendMsgCBs( zdoIncomingMsg_t *inMsg );
//  145 void zdpProcessAddrReq( zdoIncomingMsg_t *inMsg );
//  146 
//  147 /*********************************************************************
//  148  * LOCAL VARIABLES
//  149  */
//  150 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  151 static uint8  ZDP_Buf[ ZDP_BUF_SZ ];
ZDP_Buf:
        DS 80
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_I:XDATA:NOROOT(0)
//  152 static uint8 *ZDP_TmpBuf = ZDP_Buf+1;
ZDP_TmpBuf:
        DATA16
        DS 2
        REQUIRE `?<Initializer for ZDP_TmpBuf>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  153 static byte ZDP_TxOptions = AF_TX_OPTIONS_NONE;
ZDP_TxOptions:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  154 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  155 ZDO_MsgCB_t *zdoMsgCBs = (ZDO_MsgCB_t *)NULL;
zdoMsgCBs:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  156 
//  157 /*********************************************************************
//  158  * ZDO Message Processing table
//  159  */
//  160 
//  161 typedef void (*pfnZDPMsgProcessor)( zdoIncomingMsg_t *inMsg );
//  162 
//  163 typedef struct
//  164 {
//  165   uint16                clusterID;
//  166   pfnZDPMsgProcessor    pFn;
//  167 } zdpMsgProcItem_t;
//  168 

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA8
//  169 CONST zdpMsgProcItem_t zdpMsgProcs[] =
zdpMsgProcs:
        DATA16
        DW 1
        DW ??zdpProcessAddrReq?relay
        DW 2
        DW ??ZDO_ProcessNodeDescReq?relay
        DW 3
        DW ??ZDO_ProcessPowerDescReq?relay
        DW 4
        DW ??ZDO_ProcessSimpleDescReq?relay
        DW 5
        DW ??ZDO_ProcessActiveEPReq?relay
        DW 6
        DW ??ZDO_ProcessMatchDescReq?relay
        DW 65535
        DW 0H
//  170 {
//  171 #if ( RFD_RCVC_ALWAYS_ON==TRUE ) || ( ZG_BUILD_RTR_TYPE )
//  172   // These aren't processed by sleeping end devices.
//  173   { NWK_addr_req,           zdpProcessAddrReq },
//  174   { Device_annce,           ZDO_ProcessDeviceAnnce },
//  175 #endif  
//  176   { IEEE_addr_req,          zdpProcessAddrReq },
//  177   { Node_Desc_req,          ZDO_ProcessNodeDescReq },
//  178   { Power_Desc_req,         ZDO_ProcessPowerDescReq },
//  179   { Simple_Desc_req,        ZDO_ProcessSimpleDescReq },
//  180   { Active_EP_req,          ZDO_ProcessActiveEPReq },
//  181   { Match_Desc_req,         ZDO_ProcessMatchDescReq },
//  182 #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
//  183   { Mgmt_NWK_Disc_req,      ZDO_ProcessMgmtNwkDiscReq },
//  184 #endif
//  185 #if defined ( ZDO_MGMT_LQI_RESPONSE ) && ( ZG_BUILD_RTR_TYPE )
//  186   { Mgmt_Lqi_req,           ZDO_ProcessMgmtLqiReq },
//  187 #endif
//  188 #if defined ( ZDO_MGMT_RTG_RESPONSE ) && ( ZG_BUILD_RTR_TYPE )
//  189   { Mgmt_Rtg_req,           ZDO_ProcessMgmtRtgReq },
//  190 #endif
//  191 #if defined ( ZDO_MGMT_BIND_RESPONSE ) && defined ( REFLECTOR )
//  192   { Mgmt_Bind_req,          ZDO_ProcessMgmtBindReq },
//  193 #endif
//  194 #if defined ( ZDO_MGMT_JOINDIRECT_RESPONSE ) && ( ZG_BUILD_RTR_TYPE )
//  195   { Mgmt_Direct_Join_req,   ZDO_ProcessMgmtDirectJoinReq },
//  196 #endif
//  197 #if defined ( ZDO_MGMT_LEAVE_RESPONSE )
//  198   { Mgmt_Leave_req,         ZDO_ProcessMgmtLeaveReq },
//  199 #endif
//  200 #if defined ( ZDO_MGMT_PERMIT_JOIN_RESPONSE )  && ( ZG_BUILD_RTR_TYPE )
//  201   { Mgmt_Permit_Join_req,   ZDO_ProcessMgmtPermitJoinReq },
//  202 #endif
//  203 #if defined ( ZDO_USERDESC_RESPONSE )
//  204   { User_Desc_req,          ZDO_ProcessUserDescReq },
//  205 #endif
//  206 #if defined ( ZDO_USERDESCSET_RESPONSE )
//  207   { User_Desc_set,          ZDO_ProcessUserDescSet },
//  208 #endif
//  209 #if defined ( ZDO_SERVERDISC_RESPONSE )
//  210   { Server_Discovery_req,   ZDO_ProcessServerDiscReq },
//  211 #endif
//  212   {0xFFFF, NULL} // Last
//  213 };
//  214 
//  215 /*********************************************************************
//  216  * @fn          fillAndSend
//  217  *
//  218  * @brief       Combined to reduce space
//  219  *
//  220  * @param
//  221  * @param
//  222  *
//  223  * @return      afStatus_t
//  224  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  225 static afStatus_t fillAndSend( uint8 *transSeq, zAddrType_t *addr, cId_t clusterID, byte len )
fillAndSend:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function fillAndSend
        CODE
//  226 {
        FUNCALL fillAndSend, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL fillAndSend, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 12
        MOV     A,#-0xc
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 26)
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     ?V0 + 2,R4
        MOV     ?V0 + 3,R5
        MOV     ?V0 + 0,R1
        MOV     A,#0x1a
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine17 & 0xFFFF
//  227   afAddrType_t afAddr;
//  228   
//  229   osal_memset( &afAddr, 0, sizeof(afAddrType_t) );
??CrossCallReturnLabel_12:
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0xc
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memset?relay
//  230   ZADDR_TO_AFADDR( addr, afAddr );
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        LCALL   ?Subroutine62 & 0xFFFF
??CrossCallReturnLabel_99:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        LCALL   ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_35:
        MOVX    @DPTR,A
//  231 
//  232   *(ZDP_TmpBuf-1) = *transSeq;
        MOV     DPTR,#ZDP_TmpBuf
        MOVX    A,@DPTR
        ADD     A,#-0x1
        MOV     ?V0 + 2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#-0x1
        MOV     ?V0 + 3,A
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        LCALL   ?Subroutine48 & 0xFFFF
//  233 
//  234   return AF_DataRequest( &afAddr, &ZDApp_epDesc, clusterID,
//  235                            (uint16)(len+1), (uint8*)(ZDP_TmpBuf-1),
//  236                            transSeq, ZDP_TxOptions,  AF_DEFAULT_RADIUS );
??CrossCallReturnLabel_76:
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 1,#0x1e
        MOV     R0,#?V0 + 1
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 27)
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 29)
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 31)
        MOV     ?V0 + 2,?V0 + 0
        MOV     A,?V0 + 2
        ADD     A,#0x1
        MOV     ?V0 + 2,A
        CLR     A
        ADDC    A,#0x0
        MOV     ?V0 + 3,A
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 33)
        MOV     ?V0 + 2,R6
        MOV     ?V0 + 3,R7
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 35)
        MOV     DPTR,#ZDP_TxOptions
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     R4,#ZDApp_epDesc & 0xff
        MOV     R5,#(ZDApp_epDesc >> 8) & 0xff
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 26)
        MOV     A,#0xc
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock0
//  237 
//  238 }
//  239 
//  240 /*********************************************************************
//  241  * @fn          ZDP_SendData
//  242  *
//  243  * @brief       This builds and send a request message that has
//  244  *              NWKAddrOfInterest as its only parameter.
//  245  *
//  246  * @param       dstAddr - destination address
//  247  * @param       cmd - clusterID
//  248  * @param       dataLen - number of bytes of data
//  249  * @param       data - pointer to the data
//  250  * @param       SecurityEnable - Security Options
//  251  *
//  252  * @return      afStatus_t
//  253  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  254 afStatus_t ZDP_SendData( uint8 *TransSeq, zAddrType_t *dstAddr, uint16 cmd,
ZDP_SendData:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function ZDP_SendData
        CODE
//  255                         byte len, uint8 *buf, byte SecurityEnable )
//  256 {
        FUNCALL ZDP_SendData, fillAndSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     ?V0 + 0,R1
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine124_0 & 0xFFFF
??CrossCallReturnLabel_294:
        MOV     A,#0x10
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine47 & 0xFFFF
??CrossCallReturnLabel_74:
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
//  257   uint8 *pBuf = ZDP_TmpBuf;
        MOV     DPTR,#ZDP_TmpBuf
        LCALL   ?Subroutine18 & 0xFFFF
//  258   byte cnt = len;
??CrossCallReturnLabel_21:
        MOV     R6,?V0 + 0
        SJMP    ??ZDP_SendData_0
//  259 
//  260   while ( cnt-- )
//  261   {
//  262     *pBuf++ = *buf++;
??ZDP_SendData_1:
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        MOVX    A,@DPTR
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        LCALL   ?Subroutine62 & 0xFFFF
//  263   }
??CrossCallReturnLabel_100:
        MOV     ?V0 + 2,DPL
        MOV     ?V0 + 3,DPH
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        INC     DPTR
        MOV     ?V0 + 4,DPL
        MOV     ?V0 + 5,DPH
??ZDP_SendData_0:
        MOV     A,R6
        MOV     R7,A
        MOV     A,#-0x1
        ADD     A,R7
        DEC     R6
        INC     A
        JNZ     ??ZDP_SendData_1
//  264 
//  265   FillAndSendTxOptions( TransSeq, dstAddr, cmd, len,
//  266                (AF_DEFAULT_RADIUS | ((SecurityEnable) ? AF_EN_SECURITY : 0)) );
        MOV     A,?V0 + 1
        JZ      ??ZDP_SendData_2
        MOV     ?V0 + 2,#0x40
        SJMP    ??ZDP_SendData_3
??ZDP_SendData_2:
        MOV     ?V0 + 2,#0x0
??ZDP_SendData_3:
        MOV     A,?V0 + 2
        ORL     A,#0x1e
        MOV     DPTR,#ZDP_TxOptions
        MOVX    @DPTR,A
        ; Setup parameters for call to function fillAndSend
        MOV     ?V0 + 2,R0
        MOV     ?V0 + 3,R1
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     R1,?V0 + 0
        LCALL   ??Subroutine96_0 & 0xFFFF
??CrossCallReturnLabel_138:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     DPTR,#ZDP_TxOptions
        CLR     A
        MOVX    @DPTR,A
        LJMP    ??Subroutine117_0 & 0xFFFF
        CFI EndBlock cfiBlock1
//  267 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine62:
        CFI Block cfiCond2 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_99
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 26)
        CFI Block cfiCond3 Using cfiCommon0
        CFI (cfiCond3) NoFunction
        CFI (cfiCond3) Conditional ??CrossCallReturnLabel_100
        CFI (cfiCond3) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond3) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond3) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond3) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond3) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond3) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond3) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond3) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond3) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond3) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond3) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond3) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond3) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond3) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond3) CFA_SP SP+0
        CFI (cfiCond3) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker4 Using cfiCommon1
        CFI (cfiPicker4) NoFunction
        CFI (cfiPicker4) Picker
        MOVX    @DPTR,A
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        INC     DPTR
        RET
        CFI EndBlock cfiCond2
        CFI EndBlock cfiCond3
        CFI EndBlock cfiPicker4
//  268 
//  269 /*********************************************************************
//  270  * @fn          ZDP_NWKAddrOfInterestReq
//  271  *
//  272  * @brief       This builds and send a request message that has
//  273  *              NWKAddrOfInterest as its only parameter.
//  274  *
//  275  * @param       dstAddr - destination address
//  276  * @param       nwkAddr - 16 bit address
//  277  * @param       SecurityEnable - Security Options
//  278  *
//  279  * @return      afStatus_t
//  280  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  281 afStatus_t ZDP_NWKAddrOfInterestReq( zAddrType_t *dstAddr, uint16 nwkAddr,
ZDP_NWKAddrOfInterestReq:
        CFI Block cfiBlock5 Using cfiCommon0
        CFI Function ZDP_NWKAddrOfInterestReq
        CODE
//  282                                      byte cmd, byte SecurityEnable )
//  283 {
        FUNCALL ZDP_NWKAddrOfInterestReq, fillAndSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  284   (void)SecurityEnable;  // Intentionally unreferenced parameter
//  285   
//  286   ZDP_TmpBuf[0] = LO_UINT16( nwkAddr );
        LCALL   ?Subroutine14 & 0xFFFF
//  287   ZDP_TmpBuf[1] = HI_UINT16( nwkAddr );
//  288 
//  289   return fillAndSend( &ZDP_TransID, dstAddr, cmd, 2 );
??CrossCallReturnLabel_8:
        ; Setup parameters for call to function fillAndSend
        MOV     ?V0 + 0,R6
        LJMP    ?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock5
//  290 }
//  291 
//  292 /*********************************************************************
//  293  * Address Requests
//  294  */
//  295 
//  296 /*********************************************************************
//  297  * @fn          ZDP_NwkAddrReq
//  298  *
//  299  * @brief       This builds and send a NWK_addr_req message.  This
//  300  *              function sends a broadcast message looking for a 16
//  301  *              bit address with a 64 bit address as bait.
//  302  *
//  303  * @param       IEEEAddress - looking for this device
//  304  * @param       SecurityEnable - Security Options
//  305  *
//  306  * @return      afStatus_t
//  307  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  308 afStatus_t ZDP_NwkAddrReq( uint8 *IEEEAddress, byte ReqType,
ZDP_NwkAddrReq:
        CFI Block cfiBlock6 Using cfiCommon0
        CFI Function ZDP_NwkAddrReq
        CODE
//  309                            byte StartIndex, byte SecurityEnable )
//  310 {
        FUNCALL ZDP_NwkAddrReq, sAddrExtCmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_NwkAddrReq, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_NwkAddrReq, fillAndSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 9
        MOV     A,#-0x9
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 21)
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     ?V0 + 3,R1
        MOV     ?V0 + 2,R4
//  311   uint8 *pBuf = ZDP_TmpBuf;
        MOV     DPTR,#ZDP_TmpBuf
        LCALL   ?Subroutine17 & 0xFFFF
//  312   byte len = Z_EXTADDR_LEN + 1 + 1;  // IEEEAddress + ReqType + StartIndex.
//  313   zAddrType_t dstAddr;
//  314 
//  315   (void)SecurityEnable;  // Intentionally unreferenced parameter
//  316   
//  317   if ( osal_ExtAddrEqual( saveExtAddr, IEEEAddress ) == FALSE )
??CrossCallReturnLabel_13:
        ; Setup parameters for call to function sAddrExtCmp
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     R2,#saveExtAddr & 0xff
        MOV     R3,#(saveExtAddr >> 8) & 0xff
        LCALL   ??sAddrExtCmp?relay
        MOV     A,R1
        JNZ     ??ZDP_NwkAddrReq_0
//  318   {
//  319     dstAddr.addrMode = AddrBroadcast;
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0xf
        LCALL   ?Subroutine56 & 0xFFFF
//  320     dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
//  321   }
??CrossCallReturnLabel_88:
        MOV     A,#-0x3
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#-0x1
        SJMP    ??CrossCallReturnLabel_36
//  322   else
//  323   {
//  324     dstAddr.addrMode = Addr16Bit;
??ZDP_NwkAddrReq_0:
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  325     dstAddr.addr.shortAddr = ZDAppNwkAddr.addr.shortAddr;
        MOV     DPTR,#ZDAppNwkAddr
        LCALL   ?Subroutine25 & 0xFFFF
//  326   }
??CrossCallReturnLabel_36:
        MOVX    @DPTR,A
//  327 
//  328   pBuf = osal_cpyExtAddr( pBuf, IEEEAddress );
        ; Setup parameters for call to function sAddrExtCpy
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??sAddrExtCpy?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R6,?V0 + 0
        MOV     R7,?V0 + 1
//  329 
//  330   *pBuf++ = ReqType;
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,?V0 + 3
        MOVX    @DPTR,A
        INC     DPTR
//  331   *pBuf++ = StartIndex;
        MOV     A,?V0 + 2
        MOVX    @DPTR,A
//  332 
//  333   return fillAndSend( &ZDP_TransID, &dstAddr, NWK_addr_req, len );
        ; Setup parameters for call to function fillAndSend
        CLR     A
        MOV     ?V0 + 0,A
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 23)
        MOV     R1,#0xa
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,#ZDP_TransID & 0xff
        MOV     R3,#(ZDP_TransID >> 8) & 0xff
        LCALL   ??Subroutine96_0 & 0xFFFF
??CrossCallReturnLabel_139:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 21)
        MOV     A,#0x9
        LJMP    ??Subroutine95_0 & 0xFFFF
        CFI EndBlock cfiBlock6
//  334 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine25:
        CFI Block cfiCond7 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_35
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 26)
        CFI Block cfiCond8 Using cfiCommon0
        CFI (cfiCond8) NoFunction
        CFI (cfiCond8) Conditional ??CrossCallReturnLabel_36
        CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond8) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond8) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond8) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond8) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond8) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond8) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond8) CFA_SP SP+0
        CFI (cfiCond8) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiPicker9 Using cfiCommon1
        CFI (cfiPicker9) NoFunction
        CFI (cfiPicker9) Picker
        LCALL   ?Subroutine76 & 0xFFFF
??CrossCallReturnLabel_304:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        RET
        CFI EndBlock cfiCond7
        CFI EndBlock cfiCond8
        CFI EndBlock cfiPicker9
//  335 
//  336 /*********************************************************************
//  337  * @fn          ZDP_IEEEAddrReq
//  338  *
//  339  * @brief       This builds and send a IEEE_addr_req message.  This
//  340  *              function sends a unicast message looking for a 64
//  341  *              bit IEEE address with a 16 bit address as bait.
//  342  *
//  343  * @param       ReqType - ZDP_IEEEADDR_REQTYPE_SINGLE or
//  344  *                        ZDP_IEEEADDR_REQTYPE_EXTENDED
//  345  * @param       SecurityEnable - Security Options
//  346  *
//  347  * @return      afStatus_t
//  348  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  349 afStatus_t ZDP_IEEEAddrReq( uint16 shortAddr, byte ReqType,
ZDP_IEEEAddrReq:
        CFI Block cfiBlock10 Using cfiCommon0
        CFI Function ZDP_IEEEAddrReq
        CODE
//  350                             byte StartIndex, byte SecurityEnable )
//  351 {
        FUNCALL ZDP_IEEEAddrReq, fillAndSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 9
        MOV     A,#-0x9
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     A,R1
        MOV     R7,A
        MOV     A,R4
        LCALL   ?Subroutine37 & 0xFFFF
//  352   uint8 *pBuf = ZDP_TmpBuf;
//  353   byte len = 2 + 1 + 1;  // shortAddr + ReqType + StartIndex.
//  354   zAddrType_t dstAddr;
//  355 
//  356   (void)SecurityEnable;  // Intentionally unreferenced parameter
//  357   
//  358   dstAddr.addrMode = (afAddrMode_t)Addr16Bit;
??CrossCallReturnLabel_292:
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        LCALL   ?Subroutine56 & 0xFFFF
//  359   dstAddr.addr.shortAddr = shortAddr;
??CrossCallReturnLabel_89:
        LCALL   ??Subroutine108_0 & 0xFFFF
//  360 
//  361   *pBuf++ = LO_UINT16( shortAddr );
??CrossCallReturnLabel_203:
        MOV     A,R2
        MOV     DPL,R0
        MOV     DPH,R1
        LCALL   ??Subroutine109_0 & 0xFFFF
//  362   *pBuf++ = HI_UINT16( shortAddr );
??CrossCallReturnLabel_201:
        INC     DPTR
//  363 
//  364   *pBuf++ = ReqType;
        MOV     A,R7
        MOVX    @DPTR,A
        INC     DPTR
//  365   *pBuf++ = StartIndex;
        MOV     A,R6
        MOVX    @DPTR,A
//  366 
//  367   return fillAndSend( &ZDP_TransID, &dstAddr, IEEE_addr_req, len );
        ; Setup parameters for call to function fillAndSend
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 21)
        MOV     R1,#0x4
        CFI EndBlock cfiBlock10
        REQUIRE ?Subroutine4
        ; // Fall through to label ?Subroutine4
//  368 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiBlock11 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 21)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,#ZDP_TransID & 0xff
        MOV     R3,#(ZDP_TransID >> 8) & 0xff
        LCALL   ??Subroutine96_0 & 0xFFFF
??CrossCallReturnLabel_140:
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock11
        REQUIRE ??Subroutine86_0
        ; // Fall through to label ??Subroutine86_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine86_0:
        CFI Block cfiBlock12 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0x9
        SJMP    ??Subroutine89_0
        CFI EndBlock cfiBlock12

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine56:
        CFI Block cfiCond13 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_88
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond14 Using cfiCommon0
        CFI (cfiCond14) NoFunction
        CFI (cfiCond14) Conditional ??CrossCallReturnLabel_89
        CFI (cfiCond14) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond14) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond14) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond14) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond14) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond14) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond14) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond14) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond14) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond14) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond14) CFA_SP SP+0
        CFI (cfiCond14) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond15 Using cfiCommon0
        CFI (cfiCond15) NoFunction
        CFI (cfiCond15) Conditional ??CrossCallReturnLabel_90
        CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond15) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond15) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond15) CFA_SP SP+0
        CFI (cfiCond15) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiPicker16 Using cfiCommon1
        CFI (cfiPicker16) NoFunction
        CFI (cfiPicker16) Picker
        MOVX    @DPTR,A
        ; Setup parameters for call to function ZDO_SendMsgCBs
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        RET
        CFI EndBlock cfiCond13
        CFI EndBlock cfiCond14
        CFI EndBlock cfiCond15
        CFI EndBlock cfiPicker16

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiBlock17 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     R1,#0x2
        CFI EndBlock cfiBlock17
        REQUIRE ??Subroutine87_0
        ; // Fall through to label ??Subroutine87_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine87_0:
        CFI Block cfiBlock18 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     R2,#ZDP_TransID & 0xff
        MOV     R3,#(ZDP_TransID >> 8) & 0xff
        CFI EndBlock cfiBlock18
        REQUIRE ??Subroutine88_0
        ; // Fall through to label ??Subroutine88_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine88_0:
        CFI Block cfiBlock19 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        LCALL   ??Subroutine96_0 & 0xFFFF
        CFI EndBlock cfiBlock19
??CrossCallReturnLabel_141:
        REQUIRE ??Subroutine89_0
        ; // Fall through to label ??Subroutine89_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine89_0:
        CFI Block cfiBlock20 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Valid
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock20
//  369 
//  370 /*********************************************************************
//  371  * @fn          ZDP_MatchDescReq
//  372  *
//  373  * @brief       This builds and send a Match_Desc_req message.  This
//  374  *              function sends a broadcast or unicast message
//  375  *              requesting the list of endpoint/interfaces that
//  376  *              match profile ID and cluster IDs.
//  377  *
//  378  * @param       dstAddr - destination address
//  379  * @param       ProfileID - Profile ID
//  380  * @param       NumInClusters - number of input clusters
//  381  * @param       InClusterList - input cluster ID list
//  382  * @param       NumOutClusters - number of output clusters
//  383  * @param       OutClusterList - output cluster ID list
//  384  * @param       SecurityEnable - Security Options
//  385  *
//  386  * @return      afStatus_t
//  387  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  388 afStatus_t ZDP_MatchDescReq( zAddrType_t *dstAddr, uint16 nwkAddr,
ZDP_MatchDescReq:
        CFI Block cfiBlock21 Using cfiCommon0
        CFI Function ZDP_MatchDescReq
        CODE
//  389                                 uint16 ProfileID,
//  390                                 byte NumInClusters, cId_t *InClusterList,
//  391                                 byte NumOutClusters, cId_t *OutClusterList,
//  392                                 byte SecurityEnable )
//  393 {
        FUNCALL ZDP_MatchDescReq, fillAndSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV     ?V0 + 6,R2
        MOV     ?V0 + 7,R3
        MOV     ?V0 + 0,R4
        MOV     ?V0 + 1,R5
        MOV     A,R1
        MOV     R6,A
        MOV     A,#0x10
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine47 & 0xFFFF
??CrossCallReturnLabel_75:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_22:
        MOV     A,#0x14
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     A,#0x15
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine35 & 0xFFFF
//  394   uint8 *pBuf = ZDP_TmpBuf;
??CrossCallReturnLabel_53:
        LCALL   ??Subroutine123_0 & 0xFFFF
//  395   // nwkAddr+ProfileID+NumInClusters+NumOutClusters.
//  396   byte i, len = 2 + 2 + 1 + 1;  // nwkAddr+ProfileID+NumInClusters+NumOutClusters.
//  397 
//  398   (void)SecurityEnable;  // Intentionally unreferenced parameter
//  399   
//  400   len += (NumInClusters + NumOutClusters) * sizeof(uint16);
??CrossCallReturnLabel_302:
        MOV     A,R6
        ADD     A,R3
        CLR     C
        RLC     A
        ADD     A,#0x6
        MOV     R2,A
//  401 
//  402   if ( len >= ZDP_BUF_SZ-1 )
        CLR     C
        SUBB    A,#0x4f
        JC      ??ZDP_MatchDescReq_0
//  403   {
//  404     return afStatus_MEM_FAIL;
        MOV     R1,#0x10
        SJMP    ??ZDP_MatchDescReq_1
//  405   }
//  406 
//  407   *pBuf++ = LO_UINT16( nwkAddr );   // NWKAddrOfInterest
??ZDP_MatchDescReq_0:
        MOV     DPL,R0
        MOV     DPH,R1
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
        INC     DPTR
//  408   *pBuf++ = HI_UINT16( nwkAddr );
        MOV     A,?V0 + 1
        LCALL   ?Subroutine58 & 0xFFFF
//  409 
//  410   *pBuf++ = LO_UINT16( ProfileID );   // Profile ID
//  411   *pBuf++ = HI_UINT16( ProfileID );
??CrossCallReturnLabel_91:
        MOV     A,?V0 + 3
        MOVX    @DPTR,A
        INC     DPTR
//  412 
//  413   *pBuf++ = NumInClusters; // Input cluster list
        MOV     A,R6
        LCALL   ?Subroutine55 & 0xFFFF
//  414   if ( NumInClusters )
??CrossCallReturnLabel_84:
        JZ      ??ZDP_MatchDescReq_2
//  415   {
//  416     for (i=0; i<NumInClusters; ++i)  {
        MOV     R7,#0x0
//  417       *pBuf++ = LO_UINT16( InClusterList[i] );
??ZDP_MatchDescReq_3:
        MOV     A,R7
        CLR     C
        RLC     A
        MOV     ?V0 + 0,A
        CLR     A
        RLC     A
        MOV     ?V0 + 1,A
        MOV     A,?V0 + 4
        ADD     A,?V0 + 0
        MOV     ?V0 + 2,A
        MOV     A,?V0 + 5
        LCALL   ?Subroutine11 & 0xFFFF
//  418       *pBuf++ = HI_UINT16( InClusterList[i] );
//  419     }
//  420   }
??CrossCallReturnLabel_4:
        SUBB    A,R6
        JC      ??ZDP_MatchDescReq_3
//  421 
//  422   *pBuf++ = NumOutClusters; // Output cluster list
??ZDP_MatchDescReq_2:
        MOV     A,R3
        MOV     DPL,R0
        MOV     DPH,R1
        LCALL   ?Subroutine55 & 0xFFFF
//  423   if ( NumOutClusters )
??CrossCallReturnLabel_85:
        JZ      ??ZDP_MatchDescReq_4
//  424   {
//  425     for (i=0; i<NumOutClusters; ++i)  {
        MOV     R7,#0x0
//  426       *pBuf++ = LO_UINT16( OutClusterList[i] );
??ZDP_MatchDescReq_5:
        MOV     A,R7
        CLR     C
        RLC     A
        MOV     ?V0 + 0,A
        CLR     A
        RLC     A
        MOV     ?V0 + 1,A
        MOV     A,R4
        ADD     A,?V0 + 0
        MOV     ?V0 + 2,A
        MOV     A,R5
        LCALL   ?Subroutine11 & 0xFFFF
//  427       *pBuf++ = HI_UINT16( OutClusterList[i] );
//  428     }
//  429   }
??CrossCallReturnLabel_5:
        SUBB    A,R3
        JC      ??ZDP_MatchDescReq_5
//  430 
//  431   return fillAndSend( &ZDP_TransID, dstAddr, Match_Desc_req, len );
??ZDP_MatchDescReq_4:
        ; Setup parameters for call to function fillAndSend
        MOV     ?V0 + 0,#0x6
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 18)
        MOV     A,R2
        MOV     R1,A
        MOV     R4,?V0 + 6
        MOV     R5,?V0 + 7
        MOV     R2,#ZDP_TransID & 0xff
        MOV     R3,#(ZDP_TransID >> 8) & 0xff
        LCALL   ??Subroutine96_0 & 0xFFFF
??CrossCallReturnLabel_142:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
??ZDP_MatchDescReq_1:
        LJMP    ??Subroutine101_0 & 0xFFFF
        CFI EndBlock cfiBlock21
//  432 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine47:
        CFI Block cfiCond22 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_74
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond23 Using cfiCommon0
        CFI (cfiCond23) NoFunction
        CFI (cfiCond23) Conditional ??CrossCallReturnLabel_75
        CFI (cfiCond23) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond23) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond23) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond23) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond23) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond23) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond23) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond23) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond23) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond23) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond23) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond23) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond23) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond23) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond23) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond23) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond23) CFA_SP SP+0
        CFI (cfiCond23) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker24 Using cfiCommon1
        CFI (cfiPicker24) NoFunction
        CFI (cfiPicker24) Picker
        LCALL   ?Subroutine73 & 0xFFFF
??CrossCallReturnLabel_110:
        MOV     A,#0x12
        RET
        CFI EndBlock cfiCond22
        CFI EndBlock cfiCond23
        CFI EndBlock cfiPicker24

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
        CFI Block cfiCond25 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond26 Using cfiCommon0
        CFI (cfiCond26) NoFunction
        CFI (cfiCond26) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond26) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond26) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond26) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond26) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond26) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond26) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond26) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond26) CFA_SP SP+0
        CFI (cfiCond26) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker27 Using cfiCommon1
        CFI (cfiPicker27) NoFunction
        CFI (cfiPicker27) Picker
        ADDC    A,?V0 + 1
        MOV     ?V0 + 3,A
        MOV     DPL,?V0 + 2
        MOV     DPH,A
        LCALL   ?Subroutine85 & 0xFFFF
??CrossCallReturnLabel_225:
        MOV     R0,DPL
        MOV     R1,DPH
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        LCALL   ?Subroutine71 & 0xFFFF
??CrossCallReturnLabel_220:
        INC     R7
        MOV     A,R7
        CLR     C
        RET
        CFI EndBlock cfiCond25
        CFI EndBlock cfiCond26
        CFI EndBlock cfiPicker27

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine71:
        CFI Block cfiCond28 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_220, ??CrossCallReturnLabel_4
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond29 Using cfiCommon0
        CFI (cfiCond29) NoFunction
        CFI (cfiCond29) Conditional ??CrossCallReturnLabel_220, ??CrossCallReturnLabel_5
        CFI (cfiCond29) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond29) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond29) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond29) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond29) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond29) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond29) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond29) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond29) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond29) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond29) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond29) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond29) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond29) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond29) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond29) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond29) CFA_SP SP+0
        CFI (cfiCond29) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond30 Using cfiCommon0
        CFI (cfiCond30) NoFunction
        CFI (cfiCond30) Conditional ??CrossCallReturnLabel_221, ??CrossCallReturnLabel_211
        CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond30) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond30) CFA_SP SP+0
        CFI (cfiCond30) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond31 Using cfiCommon0
        CFI (cfiCond31) NoFunction
        CFI (cfiCond31) Conditional ??CrossCallReturnLabel_221, ??CrossCallReturnLabel_212
        CFI (cfiCond31) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond31) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond31) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond31) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond31) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond31) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond31) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond31) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond31) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond31) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond31) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond31) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond31) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond31) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond31) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond31) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond31) CFA_SP SP+0
        CFI (cfiCond31) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond32 Using cfiCommon0
        CFI (cfiCond32) NoFunction
        CFI (cfiCond32) Conditional ??CrossCallReturnLabel_221, ??CrossCallReturnLabel_213
        CFI (cfiCond32) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond32) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond32) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond32) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond32) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond32) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond32) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond32) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond32) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond32) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond32) CFA_SP SP+0
        CFI (cfiCond32) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker33 Using cfiCommon1
        CFI (cfiPicker33) NoFunction
        CFI (cfiPicker33) Picker
        INC     DPTR
        CFI EndBlock cfiCond28
        CFI EndBlock cfiCond29
        CFI EndBlock cfiCond30
        CFI EndBlock cfiCond31
        CFI EndBlock cfiCond32
        CFI EndBlock cfiPicker33
        REQUIRE ??Subroutine90_0
        ; // Fall through to label ??Subroutine90_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine90_0:
        CFI Block cfiCond34 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_219, ??CrossCallReturnLabel_28
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond35 Using cfiCommon0
        CFI (cfiCond35) NoFunction
        CFI (cfiCond35) Conditional ??CrossCallReturnLabel_219, ??CrossCallReturnLabel_29
        CFI (cfiCond35) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond35) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond35) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond35) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond35) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond35) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond35) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond35) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond35) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond35) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond35) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond35) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond35) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond35) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond35) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond35) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond35) CFA_SP SP+0
        CFI (cfiCond35) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond36 Using cfiCommon0
        CFI (cfiCond36) NoFunction
        CFI (cfiCond36) Conditional ??CrossCallReturnLabel_219, ??CrossCallReturnLabel_30
        CFI (cfiCond36) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond36) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond36) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond36) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond36) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond36) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond36) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond36) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond36) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond36) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond36) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond36) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond36) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond36) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond36) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond36) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond36) CFA_SP SP+0
        CFI (cfiCond36) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond37 Using cfiCommon0
        CFI (cfiCond37) NoFunction
        CFI (cfiCond37) Conditional ??CrossCallReturnLabel_222, ??CrossCallReturnLabel_214
        CFI (cfiCond37) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond37) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond37) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond37) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond37) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond37) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond37) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond37) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond37) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond37) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond37) CFA_SP SP+0
        CFI (cfiCond37) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond38 Using cfiCommon0
        CFI (cfiCond38) NoFunction
        CFI (cfiCond38) Conditional ??CrossCallReturnLabel_222, ??CrossCallReturnLabel_215
        CFI (cfiCond38) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond38) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond38) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond38) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond38) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond38) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond38) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond38) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond38) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond38) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond38) CFA_SP SP+0
        CFI (cfiCond38) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond39 Using cfiCommon0
        CFI (cfiCond39) NoFunction
        CFI (cfiCond39) Conditional ??CrossCallReturnLabel_222, ??CrossCallReturnLabel_216
        CFI (cfiCond39) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond39) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond39) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond39) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond39) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond39) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond39) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond39) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond39) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond39) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond39) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond39) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond39) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond39) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond39) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond39) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond39) CFA_SP SP+0
        CFI (cfiCond39) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond40 Using cfiCommon0
        CFI (cfiCond40) NoFunction
        CFI (cfiCond40) Conditional ??CrossCallReturnLabel_222, ??CrossCallReturnLabel_217
        CFI (cfiCond40) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond40) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond40) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond40) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond40) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond40) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond40) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond40) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond40) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond40) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond40) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond40) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond40) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond40) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond40) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond40) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond40) CFA_SP SP+0
        CFI (cfiCond40) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond41 Using cfiCommon0
        CFI (cfiCond41) NoFunction
        CFI (cfiCond41) Conditional ??CrossCallReturnLabel_222, ??CrossCallReturnLabel_218
        CFI (cfiCond41) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond41) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond41) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond41) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond41) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond41) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond41) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond41) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond41) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond41) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond41) CFA_SP SP+0
        CFI (cfiCond41) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond42 Using cfiCommon0
        CFI (cfiCond42) NoFunction
        CFI (cfiCond42) Conditional ??CrossCallReturnLabel_220, ??CrossCallReturnLabel_4
        CFI (cfiCond42) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond42) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond42) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond42) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond42) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond42) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond42) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond42) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond42) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond42) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond42) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond42) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond42) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond42) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond42) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond42) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond42) CFA_SP SP+0
        CFI (cfiCond42) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond43 Using cfiCommon0
        CFI (cfiCond43) NoFunction
        CFI (cfiCond43) Conditional ??CrossCallReturnLabel_220, ??CrossCallReturnLabel_5
        CFI (cfiCond43) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond43) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond43) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond43) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond43) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond43) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond43) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond43) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond43) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond43) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond43) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond43) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond43) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond43) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond43) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond43) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond43) CFA_SP SP+0
        CFI (cfiCond43) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond44 Using cfiCommon0
        CFI (cfiCond44) NoFunction
        CFI (cfiCond44) Conditional ??CrossCallReturnLabel_221, ??CrossCallReturnLabel_211
        CFI (cfiCond44) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond44) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond44) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond44) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond44) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond44) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond44) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond44) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond44) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond44) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond44) CFA_SP SP+0
        CFI (cfiCond44) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond45 Using cfiCommon0
        CFI (cfiCond45) NoFunction
        CFI (cfiCond45) Conditional ??CrossCallReturnLabel_221, ??CrossCallReturnLabel_212
        CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond45) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond45) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond45) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond45) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond45) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond45) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond45) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond45) CFA_SP SP+0
        CFI (cfiCond45) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond46 Using cfiCommon0
        CFI (cfiCond46) NoFunction
        CFI (cfiCond46) Conditional ??CrossCallReturnLabel_221, ??CrossCallReturnLabel_213
        CFI (cfiCond46) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond46) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond46) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond46) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond46) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond46) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond46) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond46) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond46) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond46) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond46) CFA_SP SP+0
        CFI (cfiCond46) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker47 Using cfiCommon1
        CFI (cfiPicker47) NoFunction
        CFI (cfiPicker47) Picker
        LCALL   ?Subroutine82 & 0xFFFF
??CrossCallReturnLabel_224:
        RET
        CFI EndBlock cfiCond34
        CFI EndBlock cfiCond35
        CFI EndBlock cfiCond36
        CFI EndBlock cfiCond37
        CFI EndBlock cfiCond38
        CFI EndBlock cfiCond39
        CFI EndBlock cfiCond40
        CFI EndBlock cfiCond41
        CFI EndBlock cfiCond42
        CFI EndBlock cfiCond43
        CFI EndBlock cfiCond44
        CFI EndBlock cfiCond45
        CFI EndBlock cfiCond46
        CFI EndBlock cfiPicker47

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine82:
        CFI Block cfiCond48 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_224, ??CrossCallReturnLabel_220, ??CrossCallReturnLabel_4
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond49 Using cfiCommon0
        CFI (cfiCond49) NoFunction
        CFI (cfiCond49) Conditional ??CrossCallReturnLabel_224, ??CrossCallReturnLabel_220, ??CrossCallReturnLabel_5
        CFI (cfiCond49) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond49) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond49) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond49) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond49) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond49) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond49) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond49) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond49) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond49) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond49) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond49) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond49) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond49) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond49) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond49) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond49) CFA_SP SP+0
        CFI (cfiCond49) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond50 Using cfiCommon0
        CFI (cfiCond50) NoFunction
        CFI (cfiCond50) Conditional ??CrossCallReturnLabel_224, ??CrossCallReturnLabel_221, ??CrossCallReturnLabel_211
        CFI (cfiCond50) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond50) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond50) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond50) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond50) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond50) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond50) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond50) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond50) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond50) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond50) CFA_SP SP+0
        CFI (cfiCond50) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond51 Using cfiCommon0
        CFI (cfiCond51) NoFunction
        CFI (cfiCond51) Conditional ??CrossCallReturnLabel_224, ??CrossCallReturnLabel_221, ??CrossCallReturnLabel_212
        CFI (cfiCond51) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond51) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond51) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond51) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond51) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond51) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond51) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond51) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond51) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond51) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond51) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond51) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond51) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond51) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond51) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond51) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond51) CFA_SP SP+0
        CFI (cfiCond51) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond52 Using cfiCommon0
        CFI (cfiCond52) NoFunction
        CFI (cfiCond52) Conditional ??CrossCallReturnLabel_224, ??CrossCallReturnLabel_221, ??CrossCallReturnLabel_213
        CFI (cfiCond52) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond52) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond52) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond52) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond52) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond52) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond52) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond52) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond52) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond52) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond52) CFA_SP SP+0
        CFI (cfiCond52) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond53 Using cfiCommon0
        CFI (cfiCond53) NoFunction
        CFI (cfiCond53) Conditional ??CrossCallReturnLabel_224, ??CrossCallReturnLabel_219, ??CrossCallReturnLabel_28
        CFI (cfiCond53) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond53) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond53) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond53) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond53) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond53) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond53) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond53) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond53) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond53) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond53) CFA_SP SP+0
        CFI (cfiCond53) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond54 Using cfiCommon0
        CFI (cfiCond54) NoFunction
        CFI (cfiCond54) Conditional ??CrossCallReturnLabel_224, ??CrossCallReturnLabel_219, ??CrossCallReturnLabel_29
        CFI (cfiCond54) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond54) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond54) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond54) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond54) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond54) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond54) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond54) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond54) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond54) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond54) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond54) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond54) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond54) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond54) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond54) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond54) CFA_SP SP+0
        CFI (cfiCond54) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond55 Using cfiCommon0
        CFI (cfiCond55) NoFunction
        CFI (cfiCond55) Conditional ??CrossCallReturnLabel_224, ??CrossCallReturnLabel_219, ??CrossCallReturnLabel_30
        CFI (cfiCond55) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond55) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond55) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond55) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond55) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond55) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond55) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond55) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond55) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond55) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond55) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond55) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond55) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond55) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond55) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond55) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond55) CFA_SP SP+0
        CFI (cfiCond55) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond56 Using cfiCommon0
        CFI (cfiCond56) NoFunction
        CFI (cfiCond56) Conditional ??CrossCallReturnLabel_224, ??CrossCallReturnLabel_222, ??CrossCallReturnLabel_214
        CFI (cfiCond56) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond56) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond56) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond56) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond56) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond56) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond56) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond56) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond56) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond56) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond56) CFA_SP SP+0
        CFI (cfiCond56) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond57 Using cfiCommon0
        CFI (cfiCond57) NoFunction
        CFI (cfiCond57) Conditional ??CrossCallReturnLabel_224, ??CrossCallReturnLabel_222, ??CrossCallReturnLabel_215
        CFI (cfiCond57) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond57) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond57) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond57) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond57) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond57) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond57) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond57) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond57) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond57) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond57) CFA_SP SP+0
        CFI (cfiCond57) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond58 Using cfiCommon0
        CFI (cfiCond58) NoFunction
        CFI (cfiCond58) Conditional ??CrossCallReturnLabel_224, ??CrossCallReturnLabel_222, ??CrossCallReturnLabel_216
        CFI (cfiCond58) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond58) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond58) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond58) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond58) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond58) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond58) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond58) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond58) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond58) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond58) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond58) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond58) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond58) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond58) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond58) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond58) CFA_SP SP+0
        CFI (cfiCond58) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond59 Using cfiCommon0
        CFI (cfiCond59) NoFunction
        CFI (cfiCond59) Conditional ??CrossCallReturnLabel_224, ??CrossCallReturnLabel_222, ??CrossCallReturnLabel_217
        CFI (cfiCond59) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond59) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond59) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond59) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond59) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond59) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond59) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond59) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond59) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond59) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond59) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond59) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond59) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond59) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond59) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond59) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond59) CFA_SP SP+0
        CFI (cfiCond59) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond60 Using cfiCommon0
        CFI (cfiCond60) NoFunction
        CFI (cfiCond60) Conditional ??CrossCallReturnLabel_224, ??CrossCallReturnLabel_222, ??CrossCallReturnLabel_218
        CFI (cfiCond60) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond60) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond60) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond60) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond60) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond60) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond60) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond60) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond60) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond60) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond60) CFA_SP SP+0
        CFI (cfiCond60) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond61 Using cfiCommon0
        CFI (cfiCond61) NoFunction
        CFI (cfiCond61) Conditional ??CrossCallReturnLabel_223, ??CrossCallReturnLabel_126, ??CrossCallReturnLabel_123
        CFI (cfiCond61) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond61) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond61) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond61) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond61) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond61) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond61) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond61) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond61) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond61) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond61) CFA_SP SP+0
        CFI (cfiCond61) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond62 Using cfiCommon0
        CFI (cfiCond62) NoFunction
        CFI (cfiCond62) Conditional ??CrossCallReturnLabel_223, ??CrossCallReturnLabel_126, ??CrossCallReturnLabel_124
        CFI (cfiCond62) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond62) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond62) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond62) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond62) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond62) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond62) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond62) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond62) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond62) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond62) CFA_SP SP+0
        CFI (cfiCond62) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond63 Using cfiCommon0
        CFI (cfiCond63) NoFunction
        CFI (cfiCond63) Conditional ??CrossCallReturnLabel_223, ??CrossCallReturnLabel_126, ??CrossCallReturnLabel_125
        CFI (cfiCond63) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond63) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond63) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond63) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond63) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond63) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond63) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond63) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond63) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond63) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond63) CFA_SP SP+0
        CFI (cfiCond63) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond64 Using cfiCommon0
        CFI (cfiCond64) NoFunction
        CFI (cfiCond64) Conditional ??CrossCallReturnLabel_223, ??CrossCallReturnLabel_127, ??CrossCallReturnLabel_26
        CFI (cfiCond64) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond64) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond64) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond64) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond64) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond64) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond64) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond64) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond64) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond64) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond64) CFA_SP SP+0
        CFI (cfiCond64) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond65 Using cfiCommon0
        CFI (cfiCond65) NoFunction
        CFI (cfiCond65) Conditional ??CrossCallReturnLabel_223, ??CrossCallReturnLabel_127, ??CrossCallReturnLabel_27
        CFI (cfiCond65) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond65) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond65) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond65) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond65) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond65) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond65) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond65) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond65) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond65) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond65) CFA_SP SP+0
        CFI (cfiCond65) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker66 Using cfiCommon1
        CFI (cfiPicker66) NoFunction
        CFI (cfiPicker66) Picker
        LCALL   ?Subroutine85 & 0xFFFF
??CrossCallReturnLabel_227:
        INC     R0
        MOV     R1,DPH
        RET
        CFI EndBlock cfiCond48
        CFI EndBlock cfiCond49
        CFI EndBlock cfiCond50
        CFI EndBlock cfiCond51
        CFI EndBlock cfiCond52
        CFI EndBlock cfiCond53
        CFI EndBlock cfiCond54
        CFI EndBlock cfiCond55
        CFI EndBlock cfiCond56
        CFI EndBlock cfiCond57
        CFI EndBlock cfiCond58
        CFI EndBlock cfiCond59
        CFI EndBlock cfiCond60
        CFI EndBlock cfiCond61
        CFI EndBlock cfiCond62
        CFI EndBlock cfiCond63
        CFI EndBlock cfiCond64
        CFI EndBlock cfiCond65
        CFI EndBlock cfiPicker66
//  433 
//  434 /*********************************************************************
//  435  * @fn          ZDP_SimpleDescReq
//  436  *
//  437  * @brief       This builds and send a NWK_Simple_Desc_req
//  438  *              message.  This function sends unicast message to the
//  439  *              destination device.
//  440  *
//  441  * @param       dstAddr - destination address
//  442  * @param       nwkAddr - 16 bit address
//  443  * @param       epIntf - endpoint/interface
//  444  * @param       SecurityEnable - Security Options
//  445  *
//  446  * @return      afStatus_t
//  447  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  448 afStatus_t ZDP_SimpleDescReq( zAddrType_t *dstAddr, uint16 nwkAddr,
ZDP_SimpleDescReq:
        CFI Block cfiBlock67 Using cfiCommon0
        CFI Function ZDP_SimpleDescReq
        CODE
//  449                                     byte endPoint, byte SecurityEnable )
//  450 
//  451 {
        FUNCALL ZDP_SimpleDescReq, fillAndSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  452   (void)SecurityEnable;  // Intentionally unreferenced parameter
//  453   
//  454   ZDP_TmpBuf[0] = LO_UINT16( nwkAddr );
        LCALL   ?Subroutine14 & 0xFFFF
//  455   ZDP_TmpBuf[1] = HI_UINT16( nwkAddr );
//  456   ZDP_TmpBuf[2] = endPoint;
??CrossCallReturnLabel_9:
        LCALL   ?Subroutine29 & 0xFFFF
//  457 
//  458   return fillAndSend( &ZDP_TransID, dstAddr, Simple_Desc_req, 3 );
??CrossCallReturnLabel_46:
        ; Setup parameters for call to function fillAndSend
        MOV     ?V0 + 0,#0x4
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     R1,#0x3
        LJMP    ??Subroutine87_0 & 0xFFFF
        CFI EndBlock cfiBlock67
//  459 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine14:
        CFI Block cfiCond68 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_8
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond69 Using cfiCommon0
        CFI (cfiCond69) NoFunction
        CFI (cfiCond69) Conditional ??CrossCallReturnLabel_9
        CFI (cfiCond69) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond69) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond69) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond69) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond69) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond69) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond69) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond69) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond69) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond69) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond69) CFA_SP SP+0
        CFI (cfiCond69) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker70 Using cfiCommon1
        CFI (cfiPicker70) NoFunction
        CFI (cfiPicker70) Picker
        MOV     DPTR,#ZDP_TmpBuf
        LCALL   ?Subroutine77 & 0xFFFF
??CrossCallReturnLabel_152:
        MOV     A,R4
        MOVX    @DPTR,A
        LCALL   ?Subroutine72 & 0xFFFF
??CrossCallReturnLabel_116:
        MOV     A,R5
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond68
        CFI EndBlock cfiCond69
        CFI EndBlock cfiPicker70
//  460 
//  461 /*********************************************************************
//  462  * @fn          ZDP_UserDescSet
//  463  *
//  464  * @brief       This builds and send a User_Desc_set message to set
//  465  *              the user descriptor.  This function sends unicast
//  466  *              message to the destination device.
//  467  *
//  468  * @param       dstAddr - destination address
//  469  * @param       nwkAddr - 16 bit address
//  470  * @param       UserDescriptor - user descriptor
//  471  * @param       SecurityEnable - Security Options
//  472  *
//  473  * @return      afStatus_t
//  474  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  475 afStatus_t ZDP_UserDescSet( zAddrType_t *dstAddr, uint16 nwkAddr,
ZDP_UserDescSet:
        CFI Block cfiBlock71 Using cfiCommon0
        CFI Function ZDP_UserDescSet
        CODE
//  476                           UserDescriptorFormat_t *UserDescriptor,
//  477                           byte SecurityEnable )
//  478 {
        FUNCALL ZDP_UserDescSet, osal_memcpy
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 1, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_UserDescSet, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_UserDescSet, fillAndSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xf
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 17)
        LCALL   ?Subroutine60 & 0xFFFF
??CrossCallReturnLabel_209:
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine124_0 & 0xFFFF
??CrossCallReturnLabel_295:
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
//  479   uint8 *pBuf = ZDP_TmpBuf;
        MOV     DPTR,#ZDP_TmpBuf
        LCALL   ??Subroutine98_0 & 0xFFFF
//  480   byte len = (UserDescriptor->len < AF_MAX_USER_DESCRIPTOR_LEN) ?
//  481               UserDescriptor->len : AF_MAX_USER_DESCRIPTOR_LEN;
??CrossCallReturnLabel_156:
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R0,A
        CLR     C
        SUBB    A,#0x10
        JNC     ??ZDP_UserDescSet_0
        MOV     ?V0 + 2,R0
        SJMP    ??ZDP_UserDescSet_1
??ZDP_UserDescSet_0:
        MOV     ?V0 + 2,#0x10
//  482   byte addrLen = 2;
//  483 
//  484   (void)SecurityEnable;  // Intentionally unreferenced parameter
//  485   
//  486   *pBuf++ = LO_UINT16( nwkAddr );
??ZDP_UserDescSet_1:
        MOV     A,R4
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    @DPTR,A
        INC     DPTR
//  487   *pBuf++ = HI_UINT16( nwkAddr );
        MOV     A,R5
        LCALL   ?Subroutine58 & 0xFFFF
//  488 
//  489   *pBuf++ = len;
??CrossCallReturnLabel_92:
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
//  490   addrLen = 3;
//  491 
//  492   pBuf = osal_memcpy( pBuf, UserDescriptor->desc, len );
//  493   osal_memset( pBuf, AF_USER_DESCRIPTOR_FILL, AF_MAX_USER_DESCRIPTOR_LEN-len );
        ; Setup parameters for call to function osal_memset
        MOV     ?V0 + 4,A
        MOV     A,#0x10
        CLR     C
        SUBB    A,?V0 + 4
        MOV     R4,A
        SUBB    A,0xE0 /* A   */
        MOV     R5,A
        MOV     R1,#0x20
        MOV     A,R1
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
        ; Setup parameters for call to function osal_memcpy
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        MOV     R1,DPL
        MOV     R2,DPH
        MOV     ?V0 + 4,R1
        MOV     ?V0 + 5,R2
        MOV     ?V0 + 6,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     ?V0 + 4,?V0 + 2
        MOV     R4,?V0 + 4
        MOV     R5,#0x0
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??Subroutine119_0 & 0xFFFF
??CrossCallReturnLabel_265:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 17)
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        POP     A
        CFI CFA_SP SP+0
        MOV     R1,A
        LCALL   ??osal_memset?relay
//  494 
//  495   return fillAndSend( &ZDP_TransID, dstAddr, User_Desc_set, (AF_MAX_USER_DESCRIPTOR_LEN + addrLen) );
        ; Setup parameters for call to function fillAndSend
        MOV     ?V0 + 0,#0x14
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     R1,#0x13
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_0:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 17)
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 15)
        MOV     R7,#0x7
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock71
//  496 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine58:
        CFI Block cfiCond72 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_91
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond73 Using cfiCommon0
        CFI (cfiCond73) NoFunction
        CFI (cfiCond73) Conditional ??CrossCallReturnLabel_92
        CFI (cfiCond73) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond73) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond73) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond73) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond73) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond73) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond73) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond73) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond73) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond73) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond73) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond73) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond73) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond73) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond73) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond73) CFA_SP SP+0
        CFI (cfiCond73) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond74 Using cfiCommon0
        CFI (cfiCond74) NoFunction
        CFI (cfiCond74) Conditional ??CrossCallReturnLabel_93
        CFI (cfiCond74) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond74) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond74) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond74) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond74) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond74) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond74) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond74) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond74) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond74) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond74) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond74) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond74) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond74) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond74) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond74) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond74) CFA_SP SP+0
        CFI (cfiCond74) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiPicker75 Using cfiCommon1
        CFI (cfiPicker75) NoFunction
        CFI (cfiPicker75) Picker
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 2
        MOVX    @DPTR,A
        INC     DPTR
        RET
        CFI EndBlock cfiCond72
        CFI EndBlock cfiCond73
        CFI EndBlock cfiCond74
        CFI EndBlock cfiPicker75
//  497 
//  498 /*********************************************************************
//  499  * @fn          ZDP_ServerDiscReq
//  500  *
//  501  * @brief       Build and send a Server_Discovery_req request message.
//  502  *
//  503  * @param       serverMask - 16-bit bit-mask of server services being sought.
//  504  * @param       SecurityEnable - Security Options
//  505  *
//  506  * @return      afStatus_t
//  507  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  508 afStatus_t ZDP_ServerDiscReq( uint16 serverMask, byte SecurityEnable )
ZDP_ServerDiscReq:
        CFI Block cfiBlock76 Using cfiCommon0
        CFI Function ZDP_ServerDiscReq
        CODE
//  509 {
        FUNCALL ZDP_ServerDiscReq, fillAndSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 9
        MOV     A,#-0x9
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     A,R1
        LCALL   ?Subroutine37 & 0xFFFF
//  510   uint8 *pBuf = ZDP_TmpBuf;
//  511   zAddrType_t dstAddr;
//  512 
//  513   dstAddr.addrMode = AddrBroadcast;
??CrossCallReturnLabel_293:
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine53 & 0xFFFF
//  514   dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
//  515 
//  516   *pBuf++ = LO_UINT16( serverMask );
??CrossCallReturnLabel_80:
        MOV     A,R2
        MOV     DPL,R0
        MOV     DPH,R1
        LCALL   ??Subroutine109_0 & 0xFFFF
//  517   *pBuf = HI_UINT16( serverMask );
//  518 
//  519   FillAndSendTxOptions( &ZDP_TransID, &dstAddr, Server_Discovery_req, 2,
//  520              ((SecurityEnable) ? AF_EN_SECURITY : AF_TX_OPTIONS_NONE) );
??CrossCallReturnLabel_202:
        MOV     A,R6
        MOV     DPTR,#ZDP_TxOptions
        JZ      ??ZDP_ServerDiscReq_0
        MOV     A,#0x40
        SJMP    ??ZDP_ServerDiscReq_1
??ZDP_ServerDiscReq_0:
        CLR     A
??ZDP_ServerDiscReq_1:
        MOVX    @DPTR,A
        ; Setup parameters for call to function fillAndSend
        MOV     ?V0 + 0,#0x15
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 21)
        MOV     R1,#0x2
        MOV     A,R1
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,#ZDP_TransID & 0xff
        MOV     R3,#(ZDP_TransID >> 8) & 0xff
        LCALL   ??Subroutine96_0 & 0xFFFF
??CrossCallReturnLabel_143:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     DPTR,#ZDP_TxOptions
        CLR     A
        MOVX    @DPTR,A
        LJMP    ??Subroutine86_0 & 0xFFFF
        CFI EndBlock cfiBlock76
//  521 }
//  522 
//  523 /*********************************************************************
//  524  * @fn          ZDP_DeviceAnnce
//  525  *
//  526  * @brief       This builds and send a Device_Annce message.  This
//  527  *              function sends a broadcast message.
//  528  *
//  529  * @param       nwkAddr - 16 bit address of the device
//  530  * @param       IEEEAddr - 64 bit address of the device
//  531  * @param       capabilities - device capabilities.  This field is only
//  532  *                 sent for v1.1 networks.
//  533  * @param       SecurityEnable - Security Options
//  534  *
//  535  * @return      afStatus_t
//  536  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  537 afStatus_t ZDP_DeviceAnnce( uint16 nwkAddr, uint8 *IEEEAddr,
ZDP_DeviceAnnce:
        CFI Block cfiBlock77 Using cfiCommon0
        CFI Function ZDP_DeviceAnnce
        CODE
//  538                               byte capabilities, byte SecurityEnable )
//  539 {
        FUNCALL ZDP_DeviceAnnce, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_DeviceAnnce, fillAndSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 9
        MOV     A,#-0x9
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     A,R1
        MOV     R6,A
//  540   zAddrType_t dstAddr;
//  541   uint8 len;
//  542 
//  543   (void)SecurityEnable;  // Intentionally unreferenced parameter
//  544   
//  545   dstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine53 & 0xFFFF
//  546   dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
//  547 
//  548   ZDP_TmpBuf[0] = LO_UINT16( nwkAddr );
??CrossCallReturnLabel_81:
        LCALL   ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_149:
        MOV     A,R2
        LCALL   ?Subroutine30 & 0xFFFF
//  549   ZDP_TmpBuf[1] = HI_UINT16( nwkAddr );
??CrossCallReturnLabel_113:
        MOV     A,R3
        MOVX    @DPTR,A
//  550   osal_cpyExtAddr( &ZDP_TmpBuf[2], IEEEAddr );
        ; Setup parameters for call to function sAddrExtCpy
        MOV     DPTR,#ZDP_TmpBuf
        MOVX    A,@DPTR
        ADD     A,#0x2
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        LCALL   ?Subroutine24 & 0xFFFF
//  551   len = 2 + Z_EXTADDR_LEN;
//  552 
//  553   ZDP_TmpBuf[10] = capabilities;
??CrossCallReturnLabel_33:
        INC     DPTR
        INC     DPTR
        MOV     A,R6
        MOVX    @DPTR,A
//  554   len++;
//  555 
//  556   return fillAndSend( &ZDP_TransID, &dstAddr, Device_annce, len );
        ; Setup parameters for call to function fillAndSend
        MOV     ?V0 + 0,#0x13
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 21)
        MOV     R1,#0xb
        LJMP    ?Subroutine4 & 0xFFFF
        CFI EndBlock cfiBlock77
//  557 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine53:
        CFI Block cfiCond78 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_80
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond79 Using cfiCommon0
        CFI (cfiCond79) NoFunction
        CFI (cfiCond79) Conditional ??CrossCallReturnLabel_81
        CFI (cfiCond79) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond79) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond79) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond79) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond79) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond79) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond79) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond79) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond79) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond79) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond79) CFA_SP SP+0
        CFI (cfiCond79) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiPicker80 Using cfiCommon1
        CFI (cfiPicker80) NoFunction
        CFI (cfiPicker80) Picker
        MOV     A,#0xf
        MOVX    @DPTR,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#-0x3
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#-0x1
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond78
        CFI EndBlock cfiCond79
        CFI EndBlock cfiPicker80

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine30:
        CFI Block cfiCond81 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_113
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond82 Using cfiCommon0
        CFI (cfiCond82) NoFunction
        CFI (cfiCond82) Conditional ??CrossCallReturnLabel_114
        CFI (cfiCond82) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond82) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond82) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond82) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond82) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond82) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond82) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond82) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond82) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond82) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond82) CFA_SP SP+0
        CFI (cfiCond82) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker83 Using cfiCommon1
        CFI (cfiPicker83) NoFunction
        CFI (cfiPicker83) Picker
        MOVX    @DPTR,A
        CFI EndBlock cfiCond81
        CFI EndBlock cfiCond82
        CFI EndBlock cfiPicker83
        REQUIRE ??Subroutine91_0
        ; // Fall through to label ??Subroutine91_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine91_0:
        CFI Block cfiCond84 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_115
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond85 Using cfiCommon0
        CFI (cfiCond85) NoFunction
        CFI (cfiCond85) Conditional ??CrossCallReturnLabel_113
        CFI (cfiCond85) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond85) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond85) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond85) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond85) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond85) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond85) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond85) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond85) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond85) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond85) CFA_SP SP+0
        CFI (cfiCond85) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond86 Using cfiCommon0
        CFI (cfiCond86) NoFunction
        CFI (cfiCond86) Conditional ??CrossCallReturnLabel_114
        CFI (cfiCond86) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond86) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond86) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond86) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond86) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond86) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond86) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond86) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond86) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond86) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond86) CFA_SP SP+0
        CFI (cfiCond86) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker87 Using cfiCommon1
        CFI (cfiPicker87) NoFunction
        CFI (cfiPicker87) Picker
        LCALL   ?Subroutine72 & 0xFFFF
??CrossCallReturnLabel_119:
        RET
        CFI EndBlock cfiCond84
        CFI EndBlock cfiCond85
        CFI EndBlock cfiCond86
        CFI EndBlock cfiPicker87

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine72:
        CFI Block cfiCond88 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_116, ??CrossCallReturnLabel_8
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond89 Using cfiCommon0
        CFI (cfiCond89) NoFunction
        CFI (cfiCond89) Conditional ??CrossCallReturnLabel_116, ??CrossCallReturnLabel_9
        CFI (cfiCond89) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond89) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond89) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond89) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond89) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond89) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond89) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond89) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond89) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond89) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond89) CFA_SP SP+0
        CFI (cfiCond89) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond90 Using cfiCommon0
        CFI (cfiCond90) NoFunction
        CFI (cfiCond90) Conditional ??CrossCallReturnLabel_119, ??CrossCallReturnLabel_113
        CFI (cfiCond90) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond90) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond90) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond90) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond90) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond90) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond90) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond90) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond90) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond90) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond90) CFA_SP SP+0
        CFI (cfiCond90) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond91 Using cfiCommon0
        CFI (cfiCond91) NoFunction
        CFI (cfiCond91) Conditional ??CrossCallReturnLabel_119, ??CrossCallReturnLabel_114
        CFI (cfiCond91) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond91) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond91) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond91) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond91) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond91) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond91) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond91) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond91) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond91) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond91) CFA_SP SP+0
        CFI (cfiCond91) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond92 Using cfiCommon0
        CFI (cfiCond92) NoFunction
        CFI (cfiCond92) Conditional ??CrossCallReturnLabel_119, ??CrossCallReturnLabel_115
        CFI (cfiCond92) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond92) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond92) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond92) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond92) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond92) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond92) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond92) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond92) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond92) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond92) CFA_SP SP+0
        CFI (cfiCond92) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond93 Using cfiCommon0
        CFI (cfiCond93) NoFunction
        CFI (cfiCond93) Conditional ??CrossCallReturnLabel_118, ??CrossCallReturnLabel_46
        CFI (cfiCond93) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond93) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond93) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond93) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond93) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond93) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond93) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond93) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond93) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond93) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond93) CFA_SP SP+0
        CFI (cfiCond93) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond94 Using cfiCommon0
        CFI (cfiCond94) NoFunction
        CFI (cfiCond94) Conditional ??CrossCallReturnLabel_118, ??CrossCallReturnLabel_47
        CFI (cfiCond94) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond94) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond94) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond94) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond94) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond94) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond94) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond94) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond94) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond94) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond94) CFA_SP SP+0
        CFI (cfiCond94) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond95 Using cfiCommon0
        CFI (cfiCond95) NoFunction
        CFI (cfiCond95) Conditional ??CrossCallReturnLabel_117, ??CrossCallReturnLabel_33
        CFI (cfiCond95) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond95) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond95) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond95) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond95) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond95) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond95) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond95) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond95) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond95) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond95) CFA_SP SP+0
        CFI (cfiCond95) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond96 Using cfiCommon0
        CFI (cfiCond96) NoFunction
        CFI (cfiCond96) Conditional ??CrossCallReturnLabel_117, ??CrossCallReturnLabel_34
        CFI (cfiCond96) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond96) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond96) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond96) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond96) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond96) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond96) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond96) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond96) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond96) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond96) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond96) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond96) CFA_SP SP+0
        CFI (cfiCond96) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker97 Using cfiCommon1
        CFI (cfiPicker97) NoFunction
        CFI (cfiPicker97) Picker
        MOV     DPTR,#ZDP_TmpBuf
        LCALL   ?Subroutine84 & 0xFFFF
??CrossCallReturnLabel_154:
        INC     DPTR
        RET
        CFI EndBlock cfiCond88
        CFI EndBlock cfiCond89
        CFI EndBlock cfiCond90
        CFI EndBlock cfiCond91
        CFI EndBlock cfiCond92
        CFI EndBlock cfiCond93
        CFI EndBlock cfiCond94
        CFI EndBlock cfiCond95
        CFI EndBlock cfiCond96
        CFI EndBlock cfiPicker97
//  558 
//  559 /*********************************************************************
//  560  * Address Responses
//  561  */
//  562 
//  563 /*********************************************************************
//  564  * @fn      zdpProcessAddrReq
//  565  *
//  566  * @brief   Process an incoming NWK_addr_req or IEEE_addr_req message and then
//  567  *          build and send a corresponding NWK_addr_rsp or IEEE_addr_rsp msg.
//  568  *
//  569  * @param   inMsg - incoming message
//  570  *
//  571  * @return  none
//  572  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  573 void zdpProcessAddrReq( zdoIncomingMsg_t *inMsg )
zdpProcessAddrReq:
        CFI Block cfiBlock98 Using cfiCommon0
        CFI Function zdpProcessAddrReq
        CODE
//  574 {
        FUNCALL zdpProcessAddrReq, sAddrExtCmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zdpProcessAddrReq, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zdpProcessAddrReq, fillAndSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
//  575   associated_devices_t *pAssoc;
//  576   uint8 reqType;
//  577   uint16 aoi = INVALID_NODE_ADDR;
//  578   uint8 *ieee = NULL;
        MOV     ?V0 + 0,#0x0
        MOV     ?V0 + 1,#0x0
//  579 
//  580   reqType = inMsg->asdu[(inMsg->clusterID == NWK_addr_req) ? Z_EXTADDR_LEN : sizeof( uint16 ) ];
        MOV     A,R2
        ADD     A,#0xc
        MOV     ?V0 + 6,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     ?V0 + 7,A
        MOV     DPL,?V0 + 6
        MOV     DPH,A
        LCALL   ??Subroutine120_0 & 0xFFFF
??CrossCallReturnLabel_266:
        MOV     A,R2
        ORL     A,R3
        JNZ     ??zdpProcessAddrReq_0
        MOV     R4,#0x8
        SJMP    ??zdpProcessAddrReq_1
??zdpProcessAddrReq_0:
        MOV     R4,#0x2
??zdpProcessAddrReq_1:
        MOV     A,?V0 + 4
        ADD     A,#0x13
        MOV     DPL,A
        MOV     A,?V0 + 5
        LCALL   ??Subroutine121_0 & 0xFFFF
??CrossCallReturnLabel_276:
        LCALL   ??Subroutine124_0 & 0xFFFF
??CrossCallReturnLabel_296:
        MOV     A,R0
        ADD     A,R4
        MOV     DPL,A
        MOV     A,R1
        LCALL   ??Subroutine103_0 & 0xFFFF
??CrossCallReturnLabel_168:
        MOV     ?V0 + 2,A
//  581 
//  582   if ( inMsg->clusterID == NWK_addr_req )
        MOV     A,R2
        ORL     A,R3
        JNZ     ??zdpProcessAddrReq_2
//  583 
//  584   {
//  585     ieee = inMsg->asdu;
        MOV     ?V0 + 0,R0
        MOV     ?V0 + 1,R1
//  586 
//  587     if ( osal_ExtAddrEqual( saveExtAddr, ieee ) )
        ; Setup parameters for call to function sAddrExtCmp
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     R2,#saveExtAddr & 0xff
        MOV     R3,#(saveExtAddr >> 8) & 0xff
        LCALL   ??sAddrExtCmp?relay
        MOV     A,R1
        JNZ     $+5
        LJMP    ??zdpProcessAddrReq_3 & 0xFFFF
//  588     {
//  589       aoi = ZDAppNwkAddr.addr.shortAddr;
        MOV     DPTR,#ZDAppNwkAddr
        LCALL   ?Subroutine17 & 0xFFFF
//  590     }
//  591     // Handle response for sleeping end devices
//  592     else if ( (ZSTACK_ROUTER_BUILD)
//  593       && (((pAssoc = AssocGetWithExt( ieee )) != NULL)
//  594              && (pAssoc->nodeRelation == CHILD_RFD)) )
//  595     {
//  596       aoi = pAssoc->shortAddr;
//  597       if ( reqType != ZDP_ADDR_REQTYPE_SINGLE )
//  598         reqType = 0xFF; // Force Invalid
//  599     }
//  600   }
??CrossCallReturnLabel_14:
        SJMP    ??zdpProcessAddrReq_4
//  601   else  // if ( inMsg->clusterID == IEEE_addr_req )
//  602   {
//  603     aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
??zdpProcessAddrReq_2:
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R2
        ADD     A,#0x0
        MOV     R6,A
        CLR     A
        ADDC    A,R1
        MOV     R7,A
//  604 
//  605     if ( aoi == ZDAppNwkAddr.addr.shortAddr )
        MOV     DPTR,#ZDAppNwkAddr
        MOVX    A,@DPTR
        XRL     A,R6
        JNZ     ??zdpProcessAddrReq_5
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R7
??zdpProcessAddrReq_5:
        JNZ     ??zdpProcessAddrReq_4
//  606     {
//  607       ieee = saveExtAddr;
        MOV     ?V0 + 0,#saveExtAddr & 0xff
        MOV     ?V0 + 1,#(saveExtAddr >> 8) & 0xff
//  608     }
//  609     else if ( (ZSTACK_ROUTER_BUILD)
//  610       && (((pAssoc = AssocGetWithShort( aoi )) != NULL)
//  611              && (pAssoc->nodeRelation == CHILD_RFD)) )
//  612     {
//  613       AddrMgrEntry_t addrEntry;
//  614       addrEntry.user = ADDRMGR_USER_DEFAULT;
//  615       addrEntry.index = pAssoc->addrIdx;
//  616       if ( AddrMgrEntryGet( &addrEntry ) )
//  617       {
//  618         ieee = addrEntry.extAddr;
//  619       }
//  620 
//  621       if ( reqType != ZDP_ADDR_REQTYPE_SINGLE )
//  622         reqType = 0xFF; // Force Invalid
//  623     }
//  624   }
//  625 
//  626   if ( (aoi != INVALID_NODE_ADDR) && (ieee != NULL) )
??zdpProcessAddrReq_4:
        MOV     A,#-0x2
        XRL     A,R6
        JNZ     ??zdpProcessAddrReq_6
        MOV     A,#-0x1
        XRL     A,R7
??zdpProcessAddrReq_6:
        JZ      ??zdpProcessAddrReq_3
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JZ      ??zdpProcessAddrReq_3
//  627   {
//  628     uint8 *pBuf = ZDP_TmpBuf;
        LCALL   ?Subroutine44 & 0xFFFF
//  629     // Status + IEEE-Addr + Nwk-Addr.
//  630     byte len = 1 + Z_EXTADDR_LEN + 2;
//  631 
//  632     byte stat = ((reqType == ZDP_ADDR_REQTYPE_SINGLE) ||
//  633               (reqType == ZDP_ADDR_REQTYPE_EXTENDED) ||
//  634           ((reqType == ZDP_ADDR_REQTYPE_MEMBERSHIP) && (inMsg->clusterID == NWK_addr_req)) ) ?
//  635       ZDP_SUCCESS : ZDP_INVALID_REQTYPE;
??CrossCallReturnLabel_272:
        MOV     A,?V0 + 2
        JZ      ??zdpProcessAddrReq_7
        MOV     A,#0x1
        XRL     A,?V0 + 2
        JZ      ??zdpProcessAddrReq_7
        MOV     A,#0x2
        XRL     A,?V0 + 2
        JNZ     ??zdpProcessAddrReq_8
        MOV     DPL,?V0 + 6
        MOV     DPH,?V0 + 7
        LCALL   ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_41:
        JNZ     ??zdpProcessAddrReq_8
??zdpProcessAddrReq_7:
        CLR     A
        SJMP    ??zdpProcessAddrReq_9
??zdpProcessAddrReq_8:
        MOV     A,#-0x80
//  636 
//  637     *pBuf++ = stat;
??zdpProcessAddrReq_9:
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ??Subroutine114_0 & 0xFFFF
//  638 
//  639     pBuf = osal_cpyExtAddr( pBuf, ieee );
??CrossCallReturnLabel_230:
        ; Setup parameters for call to function sAddrExtCpy
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        LCALL   ??sAddrExtCpy?relay
//  640 
//  641     *pBuf++ = LO_UINT16( aoi );
        MOV     A,R6
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    @DPTR,A
        INC     DPTR
//  642     *pBuf++ = HI_UINT16( aoi );
        MOV     A,R7
        MOVX    @DPTR,A
//  643 
//  644     if ( ZSTACK_ROUTER_BUILD )
//  645     {
//  646       if ( (reqType == ZDP_ADDR_REQTYPE_EXTENDED) &&
//  647            (aoi == ZDAppNwkAddr.addr.shortAddr) )
//  648       {
//  649         byte cnt = 0;
//  650         uint16 *list = AssocMakeList( &cnt );
//  651 
//  652         if ( list != NULL )
//  653         {
//  654           byte idx = inMsg->asdu[(((inMsg->clusterID == NWK_addr_req) ? Z_EXTADDR_LEN : sizeof( uint16 )) + 1)];
//  655           uint16 *pList = list + idx;
//  656 
//  657           // NumAssocDev field is only present on success.
//  658           if ( cnt > idx )
//  659           {
//  660             cnt -= idx;
//  661             len += (cnt * sizeof( uint16 ));
//  662           }
//  663           else
//  664           {
//  665             cnt = 0;
//  666           }
//  667           *pBuf++ = cnt;
//  668           len++;
//  669 
//  670           // StartIndex field is only present if NumAssocDev field is non-zero.
//  671           *pBuf++ = idx;
//  672           len++;
//  673 
//  674           while ( cnt != 0 )
//  675           {
//  676             *pBuf++ = LO_UINT16( *pList );
//  677             *pBuf++ = HI_UINT16( *pList );
//  678             pList++;
//  679             cnt--;
//  680           }
//  681 
//  682           osal_mem_free( (uint8 *)list );
//  683         }
//  684         else
//  685         {
//  686           // NumAssocDev field is only present on success.
//  687           *pBuf++ = 0;
//  688           len++;
//  689         }
//  690       }
//  691     }
//  692 
//  693     ZDP_TxOptions = AF_MSG_ACK_REQUEST;
        MOV     DPTR,#ZDP_TxOptions
        MOV     A,#0x10
        MOVX    @DPTR,A
//  694     fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), (cId_t)(inMsg->clusterID | ZDO_RESPONSE_BIT), len );
        ; Setup parameters for call to function fillAndSend
        MOV     DPL,?V0 + 6
        MOV     DPH,?V0 + 7
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        ORL     A,#0x80
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 18)
        MOV     R1,#0xb
        MOV     A,?V0 + 4
        ADD     A,#0x2
        MOV     R4,A
        MOV     A,?V0 + 5
        ADDC    A,#0x0
        MOV     R5,A
        MOV     A,?V0 + 4
        ADD     A,#0xf
        MOV     R2,A
        MOV     A,?V0 + 5
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ??Subroutine96_0 & 0xFFFF
??CrossCallReturnLabel_144:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
//  695     ZDP_TxOptions = AF_TX_OPTIONS_NONE;
        MOV     DPTR,#ZDP_TxOptions
        CLR     A
        MOVX    @DPTR,A
//  696   }
//  697 }
??zdpProcessAddrReq_3:
        LJMP    ??Subroutine101_0 & 0xFFFF
        CFI EndBlock cfiBlock98
//  698 
//  699 /*********************************************************************
//  700  * @fn          ZDP_NodeDescMsg
//  701  *
//  702  * @brief       Builds and sends a Node Descriptor message, unicast to the
//  703  *              specified device.
//  704  *
//  705  * @param       inMsg - incoming message
//  706  * @param       nwkAddr - 16 bit network address for device
//  707  * @param       pNodeDesc - pointer to the node descriptor
//  708  *
//  709  * @return      afStatus_t
//  710  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  711 afStatus_t ZDP_NodeDescMsg( zdoIncomingMsg_t *inMsg,
ZDP_NodeDescMsg:
        CFI Block cfiBlock99 Using cfiCommon0
        CFI Function ZDP_NodeDescMsg
        CODE
//  712                            uint16 nwkAddr, NodeDescriptorFormat_t *pNodeDesc )
//  713 {
        FUNCALL ZDP_NodeDescMsg, fillAndSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine17 & 0xFFFF
//  714   uint8 *pBuf = ZDP_TmpBuf;
??CrossCallReturnLabel_15:
        LCALL   ??Subroutine123_0 & 0xFFFF
//  715   byte len;
//  716 
//  717   len = 1 + 2 + 13;  // Status + nwkAddr + Node descriptor
//  718 
//  719   *pBuf++ = ZDP_SUCCESS;
??CrossCallReturnLabel_303:
        MOV     DPL,R0
        MOV     DPH,R1
        LCALL   ?Subroutine79 & 0xFFFF
//  720 
//  721   *pBuf++ = LO_UINT16( nwkAddr );
//  722   *pBuf++ = HI_UINT16( nwkAddr );
??CrossCallReturnLabel_120:
        LCALL   ?Subroutine55 & 0xFFFF
//  723 
//  724   *pBuf++ = (byte)((pNodeDesc->ComplexDescAvail << 3) |
//  725                      (pNodeDesc->UserDescAvail << 4) |
//  726                      (pNodeDesc->LogicalType & 0x07));
??CrossCallReturnLabel_86:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        ANL     A,#0x1f
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    @DPTR,A
        INC     DPTR
        INC     R0
        LCALL   ?Subroutine21 & 0xFFFF
//  727 
//  728   *pBuf++ = (byte)((pNodeDesc->FrequencyBand << 3) | (pNodeDesc->APSFlags & 0x07));
//  729   *pBuf++ = pNodeDesc->CapabilityFlags;
??CrossCallReturnLabel_211:
        INC     DPTR
        LCALL   ?Subroutine20 & 0xFFFF
//  730   *pBuf++ = pNodeDesc->ManufacturerCode[0];
??CrossCallReturnLabel_123:
        LCALL   ??Subroutine93_0 & 0xFFFF
//  731   *pBuf++ = pNodeDesc->ManufacturerCode[1];
??CrossCallReturnLabel_125:
        INC     DPTR
        LCALL   ?Subroutine19 & 0xFFFF
//  732   *pBuf++ = pNodeDesc->MaxBufferSize;
??CrossCallReturnLabel_26:
        LCALL   ?Subroutine19 & 0xFFFF
//  733   *pBuf++ = pNodeDesc->MaxInTransferSize[0];
??CrossCallReturnLabel_27:
        LCALL   ??Subroutine110_0 & 0xFFFF
//  734   *pBuf++ = pNodeDesc->MaxInTransferSize[1];
??CrossCallReturnLabel_213:
        LCALL   ?Subroutine10 & 0xFFFF
//  735 
//  736   *pBuf++ = LO_UINT16( pNodeDesc->ServerMask );
??CrossCallReturnLabel_214:
        ADD     A,#0x8
        MOV     R4,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R5,A
        MOV     DPL,R4
        MOV     DPH,R5
        LCALL   ?Subroutine22 & 0xFFFF
//  737   *pBuf++ = HI_UINT16( pNodeDesc->ServerMask );
??CrossCallReturnLabel_28:
        MOV     DPL,R4
        MOV     DPH,R5
        LCALL   ?Subroutine20 & 0xFFFF
//  738   *pBuf++ = pNodeDesc->MaxOutTransferSize[0];
??CrossCallReturnLabel_124:
        LCALL   ?Subroutine10 & 0xFFFF
//  739   *pBuf++ = pNodeDesc->MaxOutTransferSize[1];
??CrossCallReturnLabel_215:
        ADD     A,#0xb
        LCALL   ?Subroutine68 & 0xFFFF
??CrossCallReturnLabel_281:
        LCALL   ??Subroutine113_0 & 0xFFFF
//  740   *pBuf = pNodeDesc->DescriptorCapability;
??CrossCallReturnLabel_218:
        ADD     A,#0xc
        MOV     DPL,A
        MOV     A,R7
        LCALL   ??Subroutine103_0 & 0xFFFF
??CrossCallReturnLabel_169:
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    @DPTR,A
//  741 
//  742   return fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), Node_Desc_rsp, len );
        ; Setup parameters for call to function fillAndSend
        MOV     ?V0 + 0,#0x2
        MOV     ?V0 + 1,#-0x80
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     R1,#0x10
        MOV     A,R2
        ADD     A,#0x2
        MOV     R4,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R5,A
        MOV     A,R2
        ADD     A,#0xf
        MOV     R2,A
        MOV     A,R3
        CFI EndBlock cfiBlock99
        REQUIRE ?Subroutine5
        ; // Fall through to label ?Subroutine5
//  743 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiBlock100 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        ADDC    A,#0x0
        MOV     R3,A
        LJMP    ??Subroutine88_0 & 0xFFFF
        CFI EndBlock cfiBlock100

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine79:
        CFI Block cfiCond101 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_120
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond102 Using cfiCommon0
        CFI (cfiCond102) NoFunction
        CFI (cfiCond102) Conditional ??CrossCallReturnLabel_121, ??CrossCallReturnLabel_228
        CFI (cfiCond102) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond102) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond102) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond102) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond102) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond102) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond102) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond102) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond102) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond102) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond102) CFA_SP SP+0
        CFI (cfiCond102) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond103 Using cfiCommon0
        CFI (cfiCond103) NoFunction
        CFI (cfiCond103) Conditional ??CrossCallReturnLabel_121, ??CrossCallReturnLabel_229
        CFI (cfiCond103) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond103) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond103) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond103) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond103) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond103) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond103) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond103) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond103) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond103) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond103) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond103) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond103) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond103) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond103) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond103) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond103) CFA_SP SP+0
        CFI (cfiCond103) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiPicker104 Using cfiCommon1
        CFI (cfiPicker104) NoFunction
        CFI (cfiPicker104) Picker
        CLR     A
        CFI EndBlock cfiCond101
        CFI EndBlock cfiCond102
        CFI EndBlock cfiCond103
        CFI EndBlock cfiPicker104
        REQUIRE ??Subroutine92_0
        ; // Fall through to label ??Subroutine92_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine92_0:
        CFI Block cfiCond105 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_122
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond106 Using cfiCommon0
        CFI (cfiCond106) NoFunction
        CFI (cfiCond106) Conditional ??CrossCallReturnLabel_120
        CFI (cfiCond106) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond106) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond106) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond106) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond106) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond106) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond106) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond106) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond106) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond106) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond106) CFA_SP SP+0
        CFI (cfiCond106) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond107 Using cfiCommon0
        CFI (cfiCond107) NoFunction
        CFI (cfiCond107) Conditional ??CrossCallReturnLabel_121, ??CrossCallReturnLabel_228
        CFI (cfiCond107) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond107) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond107) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond107) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond107) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond107) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond107) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond107) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond107) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond107) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond107) CFA_SP SP+0
        CFI (cfiCond107) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond108 Using cfiCommon0
        CFI (cfiCond108) NoFunction
        CFI (cfiCond108) Conditional ??CrossCallReturnLabel_121, ??CrossCallReturnLabel_229
        CFI (cfiCond108) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond108) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond108) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond108) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond108) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond108) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond108) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond108) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond108) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond108) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond108) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond108) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond108) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond108) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond108) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond108) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond108) CFA_SP SP+0
        CFI (cfiCond108) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiPicker109 Using cfiCommon1
        CFI (cfiPicker109) NoFunction
        CFI (cfiPicker109) Picker
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        RET
        CFI EndBlock cfiCond105
        CFI EndBlock cfiCond106
        CFI EndBlock cfiCond107
        CFI EndBlock cfiCond108
        CFI EndBlock cfiPicker109

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine55:
        CFI Block cfiCond110 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_84
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond111 Using cfiCommon0
        CFI (cfiCond111) NoFunction
        CFI (cfiCond111) Conditional ??CrossCallReturnLabel_85
        CFI (cfiCond111) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond111) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond111) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond111) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond111) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond111) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond111) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond111) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond111) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond111) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond111) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond111) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond111) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond111) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond111) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond111) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond111) CFA_SP SP+0
        CFI (cfiCond111) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond112 Using cfiCommon0
        CFI (cfiCond112) NoFunction
        CFI (cfiCond112) Conditional ??CrossCallReturnLabel_86
        CFI (cfiCond112) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond112) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond112) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond112) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond112) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond112) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond112) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond112) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond112) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond112) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond112) CFA_SP SP+0
        CFI (cfiCond112) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond113 Using cfiCommon0
        CFI (cfiCond113) NoFunction
        CFI (cfiCond113) Conditional ??CrossCallReturnLabel_87
        CFI (cfiCond113) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond113) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond113) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond113) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond113) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond113) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond113) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond113) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond113) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond113) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond113) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond113) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond113) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond113) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond113) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond113) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond113) CFA_SP SP+0
        CFI (cfiCond113) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiPicker114 Using cfiCommon1
        CFI (cfiPicker114) NoFunction
        CFI (cfiPicker114) Picker
        MOVX    @DPTR,A
        INC     DPTR
        MOV     R0,DPL
        MOV     R1,DPH
        RET
        CFI EndBlock cfiCond110
        CFI EndBlock cfiCond111
        CFI EndBlock cfiCond112
        CFI EndBlock cfiCond113
        CFI EndBlock cfiPicker114

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine20:
        CFI Block cfiCond115 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_123
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond116 Using cfiCommon0
        CFI (cfiCond116) NoFunction
        CFI (cfiCond116) Conditional ??CrossCallReturnLabel_124
        CFI (cfiCond116) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond116) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond116) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond116) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond116) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond116) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond116) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond116) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond116) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond116) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond116) CFA_SP SP+0
        CFI (cfiCond116) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker117 Using cfiCommon1
        CFI (cfiPicker117) NoFunction
        CFI (cfiPicker117) Picker
        INC     DPTR
        CFI EndBlock cfiCond115
        CFI EndBlock cfiCond116
        CFI EndBlock cfiPicker117
        REQUIRE ??Subroutine93_0
        ; // Fall through to label ??Subroutine93_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine93_0:
        CFI Block cfiCond118 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_125
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond119 Using cfiCommon0
        CFI (cfiCond119) NoFunction
        CFI (cfiCond119) Conditional ??CrossCallReturnLabel_123
        CFI (cfiCond119) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond119) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond119) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond119) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond119) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond119) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond119) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond119) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond119) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond119) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond119) CFA_SP SP+0
        CFI (cfiCond119) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond120 Using cfiCommon0
        CFI (cfiCond120) NoFunction
        CFI (cfiCond120) Conditional ??CrossCallReturnLabel_124
        CFI (cfiCond120) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond120) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond120) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond120) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond120) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond120) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond120) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond120) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond120) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond120) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond120) CFA_SP SP+0
        CFI (cfiCond120) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker121 Using cfiCommon1
        CFI (cfiPicker121) NoFunction
        CFI (cfiPicker121) Picker
        LCALL   ?Subroutine70 & 0xFFFF
??CrossCallReturnLabel_126:
        RET
        CFI EndBlock cfiCond118
        CFI EndBlock cfiCond119
        CFI EndBlock cfiCond120
        CFI EndBlock cfiPicker121

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine70:
        CFI Block cfiCond122 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_126, ??CrossCallReturnLabel_123
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond123 Using cfiCommon0
        CFI (cfiCond123) NoFunction
        CFI (cfiCond123) Conditional ??CrossCallReturnLabel_126, ??CrossCallReturnLabel_124
        CFI (cfiCond123) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond123) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond123) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond123) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond123) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond123) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond123) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond123) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond123) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond123) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond123) CFA_SP SP+0
        CFI (cfiCond123) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond124 Using cfiCommon0
        CFI (cfiCond124) NoFunction
        CFI (cfiCond124) Conditional ??CrossCallReturnLabel_126, ??CrossCallReturnLabel_125
        CFI (cfiCond124) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond124) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond124) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond124) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond124) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond124) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond124) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond124) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond124) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond124) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond124) CFA_SP SP+0
        CFI (cfiCond124) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond125 Using cfiCommon0
        CFI (cfiCond125) NoFunction
        CFI (cfiCond125) Conditional ??CrossCallReturnLabel_127, ??CrossCallReturnLabel_26
        CFI (cfiCond125) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond125) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond125) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond125) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond125) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond125) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond125) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond125) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond125) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond125) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond125) CFA_SP SP+0
        CFI (cfiCond125) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond126 Using cfiCommon0
        CFI (cfiCond126) NoFunction
        CFI (cfiCond126) Conditional ??CrossCallReturnLabel_127, ??CrossCallReturnLabel_27
        CFI (cfiCond126) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond126) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond126) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond126) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond126) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond126) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond126) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond126) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond126) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond126) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond126) CFA_SP SP+0
        CFI (cfiCond126) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker127 Using cfiCommon1
        CFI (cfiPicker127) NoFunction
        CFI (cfiPicker127) Picker
        LCALL   ?Subroutine82 & 0xFFFF
??CrossCallReturnLabel_223:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond122
        CFI EndBlock cfiCond123
        CFI EndBlock cfiCond124
        CFI EndBlock cfiCond125
        CFI EndBlock cfiCond126
        CFI EndBlock cfiPicker127

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine19:
        CFI Block cfiCond128 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_26
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond129 Using cfiCommon0
        CFI (cfiCond129) NoFunction
        CFI (cfiCond129) Conditional ??CrossCallReturnLabel_27
        CFI (cfiCond129) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond129) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond129) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond129) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond129) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond129) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond129) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond129) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond129) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond129) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond129) CFA_SP SP+0
        CFI (cfiCond129) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker130 Using cfiCommon1
        CFI (cfiPicker130) NoFunction
        CFI (cfiPicker130) Picker
        LCALL   ?Subroutine70 & 0xFFFF
??CrossCallReturnLabel_127:
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond128
        CFI EndBlock cfiCond129
        CFI EndBlock cfiPicker130
//  744 
//  745 /*********************************************************************
//  746  * @fn          ZDP_PowerDescMsg
//  747  *
//  748  * @brief       Builds and sends a Power Descriptor message, unicast to the
//  749  *              specified device.
//  750  *
//  751  * @param       inMsg - incoming message (request)
//  752  * @param       nwkAddr - 16 bit network address for device
//  753  * @param       pPowerDesc - pointer to the node descriptor
//  754  *
//  755  * @return      afStatus_t
//  756  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  757 afStatus_t ZDP_PowerDescMsg( zdoIncomingMsg_t *inMsg,
ZDP_PowerDescMsg:
        CFI Block cfiBlock131 Using cfiCommon0
        CFI Function ZDP_PowerDescMsg
        CODE
//  758                      uint16 nwkAddr, NodePowerDescriptorFormat_t *pPowerDesc )
//  759 {
        FUNCALL ZDP_PowerDescMsg, fillAndSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine36 & 0xFFFF
//  760   uint8 *pBuf = ZDP_TmpBuf;
??CrossCallReturnLabel_60:
        LCALL   ??Subroutine120_0 & 0xFFFF
//  761   byte len = 1 + 2 + 2;  // Status + nwkAddr + Node Power descriptor.
//  762 
//  763   *pBuf++ = ZDP_SUCCESS;
??CrossCallReturnLabel_267:
        LCALL   ?Subroutine51 & 0xFFFF
//  764 
//  765   *pBuf++ = LO_UINT16( nwkAddr );
//  766   *pBuf++ = HI_UINT16( nwkAddr );
//  767 
//  768   *pBuf++ = (byte)((pPowerDesc->AvailablePowerSources << 4)
//  769                     | (pPowerDesc->PowerMode & 0x0F));
??CrossCallReturnLabel_228:
        LCALL   ?Subroutine40 & 0xFFFF
//  770   *pBuf++ = (byte)((pPowerDesc->CurrentPowerSourceLevel << 4)
//  771                     | (pPowerDesc->CurrentPowerSource & 0x0F));
??CrossCallReturnLabel_254:
        MOV     DPL,R0
        MOV     DPH,R1
        LCALL   ??Subroutine98_0 & 0xFFFF
??CrossCallReturnLabel_157:
        ANL     A,#0xf
        MOV     R1,A
        MOV     A,#0xc
        MOV     R0,#?V0 + 0
        LCALL   ?US_SHR
        MOV     A,?V0 + 0
        SWAP    A
        ORL     A,R1
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    @DPTR,A
//  772 
//  773   return fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), Power_Desc_rsp, len );
        ; Setup parameters for call to function fillAndSend
        MOV     ?V0 + 0,#0x3
        MOV     ?V0 + 1,#-0x80
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     R1,#0x5
        MOV     A,R6
        ADD     A,#0x2
        MOV     R4,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R5,A
        MOV     A,R6
        ADD     A,#0xf
        MOV     R2,A
        MOV     A,R7
        SJMP    ?Subroutine5
        CFI EndBlock cfiBlock131
//  774 }
//  775 
//  776 /*********************************************************************
//  777  * @fn          ZDP_SimpleDescMsg
//  778  *
//  779  * @brief       Builds and sends a Simple Descriptor message, unicast to the
//  780  *              specified device.
//  781  *
//  782  * @param       inMsg - incoming message (request)
//  783  * @param       Status - message status (ZDP_SUCCESS or other)
//  784  * @param       pSimpleDesc - pointer to the node descriptor
//  785  *
//  786  * @return      afStatus_t
//  787  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  788 afStatus_t ZDP_SimpleDescMsg( zdoIncomingMsg_t *inMsg, byte Status,
ZDP_SimpleDescMsg:
        CFI Block cfiBlock132 Using cfiCommon0
        CFI Function ZDP_SimpleDescMsg
        CODE
//  789                               SimpleDescriptionFormat_t *pSimpleDesc )
//  790 {
        FUNCALL ZDP_SimpleDescMsg, fillAndSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 3
        MOV     A,#-0x3
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine108_0 & 0xFFFF
??CrossCallReturnLabel_204:
        MOV     A,R1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
//  791   uint8 *pBuf = ZDP_TmpBuf;
        LCALL   ?Subroutine44 & 0xFFFF
//  792   uint8 i, len;
//  793 
//  794   if ( Status == ZDP_SUCCESS && pSimpleDesc )
??CrossCallReturnLabel_273:
        MOV     A,R4
        ADD     A,#0x9
        MOV     ?V0 + 4,A
        MOV     A,R5
        ADDC    A,#0x0
        MOV     ?V0 + 5,A
        MOV     A,R4
        ADD     A,#0x6
        MOV     ?V0 + 2,A
        MOV     A,R5
        ADDC    A,#0x0
        MOV     ?V0 + 3,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        JNZ     ??ZDP_SimpleDescMsg_0
        MOV     A,R4
        ORL     A,R5
        JZ      ??ZDP_SimpleDescMsg_0
//  795   {
//  796     // Status + NWKAddrOfInterest + desc length + empty simple descriptor.
//  797     len = 1 + 2 + 1 + 8;
//  798     len += (pSimpleDesc->AppNumInClusters + pSimpleDesc->AppNumOutClusters) * sizeof ( uint16 );
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        PUSH    DPL
        CFI CFA_SP SP+-1
        PUSH    DPH
        CFI CFA_SP SP+-2
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        MOVX    A,@DPTR
        POP     DPH
        CFI CFA_SP SP+-1
        POP     DPL
        CFI CFA_SP SP+0
        MOV     R0,A
        MOVX    A,@DPTR
        ADD     A,R0
        CLR     C
        RLC     A
        ADD     A,#0xc
        MOV     R1,A
//  799   }
//  800   else
//  801   {
//  802     len = 1 + 2 + 1; // Status + desc length
//  803   }
//  804   if ( len >= ZDP_BUF_SZ-1 )
        CLR     C
        SUBB    A,#0x4f
        JC      ??ZDP_SimpleDescMsg_1
//  805   {
//  806     return afStatus_MEM_FAIL;
        MOV     R1,#0x10
        LJMP    ??ZDP_SimpleDescMsg_2 & 0xFFFF
//  807   }
??ZDP_SimpleDescMsg_0:
        MOV     R1,#0x4
//  808 
//  809   *pBuf++ = Status;
??ZDP_SimpleDescMsg_1:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ??Subroutine116_0 & 0xFFFF
//  810 
//  811   *pBuf++ = LO_UINT16( ZDAppNwkAddr.addr.shortAddr );
??CrossCallReturnLabel_240:
        MOV     DPTR,#ZDAppNwkAddr
        LCALL   ??Subroutine118_0 & 0xFFFF
//  812   *pBuf++ = HI_UINT16( ZDAppNwkAddr.addr.shortAddr );
??CrossCallReturnLabel_249:
        MOV     DPTR,#ZDAppNwkAddr + 1
        LCALL   ??Subroutine115_0 & 0xFFFF
//  813 
//  814   if ( len > 4 )
??CrossCallReturnLabel_235:
        MOV     A,R1
        CLR     C
        SUBB    A,#0x5
        JNC     $+5
        LJMP    ??ZDP_SimpleDescMsg_3 & 0xFFFF
//  815   {
//  816     *pBuf++ = len - 4;   // Simple descriptor length
        MOV     A,#-0x4
        ADD     A,R1
        MOVX    @DPTR,A
        INC     DPTR
        INC     R2
        INC     R2
        MOV     R3,DPH
//  817 
//  818     *pBuf++ = pSimpleDesc->EndPoint;
        MOV     DPL,R4
        MOV     DPH,R5
        LCALL   ??Subroutine118_0 & 0xFFFF
//  819     *pBuf++ = LO_UINT16( pSimpleDesc->AppProfId );
??CrossCallReturnLabel_250:
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
        LCALL   ?Subroutine13 & 0xFFFF
//  820     *pBuf++ = HI_UINT16( pSimpleDesc->AppProfId );
//  821     *pBuf++ = LO_UINT16( pSimpleDesc->AppDeviceId );
??CrossCallReturnLabel_6:
        MOV     A,R4
        ADD     A,#0x3
        MOV     R6,A
        MOV     A,R5
        ADDC    A,#0x0
        MOV     R7,A
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine13 & 0xFFFF
//  822     *pBuf++ = HI_UINT16( pSimpleDesc->AppDeviceId );
//  823 
//  824     *pBuf++ = (byte)(pSimpleDesc->AppDevVer << 4);
??CrossCallReturnLabel_7:
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        SWAP    A
        ANL     A,#0xf0
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    @DPTR,A
        INC     DPTR
        INC     R2
        MOV     R3,DPH
//  825 
//  826     *pBuf++ = pSimpleDesc->AppNumInClusters;
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        LCALL   ??Subroutine118_0 & 0xFFFF
//  827     if ( pSimpleDesc->AppNumInClusters )
??CrossCallReturnLabel_251:
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        MOVX    A,@DPTR
        JZ      ??ZDP_SimpleDescMsg_4
//  828     {
//  829       for (i=0; i<pSimpleDesc->AppNumInClusters; ++i)
        MOV     R0,#0x0
        MOV     A,R4
        ADD     A,#0x7
        MOV     ?V0 + 6,A
        MOV     A,R5
        ADDC    A,#0x0
        MOV     ?V0 + 7,A
        SJMP    ??CrossCallReturnLabel_66
//  830       {
//  831         *pBuf++ = LO_UINT16( pSimpleDesc->pAppInClusterList[i] );
??ZDP_SimpleDescMsg_5:
        MOV     A,R0
        CLR     C
        RLC     A
        MOV     R6,A
        CLR     A
        RLC     A
        MOV     R7,A
        MOV     DPL,?V0 + 6
        MOV     DPH,?V0 + 7
        MOVX    A,@DPTR
        ADD     A,R6
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R7
        LCALL   ?Subroutine8 & 0xFFFF
//  832         *pBuf++ = HI_UINT16( pSimpleDesc->pAppInClusterList[i] );
??CrossCallReturnLabel_244:
        MOV     DPL,?V0 + 6
        MOV     DPH,?V0 + 7
        MOVX    A,@DPTR
        ADD     A,R6
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R7
        LCALL   ?Subroutine39 & 0xFFFF
//  833       }
??CrossCallReturnLabel_66:
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        MOVX    A,@DPTR
        MOV     R6,A
        MOV     A,R0
        CLR     C
        SUBB    A,R6
        JC      ??ZDP_SimpleDescMsg_5
//  834     }
//  835 
//  836     *pBuf++ = pSimpleDesc->AppNumOutClusters;
??ZDP_SimpleDescMsg_4:
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        LCALL   ??Subroutine116_0 & 0xFFFF
//  837     if ( pSimpleDesc->AppNumOutClusters )
??CrossCallReturnLabel_241:
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        MOVX    A,@DPTR
        JZ      ??ZDP_SimpleDescMsg_6
//  838     {
//  839       for (i=0; i<pSimpleDesc->AppNumOutClusters; ++i)
        MOV     R0,#0x0
        MOV     A,R4
        ADD     A,#0xa
        MOV     R4,A
        MOV     A,R5
        ADDC    A,#0x0
        MOV     R5,A
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
??ZDP_SimpleDescMsg_7:
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     A,R0
        CLR     C
        SUBB    A,R4
        JNC     ??ZDP_SimpleDescMsg_6
//  840       {
//  841         *pBuf++ = LO_UINT16( pSimpleDesc->pAppOutClusterList[i] );
        MOV     A,R0
        CLR     C
        RLC     A
        MOV     R4,A
        CLR     A
        RLC     A
        MOV     R5,A
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        ADD     A,R4
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R5
        LCALL   ?Subroutine8 & 0xFFFF
//  842         *pBuf++ = HI_UINT16( pSimpleDesc->pAppOutClusterList[i] );
??CrossCallReturnLabel_245:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        ADD     A,R4
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R5
        LCALL   ?Subroutine39 & 0xFFFF
//  843       }
//  844     }
//  845   }
??CrossCallReturnLabel_67:
        SJMP    ??ZDP_SimpleDescMsg_7
//  846 
//  847   else
//  848   {
//  849     *pBuf = 0; // Description Length = 0;
??ZDP_SimpleDescMsg_3:
        CLR     A
        MOVX    @DPTR,A
//  850   }
//  851 
//  852   return fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), Simple_Desc_rsp, len );
??ZDP_SimpleDescMsg_6:
        ; Setup parameters for call to function fillAndSend
        MOV     ?V0 + 0,#0x4
        MOV     ?V0 + 1,#-0x80
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 21)
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ADD     A,#0x2
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R5,A
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ADD     A,#0xf
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ??Subroutine96_0 & 0xFFFF
??CrossCallReturnLabel_145:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
??ZDP_SimpleDescMsg_2:
        LJMP    ?Subroutine3 & 0xFFFF
        CFI EndBlock cfiBlock132
//  853 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine39:
        CFI Block cfiCond133 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_66
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond134 Using cfiCommon0
        CFI (cfiCond134) NoFunction
        CFI (cfiCond134) Conditional ??CrossCallReturnLabel_67
        CFI (cfiCond134) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond134) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond134) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond134) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond134) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond134) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond134) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond134) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond134) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond134) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond134) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond134) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond134) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond134) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond134) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond134) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond134) CFA_SP SP+0
        CFI (cfiCond134) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiPicker135 Using cfiCommon1
        CFI (cfiPicker135) NoFunction
        CFI (cfiPicker135) Picker
        MOV     DPL,?V0 + 0
        MOV     DPH,A
        LCALL   ?Subroutine69 & 0xFFFF
??CrossCallReturnLabel_260:
        INC     R0
        RET
        CFI EndBlock cfiCond133
        CFI EndBlock cfiCond134
        CFI EndBlock cfiPicker135

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
        CFI Block cfiCond136 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_6
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond137 Using cfiCommon0
        CFI (cfiCond137) NoFunction
        CFI (cfiCond137) Conditional ??CrossCallReturnLabel_7
        CFI (cfiCond137) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond137) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond137) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond137) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond137) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond137) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond137) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond137) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond137) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond137) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond137) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond137) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond137) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond137) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond137) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond137) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond137) CFA_SP SP+0
        CFI (cfiCond137) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiPicker138 Using cfiCommon1
        CFI (cfiPicker138) NoFunction
        CFI (cfiPicker138) Picker
        LCALL   ??Subroutine94_0 & 0xFFFF
??CrossCallReturnLabel_256:
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine69 & 0xFFFF
??CrossCallReturnLabel_259:
        RET
        CFI EndBlock cfiCond136
        CFI EndBlock cfiCond137
        CFI EndBlock cfiPicker138

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine69:
        CFI Block cfiCond139 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_260, ??CrossCallReturnLabel_66
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond140 Using cfiCommon0
        CFI (cfiCond140) NoFunction
        CFI (cfiCond140) Conditional ??CrossCallReturnLabel_260, ??CrossCallReturnLabel_67
        CFI (cfiCond140) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond140) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond140) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond140) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond140) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond140) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond140) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond140) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond140) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond140) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond140) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond140) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond140) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond140) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond140) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond140) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond140) CFA_SP SP+0
        CFI (cfiCond140) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond141 Using cfiCommon0
        CFI (cfiCond141) NoFunction
        CFI (cfiCond141) Conditional ??CrossCallReturnLabel_259, ??CrossCallReturnLabel_6
        CFI (cfiCond141) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond141) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond141) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond141) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond141) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond141) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond141) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond141) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond141) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond141) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond141) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond141) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond141) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond141) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond141) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond141) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond141) CFA_SP SP+0
        CFI (cfiCond141) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond142 Using cfiCommon0
        CFI (cfiCond142) NoFunction
        CFI (cfiCond142) Conditional ??CrossCallReturnLabel_259, ??CrossCallReturnLabel_7
        CFI (cfiCond142) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond142) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond142) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond142) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond142) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond142) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond142) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond142) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond142) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond142) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond142) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond142) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond142) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond142) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond142) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond142) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond142) CFA_SP SP+0
        CFI (cfiCond142) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiPicker143 Using cfiCommon1
        CFI (cfiPicker143) NoFunction
        CFI (cfiPicker143) Picker
        INC     DPTR
        CFI EndBlock cfiCond139
        CFI EndBlock cfiCond140
        CFI EndBlock cfiCond141
        CFI EndBlock cfiCond142
        CFI EndBlock cfiPicker143
        REQUIRE ??Subroutine94_0
        ; // Fall through to label ??Subroutine94_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine94_0:
        CFI Block cfiCond144 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_256, ??CrossCallReturnLabel_6
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond145 Using cfiCommon0
        CFI (cfiCond145) NoFunction
        CFI (cfiCond145) Conditional ??CrossCallReturnLabel_256, ??CrossCallReturnLabel_7
        CFI (cfiCond145) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond145) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond145) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond145) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond145) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond145) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond145) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond145) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond145) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond145) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond145) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond145) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond145) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond145) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond145) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond145) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond145) CFA_SP SP+0
        CFI (cfiCond145) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond146 Using cfiCommon0
        CFI (cfiCond146) NoFunction
        CFI (cfiCond146) Conditional ??CrossCallReturnLabel_258, ??CrossCallReturnLabel_31
        CFI (cfiCond146) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond146) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond146) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond146) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond146) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond146) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond146) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond146) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond146) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond146) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond146) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond146) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond146) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond146) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond146) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond146) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond146) CFA_SP SP+0
        CFI (cfiCond146) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond147 Using cfiCommon0
        CFI (cfiCond147) NoFunction
        CFI (cfiCond147) Conditional ??CrossCallReturnLabel_258, ??CrossCallReturnLabel_32
        CFI (cfiCond147) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond147) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond147) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond147) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond147) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond147) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond147) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond147) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond147) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond147) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond147) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond147) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond147) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond147) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond147) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond147) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond147) CFA_SP SP+0
        CFI (cfiCond147) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond148 Using cfiCommon0
        CFI (cfiCond148) NoFunction
        CFI (cfiCond148) Conditional ??CrossCallReturnLabel_257, ??CrossCallReturnLabel_10
        CFI (cfiCond148) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond148) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond148) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond148) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond148) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond148) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond148) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond148) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond148) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond148) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond148) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond148) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond148) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond148) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond148) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond148) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond148) CFA_SP SP+0
        CFI (cfiCond148) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond149 Using cfiCommon0
        CFI (cfiCond149) NoFunction
        CFI (cfiCond149) Conditional ??CrossCallReturnLabel_257, ??CrossCallReturnLabel_11
        CFI (cfiCond149) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond149) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond149) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond149) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond149) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond149) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond149) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond149) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond149) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond149) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond149) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond149) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond149) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond149) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond149) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond149) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond149) CFA_SP SP+0
        CFI (cfiCond149) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond150 Using cfiCommon0
        CFI (cfiCond150) NoFunction
        CFI (cfiCond150) Conditional ??CrossCallReturnLabel_261, ??CrossCallReturnLabel_254
        CFI (cfiCond150) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond150) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond150) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond150) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond150) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond150) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond150) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond150) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond150) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond150) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond150) CFA_SP SP+0
        CFI (cfiCond150) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond151 Using cfiCommon0
        CFI (cfiCond151) NoFunction
        CFI (cfiCond151) Conditional ??CrossCallReturnLabel_261, ??CrossCallReturnLabel_255
        CFI (cfiCond151) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond151) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond151) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond151) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond151) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond151) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond151) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond151) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond151) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond151) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond151) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond151) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond151) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond151) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond151) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond151) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond151) CFA_SP SP+0
        CFI (cfiCond151) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond152 Using cfiCommon0
        CFI (cfiCond152) NoFunction
        CFI (cfiCond152) Conditional ??CrossCallReturnLabel_261, ??CrossCallReturnLabel_249
        CFI (cfiCond152) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond152) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond152) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond152) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond152) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond152) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond152) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond152) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond152) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond152) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond152) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond152) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond152) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond152) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond152) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond152) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond152) CFA_SP SP+0
        CFI (cfiCond152) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond153 Using cfiCommon0
        CFI (cfiCond153) NoFunction
        CFI (cfiCond153) Conditional ??CrossCallReturnLabel_261, ??CrossCallReturnLabel_250
        CFI (cfiCond153) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond153) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond153) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond153) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond153) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond153) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond153) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond153) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond153) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond153) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond153) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond153) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond153) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond153) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond153) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond153) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond153) CFA_SP SP+0
        CFI (cfiCond153) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond154 Using cfiCommon0
        CFI (cfiCond154) NoFunction
        CFI (cfiCond154) Conditional ??CrossCallReturnLabel_261, ??CrossCallReturnLabel_251
        CFI (cfiCond154) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond154) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond154) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond154) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond154) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond154) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond154) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond154) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond154) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond154) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond154) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond154) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond154) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond154) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond154) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond154) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond154) CFA_SP SP+0
        CFI (cfiCond154) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond155 Using cfiCommon0
        CFI (cfiCond155) NoFunction
        CFI (cfiCond155) Conditional ??CrossCallReturnLabel_261, ??CrossCallReturnLabel_252
        CFI (cfiCond155) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond155) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond155) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond155) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond155) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond155) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond155) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond155) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond155) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond155) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond155) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond155) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond155) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond155) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond155) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond155) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond155) CFA_SP SP+0
        CFI (cfiCond155) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond156 Using cfiCommon0
        CFI (cfiCond156) NoFunction
        CFI (cfiCond156) Conditional ??CrossCallReturnLabel_261, ??CrossCallReturnLabel_253
        CFI (cfiCond156) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond156) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond156) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond156) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond156) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond156) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond156) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond156) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond156) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond156) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond156) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond156) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond156) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond156) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond156) CFA_SP SP+0
        CFI (cfiCond156) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond157 Using cfiCommon0
        CFI (cfiCond157) NoFunction
        CFI (cfiCond157) Conditional ??CrossCallReturnLabel_260, ??CrossCallReturnLabel_66
        CFI (cfiCond157) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond157) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond157) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond157) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond157) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond157) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond157) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond157) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond157) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond157) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond157) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond157) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond157) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond157) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond157) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond157) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond157) CFA_SP SP+0
        CFI (cfiCond157) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond158 Using cfiCommon0
        CFI (cfiCond158) NoFunction
        CFI (cfiCond158) Conditional ??CrossCallReturnLabel_260, ??CrossCallReturnLabel_67
        CFI (cfiCond158) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond158) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond158) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond158) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond158) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond158) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond158) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond158) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond158) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond158) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond158) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond158) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond158) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond158) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond158) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond158) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond158) CFA_SP SP+0
        CFI (cfiCond158) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond159 Using cfiCommon0
        CFI (cfiCond159) NoFunction
        CFI (cfiCond159) Conditional ??CrossCallReturnLabel_259, ??CrossCallReturnLabel_6
        CFI (cfiCond159) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond159) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond159) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond159) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond159) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond159) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond159) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond159) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond159) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond159) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond159) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond159) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond159) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond159) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond159) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond159) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond159) CFA_SP SP+0
        CFI (cfiCond159) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond160 Using cfiCommon0
        CFI (cfiCond160) NoFunction
        CFI (cfiCond160) Conditional ??CrossCallReturnLabel_259, ??CrossCallReturnLabel_7
        CFI (cfiCond160) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond160) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond160) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond160) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond160) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond160) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond160) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond160) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond160) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond160) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond160) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond160) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond160) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond160) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond160) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond160) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond160) CFA_SP SP+0
        CFI (cfiCond160) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiPicker161 Using cfiCommon1
        CFI (cfiPicker161) NoFunction
        CFI (cfiPicker161) Picker
        MOVX    A,@DPTR
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    @DPTR,A
        INC     DPTR
        INC     R2
        MOV     R3,DPH
        RET
        CFI EndBlock cfiCond144
        CFI EndBlock cfiCond145
        CFI EndBlock cfiCond146
        CFI EndBlock cfiCond147
        CFI EndBlock cfiCond148
        CFI EndBlock cfiCond149
        CFI EndBlock cfiCond150
        CFI EndBlock cfiCond151
        CFI EndBlock cfiCond152
        CFI EndBlock cfiCond153
        CFI EndBlock cfiCond154
        CFI EndBlock cfiCond155
        CFI EndBlock cfiCond156
        CFI EndBlock cfiCond157
        CFI EndBlock cfiCond158
        CFI EndBlock cfiCond159
        CFI EndBlock cfiCond160
        CFI EndBlock cfiPicker161
//  854 
//  855 /*********************************************************************
//  856  * @fn          ZDP_EPRsp
//  857  *
//  858  * @brief       This builds and send an endpoint list. Used in
//  859  *              Active_EP_rsp and Match_Desc_Rsp
//  860  *              message.  This function sends unicast message to the
//  861  *              requesting device.
//  862  *
//  863  * @param       MsgType - either Active_EP_rsp or Match_Desc_Rsp
//  864  * @param       dstAddr - destination address
//  865  * @param       Status - message status (ZDP_SUCCESS or other)
//  866  * @param       nwkAddr - Device's short address that this response describes
//  867  * @param       Count - number of endpoint/interfaces in list
//  868  * @param       pEPIntfList - Array of Endpoint/Interfaces
//  869  * @param       SecurityEnable - Security Options
//  870  *
//  871  * @return      afStatus_t
//  872  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  873 afStatus_t ZDP_EPRsp( uint16 MsgType, byte TransSeq, zAddrType_t *dstAddr,
ZDP_EPRsp:
        CFI Block cfiBlock162 Using cfiCommon0
        CFI Function ZDP_EPRsp
        CODE
//  874                         byte Status, uint16 nwkAddr, byte Count,
//  875                         uint8 *pEPList,
//  876                         byte SecurityEnable )
//  877 {
        FUNCALL ZDP_EPRsp, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_EPRsp, fillAndSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 17)
        MOV     A,R1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0 + 6,R4
        MOV     ?V0 + 7,R5
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine35 & 0xFFFF
??CrossCallReturnLabel_54:
        MOV     A,#0x14
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,#0x15
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        LCALL   ?Subroutine32 & 0xFFFF
//  878   uint8 *pBuf = ZDP_TmpBuf;
//  879   byte len = 1 + 2 + 1;  // Status + nwkAddr + endpoint/interface count.
??CrossCallReturnLabel_48:
        MOV     ?V0 + 4,#0x4
//  880   byte txOptions;
//  881 
//  882   (void)SecurityEnable;  // Intentionally unreferenced parameter
//  883   
//  884   if ( MsgType == Match_Desc_rsp )
        MOV     A,#0x6
        XRL     A,R6
        JNZ     ??ZDP_EPRsp_0
        MOV     A,#-0x80
        XRL     A,R7
??ZDP_EPRsp_0:
        JNZ     ??ZDP_EPRsp_1
//  885     txOptions = AF_MSG_ACK_REQUEST;
        MOV     ?V0 + 3,#0x10
        SJMP    ??ZDP_EPRsp_2
//  886   else
//  887     txOptions = 0;
??ZDP_EPRsp_1:
        MOV     ?V0 + 3,#0x0
//  888 
//  889     *pBuf++ = Status;
??ZDP_EPRsp_2:
        MOV     A,R0
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ??Subroutine92_0 & 0xFFFF
//  890   *pBuf++ = LO_UINT16( nwkAddr );
//  891   *pBuf++ = HI_UINT16( nwkAddr );
??CrossCallReturnLabel_122:
        MOVX    @DPTR,A
        INC     DPTR
//  892 
//  893   *pBuf++ = Count;   // Endpoint/Interface count
        MOV     A,R1
        LCALL   ??Subroutine114_0 & 0xFFFF
//  894 
//  895   if ( Count )
??CrossCallReturnLabel_231:
        JZ      ??ZDP_EPRsp_3
//  896   {
//  897     len += Count;
        MOV     A,#0x4
        ADD     A,R1
        MOV     ?V0 + 4,A
//  898     osal_memcpy( pBuf, pEPList, Count );
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     ?V0 + 0,R1
        MOV     R4,?V0 + 0
        LCALL   ?Subroutine80 & 0xFFFF
//  899   }
??CrossCallReturnLabel_262:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 17)
//  900 
//  901   FillAndSendTxOptions( &TransSeq, dstAddr, MsgType, len, txOptions );
??ZDP_EPRsp_3:
        MOV     A,?V0 + 3
        MOV     DPTR,#ZDP_TxOptions
        MOVX    @DPTR,A
        ; Setup parameters for call to function fillAndSend
        MOV     ?V0 + 0,R6
        MOV     ?V0 + 1,R7
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     R1,?V0 + 4
        MOV     R4,?V0 + 6
        MOV     R5,?V0 + 7
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine64 & 0xFFFF
??CrossCallReturnLabel_128:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 17)
        MOV     DPTR,#ZDP_TxOptions
        CLR     A
        MOVX    @DPTR,A
        INC     A
        LJMP    ??Subroutine100_0 & 0xFFFF
        CFI EndBlock cfiBlock162
//  902 }
//  903 
//  904 /*********************************************************************
//  905  * @fn          ZDP_UserDescRsp
//  906  *
//  907  * @brief       Build and send the User Decriptor Response.
//  908  *
//  909  *
//  910  * @param       dstAddr - destination address
//  911  * @param       nwkAddrOfInterest -
//  912  * @param       userDesc -
//  913  * @param       SecurityEnable - Security Options
//  914  *
//  915  * @return      ZStatus_t
//  916  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  917 ZStatus_t ZDP_UserDescRsp( byte TransSeq, zAddrType_t *dstAddr,
ZDP_UserDescRsp:
        CFI Block cfiBlock163 Using cfiCommon0
        CFI Function ZDP_UserDescRsp
        CODE
//  918                 uint16 nwkAddrOfInterest, UserDescriptorFormat_t *userDesc,
//  919                 byte SecurityEnable )
//  920 {
        FUNCALL ZDP_UserDescRsp, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_UserDescRsp, fillAndSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 17)
        MOV     A,R1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
        MOV     ?V0 + 6,R2
        MOV     ?V0 + 7,R3
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine18 & 0xFFFF
//  921   uint8 *pBuf = ZDP_TmpBuf;
??CrossCallReturnLabel_23:
        LCALL   ?Subroutine44 & 0xFFFF
//  922   byte len = 1 + 2 + 1;  // Status + nwkAddr + descriptor length.
//  923 
//  924   (void)SecurityEnable;  // Intentionally unreferenced parameter
//  925   
//  926   len += userDesc->len;
??CrossCallReturnLabel_274:
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        MOVX    A,@DPTR
        ADD     A,#0x4
        MOV     R7,A
//  927 
//  928   *pBuf++ = ZSUCCESS;
        LCALL   ?Subroutine51 & 0xFFFF
//  929 
//  930   *pBuf++ = LO_UINT16( nwkAddrOfInterest );
//  931   *pBuf++ = HI_UINT16( nwkAddrOfInterest );
//  932 
//  933   *pBuf++ = userDesc->len;
??CrossCallReturnLabel_229:
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        LCALL   ??Subroutine118_0 & 0xFFFF
//  934   osal_memcpy( pBuf, userDesc->desc, userDesc->len );
??CrossCallReturnLabel_252:
        ; Setup parameters for call to function osal_memcpy
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        INC     DPTR
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     ?V0 + 0,R4
        MOV     ?V0 + 1,R5
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        LCALL   ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_43:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 17)
//  935 
//  936   return (ZStatus_t)fillAndSend( &TransSeq, dstAddr, User_Desc_rsp, len );
        ; Setup parameters for call to function fillAndSend
        MOV     ?V0 + 0,#0x11
        MOV     ?V0 + 1,#-0x80
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     A,R7
        MOV     R1,A
        MOV     R4,?V0 + 6
        MOV     R5,?V0 + 7
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine64 & 0xFFFF
??CrossCallReturnLabel_129:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 17)
        MOV     A,#0x1
        LJMP    ??Subroutine100_0 & 0xFFFF
        CFI EndBlock cfiBlock163
//  937 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine18:
        CFI Block cfiCond164 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_21
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond165 Using cfiCommon0
        CFI (cfiCond165) NoFunction
        CFI (cfiCond165) Conditional ??CrossCallReturnLabel_22
        CFI (cfiCond165) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond165) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond165) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond165) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond165) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond165) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond165) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond165) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond165) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond165) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond165) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond165) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond165) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond165) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond165) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond165) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond165) CFA_SP SP+0
        CFI (cfiCond165) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond166 Using cfiCommon0
        CFI (cfiCond166) NoFunction
        CFI (cfiCond166) Conditional ??CrossCallReturnLabel_23
        CFI (cfiCond166) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond166) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond166) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond166) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond166) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond166) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond166) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond166) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond166) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond166) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond166) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond166) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond166) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond166) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond166) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond166) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond166) CFA_SP SP+0
        CFI (cfiCond166) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond167 Using cfiCommon0
        CFI (cfiCond167) NoFunction
        CFI (cfiCond167) Conditional ??CrossCallReturnLabel_24
        CFI (cfiCond167) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond167) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond167) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond167) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond167) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond167) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond167) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond167) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond167) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond167) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond167) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond167) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond167) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond167) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond167) CFA_SP SP+0
        CFI (cfiCond167) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond168 Using cfiCommon0
        CFI (cfiCond168) NoFunction
        CFI (cfiCond168) Conditional ??CrossCallReturnLabel_25
        CFI (cfiCond168) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond168) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond168) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond168) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond168) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond168) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond168) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond168) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond168) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond168) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond168) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond168) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond168) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond168) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond168) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond168) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond168) CFA_SP SP+0
        CFI (cfiCond168) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker169 Using cfiCommon1
        CFI (cfiPicker169) NoFunction
        CFI (cfiPicker169) Picker
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 5,A
        RET
        CFI EndBlock cfiCond164
        CFI EndBlock cfiCond165
        CFI EndBlock cfiCond166
        CFI EndBlock cfiCond167
        CFI EndBlock cfiCond168
        CFI EndBlock cfiPicker169
//  938 
//  939 /*********************************************************************
//  940  * @fn          ZDP_ServerDiscRsp
//  941  *
//  942  * @brief       Build and send the Server_Discovery_rsp response.
//  943  *
//  944  * @param       transID - Transaction sequence number of request.
//  945  * @param       dstAddr - Network Destination Address.
//  946  * @param       status - Status of response to request.
//  947  * @param       aoi - Network Address of Interest of request.
//  948  * @param       serverMask - Bit map of service(s) being sought.
//  949  * @param       SecurityEnable - Security Options
//  950  *
//  951  * @return      ZStatus_t
//  952  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  953 ZStatus_t ZDP_ServerDiscRsp( byte transID, zAddrType_t *dstAddr, byte status,
ZDP_ServerDiscRsp:
        CFI Block cfiBlock170 Using cfiCommon0
        CFI Function ZDP_ServerDiscRsp
        CODE
//  954                            uint16 aoi, uint16 serverMask, byte SecurityEnable )
//  955 {
        FUNCALL ZDP_ServerDiscRsp, fillAndSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     A,R1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
        MOV     A,R4
        MOV     R6,A
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine36 & 0xFFFF
//  956   const byte len = 1  + 2;  // status + aoi + mask.
//  957   uint8 *pBuf = ZDP_TmpBuf;
??CrossCallReturnLabel_61:
        LCALL   ?Subroutine35 & 0xFFFF
??CrossCallReturnLabel_55:
        MOV     DPL,R4
        MOV     DPH,R5
//  958   ZStatus_t stat;
//  959   
//  960   // Intentionally unreferenced parameters
//  961   (void)aoi;
//  962   (void)SecurityEnable;
//  963   
//  964   *pBuf++ = status;
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
//  965 
//  966   *pBuf++ = LO_UINT16( serverMask );
        LCALL   ??Subroutine122_0 & 0xFFFF
//  967   *pBuf++ = HI_UINT16( serverMask );
//  968 
//  969   ZDP_TxOptions = AF_MSG_ACK_REQUEST;
??CrossCallReturnLabel_284:
        MOV     DPTR,#ZDP_TxOptions
        MOV     A,#0x10
        MOVX    @DPTR,A
//  970   stat = fillAndSend( &transID, dstAddr, Server_Discovery_rsp, len );
        ; Setup parameters for call to function fillAndSend
        MOV     ?V0 + 0,#0x15
        MOV     ?V0 + 1,#-0x80
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 13)
        MOV     R1,#0x3
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine64 & 0xFFFF
??CrossCallReturnLabel_130:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
//  971   ZDP_TxOptions = AF_TX_OPTIONS_NONE;
        MOV     DPTR,#ZDP_TxOptions
        CLR     A
        MOVX    @DPTR,A
//  972   
//  973   return ( stat );
        INC     A
        LJMP    ??Subroutine89_0 & 0xFFFF
        CFI EndBlock cfiBlock170
//  974 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine36:
        CFI Block cfiCond171 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_60
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond172 Using cfiCommon0
        CFI (cfiCond172) NoFunction
        CFI (cfiCond172) Conditional ??CrossCallReturnLabel_61
        CFI (cfiCond172) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond172) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond172) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond172) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond172) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond172) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond172) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond172) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond172) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond172) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond172) CFA_SP SP+0
        CFI (cfiCond172) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond173 Using cfiCommon0
        CFI (cfiCond173) NoFunction
        CFI (cfiCond173) Conditional ??CrossCallReturnLabel_62
        CFI (cfiCond173) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond173) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond173) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond173) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond173) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond173) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond173) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond173) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond173) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond173) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond173) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond173) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond173) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond173) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond173) CFA_SP SP+0
        CFI (cfiCond173) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiPicker174 Using cfiCommon1
        CFI (cfiPicker174) NoFunction
        CFI (cfiPicker174) Picker
        LCALL   ?Subroutine76 & 0xFFFF
??CrossCallReturnLabel_306:
        MOV     DPTR,#ZDP_TmpBuf
        RET
        CFI EndBlock cfiCond171
        CFI EndBlock cfiCond172
        CFI EndBlock cfiCond173
        CFI EndBlock cfiPicker174
//  975 
//  976 /*********************************************************************
//  977  * @fn          ZDP_GenericRsp
//  978  *
//  979  * @brief       Sends a response message with only the parameter status
//  980  *              byte and the addr of interest for data.
//  981  *              This function sends unicast message to the
//  982  *              requesting device.
//  983  *
//  984  * @param       dstAddr - destination address
//  985  * @param       status  - generic status for response
//  986  * @param       aoi     - address of interest
//  987  * @param       dstAddr - destination address
//  988  * @param       rspId   - response cluster ID
//  989  * @param       SecurityEnable - Security Options
//  990  *
//  991  * @return      afStatus_t
//  992  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  993 afStatus_t ZDP_GenericRsp( byte TransSeq, zAddrType_t *dstAddr,
ZDP_GenericRsp:
        CFI Block cfiBlock175 Using cfiCommon0
        CFI Function ZDP_GenericRsp
        CODE
//  994                      byte status, uint16 aoi, uint16 rspID, byte SecurityEnable )
//  995 {
        FUNCALL ZDP_GenericRsp, fillAndSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     A,R1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
        MOV     A,R4
        MOV     R6,A
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine124_0 & 0xFFFF
??CrossCallReturnLabel_297:
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine98_0 & 0xFFFF
//  996   uint8 len;
//  997 
//  998   (void)SecurityEnable;  // Intentionally unreferenced parameter
//  999   
// 1000   ZDP_TmpBuf[0] = status;
??CrossCallReturnLabel_158:
        LCALL   ?Subroutine49 & 0xFFFF
??CrossCallReturnLabel_78:
        MOV     A,R6
        MOVX    @DPTR,A
// 1001   ZDP_TmpBuf[1] = LO_UINT16( aoi );
        LCALL   ?Subroutine49 & 0xFFFF
??CrossCallReturnLabel_79:
        INC     DPTR
        MOV     A,R0
        MOVX    @DPTR,A
// 1002   ZDP_TmpBuf[2] = HI_UINT16( aoi );
        LCALL   ?Subroutine29 & 0xFFFF
// 1003 
// 1004   // Length byte
// 1005   ZDP_TmpBuf[3] = 0;
??CrossCallReturnLabel_47:
        LCALL   ??Subroutine91_0 & 0xFFFF
??CrossCallReturnLabel_115:
        INC     DPTR
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
// 1006   len = 4;
// 1007 
// 1008   return fillAndSend( &TransSeq, dstAddr, rspID, len );
        ; Setup parameters for call to function fillAndSend
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 13)
        MOV     R1,#0x4
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine64 & 0xFFFF
??CrossCallReturnLabel_131:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     A,#0x1
        LJMP    ??Subroutine89_0 & 0xFFFF
        CFI EndBlock cfiBlock175
// 1009 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine49:
        CFI Block cfiCond176 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_78
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond177 Using cfiCommon0
        CFI (cfiCond177) NoFunction
        CFI (cfiCond177) Conditional ??CrossCallReturnLabel_79
        CFI (cfiCond177) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond177) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond177) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond177) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond177) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond177) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond177) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond177) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond177) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond177) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond177) CFA_SP SP+0
        CFI (cfiCond177) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker178 Using cfiCommon1
        CFI (cfiPicker178) NoFunction
        CFI (cfiPicker178) Picker
        MOV     DPTR,#ZDP_TmpBuf
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R4
        RET
        CFI EndBlock cfiCond176
        CFI EndBlock cfiCond177
        CFI EndBlock cfiPicker178

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine29:
        CFI Block cfiCond179 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_46
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond180 Using cfiCommon0
        CFI (cfiCond180) NoFunction
        CFI (cfiCond180) Conditional ??CrossCallReturnLabel_47
        CFI (cfiCond180) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond180) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond180) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond180) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond180) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond180) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond180) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond180) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond180) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond180) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond180) CFA_SP SP+0
        CFI (cfiCond180) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker181 Using cfiCommon1
        CFI (cfiPicker181) NoFunction
        CFI (cfiPicker181) Picker
        LCALL   ?Subroutine72 & 0xFFFF
??CrossCallReturnLabel_118:
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond179
        CFI EndBlock cfiCond180
        CFI EndBlock cfiPicker181
// 1010 
// 1011 /*********************************************************************
// 1012  * Binding
// 1013  */
// 1014 /*********************************************************************
// 1015  * @fn          ZDP_EndDeviceBindReq
// 1016  *
// 1017  * @brief       This builds and sends a End_Device_Bind_req message.
// 1018  *              This function sends a unicast message.
// 1019  *
// 1020  * @param       dstAddr - destination address
// 1021  * @param       LocalCoordinator - short address of local coordinator
// 1022  * @param       epIntf - Endpoint/Interface of Simple Desc
// 1023  * @param       ProfileID - Profile ID
// 1024  *
// 1025  *   The Input cluster list is the opposite of what you would think.
// 1026  *   This is the output cluster list of this device
// 1027  * @param       NumInClusters - number of input clusters
// 1028  * @param       InClusterList - input cluster ID list
// 1029  *
// 1030  *   The Output cluster list is the opposite of what you would think.
// 1031  *   This is the input cluster list of this device
// 1032  * @param       NumOutClusters - number of output clusters
// 1033  * @param       OutClusterList - output cluster ID list
// 1034  *
// 1035  * @param       SecurityEnable - Security Options
// 1036  *
// 1037  * @return      afStatus_t
// 1038  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1039 afStatus_t ZDP_EndDeviceBindReq( zAddrType_t *dstAddr,
ZDP_EndDeviceBindReq:
        CFI Block cfiBlock182 Using cfiCommon0
        CFI Function ZDP_EndDeviceBindReq
        CODE
// 1040                                  uint16 LocalCoordinator,
// 1041                                  byte endPoint,
// 1042                                  uint16 ProfileID,
// 1043                                  byte NumInClusters, cId_t *InClusterList,
// 1044                                  byte NumOutClusters, cId_t *OutClusterList,
// 1045                                  byte SecurityEnable )
// 1046 {
        FUNCALL ZDP_EndDeviceBindReq, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_EndDeviceBindReq, NLME_GetExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_EndDeviceBindReq, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_EndDeviceBindReq, fillAndSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 4
        MOV     A,#-0x4
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine108_0 & 0xFFFF
??CrossCallReturnLabel_205:
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R1
        MOVX    @DPTR,A
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
        MOV     A,#0x14
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine98_0 & 0xFFFF
??CrossCallReturnLabel_159:
        MOV     A,#0x16
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 6,A
        MOV     A,#0x19
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 7,A
// 1047   uint8 *pBuf = ZDP_TmpBuf;
        MOV     DPTR,#ZDP_TmpBuf
        LCALL   ?Subroutine73 & 0xFFFF
// 1048   uint8 i, len;
// 1049   uint8 *ieeeAddr;
// 1050 
// 1051   (void)SecurityEnable;  // Intentionally unreferenced parameter
// 1052   
// 1053   // LocalCoordinator + SrcExtAddr + ep + ProfileID +  NumInClusters + NumOutClusters.
// 1054   len = 2 + Z_EXTADDR_LEN + 1 + 2 + 1 + 1;
// 1055   len += (NumInClusters + NumOutClusters) * sizeof ( uint16 );
??CrossCallReturnLabel_108:
        MOV     A,?V0 + 6
        ADD     A,?V0 + 7
        CLR     C
        RLC     A
        ADD     A,#0xf
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
// 1056 
// 1057   if ( len >= ZDP_BUF_SZ-1 )
        CLR     C
        SUBB    A,#0x4f
        JC      ??ZDP_EndDeviceBindReq_0
// 1058   {
// 1059     return afStatus_MEM_FAIL;
        MOV     R1,#0x10
        LJMP    ??ZDP_EndDeviceBindReq_1 & 0xFFFF
// 1060   }
// 1061 
// 1062   if ( LocalCoordinator != NLME_GetShortAddr() )
??ZDP_EndDeviceBindReq_0:
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   ??NLME_GetShortAddr?relay
        MOV     A,R2
        XRL     A,R6
        JNZ     ??ZDP_EndDeviceBindReq_2
        MOV     A,R3
        XRL     A,R7
??ZDP_EndDeviceBindReq_2:
        JZ      ??ZDP_EndDeviceBindReq_3
// 1063   {
// 1064     return afStatus_INVALID_PARAMETER;
        MOV     R1,#0x2
        LJMP    ??ZDP_EndDeviceBindReq_1 & 0xFFFF
// 1065   }
// 1066 
// 1067   *pBuf++ = LO_UINT16( LocalCoordinator );
??ZDP_EndDeviceBindReq_3:
        MOV     A,R6
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        MOVX    @DPTR,A
        INC     DPTR
// 1068   *pBuf++ = HI_UINT16( LocalCoordinator );
        MOV     A,R7
        LCALL   ?Subroutine63 & 0xFFFF
// 1069 
// 1070   ieeeAddr = NLME_GetExtAddr();
// 1071   pBuf = osal_cpyExtAddr( pBuf, ieeeAddr );
??CrossCallReturnLabel_101:
        ; Setup parameters for call to function sAddrExtCpy
        ; Setup parameters for call to function NLME_GetExtAddr
        LCALL   ??NLME_GetExtAddr?relay
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        LCALL   ??sAddrExtCpy?relay
// 1072 
// 1073   *pBuf++ = endPoint;
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine115_0 & 0xFFFF
// 1074 
// 1075   *pBuf++ = LO_UINT16( ProfileID );   // Profile ID
??CrossCallReturnLabel_236:
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
        INC     DPTR
// 1076   *pBuf++ = HI_UINT16( ProfileID );
        MOV     A,?V0 + 1
        MOVX    @DPTR,A
        INC     DPTR
// 1077 
// 1078   *pBuf++ = NumInClusters; // Input cluster list
        MOV     A,?V0 + 6
        LCALL   ?Subroutine63 & 0xFFFF
// 1079   for ( i = 0; i < NumInClusters; ++i )
??CrossCallReturnLabel_102:
        MOV     R4,#0x0
        SJMP    ??ZDP_EndDeviceBindReq_4
// 1080   {
// 1081     *pBuf++ = LO_UINT16(InClusterList[i]);
??ZDP_EndDeviceBindReq_5:
        MOV     A,R4
        CLR     C
        RLC     A
        MOV     R2,A
        CLR     A
        RLC     A
        MOV     R3,A
        MOV     A,#0x17
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ADD     A,R2
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R3
        MOV     R3,A
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ?Subroutine48 & 0xFFFF
// 1082     *pBuf++ = HI_UINT16(InClusterList[i]);
??CrossCallReturnLabel_77:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        LCALL   ?Subroutine38 & 0xFFFF
// 1083   }
??CrossCallReturnLabel_63:
        MOV     ?V0 + 2,DPL
        MOV     ?V0 + 3,DPH
        INC     R4
??ZDP_EndDeviceBindReq_4:
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        INC     DPTR
        MOV     R0,DPL
        MOV     R1,DPH
        MOV     A,R4
        CLR     C
        SUBB    A,?V0 + 6
        JC      ??ZDP_EndDeviceBindReq_5
// 1084 
// 1085   *pBuf++ = NumOutClusters; // Output cluster list
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        MOV     A,?V0 + 7
        MOVX    @DPTR,A
        MOV     ?V0 + 2,R0
        MOV     ?V0 + 3,R1
// 1086   for ( i = 0; i < NumOutClusters; ++i )
        MOV     R4,#0x0
        SJMP    ??ZDP_EndDeviceBindReq_6
// 1087   {
// 1088     *pBuf++ = LO_UINT16(OutClusterList[i]);
??ZDP_EndDeviceBindReq_7:
        MOV     A,R4
        CLR     C
        RLC     A
        MOV     R0,A
        CLR     A
        RLC     A
        MOV     R1,A
        MOV     A,#0x1a
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        LCALL   ?Subroutine26 & 0xFFFF
// 1089     *pBuf++ = HI_UINT16(OutClusterList[i]);
??CrossCallReturnLabel_37:
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        LCALL   ?Subroutine26 & 0xFFFF
// 1090   }
??CrossCallReturnLabel_38:
        INC     R4
??ZDP_EndDeviceBindReq_6:
        MOV     A,R4
        CLR     C
        SUBB    A,?V0 + 7
        JC      ??ZDP_EndDeviceBindReq_7
// 1091 
// 1092   return fillAndSend( &ZDP_TransID, dstAddr, End_Device_Bind_req, len );
        ; Setup parameters for call to function fillAndSend
        MOV     ?V0 + 0,#0x20
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_1:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
        CFI EndBlock cfiBlock182
??ZDP_EndDeviceBindReq_1:
        REQUIRE ?Subroutine6
        ; // Fall through to label ?Subroutine6
// 1093 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiBlock183 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0x4
        LJMP    ??Subroutine100_0 & 0xFFFF
        CFI EndBlock cfiBlock183

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine73:
        CFI Block cfiCond184 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_110, ??CrossCallReturnLabel_74
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond185 Using cfiCommon0
        CFI (cfiCond185) NoFunction
        CFI (cfiCond185) Conditional ??CrossCallReturnLabel_110, ??CrossCallReturnLabel_75
        CFI (cfiCond185) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond185) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond185) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond185) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond185) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond185) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond185) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond185) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond185) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond185) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond185) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond185) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond185) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond185) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond185) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond185) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond185) CFA_SP SP+0
        CFI (cfiCond185) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond186 Using cfiCommon0
        CFI (cfiCond186) NoFunction
        CFI (cfiCond186) Conditional ??CrossCallReturnLabel_108
        CFI (cfiCond186) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond186) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond186) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond186) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond186) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond186) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond186) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond186) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond186) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond186) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond186) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond186) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond186) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond186) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond186) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond186) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond186) CFA_SP SP+0
        CFI (cfiCond186) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond187 Using cfiCommon0
        CFI (cfiCond187) NoFunction
        CFI (cfiCond187) Conditional ??CrossCallReturnLabel_109
        CFI (cfiCond187) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond187) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond187) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond187) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond187) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond187) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond187) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond187) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond187) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond187) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond187) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond187) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond187) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond187) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond187) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond187) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond187) CFA_SP SP+0
        CFI (cfiCond187) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiPicker188 Using cfiCommon1
        CFI (cfiPicker188) NoFunction
        CFI (cfiPicker188) Picker
        MOVX    A,@DPTR
        MOV     ?V0 + 2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 3,A
        RET
        CFI EndBlock cfiCond184
        CFI EndBlock cfiCond185
        CFI EndBlock cfiCond186
        CFI EndBlock cfiCond187
        CFI EndBlock cfiPicker188

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine63:
        CFI Block cfiCond189 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_101
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond190 Using cfiCommon0
        CFI (cfiCond190) NoFunction
        CFI (cfiCond190) Conditional ??CrossCallReturnLabel_102
        CFI (cfiCond190) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond190) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond190) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond190) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond190) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond190) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond190) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond190) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond190) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond190) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond190) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond190) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond190) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond190) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond190) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond190) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond190) CFA_SP SP+0
        CFI (cfiCond190) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiPicker191 Using cfiCommon1
        CFI (cfiPicker191) NoFunction
        CFI (cfiPicker191) Picker
        MOVX    @DPTR,A
        INC     DPTR
        MOV     ?V0 + 2,DPL
        MOV     ?V0 + 3,DPH
        RET
        CFI EndBlock cfiCond189
        CFI EndBlock cfiCond190
        CFI EndBlock cfiPicker191

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine48:
        CFI Block cfiCond192 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_76
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 26)
        CFI Block cfiCond193 Using cfiCommon0
        CFI (cfiCond193) NoFunction
        CFI (cfiCond193) Conditional ??CrossCallReturnLabel_77
        CFI (cfiCond193) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond193) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond193) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond193) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond193) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond193) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond193) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond193) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond193) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond193) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond193) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond193) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond193) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond193) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond193) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond193) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond193) CFA_SP SP+0
        CFI (cfiCond193) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiPicker194 Using cfiCommon1
        CFI (cfiPicker194) NoFunction
        CFI (cfiPicker194) Picker
        LCALL   ?Subroutine78 & 0xFFFF
??CrossCallReturnLabel_112:
        RET
        CFI EndBlock cfiCond192
        CFI EndBlock cfiCond193
        CFI EndBlock cfiPicker194

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine78:
        CFI Block cfiCond195 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_112, ??CrossCallReturnLabel_76
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 26)
        CFI Block cfiCond196 Using cfiCommon0
        CFI (cfiCond196) NoFunction
        CFI (cfiCond196) Conditional ??CrossCallReturnLabel_112, ??CrossCallReturnLabel_77
        CFI (cfiCond196) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond196) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond196) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond196) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond196) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond196) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond196) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond196) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond196) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond196) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond196) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond196) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond196) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond196) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond196) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond196) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond196) CFA_SP SP+0
        CFI (cfiCond196) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond197 Using cfiCommon0
        CFI (cfiCond197) NoFunction
        CFI (cfiCond197) Conditional ??CrossCallReturnLabel_111, ??CrossCallReturnLabel_37
        CFI (cfiCond197) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond197) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond197) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond197) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond197) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond197) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond197) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond197) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond197) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond197) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond197) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond197) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond197) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond197) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond197) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond197) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond197) CFA_SP SP+0
        CFI (cfiCond197) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond198 Using cfiCommon0
        CFI (cfiCond198) NoFunction
        CFI (cfiCond198) Conditional ??CrossCallReturnLabel_111, ??CrossCallReturnLabel_38
        CFI (cfiCond198) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond198) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond198) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond198) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond198) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond198) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond198) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond198) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond198) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond198) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond198) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond198) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond198) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond198) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond198) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond198) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond198) CFA_SP SP+0
        CFI (cfiCond198) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiPicker199 Using cfiCommon1
        CFI (cfiPicker199) NoFunction
        CFI (cfiPicker199) Picker
        MOVX    A,@DPTR
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond195
        CFI EndBlock cfiCond196
        CFI EndBlock cfiCond197
        CFI EndBlock cfiCond198
        CFI EndBlock cfiPicker199

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine26:
        CFI Block cfiCond200 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_37
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond201 Using cfiCommon0
        CFI (cfiCond201) NoFunction
        CFI (cfiCond201) Conditional ??CrossCallReturnLabel_38
        CFI (cfiCond201) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond201) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond201) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond201) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond201) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond201) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond201) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond201) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond201) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond201) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond201) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond201) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond201) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond201) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond201) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond201) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond201) CFA_SP SP+0
        CFI (cfiCond201) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiPicker202 Using cfiCommon1
        CFI (cfiPicker202) NoFunction
        CFI (cfiPicker202) Picker
        LCALL   ?Subroutine78 & 0xFFFF
??CrossCallReturnLabel_111:
        INC     DPTR
        MOV     ?V0 + 2,DPL
        MOV     ?V0 + 3,DPH
        RET
        CFI EndBlock cfiCond200
        CFI EndBlock cfiCond201
        CFI EndBlock cfiPicker202
// 1094 
// 1095 /*********************************************************************
// 1096  * @fn          ZDP_BindUnbindReq
// 1097  *
// 1098  * @brief       This builds and send a Bind_req or Unbind_req message
// 1099  *              Depending on the ClusterID. This function
// 1100  *              sends a unicast message to the local coordinator.
// 1101  *
// 1102  * @param       BindOrUnbind - either Bind_req or Unbind_req
// 1103  * @param       dstAddr - destination address of the message
// 1104  * @param       SourceAddr - source 64 bit address of the binding
// 1105  * @param       SrcEPIntf - Source endpoint/interface
// 1106  * @param       ClusterID - Binding cluster ID
// 1107  * @param       DestinationAddr - destination 64 bit addr of binding
// 1108  * @param       DstEPIntf - destination endpoint/interface
// 1109  * @param       SecurityEnable - Security Options
// 1110  *
// 1111  * @return      afStatus_t
// 1112  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1113 afStatus_t ZDP_BindUnbindReq( uint16 BindOrUnbind, zAddrType_t *dstAddr,
ZDP_BindUnbindReq:
        CFI Block cfiBlock203 Using cfiCommon0
        CFI Function ZDP_BindUnbindReq
        CODE
// 1114                               uint8 *SourceAddr, byte SrcEndPoint,
// 1115                               cId_t ClusterID,
// 1116                               zAddrType_t *destinationAddr, byte DstEndPoint,
// 1117                               byte SecurityEnable )
// 1118 {
        FUNCALL ZDP_BindUnbindReq, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_BindUnbindReq, sAddrExtCpy
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 1, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_BindUnbindReq, fillAndSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 3
        MOV     A,#-0x3
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
        MOV     A,R1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,#0x13
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine35 & 0xFFFF
??CrossCallReturnLabel_56:
        MOV     A,#0x15
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_16:
        MOV     A,#0x17
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine73 & 0xFFFF
??CrossCallReturnLabel_109:
        MOV     A,#0x19
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 7,A
// 1119   uint8 *pBuf = ZDP_TmpBuf;
        LCALL   ?Subroutine44 & 0xFFFF
// 1120   byte len;
// 1121 
// 1122   (void)SecurityEnable;  // Intentionally unreferenced parameter
// 1123   
// 1124   // SourceAddr + SrcEPIntf + ClusterID +  addrMode.
// 1125   len = Z_EXTADDR_LEN + 1 + sizeof( cId_t ) + sizeof( uint8 );
??CrossCallReturnLabel_275:
        MOV     ?V0 + 6,#0xc
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,#0x3
        XRL     A,R0
        JNZ     ??ZDP_BindUnbindReq_0
// 1126   if ( destinationAddr->addrMode == Addr64Bit )
// 1127     len += Z_EXTADDR_LEN + 1;     // +1 for DstEPIntf
        MOV     ?V0 + 6,#0x15
        SJMP    ??ZDP_BindUnbindReq_1
// 1128   else if ( destinationAddr->addrMode == AddrGroup )
??ZDP_BindUnbindReq_0:
        MOV     A,#0x1
        XRL     A,R0
        JNZ     ??ZDP_BindUnbindReq_1
// 1129     len += sizeof ( uint16 );
        MOV     ?V0 + 6,#0xe
// 1130 
// 1131   pBuf = osal_cpyExtAddr( pBuf, SourceAddr );
??ZDP_BindUnbindReq_1:
        ; Setup parameters for call to function sAddrExtCpy
        LCALL   ??sAddrExtCpy?relay
// 1132   *pBuf++ = SrcEndPoint;
        LCALL   ?Subroutine41 & 0xFFFF
// 1133 
// 1134   *pBuf++ = LO_UINT16( ClusterID );
??CrossCallReturnLabel_238:
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
// 1135 
// 1136   *pBuf++ = HI_UINT16( ClusterID );
        MOV     A,R7
        LCALL   ??Subroutine114_0 & 0xFFFF
// 1137   *pBuf++ = destinationAddr->addrMode;
??CrossCallReturnLabel_232:
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine23 & 0xFFFF
// 1138   if ( destinationAddr->addrMode == Addr64Bit )
??CrossCallReturnLabel_31:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,#0x3
        XRL     A,R0
        JNZ     ??ZDP_BindUnbindReq_2
// 1139   {
// 1140     pBuf = osal_cpyExtAddr( pBuf, destinationAddr->addr.extAddr );
// 1141     *pBuf = DstEndPoint;
        ; Setup parameters for call to function sAddrExtCpy
        MOV     R4,?V0 + 2
        MOV     R5,?V0 + 3
        LCALL   ??sAddrExtCpy?relay
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,?V0 + 7
        SJMP    ??ZDP_BindUnbindReq_3
// 1142   }
// 1143   else if ( destinationAddr->addrMode == AddrGroup )
??ZDP_BindUnbindReq_2:
        MOV     A,#0x1
        XRL     A,R0
        JNZ     ??ZDP_BindUnbindReq_4
// 1144   {
// 1145     *pBuf++ = LO_UINT16( destinationAddr->addr.shortAddr );
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        LCALL   ?Subroutine23 & 0xFFFF
// 1146     *pBuf++ = HI_UINT16( destinationAddr->addr.shortAddr );
// 1147   }
??CrossCallReturnLabel_32:
        MOVX    A,@DPTR
        MOV     DPL,R2
        MOV     DPH,R3
??ZDP_BindUnbindReq_3:
        MOVX    @DPTR,A
// 1148 
// 1149   FillAndSendTxOptions( &ZDP_TransID, dstAddr, BindOrUnbind, len, AF_MSG_ACK_REQUEST );
??ZDP_BindUnbindReq_4:
        MOV     DPTR,#ZDP_TxOptions
        MOV     A,#0x10
        MOVX    @DPTR,A
        ; Setup parameters for call to function fillAndSend
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 21)
        MOV     R1,?V0 + 6
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_2:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     DPTR,#ZDP_TxOptions
        CLR     A
        MOVX    @DPTR,A
        LJMP    ?Subroutine3 & 0xFFFF
        CFI EndBlock cfiBlock203
// 1150 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine35:
        CFI Block cfiCond204 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_53
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond205 Using cfiCommon0
        CFI (cfiCond205) NoFunction
        CFI (cfiCond205) Conditional ??CrossCallReturnLabel_54
        CFI (cfiCond205) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond205) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond205) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond205) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond205) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond205) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond205) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond205) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond205) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond205) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond205) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond205) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond205) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond205) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond205) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond205) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond205) CFA_SP SP+0
        CFI (cfiCond205) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond206 Using cfiCommon0
        CFI (cfiCond206) NoFunction
        CFI (cfiCond206) Conditional ??CrossCallReturnLabel_55
        CFI (cfiCond206) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond206) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond206) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond206) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond206) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond206) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond206) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond206) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond206) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond206) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond206) CFA_SP SP+0
        CFI (cfiCond206) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond207 Using cfiCommon0
        CFI (cfiCond207) NoFunction
        CFI (cfiCond207) Conditional ??CrossCallReturnLabel_56
        CFI (cfiCond207) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond207) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond207) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond207) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond207) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond207) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond207) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond207) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond207) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond207) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond207) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond207) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond207) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond207) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond207) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond207) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond207) CFA_SP SP+0
        CFI (cfiCond207) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond208 Using cfiCommon0
        CFI (cfiCond208) NoFunction
        CFI (cfiCond208) Conditional ??CrossCallReturnLabel_57
        CFI (cfiCond208) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond208) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond208) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond208) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond208) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond208) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond208) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond208) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond208) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond208) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond208) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond208) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond208) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond208) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond208) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond208) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond208) CFA_SP SP+0
        CFI (cfiCond208) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond209 Using cfiCommon0
        CFI (cfiCond209) NoFunction
        CFI (cfiCond209) Conditional ??CrossCallReturnLabel_58
        CFI (cfiCond209) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond209) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond209) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond209) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond209) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond209) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond209) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond209) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond209) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond209) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond209) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond209) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond209) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond209) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond209) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond209) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond209) CFA_SP SP+0
        CFI (cfiCond209) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond210 Using cfiCommon0
        CFI (cfiCond210) NoFunction
        CFI (cfiCond210) Conditional ??CrossCallReturnLabel_59
        CFI (cfiCond210) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond210) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond210) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond210) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond210) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond210) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond210) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond210) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond210) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond210) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond210) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond210) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond210) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond210) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond210) CFA_SP SP+0
        CFI (cfiCond210) CFA_XSP16 add(XSP16, 26)
        CFI Block cfiPicker211 Using cfiCommon1
        CFI (cfiPicker211) NoFunction
        CFI (cfiPicker211) Picker
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        RET
        CFI EndBlock cfiCond204
        CFI EndBlock cfiCond205
        CFI EndBlock cfiCond206
        CFI EndBlock cfiCond207
        CFI EndBlock cfiCond208
        CFI EndBlock cfiCond209
        CFI EndBlock cfiCond210
        CFI EndBlock cfiPicker211

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine23:
        CFI Block cfiCond212 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_31
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond213 Using cfiCommon0
        CFI (cfiCond213) NoFunction
        CFI (cfiCond213) Conditional ??CrossCallReturnLabel_32
        CFI (cfiCond213) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond213) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond213) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond213) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond213) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond213) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond213) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond213) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond213) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond213) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond213) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond213) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond213) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond213) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond213) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond213) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond213) CFA_SP SP+0
        CFI (cfiCond213) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiPicker214 Using cfiCommon1
        CFI (cfiPicker214) NoFunction
        CFI (cfiPicker214) Picker
        LCALL   ??Subroutine94_0 & 0xFFFF
??CrossCallReturnLabel_258:
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        INC     DPTR
        RET
        CFI EndBlock cfiCond212
        CFI EndBlock cfiCond213
        CFI EndBlock cfiPicker214

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine17:
        CFI Block cfiCond215 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_12
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 26)
        CFI Block cfiCond216 Using cfiCommon0
        CFI (cfiCond216) NoFunction
        CFI (cfiCond216) Conditional ??CrossCallReturnLabel_13
        CFI (cfiCond216) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond216) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond216) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond216) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond216) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond216) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond216) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond216) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond216) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond216) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond216) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond216) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond216) CFA_SP SP+0
        CFI (cfiCond216) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond217 Using cfiCommon0
        CFI (cfiCond217) NoFunction
        CFI (cfiCond217) Conditional ??CrossCallReturnLabel_14
        CFI (cfiCond217) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond217) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond217) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond217) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond217) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond217) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond217) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond217) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond217) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond217) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond217) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond217) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond217) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond217) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond217) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond217) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond217) CFA_SP SP+0
        CFI (cfiCond217) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond218 Using cfiCommon0
        CFI (cfiCond218) NoFunction
        CFI (cfiCond218) Conditional ??CrossCallReturnLabel_15
        CFI (cfiCond218) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond218) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond218) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond218) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond218) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond218) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond218) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond218) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond218) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond218) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond218) CFA_SP SP+0
        CFI (cfiCond218) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond219 Using cfiCommon0
        CFI (cfiCond219) NoFunction
        CFI (cfiCond219) Conditional ??CrossCallReturnLabel_16
        CFI (cfiCond219) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond219) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond219) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond219) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond219) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond219) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond219) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond219) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond219) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond219) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond219) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond219) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond219) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond219) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond219) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond219) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond219) CFA_SP SP+0
        CFI (cfiCond219) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond220 Using cfiCommon0
        CFI (cfiCond220) NoFunction
        CFI (cfiCond220) Conditional ??CrossCallReturnLabel_17
        CFI (cfiCond220) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond220) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond220) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond220) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond220) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond220) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond220) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond220) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond220) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond220) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond220) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond220) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond220) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond220) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond220) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond220) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond220) CFA_SP SP+0
        CFI (cfiCond220) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond221 Using cfiCommon0
        CFI (cfiCond221) NoFunction
        CFI (cfiCond221) Conditional ??CrossCallReturnLabel_18
        CFI (cfiCond221) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond221) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond221) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond221) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond221) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond221) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond221) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond221) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond221) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond221) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond221) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond221) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond221) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond221) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond221) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond221) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond221) CFA_SP SP+0
        CFI (cfiCond221) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond222 Using cfiCommon0
        CFI (cfiCond222) NoFunction
        CFI (cfiCond222) Conditional ??CrossCallReturnLabel_19
        CFI (cfiCond222) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond222) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond222) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond222) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond222) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond222) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond222) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond222) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond222) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond222) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond222) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond222) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond222) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond222) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond222) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond222) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond222) CFA_SP SP+0
        CFI (cfiCond222) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond223 Using cfiCommon0
        CFI (cfiCond223) NoFunction
        CFI (cfiCond223) Conditional ??CrossCallReturnLabel_20
        CFI (cfiCond223) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond223) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond223) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond223) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond223) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond223) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond223) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond223) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond223) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond223) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond223) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond223) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond223) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond223) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond223) CFA_SP SP+0
        CFI (cfiCond223) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiPicker224 Using cfiCommon1
        CFI (cfiPicker224) NoFunction
        CFI (cfiPicker224) Picker
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
        RET
        CFI EndBlock cfiCond215
        CFI EndBlock cfiCond216
        CFI EndBlock cfiCond217
        CFI EndBlock cfiCond218
        CFI EndBlock cfiCond219
        CFI EndBlock cfiCond220
        CFI EndBlock cfiCond221
        CFI EndBlock cfiCond222
        CFI EndBlock cfiCond223
        CFI EndBlock cfiPicker224

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
        CFI Block cfiCond225 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond226 Using cfiCommon0
        CFI (cfiCond226) NoFunction
        CFI (cfiCond226) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond226) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond226) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond226) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond226) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond226) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond226) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond226) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond226) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond226) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond226) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond226) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond226) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond226) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond226) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond226) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond226) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond226) CFA_SP SP+0
        CFI (cfiCond226) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond227 Using cfiCommon0
        CFI (cfiCond227) NoFunction
        CFI (cfiCond227) Conditional ??CrossCallReturnLabel_2
        CFI (cfiCond227) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond227) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond227) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond227) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond227) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond227) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond227) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond227) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond227) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond227) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond227) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond227) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond227) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond227) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond227) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond227) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond227) CFA_SP SP+0
        CFI (cfiCond227) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond228 Using cfiCommon0
        CFI (cfiCond228) NoFunction
        CFI (cfiCond228) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond228) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond228) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond228) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond228) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond228) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond228) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond228) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond228) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond228) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond228) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond228) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond228) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond228) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond228) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond228) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond228) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond228) CFA_SP SP+0
        CFI (cfiCond228) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiPicker229 Using cfiCommon1
        CFI (cfiPicker229) NoFunction
        CFI (cfiPicker229) Picker
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     R2,#ZDP_TransID & 0xff
        MOV     R3,#(ZDP_TransID >> 8) & 0xff
        LCALL   ??fillAndSend?relay
        MOV     A,#0x2
        RET
        CFI EndBlock cfiCond225
        CFI EndBlock cfiCond226
        CFI EndBlock cfiCond227
        CFI EndBlock cfiCond228
        CFI EndBlock cfiPicker229
// 1151 
// 1152 /*********************************************************************
// 1153  * Network Management
// 1154  */
// 1155 
// 1156 /*********************************************************************
// 1157  * @fn          ZDP_MgmtNwkDiscReq
// 1158  *
// 1159  * @brief       This builds and send a Mgmt_NWK_Disc_req message. This
// 1160  *              function sends a unicast message.
// 1161  *
// 1162  * @param       dstAddr - destination address of the message
// 1163  * @param       ScanChannels - 32 bit address bit map
// 1164  * @param       StartIndex - Starting index within the reporting network
// 1165  *                           list
// 1166  * @param       SecurityEnable - Security Options
// 1167  *
// 1168  * @return      afStatus_t
// 1169  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1170 afStatus_t ZDP_MgmtNwkDiscReq( zAddrType_t *dstAddr,
ZDP_MgmtNwkDiscReq:
        CFI Block cfiBlock230 Using cfiCommon0
        CFI Function ZDP_MgmtNwkDiscReq
        CODE
// 1171                                uint32 ScanChannels,
// 1172                                byte ScanDuration,
// 1173                                byte StartIndex,
// 1174                                byte SecurityEnable )
// 1175 {
        FUNCALL ZDP_MgmtNwkDiscReq, osal_buffer_uint32
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_MgmtNwkDiscReq, fillAndSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     A,R1
        MOV     R7,A
        MOV     A,R4
        MOV     R6,A
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
// 1176   uint8 *pBuf = ZDP_TmpBuf;
// 1177   byte len = sizeof( uint32 )+1+1;  // ScanChannels + ScanDuration + StartIndex.
// 1178 
// 1179   (void)SecurityEnable;  // Intentionally unreferenced parameter
// 1180   
// 1181   pBuf = osal_buffer_uint32( pBuf, ScanChannels );
        ; Setup parameters for call to function osal_buffer_uint32
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_FOUR
        CFI CFA_XSP16 add(XSP16, 18)
        LCALL   ?Subroutine43 & 0xFFFF
??CrossCallReturnLabel_70:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     DPL,R2
        MOV     DPH,R3
// 1182 
// 1183   *pBuf++ = ScanDuration;
        MOV     A,R7
        MOVX    @DPTR,A
        INC     DPTR
// 1184   *pBuf = StartIndex;
        MOV     A,R6
        MOVX    @DPTR,A
// 1185 
// 1186   return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_NWK_Disc_req, len );
        ; Setup parameters for call to function fillAndSend
        MOV     ?V0 + 0,#0x30
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     R1,#0x6
        MOV     R4,?V0 + 4
        MOV     R5,?V0 + 5
        MOV     R2,#ZDP_TransID & 0xff
        MOV     R3,#(ZDP_TransID >> 8) & 0xff
        LCALL   ??Subroutine96_0 & 0xFFFF
??CrossCallReturnLabel_146:
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock230
// 1187 }
// 1188 
// 1189 /*********************************************************************
// 1190  * @fn          ZDP_MgmtDirectJoinReq
// 1191  *
// 1192  * @brief       This builds and send a Mgmt_Direct_Join_req message. This
// 1193  *              function sends a unicast message.
// 1194  *
// 1195  * @param       dstAddr - destination address of the message
// 1196  * @param       deviceAddr - 64 bit IEEE Address
// 1197  * @param       SecurityEnable - Security Options
// 1198  *
// 1199  * @return      afStatus_t
// 1200  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1201 afStatus_t ZDP_MgmtDirectJoinReq( zAddrType_t *dstAddr,
ZDP_MgmtDirectJoinReq:
        CFI Block cfiBlock231 Using cfiCommon0
        CFI Function ZDP_MgmtDirectJoinReq
        CODE
// 1202                                uint8 *deviceAddr,
// 1203                                byte capInfo,
// 1204                                byte SecurityEnable )
// 1205 {
        FUNCALL ZDP_MgmtDirectJoinReq, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_MgmtDirectJoinReq, fillAndSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0 + 0,R1
// 1206   (void)SecurityEnable;  // Intentionally unreferenced parameter
// 1207   
// 1208   osal_cpyExtAddr( ZDP_TmpBuf, deviceAddr );
        ; Setup parameters for call to function sAddrExtCpy
        MOV     DPTR,#ZDP_TmpBuf
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        LCALL   ?Subroutine24 & 0xFFFF
// 1209   ZDP_TmpBuf[Z_EXTADDR_LEN] = capInfo;
??CrossCallReturnLabel_34:
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
// 1210 
// 1211   return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_Direct_Join_req, (Z_EXTADDR_LEN + 1) );
        ; Setup parameters for call to function fillAndSend
        MOV     ?V0 + 2,#0x35
        CFI EndBlock cfiBlock231
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2
// 1212 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiBlock232 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     ?V0 + 3,#0x0
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     R1,#0x9
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,#ZDP_TransID & 0xff
        MOV     R3,#(ZDP_TransID >> 8) & 0xff
        LCALL   ??Subroutine96_0 & 0xFFFF
        CFI EndBlock cfiBlock232
??CrossCallReturnLabel_147:
        REQUIRE ??Subroutine95_0
        ; // Fall through to label ??Subroutine95_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine95_0:
        CFI Block cfiBlock233 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 21)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Valid
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock233

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine64:
        CFI Block cfiCond234 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_128
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond235 Using cfiCommon0
        CFI (cfiCond235) NoFunction
        CFI (cfiCond235) Conditional ??CrossCallReturnLabel_129
        CFI (cfiCond235) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond235) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond235) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond235) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond235) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond235) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond235) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond235) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond235) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond235) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond235) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond235) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond235) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond235) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond235) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond235) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond235) CFA_SP SP+0
        CFI (cfiCond235) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond236 Using cfiCommon0
        CFI (cfiCond236) NoFunction
        CFI (cfiCond236) Conditional ??CrossCallReturnLabel_130
        CFI (cfiCond236) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond236) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond236) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond236) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond236) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond236) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond236) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond236) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond236) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond236) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond236) CFA_SP SP+0
        CFI (cfiCond236) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond237 Using cfiCommon0
        CFI (cfiCond237) NoFunction
        CFI (cfiCond237) Conditional ??CrossCallReturnLabel_131
        CFI (cfiCond237) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond237) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond237) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond237) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond237) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond237) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond237) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond237) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond237) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond237) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond237) CFA_SP SP+0
        CFI (cfiCond237) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond238 Using cfiCommon0
        CFI (cfiCond238) NoFunction
        CFI (cfiCond238) Conditional ??CrossCallReturnLabel_132
        CFI (cfiCond238) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond238) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond238) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond238) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond238) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond238) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond238) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond238) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond238) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond238) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond238) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond238) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond238) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond238) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond238) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond238) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond238) CFA_SP SP+0
        CFI (cfiCond238) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond239 Using cfiCommon0
        CFI (cfiCond239) NoFunction
        CFI (cfiCond239) Conditional ??CrossCallReturnLabel_133
        CFI (cfiCond239) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond239) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond239) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond239) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond239) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond239) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond239) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond239) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond239) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond239) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond239) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond239) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond239) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond239) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond239) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond239) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond239) CFA_SP SP+0
        CFI (cfiCond239) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond240 Using cfiCommon0
        CFI (cfiCond240) NoFunction
        CFI (cfiCond240) Conditional ??CrossCallReturnLabel_134
        CFI (cfiCond240) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond240) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond240) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond240) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond240) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond240) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond240) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond240) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond240) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond240) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond240) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond240) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond240) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond240) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond240) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond240) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond240) CFA_SP SP+0
        CFI (cfiCond240) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond241 Using cfiCommon0
        CFI (cfiCond241) NoFunction
        CFI (cfiCond241) Conditional ??CrossCallReturnLabel_135
        CFI (cfiCond241) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond241) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond241) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond241) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond241) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond241) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond241) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond241) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond241) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond241) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond241) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond241) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond241) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond241) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond241) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond241) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond241) CFA_SP SP+0
        CFI (cfiCond241) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond242 Using cfiCommon0
        CFI (cfiCond242) NoFunction
        CFI (cfiCond242) Conditional ??CrossCallReturnLabel_136
        CFI (cfiCond242) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond242) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond242) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond242) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond242) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond242) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond242) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond242) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond242) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond242) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond242) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond242) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond242) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond242) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond242) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond242) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond242) CFA_SP SP+0
        CFI (cfiCond242) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond243 Using cfiCommon0
        CFI (cfiCond243) NoFunction
        CFI (cfiCond243) Conditional ??CrossCallReturnLabel_137
        CFI (cfiCond243) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond243) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond243) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond243) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond243) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond243) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond243) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond243) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond243) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond243) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond243) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond243) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond243) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond243) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond243) CFA_SP SP+0
        CFI (cfiCond243) CFA_XSP16 add(XSP16, 26)
        CFI Block cfiPicker244 Using cfiCommon1
        CFI (cfiPicker244) NoFunction
        CFI (cfiPicker244) Picker
        MOV     R2,DPL
        MOV     R3,DPH
        CFI EndBlock cfiCond234
        CFI EndBlock cfiCond235
        CFI EndBlock cfiCond236
        CFI EndBlock cfiCond237
        CFI EndBlock cfiCond238
        CFI EndBlock cfiCond239
        CFI EndBlock cfiCond240
        CFI EndBlock cfiCond241
        CFI EndBlock cfiCond242
        CFI EndBlock cfiCond243
        CFI EndBlock cfiPicker244
        REQUIRE ??Subroutine96_0
        ; // Fall through to label ??Subroutine96_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine96_0:
        CFI Block cfiCond245 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_138
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond246 Using cfiCommon0
        CFI (cfiCond246) NoFunction
        CFI (cfiCond246) Conditional ??CrossCallReturnLabel_139
        CFI (cfiCond246) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond246) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond246) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond246) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond246) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond246) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond246) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond246) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond246) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond246) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond246) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond246) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond246) CFA_SP SP+0
        CFI (cfiCond246) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond247 Using cfiCommon0
        CFI (cfiCond247) NoFunction
        CFI (cfiCond247) Conditional ??CrossCallReturnLabel_140
        CFI (cfiCond247) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond247) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond247) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond247) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond247) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond247) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond247) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond247) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond247) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond247) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond247) CFA_SP SP+0
        CFI (cfiCond247) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond248 Using cfiCommon0
        CFI (cfiCond248) NoFunction
        CFI (cfiCond248) Conditional ??CrossCallReturnLabel_140
        CFI (cfiCond248) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond248) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond248) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond248) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond248) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond248) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond248) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond248) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond248) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond248) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond248) CFA_SP SP+0
        CFI (cfiCond248) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond249 Using cfiCommon0
        CFI (cfiCond249) NoFunction
        CFI (cfiCond249) Conditional ??CrossCallReturnLabel_141
        CFI (cfiCond249) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond249) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond249) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond249) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond249) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond249) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond249) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond249) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond249) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond249) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond249) CFA_SP SP+0
        CFI (cfiCond249) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond250 Using cfiCommon0
        CFI (cfiCond250) NoFunction
        CFI (cfiCond250) Conditional ??CrossCallReturnLabel_141
        CFI (cfiCond250) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond250) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond250) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond250) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond250) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond250) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond250) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond250) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond250) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond250) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond250) CFA_SP SP+0
        CFI (cfiCond250) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond251 Using cfiCommon0
        CFI (cfiCond251) NoFunction
        CFI (cfiCond251) Conditional ??CrossCallReturnLabel_141
        CFI (cfiCond251) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond251) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond251) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond251) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond251) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond251) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond251) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond251) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond251) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond251) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond251) CFA_SP SP+0
        CFI (cfiCond251) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond252 Using cfiCommon0
        CFI (cfiCond252) NoFunction
        CFI (cfiCond252) Conditional ??CrossCallReturnLabel_141
        CFI (cfiCond252) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond252) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond252) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond252) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond252) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond252) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond252) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond252) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond252) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond252) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond252) CFA_SP SP+0
        CFI (cfiCond252) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond253 Using cfiCommon0
        CFI (cfiCond253) NoFunction
        CFI (cfiCond253) Conditional ??CrossCallReturnLabel_141
        CFI (cfiCond253) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond253) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond253) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond253) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond253) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond253) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond253) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond253) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond253) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond253) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond253) CFA_SP SP+0
        CFI (cfiCond253) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond254 Using cfiCommon0
        CFI (cfiCond254) NoFunction
        CFI (cfiCond254) Conditional ??CrossCallReturnLabel_142
        CFI (cfiCond254) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond254) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond254) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond254) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond254) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond254) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond254) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond254) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond254) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond254) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond254) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond254) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond254) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond254) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond254) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond254) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond254) CFA_SP SP+0
        CFI (cfiCond254) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond255 Using cfiCommon0
        CFI (cfiCond255) NoFunction
        CFI (cfiCond255) Conditional ??CrossCallReturnLabel_143
        CFI (cfiCond255) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond255) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond255) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond255) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond255) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond255) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond255) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond255) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond255) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond255) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond255) CFA_SP SP+0
        CFI (cfiCond255) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond256 Using cfiCommon0
        CFI (cfiCond256) NoFunction
        CFI (cfiCond256) Conditional ??CrossCallReturnLabel_144
        CFI (cfiCond256) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond256) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond256) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond256) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond256) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond256) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond256) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond256) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond256) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond256) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond256) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond256) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond256) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond256) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond256) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond256) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond256) CFA_SP SP+0
        CFI (cfiCond256) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond257 Using cfiCommon0
        CFI (cfiCond257) NoFunction
        CFI (cfiCond257) Conditional ??CrossCallReturnLabel_145
        CFI (cfiCond257) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond257) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond257) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond257) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond257) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond257) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond257) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond257) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond257) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond257) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond257) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond257) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond257) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond257) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond257) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond257) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond257) CFA_SP SP+0
        CFI (cfiCond257) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond258 Using cfiCommon0
        CFI (cfiCond258) NoFunction
        CFI (cfiCond258) Conditional ??CrossCallReturnLabel_146
        CFI (cfiCond258) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond258) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond258) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond258) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond258) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond258) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond258) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond258) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond258) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond258) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond258) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond258) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond258) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond258) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond258) CFA_SP SP+0
        CFI (cfiCond258) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond259 Using cfiCommon0
        CFI (cfiCond259) NoFunction
        CFI (cfiCond259) Conditional ??CrossCallReturnLabel_147
        CFI (cfiCond259) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond259) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond259) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond259) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond259) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond259) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond259) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond259) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond259) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond259) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond259) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond259) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond259) CFA_SP SP+0
        CFI (cfiCond259) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond260 Using cfiCommon0
        CFI (cfiCond260) NoFunction
        CFI (cfiCond260) Conditional ??CrossCallReturnLabel_147
        CFI (cfiCond260) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond260) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond260) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond260) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond260) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond260) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond260) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond260) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond260) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond260) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond260) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond260) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond260) CFA_SP SP+0
        CFI (cfiCond260) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond261 Using cfiCommon0
        CFI (cfiCond261) NoFunction
        CFI (cfiCond261) Conditional ??CrossCallReturnLabel_128
        CFI (cfiCond261) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond261) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond261) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond261) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond261) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond261) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond261) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond261) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond261) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond261) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond261) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond261) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond261) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond261) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond261) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond261) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond261) CFA_SP SP+0
        CFI (cfiCond261) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond262 Using cfiCommon0
        CFI (cfiCond262) NoFunction
        CFI (cfiCond262) Conditional ??CrossCallReturnLabel_129
        CFI (cfiCond262) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond262) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond262) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond262) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond262) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond262) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond262) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond262) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond262) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond262) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond262) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond262) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond262) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond262) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond262) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond262) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond262) CFA_SP SP+0
        CFI (cfiCond262) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond263 Using cfiCommon0
        CFI (cfiCond263) NoFunction
        CFI (cfiCond263) Conditional ??CrossCallReturnLabel_130
        CFI (cfiCond263) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond263) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond263) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond263) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond263) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond263) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond263) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond263) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond263) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond263) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond263) CFA_SP SP+0
        CFI (cfiCond263) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond264 Using cfiCommon0
        CFI (cfiCond264) NoFunction
        CFI (cfiCond264) Conditional ??CrossCallReturnLabel_131
        CFI (cfiCond264) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond264) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond264) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond264) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond264) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond264) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond264) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond264) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond264) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond264) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond264) CFA_SP SP+0
        CFI (cfiCond264) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond265 Using cfiCommon0
        CFI (cfiCond265) NoFunction
        CFI (cfiCond265) Conditional ??CrossCallReturnLabel_132
        CFI (cfiCond265) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond265) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond265) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond265) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond265) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond265) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond265) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond265) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond265) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond265) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond265) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond265) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond265) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond265) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond265) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond265) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond265) CFA_SP SP+0
        CFI (cfiCond265) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond266 Using cfiCommon0
        CFI (cfiCond266) NoFunction
        CFI (cfiCond266) Conditional ??CrossCallReturnLabel_133
        CFI (cfiCond266) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond266) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond266) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond266) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond266) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond266) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond266) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond266) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond266) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond266) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond266) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond266) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond266) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond266) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond266) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond266) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond266) CFA_SP SP+0
        CFI (cfiCond266) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond267 Using cfiCommon0
        CFI (cfiCond267) NoFunction
        CFI (cfiCond267) Conditional ??CrossCallReturnLabel_134
        CFI (cfiCond267) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond267) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond267) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond267) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond267) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond267) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond267) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond267) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond267) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond267) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond267) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond267) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond267) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond267) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond267) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond267) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond267) CFA_SP SP+0
        CFI (cfiCond267) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond268 Using cfiCommon0
        CFI (cfiCond268) NoFunction
        CFI (cfiCond268) Conditional ??CrossCallReturnLabel_135
        CFI (cfiCond268) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond268) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond268) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond268) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond268) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond268) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond268) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond268) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond268) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond268) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond268) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond268) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond268) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond268) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond268) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond268) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond268) CFA_SP SP+0
        CFI (cfiCond268) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond269 Using cfiCommon0
        CFI (cfiCond269) NoFunction
        CFI (cfiCond269) Conditional ??CrossCallReturnLabel_136
        CFI (cfiCond269) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond269) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond269) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond269) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond269) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond269) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond269) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond269) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond269) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond269) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond269) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond269) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond269) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond269) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond269) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond269) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond269) CFA_SP SP+0
        CFI (cfiCond269) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond270 Using cfiCommon0
        CFI (cfiCond270) NoFunction
        CFI (cfiCond270) Conditional ??CrossCallReturnLabel_137
        CFI (cfiCond270) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond270) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond270) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond270) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond270) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond270) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond270) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond270) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond270) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond270) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond270) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond270) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond270) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond270) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond270) CFA_SP SP+0
        CFI (cfiCond270) CFA_XSP16 add(XSP16, 26)
        CFI Block cfiPicker271 Using cfiCommon1
        CFI (cfiPicker271) NoFunction
        CFI (cfiPicker271) Picker
        LCALL   ??fillAndSend?relay
        MOV     A,#0x2
        RET
        CFI EndBlock cfiCond245
        CFI EndBlock cfiCond246
        CFI EndBlock cfiCond247
        CFI EndBlock cfiCond248
        CFI EndBlock cfiCond249
        CFI EndBlock cfiCond250
        CFI EndBlock cfiCond251
        CFI EndBlock cfiCond252
        CFI EndBlock cfiCond253
        CFI EndBlock cfiCond254
        CFI EndBlock cfiCond255
        CFI EndBlock cfiCond256
        CFI EndBlock cfiCond257
        CFI EndBlock cfiCond258
        CFI EndBlock cfiCond259
        CFI EndBlock cfiCond260
        CFI EndBlock cfiCond261
        CFI EndBlock cfiCond262
        CFI EndBlock cfiCond263
        CFI EndBlock cfiCond264
        CFI EndBlock cfiCond265
        CFI EndBlock cfiCond266
        CFI EndBlock cfiCond267
        CFI EndBlock cfiCond268
        CFI EndBlock cfiCond269
        CFI EndBlock cfiCond270
        CFI EndBlock cfiPicker271

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine24:
        CFI Block cfiCond272 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_33
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond273 Using cfiCommon0
        CFI (cfiCond273) NoFunction
        CFI (cfiCond273) Conditional ??CrossCallReturnLabel_34
        CFI (cfiCond273) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond273) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond273) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond273) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond273) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond273) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond273) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond273) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond273) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond273) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond273) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond273) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond273) CFA_SP SP+0
        CFI (cfiCond273) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker274 Using cfiCommon1
        CFI (cfiPicker274) NoFunction
        CFI (cfiPicker274) Picker
        MOV     R3,A
        LCALL   ??sAddrExtCpy?relay
        LCALL   ?Subroutine72 & 0xFFFF
??CrossCallReturnLabel_117:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond272
        CFI EndBlock cfiCond273
        CFI EndBlock cfiPicker274
// 1213 
// 1214 /*********************************************************************
// 1215  * @fn          ZDP_MgmtPermitJoinReq
// 1216  *
// 1217  * @brief       This builds and send a Mgmt_Permit_Join_req message.
// 1218  *
// 1219  * @param       dstAddr - destination address of the message
// 1220  * @param       duration - Permit duration
// 1221  * @param       TcSignificance - Trust Center Significance
// 1222  *
// 1223  * @return      afStatus_t
// 1224  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1225 afStatus_t ZDP_MgmtPermitJoinReq( zAddrType_t *dstAddr, byte duration,
ZDP_MgmtPermitJoinReq:
        CFI Block cfiBlock275 Using cfiCommon0
        CFI Function ZDP_MgmtPermitJoinReq
        CODE
// 1226                                   byte TcSignificance, byte SecurityEnable )
// 1227 {
        FUNCALL ZDP_MgmtPermitJoinReq, fillAndSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 1228   (void)SecurityEnable;  // Intentionally unreferenced parameter
// 1229   
// 1230   // Build buffer
// 1231   ZDP_TmpBuf[ZDP_MGMT_PERMIT_JOIN_REQ_DURATION] = duration;
        LCALL   ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_150:
        MOV     A,R1
        LCALL   ?Subroutine30 & 0xFFFF
// 1232   ZDP_TmpBuf[ZDP_MGMT_PERMIT_JOIN_REQ_TC_SIG]   = TcSignificance;
??CrossCallReturnLabel_114:
        MOV     A,R4
        MOVX    @DPTR,A
// 1233 
// 1234   // Send the message
// 1235   return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_Permit_Join_req,
// 1236                       ZDP_MGMT_PERMIT_JOIN_REQ_SIZE );
        ; Setup parameters for call to function fillAndSend
        MOV     ?V0 + 0,#0x36
        LJMP    ?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock275
// 1237 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine31:
        CFI Block cfiCond276 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_149
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond277 Using cfiCommon0
        CFI (cfiCond277) NoFunction
        CFI (cfiCond277) Conditional ??CrossCallReturnLabel_150
        CFI (cfiCond277) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond277) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond277) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond277) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond277) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond277) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond277) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond277) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond277) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond277) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond277) CFA_SP SP+0
        CFI (cfiCond277) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond278 Using cfiCommon0
        CFI (cfiCond278) NoFunction
        CFI (cfiCond278) Conditional ??CrossCallReturnLabel_151
        CFI (cfiCond278) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond278) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond278) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond278) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond278) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond278) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond278) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond278) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond278) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond278) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond278) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond278) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond278) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond278) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond278) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond278) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond278) CFA_SP SP+-1
        CFI (cfiCond278) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiPicker279 Using cfiCommon1
        CFI (cfiPicker279) NoFunction
        CFI (cfiPicker279) Picker
        MOV     DPTR,#ZDP_TmpBuf
        CFI EndBlock cfiCond276
        CFI EndBlock cfiCond277
        CFI EndBlock cfiCond278
        CFI EndBlock cfiPicker279
        REQUIRE ??Subroutine97_0
        ; // Fall through to label ??Subroutine97_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine97_0:
        CFI Block cfiCond280 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_148
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond281 Using cfiCommon0
        CFI (cfiCond281) NoFunction
        CFI (cfiCond281) Conditional ??CrossCallReturnLabel_149
        CFI (cfiCond281) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond281) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond281) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond281) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond281) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond281) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond281) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond281) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond281) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond281) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond281) CFA_SP SP+0
        CFI (cfiCond281) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond282 Using cfiCommon0
        CFI (cfiCond282) NoFunction
        CFI (cfiCond282) Conditional ??CrossCallReturnLabel_150
        CFI (cfiCond282) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond282) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond282) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond282) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond282) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond282) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond282) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond282) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond282) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond282) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond282) CFA_SP SP+0
        CFI (cfiCond282) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond283 Using cfiCommon0
        CFI (cfiCond283) NoFunction
        CFI (cfiCond283) Conditional ??CrossCallReturnLabel_151
        CFI (cfiCond283) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond283) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond283) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond283) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond283) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond283) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond283) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond283) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond283) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond283) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond283) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond283) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond283) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond283) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond283) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond283) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond283) CFA_SP SP+-1
        CFI (cfiCond283) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiPicker284 Using cfiCommon1
        CFI (cfiPicker284) NoFunction
        CFI (cfiPicker284) Picker
        LCALL   ?Subroutine77 & 0xFFFF
??CrossCallReturnLabel_153:
        RET
        CFI EndBlock cfiCond280
        CFI EndBlock cfiCond281
        CFI EndBlock cfiCond282
        CFI EndBlock cfiCond283
        CFI EndBlock cfiPicker284

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine77:
        CFI Block cfiCond285 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_152, ??CrossCallReturnLabel_8
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond286 Using cfiCommon0
        CFI (cfiCond286) NoFunction
        CFI (cfiCond286) Conditional ??CrossCallReturnLabel_152, ??CrossCallReturnLabel_9
        CFI (cfiCond286) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond286) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond286) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond286) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond286) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond286) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond286) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond286) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond286) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond286) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond286) CFA_SP SP+0
        CFI (cfiCond286) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond287 Using cfiCommon0
        CFI (cfiCond287) NoFunction
        CFI (cfiCond287) Conditional ??CrossCallReturnLabel_153, ??CrossCallReturnLabel_149
        CFI (cfiCond287) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond287) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond287) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond287) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond287) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond287) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond287) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond287) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond287) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond287) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond287) CFA_SP SP+0
        CFI (cfiCond287) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond288 Using cfiCommon0
        CFI (cfiCond288) NoFunction
        CFI (cfiCond288) Conditional ??CrossCallReturnLabel_153, ??CrossCallReturnLabel_150
        CFI (cfiCond288) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond288) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond288) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond288) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond288) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond288) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond288) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond288) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond288) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond288) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond288) CFA_SP SP+0
        CFI (cfiCond288) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond289 Using cfiCommon0
        CFI (cfiCond289) NoFunction
        CFI (cfiCond289) Conditional ??CrossCallReturnLabel_153, ??CrossCallReturnLabel_151
        CFI (cfiCond289) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond289) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond289) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond289) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond289) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond289) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond289) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond289) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond289) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond289) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond289) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond289) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond289) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond289) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond289) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond289) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond289) CFA_SP SP+-1
        CFI (cfiCond289) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond290 Using cfiCommon0
        CFI (cfiCond290) NoFunction
        CFI (cfiCond290) Conditional ??CrossCallReturnLabel_153, ??CrossCallReturnLabel_148
        CFI (cfiCond290) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond290) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond290) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond290) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond290) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond290) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond290) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond290) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond290) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond290) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond290) CFA_SP SP+0
        CFI (cfiCond290) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiPicker291 Using cfiCommon1
        CFI (cfiPicker291) NoFunction
        CFI (cfiPicker291) Picker
        LCALL   ?Subroutine84 & 0xFFFF
??CrossCallReturnLabel_155:
        RET
        CFI EndBlock cfiCond285
        CFI EndBlock cfiCond286
        CFI EndBlock cfiCond287
        CFI EndBlock cfiCond288
        CFI EndBlock cfiCond289
        CFI EndBlock cfiCond290
        CFI EndBlock cfiPicker291

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine84:
        CFI Block cfiCond292 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_154, ??CrossCallReturnLabel_116, ??CrossCallReturnLabel_8
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond293 Using cfiCommon0
        CFI (cfiCond293) NoFunction
        CFI (cfiCond293) Conditional ??CrossCallReturnLabel_154, ??CrossCallReturnLabel_116, ??CrossCallReturnLabel_9
        CFI (cfiCond293) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond293) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond293) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond293) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond293) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond293) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond293) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond293) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond293) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond293) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond293) CFA_SP SP+0
        CFI (cfiCond293) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond294 Using cfiCommon0
        CFI (cfiCond294) NoFunction
        CFI (cfiCond294) Conditional ??CrossCallReturnLabel_154, ??CrossCallReturnLabel_119, ??CrossCallReturnLabel_113
        CFI (cfiCond294) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond294) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond294) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond294) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond294) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond294) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond294) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond294) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond294) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond294) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond294) CFA_SP SP+0
        CFI (cfiCond294) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond295 Using cfiCommon0
        CFI (cfiCond295) NoFunction
        CFI (cfiCond295) Conditional ??CrossCallReturnLabel_154, ??CrossCallReturnLabel_119, ??CrossCallReturnLabel_114
        CFI (cfiCond295) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond295) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond295) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond295) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond295) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond295) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond295) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond295) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond295) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond295) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond295) CFA_SP SP+0
        CFI (cfiCond295) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond296 Using cfiCommon0
        CFI (cfiCond296) NoFunction
        CFI (cfiCond296) Conditional ??CrossCallReturnLabel_154, ??CrossCallReturnLabel_119, ??CrossCallReturnLabel_115
        CFI (cfiCond296) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond296) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond296) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond296) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond296) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond296) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond296) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond296) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond296) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond296) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond296) CFA_SP SP+0
        CFI (cfiCond296) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond297 Using cfiCommon0
        CFI (cfiCond297) NoFunction
        CFI (cfiCond297) Conditional ??CrossCallReturnLabel_154, ??CrossCallReturnLabel_118, ??CrossCallReturnLabel_46
        CFI (cfiCond297) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond297) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond297) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond297) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond297) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond297) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond297) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond297) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond297) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond297) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond297) CFA_SP SP+0
        CFI (cfiCond297) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond298 Using cfiCommon0
        CFI (cfiCond298) NoFunction
        CFI (cfiCond298) Conditional ??CrossCallReturnLabel_154, ??CrossCallReturnLabel_118, ??CrossCallReturnLabel_47
        CFI (cfiCond298) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond298) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond298) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond298) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond298) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond298) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond298) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond298) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond298) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond298) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond298) CFA_SP SP+0
        CFI (cfiCond298) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond299 Using cfiCommon0
        CFI (cfiCond299) NoFunction
        CFI (cfiCond299) Conditional ??CrossCallReturnLabel_154, ??CrossCallReturnLabel_117, ??CrossCallReturnLabel_33
        CFI (cfiCond299) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond299) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond299) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond299) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond299) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond299) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond299) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond299) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond299) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond299) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond299) CFA_SP SP+0
        CFI (cfiCond299) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond300 Using cfiCommon0
        CFI (cfiCond300) NoFunction
        CFI (cfiCond300) Conditional ??CrossCallReturnLabel_154, ??CrossCallReturnLabel_117, ??CrossCallReturnLabel_34
        CFI (cfiCond300) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond300) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond300) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond300) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond300) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond300) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond300) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond300) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond300) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond300) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond300) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond300) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond300) CFA_SP SP+0
        CFI (cfiCond300) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond301 Using cfiCommon0
        CFI (cfiCond301) NoFunction
        CFI (cfiCond301) Conditional ??CrossCallReturnLabel_155, ??CrossCallReturnLabel_152, ??CrossCallReturnLabel_8
        CFI (cfiCond301) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond301) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond301) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond301) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond301) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond301) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond301) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond301) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond301) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond301) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond301) CFA_SP SP+0
        CFI (cfiCond301) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond302 Using cfiCommon0
        CFI (cfiCond302) NoFunction
        CFI (cfiCond302) Conditional ??CrossCallReturnLabel_155, ??CrossCallReturnLabel_152, ??CrossCallReturnLabel_9
        CFI (cfiCond302) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond302) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond302) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond302) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond302) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond302) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond302) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond302) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond302) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond302) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond302) CFA_SP SP+0
        CFI (cfiCond302) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond303 Using cfiCommon0
        CFI (cfiCond303) NoFunction
        CFI (cfiCond303) Conditional ??CrossCallReturnLabel_155, ??CrossCallReturnLabel_153, ??CrossCallReturnLabel_149
        CFI (cfiCond303) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond303) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond303) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond303) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond303) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond303) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond303) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond303) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond303) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond303) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond303) CFA_SP SP+0
        CFI (cfiCond303) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond304 Using cfiCommon0
        CFI (cfiCond304) NoFunction
        CFI (cfiCond304) Conditional ??CrossCallReturnLabel_155, ??CrossCallReturnLabel_153, ??CrossCallReturnLabel_150
        CFI (cfiCond304) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond304) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond304) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond304) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond304) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond304) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond304) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond304) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond304) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond304) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond304) CFA_SP SP+0
        CFI (cfiCond304) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond305 Using cfiCommon0
        CFI (cfiCond305) NoFunction
        CFI (cfiCond305) Conditional ??CrossCallReturnLabel_155, ??CrossCallReturnLabel_153, ??CrossCallReturnLabel_151
        CFI (cfiCond305) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond305) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond305) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond305) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond305) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond305) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond305) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond305) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond305) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond305) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond305) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond305) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond305) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond305) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond305) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond305) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond305) CFA_SP SP+-1
        CFI (cfiCond305) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond306 Using cfiCommon0
        CFI (cfiCond306) NoFunction
        CFI (cfiCond306) Conditional ??CrossCallReturnLabel_155, ??CrossCallReturnLabel_153, ??CrossCallReturnLabel_148
        CFI (cfiCond306) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond306) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond306) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond306) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond306) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond306) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond306) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond306) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond306) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond306) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond306) CFA_SP SP+0
        CFI (cfiCond306) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiPicker307 Using cfiCommon1
        CFI (cfiPicker307) NoFunction
        CFI (cfiPicker307) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        RET
        CFI EndBlock cfiCond292
        CFI EndBlock cfiCond293
        CFI EndBlock cfiCond294
        CFI EndBlock cfiCond295
        CFI EndBlock cfiCond296
        CFI EndBlock cfiCond297
        CFI EndBlock cfiCond298
        CFI EndBlock cfiCond299
        CFI EndBlock cfiCond300
        CFI EndBlock cfiCond301
        CFI EndBlock cfiCond302
        CFI EndBlock cfiCond303
        CFI EndBlock cfiCond304
        CFI EndBlock cfiCond305
        CFI EndBlock cfiCond306
        CFI EndBlock cfiPicker307
// 1238 
// 1239 /*********************************************************************
// 1240  * @fn          ZDP_MgmtLeaveReq
// 1241  *
// 1242  * @brief       This builds and send a Mgmt_Leave_req message.
// 1243  *
// 1244  * @param       dstAddr - destination address of the message
// 1245  *              IEEEAddr - IEEE adddress of device that is removed
// 1246  *              RemoveChildren - set to 1 to remove the children of the
// 1247  *                                device as well. 0 otherwise.
// 1248  *              Rejoin - set to 1 if the removed device should rejoin
// 1249                          afterwards. 0 otherwise.
// 1250  *
// 1251  * @return      afStatus_t
// 1252  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1253 afStatus_t ZDP_MgmtLeaveReq( zAddrType_t *dstAddr, uint8 *IEEEAddr, uint8 RemoveChildren,
ZDP_MgmtLeaveReq:
        CFI Block cfiBlock308 Using cfiCommon0
        CFI Function ZDP_MgmtLeaveReq
        CODE
// 1254                  uint8 Rejoin, uint8 SecurityEnable )
// 1255 
// 1256 {
        FUNCALL ZDP_MgmtLeaveReq, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_MgmtLeaveReq, fillAndSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0 + 0,R1
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine32 & 0xFFFF
// 1257   (void)SecurityEnable;  // Intentionally unreferenced parameter
// 1258   
// 1259   osal_cpyExtAddr( ZDP_TmpBuf, IEEEAddr );
??CrossCallReturnLabel_49:
        LCALL   ??sAddrExtCpy?relay
// 1260   ZDP_TmpBuf[Z_EXTADDR_LEN] = 0;
        MOV     DPTR,#ZDP_TmpBuf
        MOVX    A,@DPTR
        ADD     A,#0x8
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        LCALL   ?Subroutine67 & 0xFFFF
??CrossCallReturnLabel_105:
        CLR     A
        MOVX    @DPTR,A
// 1261 
// 1262   if ( RemoveChildren == TRUE )
        INC     A
        XRL     A,?V0 + 0
        JNZ     ??ZDP_MgmtLeaveReq_0
// 1263   {
// 1264     ZDP_TmpBuf[Z_EXTADDR_LEN] |= ZDP_MGMT_LEAVE_REQ_RC;
        MOV     A,#0x40
        MOVX    @DPTR,A
// 1265   }
// 1266   if ( Rejoin == TRUE )
??ZDP_MgmtLeaveReq_0:
        MOV     A,#0x1
        XRL     A,?V0 + 1
        JNZ     ??ZDP_MgmtLeaveReq_1
// 1267   {
// 1268     ZDP_TmpBuf[Z_EXTADDR_LEN] |= ZDP_MGMT_LEAVE_REQ_REJOIN;
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.7
        MOVX    @DPTR,A
// 1269   }
// 1270 
// 1271   return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_Leave_req, (Z_EXTADDR_LEN + 1) );
??ZDP_MgmtLeaveReq_1:
        ; Setup parameters for call to function fillAndSend
        MOV     ?V0 + 2,#0x34
        LJMP    ?Subroutine2 & 0xFFFF
        CFI EndBlock cfiBlock308
// 1272 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine32:
        CFI Block cfiCond309 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_48
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond310 Using cfiCommon0
        CFI (cfiCond310) NoFunction
        CFI (cfiCond310) Conditional ??CrossCallReturnLabel_49
        CFI (cfiCond310) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond310) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond310) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond310) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond310) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond310) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond310) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond310) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond310) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond310) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond310) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond310) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond310) CFA_SP SP+0
        CFI (cfiCond310) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker311 Using cfiCommon1
        CFI (cfiPicker311) NoFunction
        CFI (cfiPicker311) Picker
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        ; Setup parameters for call to function sAddrExtCpy
        MOV     DPTR,#ZDP_TmpBuf
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        RET
        CFI EndBlock cfiCond309
        CFI EndBlock cfiCond310
        CFI EndBlock cfiPicker311
// 1273 
// 1274 /*********************************************************************
// 1275  * @fn          ZDP_MgmtNwkUpdateReq
// 1276  *
// 1277  * @brief       This builds and send a Mgmt_NWK_Update_req message. This
// 1278  *              function sends a unicast or broadcast message.
// 1279  *
// 1280  * @param       dstAddr - destination address of the message
// 1281  * @param       ChannelMask - 32 bit address bit map
// 1282  * @param       ScanDuration - length of time to spend scanning each channel
// 1283  * @param       ScanCount - number of energy scans to be conducted
// 1284  * @param       NwkUpdateId - NWk Update Id value
// 1285  * @param       NwkManagerAddr - NWK address for device with Network Manager
// 1286  *                               bit set in its Node Descriptor
// 1287  *
// 1288  * @return      afStatus_t
// 1289  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1290 afStatus_t ZDP_MgmtNwkUpdateReq( zAddrType_t *dstAddr,
ZDP_MgmtNwkUpdateReq:
        CFI Block cfiBlock312 Using cfiCommon0
        CFI Function ZDP_MgmtNwkUpdateReq
        CODE
// 1291                                  uint32 ChannelMask,
// 1292                                  uint8 ScanDuration,
// 1293                                  uint8 ScanCount,
// 1294                                  uint8 NwkUpdateId,
// 1295                                  uint16 NwkManagerAddr )
// 1296 {
        FUNCALL ZDP_MgmtNwkUpdateReq, osal_buffer_uint32
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_MgmtNwkUpdateReq, fillAndSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 18)
        LCALL   ?Subroutine60 & 0xFFFF
??CrossCallReturnLabel_210:
        MOV     ?V0 + 5,R1
        MOV     ?V0 + 7,R4
        MOV     ?V0 + 6,R5
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     A,#0x16
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine17 & 0xFFFF
// 1297   uint8 *pBuf = ZDP_TmpBuf;
// 1298   byte len = sizeof( uint32 ) + 1;  // ChannelMask + ScanDuration
??CrossCallReturnLabel_17:
        MOV     ?V0 + 4,#0x5
// 1299 
// 1300   pBuf = osal_buffer_uint32( pBuf, ChannelMask );
        ; Setup parameters for call to function osal_buffer_uint32
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_FOUR
        CFI CFA_XSP16 add(XSP16, 22)
        LCALL   ?Subroutine43 & 0xFFFF
??CrossCallReturnLabel_71:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 18)
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R0,?V0 + 0
        MOV     R1,?V0 + 1
// 1301 
// 1302   *pBuf++ = ScanDuration;
        MOV     DPL,R0
        MOV     DPH,R1
        MOV     A,?V0 + 5
        LCALL   ?Subroutine55 & 0xFFFF
// 1303 
// 1304   if ( ScanDuration <= 0x05 )
??CrossCallReturnLabel_87:
        INC     DPTR
        MOV     R3,DPH
        CLR     C
        SUBB    A,#0x6
        JNC     ??ZDP_MgmtNwkUpdateReq_0
// 1305   {
// 1306     // Request is to scan over channelMask
// 1307     len += sizeof( uint8 );
        MOV     ?V0 + 4,#0x6
// 1308 
// 1309     *pBuf++ = ScanCount;
        MOV     DPL,R0
        MOV     DPH,R1
        MOV     A,?V0 + 7
        SJMP    ??ZDP_MgmtNwkUpdateReq_1
// 1310   }
// 1311   else if ( ( ScanDuration == 0xFE ) || ( ScanDuration == 0xFF ) )
??ZDP_MgmtNwkUpdateReq_0:
        MOV     A,#-0x2
        XRL     A,?V0 + 5
        JZ      ??ZDP_MgmtNwkUpdateReq_2
        MOV     A,#-0x1
        XRL     A,?V0 + 5
        JNZ     ??ZDP_MgmtNwkUpdateReq_3
// 1312   {
// 1313     // Request is to change Channel (0xFE) or apsChannelMask and NwkManagerAddr (0xFF)
// 1314     len += sizeof( uint8 );
??ZDP_MgmtNwkUpdateReq_2:
        MOV     ?V0 + 4,#0x6
// 1315 
// 1316     *pBuf++ = NwkUpdateId;
        MOV     DPL,R0
        MOV     DPH,R1
        MOV     A,?V0 + 6
        MOVX    @DPTR,A
        INC     R0
        MOV     A,R3
        MOV     R1,A
// 1317 
// 1318     if ( ScanDuration == 0xFF )
        MOV     A,#-0x1
        XRL     A,?V0 + 5
        JNZ     ??ZDP_MgmtNwkUpdateReq_3
// 1319     {
// 1320       len += sizeof( uint16 );
        MOV     ?V0 + 4,#0x8
// 1321 
// 1322       *pBuf++  = LO_UINT16( NwkManagerAddr );
        MOV     A,R6
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    @DPTR,A
        INC     DPTR
// 1323       *pBuf++  = HI_UINT16( NwkManagerAddr );
        MOV     A,R7
??ZDP_MgmtNwkUpdateReq_1:
        MOVX    @DPTR,A
// 1324     }
// 1325   }
// 1326 
// 1327   return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_NWK_Update_req, len );
??ZDP_MgmtNwkUpdateReq_3:
        ; Setup parameters for call to function fillAndSend
        MOV     ?V0 + 0,#0x38
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     R1,?V0 + 4
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_3:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 18)
        MOV     A,#0x2
        LJMP    ??Subroutine100_0 & 0xFFFF
        CFI EndBlock cfiBlock312
// 1328 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine43:
        CFI Block cfiCond313 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_70
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond314 Using cfiCommon0
        CFI (cfiCond314) NoFunction
        CFI (cfiCond314) Conditional ??CrossCallReturnLabel_71
        CFI (cfiCond314) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond314) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond314) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond314) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond314) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond314) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond314) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond314) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond314) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond314) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond314) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond314) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond314) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond314) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond314) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond314) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond314) CFA_SP SP+0
        CFI (cfiCond314) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiPicker315 Using cfiCommon1
        CFI (cfiPicker315) NoFunction
        CFI (cfiPicker315) Picker
        MOV     DPTR,#ZDP_TmpBuf
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??osal_buffer_uint32?relay
        MOV     A,#0x4
        RET
        CFI EndBlock cfiCond313
        CFI EndBlock cfiCond314
        CFI EndBlock cfiPicker315
// 1329 
// 1330 
// 1331 /*********************************************************************
// 1332  * Network Management Responses
// 1333  */
// 1334 
// 1335 /*********************************************************************
// 1336  * @fn          ZDP_MgmtNwkDiscRsp
// 1337  *
// 1338  * @brief       This builds and send a Mgmt_NWK_Disc_rsp message. This
// 1339  *              function sends a unicast message.
// 1340  *
// 1341  * @param       dstAddr - destination address of the message
// 1342  * @param       Status - message status (ZDP_SUCCESS or other)
// 1343  * @param       NetworkCount - Total number of networks found
// 1344  * @param       StartIndex - Starting index within the reporting network
// 1345  *                           list
// 1346  * @param       NetworkListCount - number of network lists included
// 1347  *                                 in this message
// 1348  * @param       NetworkList - List of network descriptors
// 1349  * @param       SecurityEnable - Security Options
// 1350  *
// 1351  * @return      afStatus_t
// 1352  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1353 afStatus_t ZDP_MgmtNwkDiscRsp( byte TransSeq, zAddrType_t *dstAddr,
ZDP_MgmtNwkDiscRsp:
        CFI Block cfiBlock316 Using cfiCommon0
        CFI Function ZDP_MgmtNwkDiscRsp
        CODE
// 1354                             byte Status,
// 1355                             byte NetworkCount,
// 1356                             byte StartIndex,
// 1357                             byte NetworkListCount,
// 1358                             networkDesc_t *NetworkList,
// 1359                             byte SecurityEnable )
// 1360 {
        FUNCALL ZDP_MgmtNwkDiscRsp, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_MgmtNwkDiscRsp, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_MgmtNwkDiscRsp, fillAndSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_MgmtNwkDiscRsp, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 6
        MOV     A,#-0x6
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R1
        MOVX    @DPTR,A
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine59 & 0xFFFF
??CrossCallReturnLabel_95:
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R4
        MOVX    @DPTR,A
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R5
        MOVX    @DPTR,A
        MOV     A,#0x16
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 2,A
        MOV     A,#0x17
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 3,A
        MOV     A,#0x18
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine98_0 & 0xFFFF
// 1361   uint8 *buf;
// 1362   uint8 *pBuf;
// 1363   byte len = 1+1+1+1;  // Status + NetworkCount + StartIndex + NetworkCountList.
// 1364   byte idx;
// 1365 
// 1366   (void)SecurityEnable;  // Intentionally unreferenced parameter
// 1367   
// 1368   len += (NetworkListCount * ( ZDP_NETWORK_EXTENDED_DISCRIPTOR_SIZE - 2 ));
??CrossCallReturnLabel_160:
        MOV     B,#0xc
        MOV     A,?V0 + 3
        LCALL   ?Subroutine50 & 0xFFFF
// 1369   
// 1370   buf = osal_mem_alloc( len+1 );
??CrossCallReturnLabel_183:
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
// 1371   if ( buf == NULL )
        MOV     A,R2
        ORL     A,?V0 + 5
        JNZ     ??ZDP_MgmtNwkDiscRsp_0
// 1372   {
// 1373     return afStatus_MEM_FAIL;
        MOV     R1,#0x10
        LJMP    ??CrossCallReturnLabel_179 & 0xFFFF
// 1374   }
// 1375 
// 1376   pBuf = buf+1;
??ZDP_MgmtNwkDiscRsp_0:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        MOV     ?V0 + 6,DPL
        MOV     ?V0 + 7,DPH
        MOV     R6,?V0 + 6
        MOV     R7,?V0 + 7
// 1377 
// 1378   *pBuf++ = Status;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine45 & 0xFFFF
// 1379   *pBuf++ = NetworkCount;
??CrossCallReturnLabel_72:
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine106_0 & 0xFFFF
??CrossCallReturnLabel_187:
        INC     DPTR
// 1380   *pBuf++ = StartIndex;
        MOV     A,?V0 + 2
        MOVX    @DPTR,A
        INC     DPTR
// 1381   *pBuf++ = NetworkListCount;
        MOV     A,?V0 + 3
        MOVX    @DPTR,A
        INC     DPTR
        INC     R6
        INC     R6
        INC     R6
        MOV     R7,DPH
// 1382 
// 1383   for ( idx = 0; idx < NetworkListCount; idx++ )
        MOV     ?V0 + 2,#0x0
        SJMP    ??ZDP_MgmtNwkDiscRsp_1
// 1384   {
// 1385     osal_cpyExtAddr( pBuf, NetworkList->extendedPANID);
// 1386     pBuf += Z_EXTADDR_LEN;
// 1387 
// 1388     *pBuf++  = NetworkList->logicalChannel;                // LogicalChannel
// 1389     *pBuf    = NetworkList->stackProfile;                  // Stack profile
// 1390     *pBuf++ |= (byte)(NetworkList->version << 4);          // ZigBee Version
// 1391     *pBuf    = NetworkList->beaconOrder;                   // Beacon Order
// 1392     *pBuf++ |= (byte)(NetworkList->superFrameOrder << 4);  // Superframe Order
// 1393 
// 1394     if ( NetworkList->chosenRouter != INVALID_NODE_ADDR )
// 1395     {
// 1396       *pBuf++ = TRUE;                         // Permit Joining
// 1397     }
// 1398     else
// 1399     {
// 1400       *pBuf++ = FALSE;
??ZDP_MgmtNwkDiscRsp_2:
        CLR     A
??ZDP_MgmtNwkDiscRsp_3:
        MOVX    @DPTR,A
        INC     R6
        MOV     A,R1
        MOV     R7,A
// 1401     }
// 1402 
// 1403     NetworkList = NetworkList->nextDesc;    // Move to next list entry
        MOV     A,?V0 + 0
        ADD     A,#0x16
        MOV     DPL,A
        MOV     A,?V0 + 1
        LCALL   ?Subroutine33 & 0xFFFF
??CrossCallReturnLabel_163:
        INC     ?V0 + 2
??ZDP_MgmtNwkDiscRsp_1:
        MOV     A,?V0 + 2
        CLR     C
        SUBB    A,?V0 + 3
        JC      $+5
        LJMP    ??ZDP_MgmtNwkDiscRsp_4 & 0xFFFF
        ; Setup parameters for call to function sAddrExtCpy
        MOV     A,?V0 + 0
        ADD     A,#0xd
        LCALL   ?Subroutine66 & 0xFFFF
??CrossCallReturnLabel_103:
        MOV     A,R6
        ADD     A,#0x8
        MOV     R6,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine42 & 0xFFFF
??CrossCallReturnLabel_68:
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine46 & 0xFFFF
??CrossCallReturnLabel_190:
        MOV     A,R6
        MOV     R0,A
        MOV     A,R7
        MOV     R1,A
        INC     DPTR
        INC     R6
        MOV     R7,DPH
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_166:
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        LCALL   ?Subroutine46 & 0xFFFF
??CrossCallReturnLabel_191:
        INC     R0
        MOV     A,R7
        MOV     R1,A
        INC     DPTR
        INC     R6
        MOV     R7,DPH
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_167:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R1,DPH
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0xfe
        JNZ     ??ZDP_MgmtNwkDiscRsp_5
        INC     DPTR
        MOVX    A,@DPTR
        CPL     A
??ZDP_MgmtNwkDiscRsp_5:
        MOV     DPL,R6
        MOV     DPH,R7
        JNZ     $+5
        LJMP    ??ZDP_MgmtNwkDiscRsp_2 & 0xFFFF
        MOV     A,#0x1
        LJMP    ??ZDP_MgmtNwkDiscRsp_3 & 0xFFFF
// 1404   }
// 1405 
// 1406   FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_NWK_Disc_rsp, len, buf );
??ZDP_MgmtNwkDiscRsp_4:
        MOV     DPTR,#ZDP_TmpBuf
        MOV     A,?V0 + 6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 7
        MOVX    @DPTR,A
        ; Setup parameters for call to function fillAndSend
        MOV     ?V0 + 0,#0x30
        MOV     ?V0 + 1,#-0x80
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 24)
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine35 & 0xFFFF
??CrossCallReturnLabel_57:
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine64 & 0xFFFF
??CrossCallReturnLabel_132:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     A,R1
        MOV     R6,A
        ; Setup parameters for call to function osal_mem_free
        MOV     R2,?V0 + 4
        MOV     R3,?V0 + 5
        LCALL   ??Subroutine104_0 & 0xFFFF
        CFI EndBlock cfiBlock316
??CrossCallReturnLabel_179:
        REQUIRE ?Subroutine7
        ; // Fall through to label ?Subroutine7
// 1407 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiBlock317 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0x6
        SJMP    ??Subroutine100_0
        CFI EndBlock cfiBlock317

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine33:
        CFI Block cfiCond318 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_163
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond319 Using cfiCommon0
        CFI (cfiCond319) NoFunction
        CFI (cfiCond319) Conditional ??CrossCallReturnLabel_164
        CFI (cfiCond319) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond319) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond319) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond319) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond319) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond319) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond319) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond319) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond319) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond319) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond319) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond319) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond319) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond319) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond319) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond319) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond319) CFA_SP SP+0
        CFI (cfiCond319) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker320 Using cfiCommon1
        CFI (cfiPicker320) NoFunction
        CFI (cfiPicker320) Picker
        ADDC    A,#0x0
        MOV     DPH,A
        CFI EndBlock cfiCond318
        CFI EndBlock cfiCond319
        CFI EndBlock cfiPicker320
        REQUIRE ??Subroutine98_0
        ; // Fall through to label ??Subroutine98_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine98_0:
        CFI Block cfiCond321 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_156
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond322 Using cfiCommon0
        CFI (cfiCond322) NoFunction
        CFI (cfiCond322) Conditional ??CrossCallReturnLabel_157
        CFI (cfiCond322) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond322) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond322) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond322) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond322) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond322) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond322) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond322) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond322) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond322) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond322) CFA_SP SP+0
        CFI (cfiCond322) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond323 Using cfiCommon0
        CFI (cfiCond323) NoFunction
        CFI (cfiCond323) Conditional ??CrossCallReturnLabel_158
        CFI (cfiCond323) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond323) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond323) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond323) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond323) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond323) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond323) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond323) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond323) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond323) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond323) CFA_SP SP+0
        CFI (cfiCond323) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond324 Using cfiCommon0
        CFI (cfiCond324) NoFunction
        CFI (cfiCond324) Conditional ??CrossCallReturnLabel_159
        CFI (cfiCond324) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond324) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond324) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond324) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond324) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond324) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond324) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond324) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond324) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond324) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond324) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond324) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond324) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond324) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond324) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond324) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond324) CFA_SP SP+0
        CFI (cfiCond324) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond325 Using cfiCommon0
        CFI (cfiCond325) NoFunction
        CFI (cfiCond325) Conditional ??CrossCallReturnLabel_160
        CFI (cfiCond325) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond325) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond325) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond325) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond325) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond325) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond325) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond325) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond325) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond325) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond325) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond325) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond325) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond325) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond325) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond325) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond325) CFA_SP SP+0
        CFI (cfiCond325) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond326 Using cfiCommon0
        CFI (cfiCond326) NoFunction
        CFI (cfiCond326) Conditional ??CrossCallReturnLabel_161
        CFI (cfiCond326) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond326) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond326) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond326) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond326) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond326) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond326) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond326) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond326) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond326) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond326) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond326) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond326) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond326) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond326) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond326) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond326) CFA_SP SP+0
        CFI (cfiCond326) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond327 Using cfiCommon0
        CFI (cfiCond327) NoFunction
        CFI (cfiCond327) Conditional ??CrossCallReturnLabel_162
        CFI (cfiCond327) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond327) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond327) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond327) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond327) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond327) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond327) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond327) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond327) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond327) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond327) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond327) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond327) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond327) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond327) CFA_SP SP+0
        CFI (cfiCond327) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond328 Using cfiCommon0
        CFI (cfiCond328) NoFunction
        CFI (cfiCond328) Conditional ??CrossCallReturnLabel_163
        CFI (cfiCond328) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond328) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond328) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond328) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond328) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond328) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond328) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond328) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond328) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond328) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond328) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond328) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond328) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond328) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond328) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond328) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond328) CFA_SP SP+0
        CFI (cfiCond328) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond329 Using cfiCommon0
        CFI (cfiCond329) NoFunction
        CFI (cfiCond329) Conditional ??CrossCallReturnLabel_164
        CFI (cfiCond329) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond329) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond329) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond329) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond329) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond329) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond329) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond329) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond329) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond329) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond329) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond329) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond329) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond329) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond329) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond329) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond329) CFA_SP SP+0
        CFI (cfiCond329) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker330 Using cfiCommon1
        CFI (cfiPicker330) NoFunction
        CFI (cfiPicker330) Picker
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        RET
        CFI EndBlock cfiCond321
        CFI EndBlock cfiCond322
        CFI EndBlock cfiCond323
        CFI EndBlock cfiCond324
        CFI EndBlock cfiCond325
        CFI EndBlock cfiCond326
        CFI EndBlock cfiCond327
        CFI EndBlock cfiCond328
        CFI EndBlock cfiCond329
        CFI EndBlock cfiPicker330

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine16:
        CFI Block cfiCond331 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_166
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond332 Using cfiCommon0
        CFI (cfiCond332) NoFunction
        CFI (cfiCond332) Conditional ??CrossCallReturnLabel_167
        CFI (cfiCond332) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond332) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond332) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond332) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond332) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond332) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond332) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond332) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond332) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond332) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond332) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond332) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond332) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond332) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond332) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond332) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond332) CFA_SP SP+0
        CFI (cfiCond332) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiPicker333 Using cfiCommon1
        CFI (cfiPicker333) NoFunction
        CFI (cfiPicker333) Picker
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        CFI EndBlock cfiCond331
        CFI EndBlock cfiCond332
        CFI EndBlock cfiPicker333
        REQUIRE ??Subroutine99_0
        ; // Fall through to label ??Subroutine99_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine99_0:
        CFI Block cfiCond334 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_165
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond335 Using cfiCommon0
        CFI (cfiCond335) NoFunction
        CFI (cfiCond335) Conditional ??CrossCallReturnLabel_166
        CFI (cfiCond335) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond335) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond335) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond335) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond335) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond335) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond335) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond335) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond335) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond335) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond335) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond335) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond335) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond335) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond335) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond335) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond335) CFA_SP SP+0
        CFI (cfiCond335) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond336 Using cfiCommon0
        CFI (cfiCond336) NoFunction
        CFI (cfiCond336) Conditional ??CrossCallReturnLabel_167
        CFI (cfiCond336) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond336) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond336) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond336) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond336) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond336) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond336) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond336) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond336) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond336) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond336) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond336) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond336) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond336) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond336) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond336) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond336) CFA_SP SP+0
        CFI (cfiCond336) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiPicker337 Using cfiCommon1
        CFI (cfiPicker337) NoFunction
        CFI (cfiPicker337) Picker
        MOVX    A,@DPTR
        SWAP    A
        ANL     A,#0xf0
        MOV     R2,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        ORL     A,R2
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond334
        CFI EndBlock cfiCond335
        CFI EndBlock cfiCond336
        CFI EndBlock cfiPicker337

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiBlock338 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0x3
        CFI EndBlock cfiBlock338
        REQUIRE ??Subroutine100_0
        ; // Fall through to label ??Subroutine100_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine100_0:
        CFI Block cfiBlock339 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 17)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock339
        REQUIRE ??Subroutine101_0
        ; // Fall through to label ??Subroutine101_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine101_0:
        CFI Block cfiBlock340 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock340
// 1408 
// 1409 /*********************************************************************
// 1410  * @fn          ZDP_MgmtLqiRsp
// 1411  *
// 1412  * @brief       This builds and send a Mgmt_Lqi_rsp message. This
// 1413  *              function sends a unicast message.
// 1414  *
// 1415  * @param       dstAddr - destination address of the message
// 1416  * @param       Status - message status (ZDP_SUCCESS or other)
// 1417  * @param       NeighborLqiEntries - Total number of entries found
// 1418  * @param       StartIndex - Starting index within the reporting list
// 1419  * @param       NeighborLqiCount - number of lists included
// 1420  *                                 in this message
// 1421  * @param       NeighborLqiList - List of NeighborLqiItems.  This list
// 1422  *                is the list to be sent, not the entire list
// 1423  * @param       SecurityEnable - true if secure
// 1424  *
// 1425  * @return      ZStatus_t
// 1426  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1427 ZStatus_t ZDP_MgmtLqiRsp( byte TransSeq, zAddrType_t *dstAddr,
ZDP_MgmtLqiRsp:
        CFI Block cfiBlock341 Using cfiCommon0
        CFI Function ZDP_MgmtLqiRsp
        CODE
// 1428                           byte Status,
// 1429                           byte NeighborLqiEntries,
// 1430                           byte StartIndex,
// 1431                           byte NeighborLqiCount,
// 1432                           ZDP_MgmtLqiItem_t* NeighborList,
// 1433                           byte SecurityEnable )
// 1434 {
        FUNCALL ZDP_MgmtLqiRsp, fillAndSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_MgmtLqiRsp, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_MgmtLqiRsp, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_MgmtLqiRsp, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_MgmtLqiRsp, fillAndSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_MgmtLqiRsp, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 5
        MOV     A,#-0x5
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 21)
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R1
        MOVX    @DPTR,A
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine54 & 0xFFFF
??CrossCallReturnLabel_82:
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R5
        MOVX    @DPTR,A
        MOV     A,#0x15
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        MOV     A,#0x17
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine98_0 & 0xFFFF
// 1435   ZDP_MgmtLqiItem_t* list = NeighborList;
// 1436   uint8 *buf, *pBuf;
// 1437   byte len, x;
// 1438 
// 1439   (void)SecurityEnable;  // Intentionally unreferenced parameter
// 1440   
// 1441   if ( ZSuccess != Status )
??CrossCallReturnLabel_161:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        JZ      ??ZDP_MgmtLqiRsp_0
// 1442   {
// 1443     ZDP_TmpBuf[0] = Status;
        PUSH    A
        CFI CFA_SP SP+-1
        LCALL   ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_151:
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 1444     return fillAndSend( &TransSeq, dstAddr, Mgmt_Lqi_rsp, 1 );
        ; Setup parameters for call to function fillAndSend
        MOV     ?V0 + 0,#0x31
        MOV     ?V0 + 1,#-0x80
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 23)
        MOV     R1,#0x1
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine34 & 0xFFFF
// 1445   }
??CrossCallReturnLabel_50:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine64 & 0xFFFF
??CrossCallReturnLabel_133:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 21)
        LJMP    ??CrossCallReturnLabel_177 & 0xFFFF
// 1446 
// 1447   // (Status + NeighborLqiEntries + StartIndex + NeighborLqiCount) +
// 1448   //  neighbor LQI data.
// 1449   len = (1 + 1 + 1 + 1) + (NeighborLqiCount * ZDP_MGMTLQI_EXTENDED_SIZE);
??ZDP_MgmtLqiRsp_0:
        MOV     B,#0x16
        MOV     A,#0x16
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        LCALL   ?Subroutine50 & 0xFFFF
// 1450 
// 1451   buf = osal_mem_alloc( len+1 );
??CrossCallReturnLabel_184:
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
// 1452   if ( buf == NULL )
        MOV     A,R2
        ORL     A,?V0 + 3
        JNZ     ??ZDP_MgmtLqiRsp_1
// 1453   {
// 1454     return afStatus_MEM_FAIL;
        MOV     R1,#0x10
        LJMP    ??CrossCallReturnLabel_177 & 0xFFFF
// 1455   }
??ZDP_MgmtLqiRsp_1:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
// 1456 
// 1457   pBuf = buf+1;
// 1458 
// 1459   *pBuf++ = Status;
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 1460   *pBuf++ = NeighborLqiEntries;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine106_0 & 0xFFFF
??CrossCallReturnLabel_188:
        INC     DPTR
// 1461   *pBuf++ = StartIndex;
        MOV     A,?V0 + 4
        MOVX    @DPTR,A
        INC     DPTR
        INC     R6
        INC     R6
        MOV     R7,DPH
// 1462   *pBuf++ = NeighborLqiCount;
        MOV     A,#0x16
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine45 & 0xFFFF
// 1463 
// 1464   for ( x = 0; x < NeighborLqiCount; x++ )
??CrossCallReturnLabel_73:
        MOV     ?V0 + 6,#0x0
        LJMP    ??ZDP_MgmtLqiRsp_2 & 0xFFFF
// 1465   {
// 1466     osal_cpyExtAddr( pBuf, list->extPanID);         // Extended PanID
??ZDP_MgmtLqiRsp_3:
        ; Setup parameters for call to function sAddrExtCpy
        MOV     A,?V0 + 0
        ADD     A,#0x2
        LCALL   ?Subroutine66 & 0xFFFF
// 1467     pBuf += Z_EXTADDR_LEN;
// 1468 
// 1469     // EXTADDR
// 1470     pBuf = osal_cpyExtAddr( pBuf, list->extAddr );
??CrossCallReturnLabel_104:
        ; Setup parameters for call to function sAddrExtCpy
        MOV     A,?V0 + 0
        ADD     A,#0xa
        MOV     R4,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     R5,A
        MOV     A,R6
        ADD     A,#0x8
        MOV     R2,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ??sAddrExtCpy?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     R6,?V0 + 4
        MOV     R7,?V0 + 5
// 1471 
// 1472     // NWKADDR
// 1473     *pBuf++ = LO_UINT16( list->nwkAddr );
        MOV     A,?V0 + 0
        ADD     A,#0x12
        MOV     R0,A
        MOV     A,?V0 + 1
        LCALL   ?Subroutine67 & 0xFFFF
??CrossCallReturnLabel_106:
        LCALL   ?Subroutine42 & 0xFFFF
// 1474     *pBuf++ = HI_UINT16( list->nwkAddr );
??CrossCallReturnLabel_69:
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        LCALL   ??Subroutine107_0 & 0xFFFF
// 1475 
// 1476     // DEVICETYPE
// 1477     *pBuf = list->devType;
??CrossCallReturnLabel_195:
        ADD     A,#0x14
        MOV     DPL,A
        MOV     A,?V0 + 1
        LCALL   ??Subroutine121_0 & 0xFFFF
??CrossCallReturnLabel_277:
        LCALL   ??Subroutine106_0 & 0xFFFF
// 1478 
// 1479     // RXONIDLE
// 1480     *pBuf |= (uint8)(list->rxOnIdle << 2);
??CrossCallReturnLabel_189:
        MOV     A,?V0 + 0
        ADD     A,#0x15
        MOV     DPL,A
        MOV     A,?V0 + 1
        LCALL   ??Subroutine103_0 & 0xFFFF
??CrossCallReturnLabel_170:
        RLC     A
        RLC     A
        ANL     A,#0xfc
        MOV     R0,A
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        ORL     A,R0
        MOVX    @DPTR,A
// 1481 
// 1482     // RELATIONSHIP
// 1483     *pBuf++ |= (uint8)(list->relation << 4);
        MOV     A,R6
        MOV     R0,A
        MOV     A,R7
        MOV     R1,A
        INC     DPTR
        INC     R6
        MOV     R7,DPH
        MOV     A,?V0 + 0
        ADD     A,#0x16
        MOV     DPL,A
        MOV     A,?V0 + 1
        LCALL   ??Subroutine121_0 & 0xFFFF
??CrossCallReturnLabel_278:
        LCALL   ??Subroutine99_0 & 0xFFFF
// 1484 
// 1485     // PERMITJOINING
// 1486     *pBuf++ = (uint8)(list->permit);
??CrossCallReturnLabel_165:
        MOV     A,?V0 + 0
        ADD     A,#0x17
        LCALL   ?Subroutine12 & 0xFFFF
// 1487 
// 1488     // DEPTH
// 1489     *pBuf++ = list->depth;
// 1490 
// 1491     // LQI
// 1492     *pBuf++ = list->lqi;
// 1493 
// 1494     list++; // next list entry
// 1495   }
??CrossCallReturnLabel_192:
        ADD     A,#0x18
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_193:
        ADD     A,#0x19
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_194:
        ADD     A,#0x1a
        MOV     ?V0 + 0,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
        INC     ?V0 + 6
??ZDP_MgmtLqiRsp_2:
        MOV     A,#0x16
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,?V0 + 6
        CLR     C
        SUBB    A,R0
        JNC     $+5
        LJMP    ??ZDP_MgmtLqiRsp_3 & 0xFFFF
// 1496 
// 1497   FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_Lqi_rsp, len, buf );
        LCALL   ?Subroutine57 & 0xFFFF
??CrossCallReturnLabel_290:
        ; Setup parameters for call to function fillAndSend
        MOV     ?V0 + 0,#0x31
        MOV     ?V0 + 1,#-0x80
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 23)
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_51:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine64 & 0xFFFF
??CrossCallReturnLabel_134:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 21)
        LCALL   ?Subroutine52 & 0xFFFF
??CrossCallReturnLabel_177:
        MOV     A,#0x5
        LJMP    ??Subroutine100_0 & 0xFFFF
        CFI EndBlock cfiBlock341
// 1498 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine67:
        CFI Block cfiCond342 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_105
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond343 Using cfiCommon0
        CFI (cfiCond343) NoFunction
        CFI (cfiCond343) Conditional ??CrossCallReturnLabel_106
        CFI (cfiCond343) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond343) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond343) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond343) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond343) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond343) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond343) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond343) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond343) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond343) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond343) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond343) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond343) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond343) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond343) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond343) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond343) CFA_SP SP+0
        CFI (cfiCond343) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond344 Using cfiCommon0
        CFI (cfiCond344) NoFunction
        CFI (cfiCond344) Conditional ??CrossCallReturnLabel_107
        CFI (cfiCond344) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond344) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond344) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond344) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond344) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond344) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond344) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond344) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond344) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond344) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond344) CFA_SP SP+0
        CFI (cfiCond344) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiPicker345 Using cfiCommon1
        CFI (cfiPicker345) NoFunction
        CFI (cfiPicker345) Picker
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        RET
        CFI EndBlock cfiCond342
        CFI EndBlock cfiCond343
        CFI EndBlock cfiCond344
        CFI EndBlock cfiPicker345

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine66:
        CFI Block cfiCond346 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_103
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond347 Using cfiCommon0
        CFI (cfiCond347) NoFunction
        CFI (cfiCond347) Conditional ??CrossCallReturnLabel_104
        CFI (cfiCond347) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond347) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond347) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond347) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond347) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond347) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond347) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond347) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond347) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond347) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond347) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond347) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond347) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond347) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond347) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond347) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond347) CFA_SP SP+0
        CFI (cfiCond347) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiPicker348 Using cfiCommon1
        CFI (cfiPicker348) NoFunction
        CFI (cfiPicker348) Picker
        MOV     R4,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     R5,A
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??sAddrExtCpy?relay
        RET
        CFI EndBlock cfiCond346
        CFI EndBlock cfiCond347
        CFI EndBlock cfiPicker348

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine65:
        CFI Block cfiCond349 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_175
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond350 Using cfiCommon0
        CFI (cfiCond350) NoFunction
        CFI (cfiCond350) Conditional ??CrossCallReturnLabel_176
        CFI (cfiCond350) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond350) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond350) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond350) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond350) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond350) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond350) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond350) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond350) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond350) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond350) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond350) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond350) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond350) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond350) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond350) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond350) CFA_SP SP+0
        CFI (cfiCond350) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker351 Using cfiCommon1
        CFI (cfiPicker351) NoFunction
        CFI (cfiPicker351) Picker
        MOV     A,?V0 + 6
        ADD     A,#0x10
        CFI EndBlock cfiCond349
        CFI EndBlock cfiCond350
        CFI EndBlock cfiPicker351
        REQUIRE ??Subroutine102_0
        ; // Fall through to label ??Subroutine102_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine102_0:
        CFI Block cfiCond352 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_174
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond353 Using cfiCommon0
        CFI (cfiCond353) NoFunction
        CFI (cfiCond353) Conditional ??CrossCallReturnLabel_175
        CFI (cfiCond353) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond353) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond353) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond353) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond353) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond353) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond353) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond353) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond353) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond353) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond353) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond353) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond353) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond353) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond353) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond353) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond353) CFA_SP SP+0
        CFI (cfiCond353) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond354 Using cfiCommon0
        CFI (cfiCond354) NoFunction
        CFI (cfiCond354) Conditional ??CrossCallReturnLabel_176
        CFI (cfiCond354) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond354) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond354) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond354) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond354) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond354) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond354) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond354) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond354) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond354) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond354) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond354) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond354) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond354) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond354) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond354) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond354) CFA_SP SP+0
        CFI (cfiCond354) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker355 Using cfiCommon1
        CFI (cfiPicker355) NoFunction
        CFI (cfiPicker355) Picker
        MOV     DPL,A
        MOV     A,?V0 + 7
        CFI EndBlock cfiCond352
        CFI EndBlock cfiCond353
        CFI EndBlock cfiCond354
        CFI EndBlock cfiPicker355
        REQUIRE ??Subroutine103_0
        ; // Fall through to label ??Subroutine103_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine103_0:
        CFI Block cfiCond356 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_168
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond357 Using cfiCommon0
        CFI (cfiCond357) NoFunction
        CFI (cfiCond357) Conditional ??CrossCallReturnLabel_169
        CFI (cfiCond357) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond357) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond357) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond357) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond357) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond357) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond357) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond357) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond357) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond357) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond357) CFA_SP SP+0
        CFI (cfiCond357) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond358 Using cfiCommon0
        CFI (cfiCond358) NoFunction
        CFI (cfiCond358) Conditional ??CrossCallReturnLabel_170
        CFI (cfiCond358) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond358) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond358) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond358) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond358) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond358) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond358) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond358) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond358) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond358) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond358) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond358) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond358) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond358) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond358) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond358) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond358) CFA_SP SP+0
        CFI (cfiCond358) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond359 Using cfiCommon0
        CFI (cfiCond359) NoFunction
        CFI (cfiCond359) Conditional ??CrossCallReturnLabel_171
        CFI (cfiCond359) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond359) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond359) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond359) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond359) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond359) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond359) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond359) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond359) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond359) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond359) CFA_SP SP+0
        CFI (cfiCond359) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond360 Using cfiCommon0
        CFI (cfiCond360) NoFunction
        CFI (cfiCond360) Conditional ??CrossCallReturnLabel_172
        CFI (cfiCond360) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond360) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond360) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond360) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond360) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond360) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond360) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond360) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond360) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond360) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond360) CFA_SP SP+0
        CFI (cfiCond360) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond361 Using cfiCommon0
        CFI (cfiCond361) NoFunction
        CFI (cfiCond361) Conditional ??CrossCallReturnLabel_173
        CFI (cfiCond361) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond361) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond361) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond361) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond361) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond361) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond361) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond361) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond361) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond361) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond361) CFA_SP SP+0
        CFI (cfiCond361) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond362 Using cfiCommon0
        CFI (cfiCond362) NoFunction
        CFI (cfiCond362) Conditional ??CrossCallReturnLabel_174
        CFI (cfiCond362) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond362) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond362) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond362) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond362) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond362) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond362) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond362) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond362) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond362) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond362) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond362) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond362) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond362) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond362) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond362) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond362) CFA_SP SP+0
        CFI (cfiCond362) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond363 Using cfiCommon0
        CFI (cfiCond363) NoFunction
        CFI (cfiCond363) Conditional ??CrossCallReturnLabel_175
        CFI (cfiCond363) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond363) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond363) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond363) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond363) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond363) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond363) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond363) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond363) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond363) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond363) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond363) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond363) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond363) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond363) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond363) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond363) CFA_SP SP+0
        CFI (cfiCond363) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond364 Using cfiCommon0
        CFI (cfiCond364) NoFunction
        CFI (cfiCond364) Conditional ??CrossCallReturnLabel_176
        CFI (cfiCond364) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond364) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond364) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond364) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond364) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond364) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond364) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond364) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond364) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond364) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond364) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond364) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond364) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond364) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond364) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond364) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond364) CFA_SP SP+0
        CFI (cfiCond364) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker365 Using cfiCommon1
        CFI (cfiPicker365) NoFunction
        CFI (cfiPicker365) Picker
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond356
        CFI EndBlock cfiCond357
        CFI EndBlock cfiCond358
        CFI EndBlock cfiCond359
        CFI EndBlock cfiCond360
        CFI EndBlock cfiCond361
        CFI EndBlock cfiCond362
        CFI EndBlock cfiCond363
        CFI EndBlock cfiCond364
        CFI EndBlock cfiPicker365

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine52:
        CFI Block cfiCond366 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_177
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond367 Using cfiCommon0
        CFI (cfiCond367) NoFunction
        CFI (cfiCond367) Conditional ??CrossCallReturnLabel_178
        CFI (cfiCond367) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond367) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond367) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond367) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond367) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond367) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond367) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond367) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond367) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond367) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond367) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond367) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond367) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond367) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond367) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond367) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond367) CFA_SP SP+0
        CFI (cfiCond367) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiPicker368 Using cfiCommon1
        CFI (cfiPicker368) NoFunction
        CFI (cfiPicker368) Picker
        MOV     A,R1
        MOV     R6,A
        ; Setup parameters for call to function osal_mem_free
        ; Setup parameters for call to function osal_mem_free
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        CFI EndBlock cfiCond366
        CFI EndBlock cfiCond367
        CFI EndBlock cfiPicker368
        REQUIRE ??Subroutine104_0
        ; // Fall through to label ??Subroutine104_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine104_0:
        CFI Block cfiCond369 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_179
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond370 Using cfiCommon0
        CFI (cfiCond370) NoFunction
        CFI (cfiCond370) Conditional ??CrossCallReturnLabel_180
        CFI (cfiCond370) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond370) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond370) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond370) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond370) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond370) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond370) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond370) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond370) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond370) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond370) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond370) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond370) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond370) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond370) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond370) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond370) CFA_SP SP+0
        CFI (cfiCond370) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond371 Using cfiCommon0
        CFI (cfiCond371) NoFunction
        CFI (cfiCond371) Conditional ??CrossCallReturnLabel_177
        CFI (cfiCond371) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond371) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond371) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond371) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond371) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond371) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond371) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond371) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond371) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond371) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond371) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond371) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond371) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond371) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond371) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond371) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond371) CFA_SP SP+0
        CFI (cfiCond371) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond372 Using cfiCommon0
        CFI (cfiCond372) NoFunction
        CFI (cfiCond372) Conditional ??CrossCallReturnLabel_178
        CFI (cfiCond372) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond372) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond372) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond372) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond372) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond372) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond372) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond372) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond372) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond372) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond372) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond372) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond372) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond372) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond372) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond372) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond372) CFA_SP SP+0
        CFI (cfiCond372) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiPicker373 Using cfiCommon1
        CFI (cfiPicker373) NoFunction
        CFI (cfiPicker373) Picker
        LCALL   ?Subroutine81 & 0xFFFF
??CrossCallReturnLabel_181:
        MOV     A,R6
        MOV     R1,A
        RET
        CFI EndBlock cfiCond369
        CFI EndBlock cfiCond370
        CFI EndBlock cfiCond371
        CFI EndBlock cfiCond372
        CFI EndBlock cfiPicker373

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine50:
        CFI Block cfiCond374 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_183
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond375 Using cfiCommon0
        CFI (cfiCond375) NoFunction
        CFI (cfiCond375) Conditional ??CrossCallReturnLabel_184
        CFI (cfiCond375) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond375) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond375) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond375) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond375) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond375) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond375) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond375) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond375) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond375) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond375) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond375) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond375) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond375) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond375) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond375) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond375) CFA_SP SP+0
        CFI (cfiCond375) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond376 Using cfiCommon0
        CFI (cfiCond376) NoFunction
        CFI (cfiCond376) Conditional ??CrossCallReturnLabel_185
        CFI (cfiCond376) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond376) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond376) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond376) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond376) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond376) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond376) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond376) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond376) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond376) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond376) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond376) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond376) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond376) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond376) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond376) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond376) CFA_SP SP+0
        CFI (cfiCond376) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiPicker377 Using cfiCommon1
        CFI (cfiPicker377) NoFunction
        CFI (cfiPicker377) Picker
        MUL     AB
        ADD     A,#0x4
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CFI EndBlock cfiCond374
        CFI EndBlock cfiCond375
        CFI EndBlock cfiCond376
        CFI EndBlock cfiPicker377
        REQUIRE ??Subroutine105_0
        ; // Fall through to label ??Subroutine105_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine105_0:
        CFI Block cfiCond378 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_186
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond379 Using cfiCommon0
        CFI (cfiCond379) NoFunction
        CFI (cfiCond379) Conditional ??CrossCallReturnLabel_183
        CFI (cfiCond379) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond379) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond379) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond379) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond379) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond379) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond379) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond379) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond379) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond379) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond379) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond379) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond379) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond379) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond379) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond379) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond379) CFA_SP SP+0
        CFI (cfiCond379) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond380 Using cfiCommon0
        CFI (cfiCond380) NoFunction
        CFI (cfiCond380) Conditional ??CrossCallReturnLabel_184
        CFI (cfiCond380) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond380) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond380) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond380) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond380) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond380) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond380) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond380) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond380) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond380) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond380) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond380) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond380) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond380) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond380) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond380) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond380) CFA_SP SP+0
        CFI (cfiCond380) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond381 Using cfiCommon0
        CFI (cfiCond381) NoFunction
        CFI (cfiCond381) Conditional ??CrossCallReturnLabel_185
        CFI (cfiCond381) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond381) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond381) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond381) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond381) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond381) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond381) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond381) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond381) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond381) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond381) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond381) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond381) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond381) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond381) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond381) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond381) CFA_SP SP+0
        CFI (cfiCond381) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiPicker382 Using cfiCommon1
        CFI (cfiPicker382) NoFunction
        CFI (cfiPicker382) Picker
        MOVX    @DPTR,A
        ; Setup parameters for call to function osal_mem_alloc
        ; Setup parameters for call to function osal_mem_alloc
        ; Setup parameters for call to function osal_mem_alloc
        ; Setup parameters for call to function osal_mem_alloc
        ADD     A,#0x1
        MOV     R2,A
        CLR     A
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ??osal_mem_alloc?relay
        RET
        CFI EndBlock cfiCond378
        CFI EndBlock cfiCond379
        CFI EndBlock cfiCond380
        CFI EndBlock cfiCond381
        CFI EndBlock cfiPicker382

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine46:
        CFI Block cfiCond383 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_190
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond384 Using cfiCommon0
        CFI (cfiCond384) NoFunction
        CFI (cfiCond384) Conditional ??CrossCallReturnLabel_191
        CFI (cfiCond384) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond384) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond384) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond384) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond384) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond384) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond384) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond384) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond384) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond384) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond384) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond384) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond384) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond384) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond384) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond384) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond384) CFA_SP SP+0
        CFI (cfiCond384) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiPicker385 Using cfiCommon1
        CFI (cfiPicker385) NoFunction
        CFI (cfiPicker385) Picker
        INC     DPTR
        INC     DPTR
        INC     DPTR
        CFI EndBlock cfiCond383
        CFI EndBlock cfiCond384
        CFI EndBlock cfiPicker385
        REQUIRE ??Subroutine106_0
        ; // Fall through to label ??Subroutine106_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine106_0:
        CFI Block cfiCond386 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_187
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond387 Using cfiCommon0
        CFI (cfiCond387) NoFunction
        CFI (cfiCond387) Conditional ??CrossCallReturnLabel_188
        CFI (cfiCond387) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond387) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond387) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond387) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond387) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond387) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond387) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond387) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond387) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond387) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond387) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond387) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond387) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond387) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond387) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond387) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond387) CFA_SP SP+0
        CFI (cfiCond387) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond388 Using cfiCommon0
        CFI (cfiCond388) NoFunction
        CFI (cfiCond388) Conditional ??CrossCallReturnLabel_189
        CFI (cfiCond388) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond388) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond388) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond388) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond388) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond388) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond388) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond388) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond388) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond388) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond388) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond388) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond388) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond388) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond388) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond388) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond388) CFA_SP SP+0
        CFI (cfiCond388) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond389 Using cfiCommon0
        CFI (cfiCond389) NoFunction
        CFI (cfiCond389) Conditional ??CrossCallReturnLabel_190
        CFI (cfiCond389) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond389) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond389) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond389) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond389) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond389) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond389) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond389) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond389) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond389) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond389) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond389) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond389) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond389) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond389) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond389) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond389) CFA_SP SP+0
        CFI (cfiCond389) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond390 Using cfiCommon0
        CFI (cfiCond390) NoFunction
        CFI (cfiCond390) Conditional ??CrossCallReturnLabel_191
        CFI (cfiCond390) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond390) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond390) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond390) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond390) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond390) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond390) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond390) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond390) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond390) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond390) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond390) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond390) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond390) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond390) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond390) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond390) CFA_SP SP+0
        CFI (cfiCond390) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiPicker391 Using cfiCommon1
        CFI (cfiPicker391) NoFunction
        CFI (cfiPicker391) Picker
        LCALL   ?Subroutine83 & 0xFFFF
??CrossCallReturnLabel_199:
        RET
        CFI EndBlock cfiCond386
        CFI EndBlock cfiCond387
        CFI EndBlock cfiCond388
        CFI EndBlock cfiCond389
        CFI EndBlock cfiCond390
        CFI EndBlock cfiPicker391

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine83:
        CFI Block cfiCond392 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_199, ??CrossCallReturnLabel_190
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond393 Using cfiCommon0
        CFI (cfiCond393) NoFunction
        CFI (cfiCond393) Conditional ??CrossCallReturnLabel_199, ??CrossCallReturnLabel_191
        CFI (cfiCond393) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond393) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond393) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond393) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond393) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond393) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond393) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond393) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond393) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond393) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond393) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond393) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond393) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond393) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond393) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond393) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond393) CFA_SP SP+0
        CFI (cfiCond393) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond394 Using cfiCommon0
        CFI (cfiCond394) NoFunction
        CFI (cfiCond394) Conditional ??CrossCallReturnLabel_199, ??CrossCallReturnLabel_187
        CFI (cfiCond394) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond394) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond394) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond394) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond394) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond394) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond394) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond394) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond394) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond394) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond394) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond394) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond394) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond394) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond394) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond394) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond394) CFA_SP SP+0
        CFI (cfiCond394) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond395 Using cfiCommon0
        CFI (cfiCond395) NoFunction
        CFI (cfiCond395) Conditional ??CrossCallReturnLabel_199, ??CrossCallReturnLabel_188
        CFI (cfiCond395) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond395) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond395) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond395) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond395) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond395) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond395) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond395) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond395) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond395) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond395) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond395) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond395) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond395) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond395) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond395) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond395) CFA_SP SP+0
        CFI (cfiCond395) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond396 Using cfiCommon0
        CFI (cfiCond396) NoFunction
        CFI (cfiCond396) Conditional ??CrossCallReturnLabel_199, ??CrossCallReturnLabel_189
        CFI (cfiCond396) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond396) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond396) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond396) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond396) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond396) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond396) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond396) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond396) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond396) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond396) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond396) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond396) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond396) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond396) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond396) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond396) CFA_SP SP+0
        CFI (cfiCond396) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond397 Using cfiCommon0
        CFI (cfiCond397) NoFunction
        CFI (cfiCond397) Conditional ??CrossCallReturnLabel_200, ??CrossCallReturnLabel_196, ??CrossCallReturnLabel_72
        CFI (cfiCond397) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond397) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond397) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond397) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond397) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond397) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond397) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond397) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond397) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond397) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond397) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond397) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond397) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond397) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond397) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond397) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond397) CFA_SP SP+0
        CFI (cfiCond397) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond398 Using cfiCommon0
        CFI (cfiCond398) NoFunction
        CFI (cfiCond398) Conditional ??CrossCallReturnLabel_200, ??CrossCallReturnLabel_196, ??CrossCallReturnLabel_73
        CFI (cfiCond398) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond398) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond398) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond398) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond398) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond398) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond398) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond398) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond398) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond398) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond398) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond398) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond398) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond398) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond398) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond398) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond398) CFA_SP SP+0
        CFI (cfiCond398) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond399 Using cfiCommon0
        CFI (cfiCond399) NoFunction
        CFI (cfiCond399) Conditional ??CrossCallReturnLabel_200, ??CrossCallReturnLabel_197, ??CrossCallReturnLabel_192
        CFI (cfiCond399) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond399) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond399) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond399) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond399) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond399) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond399) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond399) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond399) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond399) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond399) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond399) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond399) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond399) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond399) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond399) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond399) CFA_SP SP+0
        CFI (cfiCond399) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond400 Using cfiCommon0
        CFI (cfiCond400) NoFunction
        CFI (cfiCond400) Conditional ??CrossCallReturnLabel_200, ??CrossCallReturnLabel_197, ??CrossCallReturnLabel_193
        CFI (cfiCond400) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond400) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond400) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond400) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond400) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond400) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond400) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond400) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond400) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond400) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond400) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond400) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond400) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond400) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond400) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond400) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond400) CFA_SP SP+0
        CFI (cfiCond400) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond401 Using cfiCommon0
        CFI (cfiCond401) NoFunction
        CFI (cfiCond401) Conditional ??CrossCallReturnLabel_200, ??CrossCallReturnLabel_197, ??CrossCallReturnLabel_194
        CFI (cfiCond401) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond401) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond401) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond401) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond401) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond401) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond401) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond401) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond401) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond401) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond401) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond401) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond401) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond401) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond401) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond401) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond401) CFA_SP SP+0
        CFI (cfiCond401) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond402 Using cfiCommon0
        CFI (cfiCond402) NoFunction
        CFI (cfiCond402) Conditional ??CrossCallReturnLabel_200, ??CrossCallReturnLabel_197, ??CrossCallReturnLabel_195
        CFI (cfiCond402) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond402) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond402) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond402) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond402) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond402) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond402) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond402) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond402) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond402) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond402) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond402) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond402) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond402) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond402) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond402) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond402) CFA_SP SP+0
        CFI (cfiCond402) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond403 Using cfiCommon0
        CFI (cfiCond403) NoFunction
        CFI (cfiCond403) Conditional ??CrossCallReturnLabel_198, ??CrossCallReturnLabel_68
        CFI (cfiCond403) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond403) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond403) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond403) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond403) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond403) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond403) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond403) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond403) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond403) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond403) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond403) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond403) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond403) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond403) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond403) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond403) CFA_SP SP+0
        CFI (cfiCond403) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond404 Using cfiCommon0
        CFI (cfiCond404) NoFunction
        CFI (cfiCond404) Conditional ??CrossCallReturnLabel_198, ??CrossCallReturnLabel_69
        CFI (cfiCond404) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond404) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond404) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond404) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond404) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond404) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond404) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond404) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond404) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond404) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond404) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond404) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond404) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond404) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond404) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond404) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond404) CFA_SP SP+0
        CFI (cfiCond404) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiPicker405 Using cfiCommon1
        CFI (cfiPicker405) NoFunction
        CFI (cfiPicker405) Picker
        MOVX    A,@DPTR
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond392
        CFI EndBlock cfiCond393
        CFI EndBlock cfiCond394
        CFI EndBlock cfiCond395
        CFI EndBlock cfiCond396
        CFI EndBlock cfiCond397
        CFI EndBlock cfiCond398
        CFI EndBlock cfiCond399
        CFI EndBlock cfiCond400
        CFI EndBlock cfiCond401
        CFI EndBlock cfiCond402
        CFI EndBlock cfiCond403
        CFI EndBlock cfiCond404
        CFI EndBlock cfiPicker405

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine45:
        CFI Block cfiCond406 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_72
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond407 Using cfiCommon0
        CFI (cfiCond407) NoFunction
        CFI (cfiCond407) Conditional ??CrossCallReturnLabel_73
        CFI (cfiCond407) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond407) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond407) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond407) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond407) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond407) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond407) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond407) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond407) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond407) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond407) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond407) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond407) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond407) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond407) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond407) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond407) CFA_SP SP+0
        CFI (cfiCond407) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiPicker408 Using cfiCommon1
        CFI (cfiPicker408) NoFunction
        CFI (cfiPicker408) Picker
        LCALL   ?Subroutine75 & 0xFFFF
??CrossCallReturnLabel_196:
        RET
        CFI EndBlock cfiCond406
        CFI EndBlock cfiCond407
        CFI EndBlock cfiPicker408

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine75:
        CFI Block cfiCond409 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_196, ??CrossCallReturnLabel_72
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond410 Using cfiCommon0
        CFI (cfiCond410) NoFunction
        CFI (cfiCond410) Conditional ??CrossCallReturnLabel_196, ??CrossCallReturnLabel_73
        CFI (cfiCond410) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond410) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond410) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond410) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond410) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond410) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond410) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond410) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond410) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond410) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond410) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond410) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond410) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond410) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond410) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond410) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond410) CFA_SP SP+0
        CFI (cfiCond410) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond411 Using cfiCommon0
        CFI (cfiCond411) NoFunction
        CFI (cfiCond411) Conditional ??CrossCallReturnLabel_197, ??CrossCallReturnLabel_192
        CFI (cfiCond411) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond411) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond411) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond411) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond411) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond411) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond411) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond411) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond411) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond411) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond411) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond411) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond411) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond411) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond411) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond411) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond411) CFA_SP SP+0
        CFI (cfiCond411) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond412 Using cfiCommon0
        CFI (cfiCond412) NoFunction
        CFI (cfiCond412) Conditional ??CrossCallReturnLabel_197, ??CrossCallReturnLabel_193
        CFI (cfiCond412) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond412) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond412) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond412) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond412) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond412) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond412) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond412) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond412) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond412) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond412) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond412) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond412) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond412) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond412) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond412) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond412) CFA_SP SP+0
        CFI (cfiCond412) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond413 Using cfiCommon0
        CFI (cfiCond413) NoFunction
        CFI (cfiCond413) Conditional ??CrossCallReturnLabel_197, ??CrossCallReturnLabel_194
        CFI (cfiCond413) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond413) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond413) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond413) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond413) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond413) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond413) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond413) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond413) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond413) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond413) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond413) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond413) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond413) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond413) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond413) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond413) CFA_SP SP+0
        CFI (cfiCond413) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond414 Using cfiCommon0
        CFI (cfiCond414) NoFunction
        CFI (cfiCond414) Conditional ??CrossCallReturnLabel_197, ??CrossCallReturnLabel_195
        CFI (cfiCond414) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond414) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond414) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond414) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond414) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond414) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond414) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond414) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond414) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond414) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond414) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond414) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond414) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond414) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond414) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond414) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond414) CFA_SP SP+0
        CFI (cfiCond414) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiPicker415 Using cfiCommon1
        CFI (cfiPicker415) NoFunction
        CFI (cfiPicker415) Picker
        LCALL   ?Subroutine83 & 0xFFFF
??CrossCallReturnLabel_200:
        INC     DPTR
        INC     R6
        MOV     R7,DPH
        RET
        CFI EndBlock cfiCond409
        CFI EndBlock cfiCond410
        CFI EndBlock cfiCond411
        CFI EndBlock cfiCond412
        CFI EndBlock cfiCond413
        CFI EndBlock cfiCond414
        CFI EndBlock cfiPicker415

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine42:
        CFI Block cfiCond416 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_68
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond417 Using cfiCommon0
        CFI (cfiCond417) NoFunction
        CFI (cfiCond417) Conditional ??CrossCallReturnLabel_69
        CFI (cfiCond417) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond417) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond417) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond417) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond417) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond417) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond417) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond417) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond417) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond417) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond417) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond417) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond417) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond417) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond417) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond417) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond417) CFA_SP SP+0
        CFI (cfiCond417) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiPicker418 Using cfiCommon1
        CFI (cfiPicker418) NoFunction
        CFI (cfiPicker418) Picker
        LCALL   ?Subroutine83 & 0xFFFF
??CrossCallReturnLabel_198:
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
        RET
        CFI EndBlock cfiCond416
        CFI EndBlock cfiCond417
        CFI EndBlock cfiPicker418

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
        CFI Block cfiCond419 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_192
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond420 Using cfiCommon0
        CFI (cfiCond420) NoFunction
        CFI (cfiCond420) Conditional ??CrossCallReturnLabel_193
        CFI (cfiCond420) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond420) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond420) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond420) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond420) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond420) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond420) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond420) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond420) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond420) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond420) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond420) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond420) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond420) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond420) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond420) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond420) CFA_SP SP+0
        CFI (cfiCond420) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond421 Using cfiCommon0
        CFI (cfiCond421) NoFunction
        CFI (cfiCond421) Conditional ??CrossCallReturnLabel_194
        CFI (cfiCond421) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond421) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond421) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond421) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond421) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond421) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond421) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond421) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond421) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond421) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond421) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond421) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond421) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond421) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond421) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond421) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond421) CFA_SP SP+0
        CFI (cfiCond421) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiPicker422 Using cfiCommon1
        CFI (cfiPicker422) NoFunction
        CFI (cfiPicker422) Picker
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        CFI EndBlock cfiCond419
        CFI EndBlock cfiCond420
        CFI EndBlock cfiCond421
        CFI EndBlock cfiPicker422
        REQUIRE ??Subroutine107_0
        ; // Fall through to label ??Subroutine107_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine107_0:
        CFI Block cfiCond423 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_195
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond424 Using cfiCommon0
        CFI (cfiCond424) NoFunction
        CFI (cfiCond424) Conditional ??CrossCallReturnLabel_192
        CFI (cfiCond424) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond424) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond424) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond424) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond424) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond424) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond424) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond424) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond424) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond424) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond424) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond424) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond424) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond424) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond424) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond424) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond424) CFA_SP SP+0
        CFI (cfiCond424) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond425 Using cfiCommon0
        CFI (cfiCond425) NoFunction
        CFI (cfiCond425) Conditional ??CrossCallReturnLabel_193
        CFI (cfiCond425) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond425) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond425) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond425) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond425) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond425) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond425) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond425) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond425) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond425) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond425) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond425) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond425) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond425) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond425) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond425) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond425) CFA_SP SP+0
        CFI (cfiCond425) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond426 Using cfiCommon0
        CFI (cfiCond426) NoFunction
        CFI (cfiCond426) Conditional ??CrossCallReturnLabel_194
        CFI (cfiCond426) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond426) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond426) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond426) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond426) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond426) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond426) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond426) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond426) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond426) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond426) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond426) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond426) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond426) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond426) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond426) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond426) CFA_SP SP+0
        CFI (cfiCond426) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiPicker427 Using cfiCommon1
        CFI (cfiPicker427) NoFunction
        CFI (cfiPicker427) Picker
        LCALL   ?Subroutine75 & 0xFFFF
??CrossCallReturnLabel_197:
        MOV     A,?V0 + 0
        RET
        CFI EndBlock cfiCond423
        CFI EndBlock cfiCond424
        CFI EndBlock cfiCond425
        CFI EndBlock cfiCond426
        CFI EndBlock cfiPicker427
// 1499 
// 1500 /*********************************************************************
// 1501  * @fn          ZDP_MgmtRtgRsp
// 1502  *
// 1503  * @brief       This builds and send a Mgmt_Rtg_rsp message. This
// 1504  *              function sends a unicast message.
// 1505  *
// 1506  * @param       dstAddr - destination address of the message
// 1507  * @param       Status - message status (ZDP_SUCCESS or other)
// 1508  * @param       RoutingTableEntries - Total number of entries
// 1509  * @param       StartIndex - Starting index within the reporting list
// 1510  * @param       RoutingTableListCount - number of entries included
// 1511  *                                      in this message
// 1512  * @param       RoutingTableList - List of Routing Table entries
// 1513  * @param       SecurityEnable - true to enable security for this message
// 1514  *
// 1515  * @return      ZStatus_t
// 1516  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1517 ZStatus_t ZDP_MgmtRtgRsp( byte TransSeq, zAddrType_t *dstAddr,
ZDP_MgmtRtgRsp:
        CFI Block cfiBlock428 Using cfiCommon0
        CFI Function ZDP_MgmtRtgRsp
        CODE
// 1518                             byte Status,
// 1519                             byte RoutingTableEntries,
// 1520                             byte StartIndex,
// 1521                             byte RoutingListCount,
// 1522                             rtgItem_t *RoutingTableList,
// 1523                             byte SecurityEnable )
// 1524 {
        FUNCALL ZDP_MgmtRtgRsp, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_MgmtRtgRsp, fillAndSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_MgmtRtgRsp, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 6
        MOV     A,#-0x6
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R1
        MOVX    @DPTR,A
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine59 & 0xFFFF
??CrossCallReturnLabel_96:
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R4
        MOVX    @DPTR,A
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R5
        MOVX    @DPTR,A
        MOV     A,#0x16
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 3,A
        MOV     A,#0x17
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 2,A
        MOV     A,#0x18
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine17 & 0xFFFF
// 1525   uint8 *buf;
// 1526   uint8 *pBuf;
// 1527   // Status + RoutingTableEntries + StartIndex + RoutingListCount.
// 1528   byte len = 1 + 1 + 1 + 1;
// 1529   byte x;
// 1530 
// 1531   (void)SecurityEnable;  // Intentionally unreferenced parameter
// 1532   
// 1533   // Add an array for Routing List data
// 1534   len += (RoutingListCount * ZDP_ROUTINGENTRY_SIZE);
??CrossCallReturnLabel_18:
        MOV     B,#0x5
        MOV     A,?V0 + 2
        LCALL   ?Subroutine50 & 0xFFFF
// 1535 
// 1536   buf = osal_mem_alloc( (short)(len+1) );
??CrossCallReturnLabel_185:
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
// 1537   if ( buf == NULL )
        MOV     A,R2
        ORL     A,?V0 + 1
        JNZ     ??ZDP_MgmtRtgRsp_0
// 1538   {
// 1539     return afStatus_MEM_FAIL;
        MOV     R1,#0x10
        LJMP    ??CrossCallReturnLabel_180 & 0xFFFF
// 1540   }
// 1541 
// 1542   pBuf = buf+1;
??ZDP_MgmtRtgRsp_0:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
// 1543 
// 1544   *pBuf++ = Status;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine22 & 0xFFFF
// 1545   *pBuf++ = RoutingTableEntries;
??CrossCallReturnLabel_29:
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine38 & 0xFFFF
// 1546   *pBuf++ = StartIndex;
??CrossCallReturnLabel_64:
        MOV     A,?V0 + 3
        LCALL   ?Subroutine58 & 0xFFFF
// 1547   *pBuf++ = RoutingListCount;
??CrossCallReturnLabel_93:
        INC     R0
        INC     R0
        INC     R0
        MOV     R1,DPH
// 1548 
// 1549   for ( x = 0; x < RoutingListCount; x++ )
        MOV     R4,#0x0
        SJMP    ??ZDP_MgmtRtgRsp_1
// 1550   {
// 1551     *pBuf++ = LO_UINT16( RoutingTableList->dstAddress );  // Destination Address
??ZDP_MgmtRtgRsp_2:
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine38 & 0xFFFF
??CrossCallReturnLabel_65:
        MOV     R0,DPL
        LCALL   ?Subroutine21 & 0xFFFF
// 1552     *pBuf++ = HI_UINT16( RoutingTableList->dstAddress );
// 1553     *pBuf++ = RoutingTableList->status;
??CrossCallReturnLabel_212:
        LCALL   ??Subroutine111_0 & 0xFFFF
// 1554     *pBuf++ = LO_UINT16( RoutingTableList->nextHopAddress );  // Next hop
??CrossCallReturnLabel_216:
        ADD     A,#0x2
        MOV     ?V0 + 4,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     ?V0 + 5,A
        MOV     DPL,?V0 + 4
        MOV     DPH,A
        LCALL   ?Subroutine22 & 0xFFFF
// 1555     *pBuf++ = HI_UINT16( RoutingTableList->nextHopAddress );
??CrossCallReturnLabel_30:
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        LCALL   ??Subroutine112_0 & 0xFFFF
// 1556     RoutingTableList++;    // Move to next list entry
// 1557   }
??CrossCallReturnLabel_217:
        ADD     A,#0x6
        MOV     R6,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
        INC     R4
??ZDP_MgmtRtgRsp_1:
        MOV     A,R4
        CLR     C
        SUBB    A,?V0 + 2
        JC      ??ZDP_MgmtRtgRsp_2
// 1558 
// 1559   FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_Rtg_rsp, len, buf );
        MOV     DPTR,#ZDP_TmpBuf
        LCALL   ??Subroutine108_0 & 0xFFFF
??CrossCallReturnLabel_206:
        ; Setup parameters for call to function fillAndSend
        MOV     ?V0 + 2,#0x32
        MOV     ?V0 + 3,#-0x80
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 24)
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine35 & 0xFFFF
??CrossCallReturnLabel_58:
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine64 & 0xFFFF
??CrossCallReturnLabel_135:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     A,R1
        MOV     R6,A
        ; Setup parameters for call to function osal_mem_free
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??Subroutine104_0 & 0xFFFF
??CrossCallReturnLabel_180:
        LJMP    ?Subroutine7 & 0xFFFF
        CFI EndBlock cfiBlock428
// 1560 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine60:
        CFI Block cfiCond429 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_209
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond430 Using cfiCommon0
        CFI (cfiCond430) NoFunction
        CFI (cfiCond430) Conditional ??CrossCallReturnLabel_210
        CFI (cfiCond430) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond430) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond430) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond430) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond430) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond430) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond430) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond430) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond430) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond430) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond430) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond430) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond430) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond430) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond430) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond430) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond430) CFA_SP SP+0
        CFI (cfiCond430) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiPicker431 Using cfiCommon1
        CFI (cfiPicker431) NoFunction
        CFI (cfiPicker431) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CFI EndBlock cfiCond429
        CFI EndBlock cfiCond430
        CFI EndBlock cfiPicker431
        REQUIRE ??Subroutine108_0
        ; // Fall through to label ??Subroutine108_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine108_0:
        CFI Block cfiCond432 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_203
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond433 Using cfiCommon0
        CFI (cfiCond433) NoFunction
        CFI (cfiCond433) Conditional ??CrossCallReturnLabel_204
        CFI (cfiCond433) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond433) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond433) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond433) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond433) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond433) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond433) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond433) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond433) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond433) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond433) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond433) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond433) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond433) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond433) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond433) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond433) CFA_SP SP+0
        CFI (cfiCond433) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond434 Using cfiCommon0
        CFI (cfiCond434) NoFunction
        CFI (cfiCond434) Conditional ??CrossCallReturnLabel_205
        CFI (cfiCond434) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond434) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond434) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond434) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond434) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond434) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond434) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond434) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond434) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond434) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond434) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond434) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond434) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond434) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond434) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond434) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond434) CFA_SP SP+0
        CFI (cfiCond434) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond435 Using cfiCommon0
        CFI (cfiCond435) NoFunction
        CFI (cfiCond435) Conditional ??CrossCallReturnLabel_206
        CFI (cfiCond435) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond435) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond435) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond435) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond435) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond435) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond435) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond435) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond435) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond435) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond435) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond435) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond435) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond435) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond435) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond435) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond435) CFA_SP SP+0
        CFI (cfiCond435) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond436 Using cfiCommon0
        CFI (cfiCond436) NoFunction
        CFI (cfiCond436) Conditional ??CrossCallReturnLabel_207
        CFI (cfiCond436) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond436) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond436) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond436) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond436) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond436) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond436) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond436) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond436) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond436) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond436) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond436) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond436) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond436) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond436) CFA_SP SP+0
        CFI (cfiCond436) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond437 Using cfiCommon0
        CFI (cfiCond437) NoFunction
        CFI (cfiCond437) Conditional ??CrossCallReturnLabel_208
        CFI (cfiCond437) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond437) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond437) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond437) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond437) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond437) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond437) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond437) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond437) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond437) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond437) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond437) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond437) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond437) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond437) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond437) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond437) CFA_SP SP+0
        CFI (cfiCond437) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond438 Using cfiCommon0
        CFI (cfiCond438) NoFunction
        CFI (cfiCond438) Conditional ??CrossCallReturnLabel_209
        CFI (cfiCond438) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond438) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond438) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond438) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond438) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond438) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond438) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond438) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond438) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond438) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond438) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond438) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond438) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond438) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond438) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond438) CFA_SP SP+0
        CFI (cfiCond438) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond439 Using cfiCommon0
        CFI (cfiCond439) NoFunction
        CFI (cfiCond439) Conditional ??CrossCallReturnLabel_210
        CFI (cfiCond439) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond439) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond439) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond439) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond439) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond439) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond439) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond439) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond439) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond439) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond439) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond439) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond439) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond439) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond439) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond439) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond439) CFA_SP SP+0
        CFI (cfiCond439) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiPicker440 Using cfiCommon1
        CFI (cfiPicker440) NoFunction
        CFI (cfiPicker440) Picker
        MOV     A,R2
        CFI EndBlock cfiCond432
        CFI EndBlock cfiCond433
        CFI EndBlock cfiCond434
        CFI EndBlock cfiCond435
        CFI EndBlock cfiCond436
        CFI EndBlock cfiCond437
        CFI EndBlock cfiCond438
        CFI EndBlock cfiCond439
        CFI EndBlock cfiPicker440
        REQUIRE ??Subroutine109_0
        ; // Fall through to label ??Subroutine109_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine109_0:
        CFI Block cfiCond441 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_201
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond442 Using cfiCommon0
        CFI (cfiCond442) NoFunction
        CFI (cfiCond442) Conditional ??CrossCallReturnLabel_202
        CFI (cfiCond442) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond442) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond442) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond442) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond442) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond442) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond442) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond442) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond442) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond442) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond442) CFA_SP SP+0
        CFI (cfiCond442) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond443 Using cfiCommon0
        CFI (cfiCond443) NoFunction
        CFI (cfiCond443) Conditional ??CrossCallReturnLabel_203
        CFI (cfiCond443) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond443) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond443) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond443) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond443) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond443) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond443) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond443) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond443) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond443) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond443) CFA_SP SP+0
        CFI (cfiCond443) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond444 Using cfiCommon0
        CFI (cfiCond444) NoFunction
        CFI (cfiCond444) Conditional ??CrossCallReturnLabel_204
        CFI (cfiCond444) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond444) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond444) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond444) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond444) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond444) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond444) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond444) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond444) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond444) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond444) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond444) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond444) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond444) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond444) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond444) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond444) CFA_SP SP+0
        CFI (cfiCond444) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond445 Using cfiCommon0
        CFI (cfiCond445) NoFunction
        CFI (cfiCond445) Conditional ??CrossCallReturnLabel_205
        CFI (cfiCond445) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond445) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond445) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond445) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond445) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond445) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond445) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond445) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond445) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond445) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond445) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond445) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond445) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond445) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond445) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond445) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond445) CFA_SP SP+0
        CFI (cfiCond445) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond446 Using cfiCommon0
        CFI (cfiCond446) NoFunction
        CFI (cfiCond446) Conditional ??CrossCallReturnLabel_206
        CFI (cfiCond446) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond446) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond446) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond446) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond446) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond446) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond446) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond446) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond446) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond446) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond446) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond446) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond446) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond446) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond446) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond446) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond446) CFA_SP SP+0
        CFI (cfiCond446) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond447 Using cfiCommon0
        CFI (cfiCond447) NoFunction
        CFI (cfiCond447) Conditional ??CrossCallReturnLabel_207
        CFI (cfiCond447) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond447) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond447) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond447) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond447) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond447) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond447) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond447) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond447) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond447) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond447) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond447) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond447) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond447) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond447) CFA_SP SP+0
        CFI (cfiCond447) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond448 Using cfiCommon0
        CFI (cfiCond448) NoFunction
        CFI (cfiCond448) Conditional ??CrossCallReturnLabel_208
        CFI (cfiCond448) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond448) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond448) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond448) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond448) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond448) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond448) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond448) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond448) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond448) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond448) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond448) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond448) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond448) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond448) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond448) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond448) CFA_SP SP+0
        CFI (cfiCond448) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond449 Using cfiCommon0
        CFI (cfiCond449) NoFunction
        CFI (cfiCond449) Conditional ??CrossCallReturnLabel_209
        CFI (cfiCond449) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond449) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond449) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond449) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond449) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond449) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond449) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond449) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond449) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond449) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond449) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond449) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond449) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond449) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond449) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond449) CFA_SP SP+0
        CFI (cfiCond449) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond450 Using cfiCommon0
        CFI (cfiCond450) NoFunction
        CFI (cfiCond450) Conditional ??CrossCallReturnLabel_210
        CFI (cfiCond450) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond450) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond450) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond450) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond450) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond450) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond450) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond450) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond450) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond450) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond450) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond450) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond450) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond450) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond450) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond450) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond450) CFA_SP SP+0
        CFI (cfiCond450) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiPicker451 Using cfiCommon1
        CFI (cfiPicker451) NoFunction
        CFI (cfiPicker451) Picker
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond441
        CFI EndBlock cfiCond442
        CFI EndBlock cfiCond443
        CFI EndBlock cfiCond444
        CFI EndBlock cfiCond445
        CFI EndBlock cfiCond446
        CFI EndBlock cfiCond447
        CFI EndBlock cfiCond448
        CFI EndBlock cfiCond449
        CFI EndBlock cfiCond450
        CFI EndBlock cfiPicker451

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine59:
        CFI Block cfiCond452 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_95
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond453 Using cfiCommon0
        CFI (cfiCond453) NoFunction
        CFI (cfiCond453) Conditional ??CrossCallReturnLabel_96
        CFI (cfiCond453) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond453) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond453) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond453) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond453) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond453) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond453) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond453) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond453) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond453) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond453) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond453) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond453) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond453) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond453) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond453) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond453) CFA_SP SP+0
        CFI (cfiCond453) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond454 Using cfiCommon0
        CFI (cfiCond454) NoFunction
        CFI (cfiCond454) Conditional ??CrossCallReturnLabel_94
        CFI (cfiCond454) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond454) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond454) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond454) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond454) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond454) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond454) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond454) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond454) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond454) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond454) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond454) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond454) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond454) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond454) CFA_SP SP+0
        CFI (cfiCond454) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiPicker455 Using cfiCommon1
        CFI (cfiPicker455) NoFunction
        CFI (cfiPicker455) Picker
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        MOV     A,#0x2
        RET
        CFI EndBlock cfiCond452
        CFI EndBlock cfiCond453
        CFI EndBlock cfiCond454
        CFI EndBlock cfiPicker455

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine38:
        CFI Block cfiCond456 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_63
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond457 Using cfiCommon0
        CFI (cfiCond457) NoFunction
        CFI (cfiCond457) Conditional ??CrossCallReturnLabel_64
        CFI (cfiCond457) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond457) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond457) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond457) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond457) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond457) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond457) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond457) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond457) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond457) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond457) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond457) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond457) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond457) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond457) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond457) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond457) CFA_SP SP+0
        CFI (cfiCond457) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond458 Using cfiCommon0
        CFI (cfiCond458) NoFunction
        CFI (cfiCond458) Conditional ??CrossCallReturnLabel_65
        CFI (cfiCond458) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond458) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond458) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond458) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond458) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond458) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond458) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond458) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond458) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond458) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond458) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond458) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond458) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond458) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond458) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond458) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond458) CFA_SP SP+0
        CFI (cfiCond458) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiPicker459 Using cfiCommon1
        CFI (cfiPicker459) NoFunction
        CFI (cfiPicker459) Picker
        LCALL   ?Subroutine85 & 0xFFFF
??CrossCallReturnLabel_226:
        RET
        CFI EndBlock cfiCond456
        CFI EndBlock cfiCond457
        CFI EndBlock cfiCond458
        CFI EndBlock cfiPicker459

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine85:
        CFI Block cfiCond460 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_225, ??CrossCallReturnLabel_4
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond461 Using cfiCommon0
        CFI (cfiCond461) NoFunction
        CFI (cfiCond461) Conditional ??CrossCallReturnLabel_225, ??CrossCallReturnLabel_5
        CFI (cfiCond461) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond461) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond461) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond461) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond461) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond461) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond461) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond461) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond461) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond461) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond461) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond461) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond461) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond461) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond461) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond461) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond461) CFA_SP SP+0
        CFI (cfiCond461) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond462 Using cfiCommon0
        CFI (cfiCond462) NoFunction
        CFI (cfiCond462) Conditional ??CrossCallReturnLabel_227, ??CrossCallReturnLabel_224, ??CrossCallReturnLabel_220, ??CrossCallReturnLabel_4
        CFI (cfiCond462) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond462) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond462) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond462) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond462) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond462) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond462) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond462) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond462) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond462) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond462) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond462) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond462) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond462) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond462) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond462) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond462) CFA_SP SP+0
        CFI (cfiCond462) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond463 Using cfiCommon0
        CFI (cfiCond463) NoFunction
        CFI (cfiCond463) Conditional ??CrossCallReturnLabel_227, ??CrossCallReturnLabel_224, ??CrossCallReturnLabel_220, ??CrossCallReturnLabel_5
        CFI (cfiCond463) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond463) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond463) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond463) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond463) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond463) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond463) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond463) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond463) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond463) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond463) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond463) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond463) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond463) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond463) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond463) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond463) CFA_SP SP+0
        CFI (cfiCond463) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond464 Using cfiCommon0
        CFI (cfiCond464) NoFunction
        CFI (cfiCond464) Conditional ??CrossCallReturnLabel_227, ??CrossCallReturnLabel_224, ??CrossCallReturnLabel_221, ??CrossCallReturnLabel_211
        CFI (cfiCond464) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond464) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond464) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond464) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond464) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond464) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond464) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond464) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond464) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond464) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond464) CFA_SP SP+0
        CFI (cfiCond464) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond465 Using cfiCommon0
        CFI (cfiCond465) NoFunction
        CFI (cfiCond465) Conditional ??CrossCallReturnLabel_227, ??CrossCallReturnLabel_224, ??CrossCallReturnLabel_221, ??CrossCallReturnLabel_212
        CFI (cfiCond465) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond465) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond465) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond465) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond465) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond465) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond465) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond465) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond465) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond465) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond465) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond465) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond465) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond465) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond465) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond465) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond465) CFA_SP SP+0
        CFI (cfiCond465) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond466 Using cfiCommon0
        CFI (cfiCond466) NoFunction
        CFI (cfiCond466) Conditional ??CrossCallReturnLabel_227, ??CrossCallReturnLabel_224, ??CrossCallReturnLabel_221, ??CrossCallReturnLabel_213
        CFI (cfiCond466) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond466) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond466) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond466) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond466) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond466) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond466) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond466) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond466) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond466) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond466) CFA_SP SP+0
        CFI (cfiCond466) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond467 Using cfiCommon0
        CFI (cfiCond467) NoFunction
        CFI (cfiCond467) Conditional ??CrossCallReturnLabel_227, ??CrossCallReturnLabel_224, ??CrossCallReturnLabel_219, ??CrossCallReturnLabel_28
        CFI (cfiCond467) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond467) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond467) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond467) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond467) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond467) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond467) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond467) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond467) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond467) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond467) CFA_SP SP+0
        CFI (cfiCond467) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond468 Using cfiCommon0
        CFI (cfiCond468) NoFunction
        CFI (cfiCond468) Conditional ??CrossCallReturnLabel_227, ??CrossCallReturnLabel_224, ??CrossCallReturnLabel_219, ??CrossCallReturnLabel_29
        CFI (cfiCond468) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond468) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond468) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond468) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond468) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond468) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond468) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond468) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond468) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond468) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond468) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond468) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond468) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond468) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond468) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond468) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond468) CFA_SP SP+0
        CFI (cfiCond468) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond469 Using cfiCommon0
        CFI (cfiCond469) NoFunction
        CFI (cfiCond469) Conditional ??CrossCallReturnLabel_227, ??CrossCallReturnLabel_224, ??CrossCallReturnLabel_219, ??CrossCallReturnLabel_30
        CFI (cfiCond469) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond469) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond469) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond469) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond469) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond469) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond469) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond469) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond469) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond469) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond469) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond469) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond469) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond469) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond469) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond469) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond469) CFA_SP SP+0
        CFI (cfiCond469) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond470 Using cfiCommon0
        CFI (cfiCond470) NoFunction
        CFI (cfiCond470) Conditional ??CrossCallReturnLabel_227, ??CrossCallReturnLabel_224, ??CrossCallReturnLabel_222, ??CrossCallReturnLabel_214
        CFI (cfiCond470) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond470) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond470) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond470) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond470) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond470) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond470) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond470) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond470) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond470) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond470) CFA_SP SP+0
        CFI (cfiCond470) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond471 Using cfiCommon0
        CFI (cfiCond471) NoFunction
        CFI (cfiCond471) Conditional ??CrossCallReturnLabel_227, ??CrossCallReturnLabel_224, ??CrossCallReturnLabel_222, ??CrossCallReturnLabel_215
        CFI (cfiCond471) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond471) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond471) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond471) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond471) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond471) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond471) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond471) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond471) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond471) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond471) CFA_SP SP+0
        CFI (cfiCond471) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond472 Using cfiCommon0
        CFI (cfiCond472) NoFunction
        CFI (cfiCond472) Conditional ??CrossCallReturnLabel_227, ??CrossCallReturnLabel_224, ??CrossCallReturnLabel_222, ??CrossCallReturnLabel_216
        CFI (cfiCond472) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond472) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond472) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond472) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond472) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond472) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond472) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond472) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond472) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond472) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond472) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond472) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond472) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond472) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond472) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond472) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond472) CFA_SP SP+0
        CFI (cfiCond472) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond473 Using cfiCommon0
        CFI (cfiCond473) NoFunction
        CFI (cfiCond473) Conditional ??CrossCallReturnLabel_227, ??CrossCallReturnLabel_224, ??CrossCallReturnLabel_222, ??CrossCallReturnLabel_217
        CFI (cfiCond473) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond473) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond473) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond473) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond473) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond473) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond473) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond473) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond473) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond473) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond473) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond473) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond473) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond473) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond473) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond473) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond473) CFA_SP SP+0
        CFI (cfiCond473) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond474 Using cfiCommon0
        CFI (cfiCond474) NoFunction
        CFI (cfiCond474) Conditional ??CrossCallReturnLabel_227, ??CrossCallReturnLabel_224, ??CrossCallReturnLabel_222, ??CrossCallReturnLabel_218
        CFI (cfiCond474) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond474) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond474) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond474) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond474) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond474) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond474) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond474) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond474) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond474) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond474) CFA_SP SP+0
        CFI (cfiCond474) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond475 Using cfiCommon0
        CFI (cfiCond475) NoFunction
        CFI (cfiCond475) Conditional ??CrossCallReturnLabel_227, ??CrossCallReturnLabel_223, ??CrossCallReturnLabel_126, ??CrossCallReturnLabel_123
        CFI (cfiCond475) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond475) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond475) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond475) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond475) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond475) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond475) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond475) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond475) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond475) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond475) CFA_SP SP+0
        CFI (cfiCond475) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond476 Using cfiCommon0
        CFI (cfiCond476) NoFunction
        CFI (cfiCond476) Conditional ??CrossCallReturnLabel_227, ??CrossCallReturnLabel_223, ??CrossCallReturnLabel_126, ??CrossCallReturnLabel_124
        CFI (cfiCond476) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond476) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond476) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond476) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond476) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond476) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond476) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond476) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond476) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond476) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond476) CFA_SP SP+0
        CFI (cfiCond476) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond477 Using cfiCommon0
        CFI (cfiCond477) NoFunction
        CFI (cfiCond477) Conditional ??CrossCallReturnLabel_227, ??CrossCallReturnLabel_223, ??CrossCallReturnLabel_126, ??CrossCallReturnLabel_125
        CFI (cfiCond477) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond477) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond477) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond477) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond477) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond477) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond477) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond477) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond477) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond477) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond477) CFA_SP SP+0
        CFI (cfiCond477) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond478 Using cfiCommon0
        CFI (cfiCond478) NoFunction
        CFI (cfiCond478) Conditional ??CrossCallReturnLabel_227, ??CrossCallReturnLabel_223, ??CrossCallReturnLabel_127, ??CrossCallReturnLabel_26
        CFI (cfiCond478) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond478) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond478) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond478) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond478) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond478) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond478) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond478) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond478) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond478) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond478) CFA_SP SP+0
        CFI (cfiCond478) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond479 Using cfiCommon0
        CFI (cfiCond479) NoFunction
        CFI (cfiCond479) Conditional ??CrossCallReturnLabel_227, ??CrossCallReturnLabel_223, ??CrossCallReturnLabel_127, ??CrossCallReturnLabel_27
        CFI (cfiCond479) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond479) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond479) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond479) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond479) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond479) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond479) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond479) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond479) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond479) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond479) CFA_SP SP+0
        CFI (cfiCond479) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond480 Using cfiCommon0
        CFI (cfiCond480) NoFunction
        CFI (cfiCond480) Conditional ??CrossCallReturnLabel_226, ??CrossCallReturnLabel_63
        CFI (cfiCond480) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond480) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond480) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond480) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond480) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond480) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond480) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond480) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond480) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond480) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond480) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond480) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond480) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond480) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond480) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond480) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond480) CFA_SP SP+0
        CFI (cfiCond480) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond481 Using cfiCommon0
        CFI (cfiCond481) NoFunction
        CFI (cfiCond481) Conditional ??CrossCallReturnLabel_226, ??CrossCallReturnLabel_64
        CFI (cfiCond481) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond481) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond481) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond481) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond481) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond481) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond481) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond481) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond481) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond481) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond481) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond481) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond481) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond481) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond481) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond481) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond481) CFA_SP SP+0
        CFI (cfiCond481) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond482 Using cfiCommon0
        CFI (cfiCond482) NoFunction
        CFI (cfiCond482) Conditional ??CrossCallReturnLabel_226, ??CrossCallReturnLabel_65
        CFI (cfiCond482) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond482) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond482) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond482) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond482) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond482) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond482) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond482) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond482) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond482) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond482) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond482) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond482) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond482) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond482) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond482) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond482) CFA_SP SP+0
        CFI (cfiCond482) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiPicker483 Using cfiCommon1
        CFI (cfiPicker483) NoFunction
        CFI (cfiPicker483) Picker
        MOVX    A,@DPTR
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    @DPTR,A
        INC     DPTR
        RET
        CFI EndBlock cfiCond460
        CFI EndBlock cfiCond461
        CFI EndBlock cfiCond462
        CFI EndBlock cfiCond463
        CFI EndBlock cfiCond464
        CFI EndBlock cfiCond465
        CFI EndBlock cfiCond466
        CFI EndBlock cfiCond467
        CFI EndBlock cfiCond468
        CFI EndBlock cfiCond469
        CFI EndBlock cfiCond470
        CFI EndBlock cfiCond471
        CFI EndBlock cfiCond472
        CFI EndBlock cfiCond473
        CFI EndBlock cfiCond474
        CFI EndBlock cfiCond475
        CFI EndBlock cfiCond476
        CFI EndBlock cfiCond477
        CFI EndBlock cfiCond478
        CFI EndBlock cfiCond479
        CFI EndBlock cfiCond480
        CFI EndBlock cfiCond481
        CFI EndBlock cfiCond482
        CFI EndBlock cfiPicker483

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine22:
        CFI Block cfiCond484 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_28
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond485 Using cfiCommon0
        CFI (cfiCond485) NoFunction
        CFI (cfiCond485) Conditional ??CrossCallReturnLabel_29
        CFI (cfiCond485) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond485) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond485) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond485) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond485) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond485) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond485) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond485) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond485) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond485) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond485) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond485) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond485) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond485) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond485) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond485) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond485) CFA_SP SP+0
        CFI (cfiCond485) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond486 Using cfiCommon0
        CFI (cfiCond486) NoFunction
        CFI (cfiCond486) Conditional ??CrossCallReturnLabel_30
        CFI (cfiCond486) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond486) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond486) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond486) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond486) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond486) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond486) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond486) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond486) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond486) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond486) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond486) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond486) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond486) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond486) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond486) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond486) CFA_SP SP+0
        CFI (cfiCond486) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiPicker487 Using cfiCommon1
        CFI (cfiPicker487) NoFunction
        CFI (cfiPicker487) Picker
        LCALL   ??Subroutine90_0 & 0xFFFF
??CrossCallReturnLabel_219:
        RET
        CFI EndBlock cfiCond484
        CFI EndBlock cfiCond485
        CFI EndBlock cfiCond486
        CFI EndBlock cfiPicker487

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine21:
        CFI Block cfiCond488 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_211
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond489 Using cfiCommon0
        CFI (cfiCond489) NoFunction
        CFI (cfiCond489) Conditional ??CrossCallReturnLabel_212
        CFI (cfiCond489) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond489) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond489) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond489) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond489) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond489) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond489) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond489) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond489) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond489) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond489) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond489) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond489) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond489) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond489) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond489) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond489) CFA_SP SP+0
        CFI (cfiCond489) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiPicker490 Using cfiCommon1
        CFI (cfiPicker490) NoFunction
        CFI (cfiPicker490) Picker
        MOV     R1,DPH
        MOV     DPL,R6
        MOV     DPH,R7
        CFI EndBlock cfiCond488
        CFI EndBlock cfiCond489
        CFI EndBlock cfiPicker490
        REQUIRE ??Subroutine110_0
        ; // Fall through to label ??Subroutine110_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine110_0:
        CFI Block cfiCond491 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_213
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond492 Using cfiCommon0
        CFI (cfiCond492) NoFunction
        CFI (cfiCond492) Conditional ??CrossCallReturnLabel_211
        CFI (cfiCond492) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond492) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond492) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond492) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond492) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond492) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond492) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond492) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond492) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond492) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond492) CFA_SP SP+0
        CFI (cfiCond492) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond493 Using cfiCommon0
        CFI (cfiCond493) NoFunction
        CFI (cfiCond493) Conditional ??CrossCallReturnLabel_212
        CFI (cfiCond493) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond493) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond493) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond493) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond493) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond493) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond493) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond493) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond493) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond493) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond493) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond493) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond493) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond493) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond493) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond493) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond493) CFA_SP SP+0
        CFI (cfiCond493) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiPicker494 Using cfiCommon1
        CFI (cfiPicker494) NoFunction
        CFI (cfiPicker494) Picker
        LCALL   ?Subroutine71 & 0xFFFF
??CrossCallReturnLabel_221:
        MOV     DPL,R6
        MOV     DPH,R7
        RET
        CFI EndBlock cfiCond491
        CFI EndBlock cfiCond492
        CFI EndBlock cfiCond493
        CFI EndBlock cfiPicker494

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
        CFI Block cfiCond495 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_214
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond496 Using cfiCommon0
        CFI (cfiCond496) NoFunction
        CFI (cfiCond496) Conditional ??CrossCallReturnLabel_215
        CFI (cfiCond496) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond496) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond496) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond496) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond496) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond496) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond496) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond496) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond496) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond496) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond496) CFA_SP SP+0
        CFI (cfiCond496) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker497 Using cfiCommon1
        CFI (cfiPicker497) NoFunction
        CFI (cfiPicker497) Picker
        INC     DPTR
        INC     DPTR
        CFI EndBlock cfiCond495
        CFI EndBlock cfiCond496
        CFI EndBlock cfiPicker497
        REQUIRE ??Subroutine111_0
        ; // Fall through to label ??Subroutine111_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine111_0:
        CFI Block cfiCond498 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_216
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond499 Using cfiCommon0
        CFI (cfiCond499) NoFunction
        CFI (cfiCond499) Conditional ??CrossCallReturnLabel_214
        CFI (cfiCond499) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond499) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond499) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond499) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond499) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond499) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond499) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond499) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond499) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond499) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond499) CFA_SP SP+0
        CFI (cfiCond499) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond500 Using cfiCommon0
        CFI (cfiCond500) NoFunction
        CFI (cfiCond500) Conditional ??CrossCallReturnLabel_215
        CFI (cfiCond500) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond500) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond500) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond500) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond500) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond500) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond500) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond500) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond500) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond500) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond500) CFA_SP SP+0
        CFI (cfiCond500) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker501 Using cfiCommon1
        CFI (cfiPicker501) NoFunction
        CFI (cfiPicker501) Picker
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        CFI EndBlock cfiCond498
        CFI EndBlock cfiCond499
        CFI EndBlock cfiCond500
        CFI EndBlock cfiPicker501
        REQUIRE ??Subroutine112_0
        ; // Fall through to label ??Subroutine112_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine112_0:
        CFI Block cfiCond502 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_217
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond503 Using cfiCommon0
        CFI (cfiCond503) NoFunction
        CFI (cfiCond503) Conditional ??CrossCallReturnLabel_216
        CFI (cfiCond503) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond503) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond503) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond503) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond503) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond503) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond503) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond503) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond503) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond503) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond503) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond503) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond503) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond503) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond503) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond503) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond503) CFA_SP SP+0
        CFI (cfiCond503) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond504 Using cfiCommon0
        CFI (cfiCond504) NoFunction
        CFI (cfiCond504) Conditional ??CrossCallReturnLabel_214
        CFI (cfiCond504) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond504) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond504) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond504) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond504) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond504) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond504) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond504) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond504) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond504) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond504) CFA_SP SP+0
        CFI (cfiCond504) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond505 Using cfiCommon0
        CFI (cfiCond505) NoFunction
        CFI (cfiCond505) Conditional ??CrossCallReturnLabel_215
        CFI (cfiCond505) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond505) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond505) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond505) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond505) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond505) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond505) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond505) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond505) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond505) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond505) CFA_SP SP+0
        CFI (cfiCond505) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker506 Using cfiCommon1
        CFI (cfiPicker506) NoFunction
        CFI (cfiPicker506) Picker
        INC     DPTR
        CFI EndBlock cfiCond502
        CFI EndBlock cfiCond503
        CFI EndBlock cfiCond504
        CFI EndBlock cfiCond505
        CFI EndBlock cfiPicker506
        REQUIRE ??Subroutine113_0
        ; // Fall through to label ??Subroutine113_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine113_0:
        CFI Block cfiCond507 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_218
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond508 Using cfiCommon0
        CFI (cfiCond508) NoFunction
        CFI (cfiCond508) Conditional ??CrossCallReturnLabel_217
        CFI (cfiCond508) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond508) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond508) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond508) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond508) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond508) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond508) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond508) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond508) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond508) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond508) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond508) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond508) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond508) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond508) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond508) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond508) CFA_SP SP+0
        CFI (cfiCond508) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond509 Using cfiCommon0
        CFI (cfiCond509) NoFunction
        CFI (cfiCond509) Conditional ??CrossCallReturnLabel_216
        CFI (cfiCond509) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond509) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond509) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond509) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond509) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond509) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond509) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond509) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond509) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond509) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond509) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond509) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond509) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond509) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond509) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond509) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond509) CFA_SP SP+0
        CFI (cfiCond509) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond510 Using cfiCommon0
        CFI (cfiCond510) NoFunction
        CFI (cfiCond510) Conditional ??CrossCallReturnLabel_214
        CFI (cfiCond510) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond510) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond510) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond510) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond510) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond510) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond510) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond510) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond510) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond510) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond510) CFA_SP SP+0
        CFI (cfiCond510) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond511 Using cfiCommon0
        CFI (cfiCond511) NoFunction
        CFI (cfiCond511) Conditional ??CrossCallReturnLabel_215
        CFI (cfiCond511) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond511) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond511) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond511) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond511) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond511) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond511) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond511) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond511) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond511) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond511) CFA_SP SP+0
        CFI (cfiCond511) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker512 Using cfiCommon1
        CFI (cfiPicker512) NoFunction
        CFI (cfiPicker512) Picker
        LCALL   ??Subroutine90_0 & 0xFFFF
??CrossCallReturnLabel_222:
        MOV     A,R6
        RET
        CFI EndBlock cfiCond507
        CFI EndBlock cfiCond508
        CFI EndBlock cfiCond509
        CFI EndBlock cfiCond510
        CFI EndBlock cfiCond511
        CFI EndBlock cfiPicker512
// 1561 
// 1562 /*********************************************************************
// 1563  * @fn          ZDP_MgmtBindRsp
// 1564  *
// 1565  * @brief       This builds and send a Mgmt_Bind_rsp message. This
// 1566  *              function sends a unicast message.
// 1567  *
// 1568  * @param       dstAddr - destination address of the message
// 1569  * @param       Status - message status (ZDP_SUCCESS or other)
// 1570  * @param       BindingTableEntries - Total number of entries
// 1571  * @param       StartIndex - Starting index within the reporting list
// 1572  * @param       BindingTableListCount - number of entries included
// 1573  *                                 in this message
// 1574  * @param       BindingTableList - List of Binding Table entries
// 1575  * @param       SecurityEnable - Security Options
// 1576  *
// 1577  * @return      ZStatus_t
// 1578  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1579 ZStatus_t ZDP_MgmtBindRsp( byte TransSeq, zAddrType_t *dstAddr,
ZDP_MgmtBindRsp:
        CFI Block cfiBlock513 Using cfiCommon0
        CFI Function ZDP_MgmtBindRsp
        CODE
// 1580                             byte Status,
// 1581                             byte BindingTableEntries,
// 1582                             byte StartIndex,
// 1583                             byte BindingTableListCount,
// 1584                             apsBindingItem_t *BindingTableList,
// 1585                             byte SecurityEnable )
// 1586 {
        FUNCALL ZDP_MgmtBindRsp, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_MgmtBindRsp, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_MgmtBindRsp, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_MgmtBindRsp, fillAndSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_MgmtBindRsp, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 4
        MOV     A,#-0x4
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R1
        MOVX    @DPTR,A
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine54 & 0xFFFF
??CrossCallReturnLabel_83:
        MOV     ?V0 + 7,R5
        MOV     A,#0x14
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        MOV     A,#0x15
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 6,A
        MOV     A,#0x16
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine17 & 0xFFFF
// 1587   uint8 *buf;
// 1588   uint8 *pBuf;
// 1589   uint8 maxLen; // maxLen is the maximum packet length to allocate enough memory space
// 1590   uint8 len;    // Actual length varies due to different addrMode
// 1591   uint8 x;
// 1592   byte extZdpBindEntrySize = ZDP_BINDINGENTRY_SIZE + 1 + 1; // One more byte for cluserID and DstAddrMode
// 1593   byte shortZdpBindEntrySize = ZDP_BINDINGENTRY_SIZE + 1 + 1 + 2 - 8 - 1; // clusterID + DstAddrMode + shortAddr - ExtAddr - DstEndpoint
// 1594 
// 1595   (void)SecurityEnable;  // Intentionally unreferenced parameter
// 1596   
// 1597   // Status + BindingTableEntries + StartIndex + BindingTableListCount.
// 1598   maxLen = 1 + 1 + 1 + 1;
// 1599   maxLen += (BindingTableListCount * extZdpBindEntrySize );  //max length
// 1600   buf = osal_mem_alloc( maxLen + 1 );  // +1 for transaction ID
??CrossCallReturnLabel_19:
        ; Setup parameters for call to function osal_mem_alloc
        MOV     B,#0x15
        MOV     A,?V0 + 6
        MUL     AB
        ADD     A,#0x5
        MOV     R2,A
        CLR     A
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ??osal_mem_alloc?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
// 1601 
// 1602   if ( buf == NULL )
        MOV     A,R2
        ORL     A,?V0 + 3
        JNZ     ??ZDP_MgmtBindRsp_0
// 1603   {
// 1604     return afStatus_MEM_FAIL;
        MOV     R1,#0x10
        LJMP    ??CrossCallReturnLabel_178 & 0xFFFF
// 1605   }
??ZDP_MgmtBindRsp_0:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        MOV     R2,DPL
        MOV     R3,DPH
// 1606 
// 1607   pBuf = buf+1;
// 1608 
// 1609   *pBuf++ = Status;
        LCALL   ?Subroutine41 & 0xFFFF
// 1610   *pBuf++ = BindingTableEntries;
??CrossCallReturnLabel_239:
        MOV     A,?V0 + 7
        MOVX    @DPTR,A
        INC     DPTR
// 1611   *pBuf++ = StartIndex;
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
        INC     DPTR
// 1612   *pBuf++ = BindingTableListCount;
        MOV     A,?V0 + 6
        LCALL   ??Subroutine114_0 & 0xFFFF
// 1613 
// 1614   // Initial length = Status + BindingTableEntries + StartIndex + BindingTableListCount.
// 1615   // length += ZDP_BINDINGENTRY_SIZE   -- Version 1.0
// 1616   //           extZdpBindEntrySize     -- Version 1.1 extended address mode
// 1617   //           shortZdpBindEntrySize   -- Version 1.1 group address mode
// 1618 
// 1619   len = 1 + 1 + 1 + 1;
??CrossCallReturnLabel_233:
        MOV     ?V0 + 0,#0x4
// 1620   for ( x = 0; x < BindingTableListCount; x++ )
        MOV     ?V0 + 1,#0x0
        SJMP    ??ZDP_MgmtBindRsp_1
// 1621   {
// 1622     pBuf = osal_cpyExtAddr( pBuf, BindingTableList->srcAddr );
// 1623     *pBuf++ = BindingTableList->srcEP;
// 1624 
// 1625     // Cluster ID
// 1626     *pBuf++ = LO_UINT16( BindingTableList->clusterID );
// 1627     *pBuf++ = HI_UINT16( BindingTableList->clusterID );
// 1628 
// 1629     *pBuf++ = BindingTableList->dstAddr.addrMode;
// 1630     if ( BindingTableList->dstAddr.addrMode == Addr64Bit )
// 1631     {
// 1632       len += extZdpBindEntrySize;
// 1633       pBuf = osal_cpyExtAddr( pBuf, BindingTableList->dstAddr.addr.extAddr );
// 1634       *pBuf++ = BindingTableList->dstEP;
// 1635     }
// 1636     else
// 1637     {
// 1638       len += shortZdpBindEntrySize;
??ZDP_MgmtBindRsp_2:
        MOV     A,#0xe
        ADD     A,?V0 + 0
        MOV     ?V0 + 0,A
// 1639       *pBuf++ = LO_UINT16( BindingTableList->dstAddr.addr.shortAddr );
        LCALL   ?Subroutine15 & 0xFFFF
// 1640       *pBuf++ = HI_UINT16( BindingTableList->dstAddr.addr.shortAddr );
// 1641     }
??CrossCallReturnLabel_10:
        MOV     R3,DPH
// 1642     BindingTableList++;    // Move to next list entry
        MOV     A,R6
        ADD     A,#0x15
        MOV     R6,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
        INC     ?V0 + 1
??ZDP_MgmtBindRsp_1:
        MOV     A,?V0 + 1
        CLR     C
        SUBB    A,?V0 + 6
        JNC     ??ZDP_MgmtBindRsp_3
        ; Setup parameters for call to function sAddrExtCpy
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        LCALL   ??sAddrExtCpy?relay
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine116_0 & 0xFFFF
??CrossCallReturnLabel_242:
        MOV     A,R6
        ADD     A,#0x9
        MOV     R4,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R5,A
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_11:
        MOV     R3,DPH
        MOV     A,R6
        ADD     A,#0x13
        MOV     R0,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R1,A
        LCALL   ?Subroutine40 & 0xFFFF
??CrossCallReturnLabel_255:
        MOV     A,R6
        ADD     A,#0xb
        INC     R4
        INC     R4
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R5,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        XRL     A,#0x3
        JNZ     ??ZDP_MgmtBindRsp_2
        MOV     A,#0x15
        ADD     A,?V0 + 0
        MOV     ?V0 + 0,A
        ; Setup parameters for call to function sAddrExtCpy
        LCALL   ??sAddrExtCpy?relay
        MOV     A,R6
        ADD     A,#0x14
        LCALL   ?Subroutine68 & 0xFFFF
// 1643   }
??CrossCallReturnLabel_282:
        LCALL   ??Subroutine115_0 & 0xFFFF
??CrossCallReturnLabel_237:
        MOV     R2,DPL
        SJMP    ??CrossCallReturnLabel_10
// 1644 
// 1645   FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_Bind_rsp, len, buf );
??ZDP_MgmtBindRsp_3:
        LCALL   ?Subroutine57 & 0xFFFF
??CrossCallReturnLabel_291:
        ; Setup parameters for call to function fillAndSend
        MOV     ?V0 + 4,#0x33
        MOV     ?V0 + 5,#-0x80
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     R1,?V0 + 0
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_52:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine64 & 0xFFFF
??CrossCallReturnLabel_136:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
        LCALL   ?Subroutine52 & 0xFFFF
??CrossCallReturnLabel_178:
        LJMP    ?Subroutine6 & 0xFFFF
        CFI EndBlock cfiBlock513
// 1646 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine54:
        CFI Block cfiCond514 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_82
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond515 Using cfiCommon0
        CFI (cfiCond515) NoFunction
        CFI (cfiCond515) Conditional ??CrossCallReturnLabel_83
        CFI (cfiCond515) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond515) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond515) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond515) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond515) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond515) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond515) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond515) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond515) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond515) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond515) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond515) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond515) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond515) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond515) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond515) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond515) CFA_SP SP+0
        CFI (cfiCond515) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiPicker516 Using cfiCommon1
        CFI (cfiPicker516) NoFunction
        CFI (cfiPicker516) Picker
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        MOV     A,R4
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond514
        CFI EndBlock cfiCond515
        CFI EndBlock cfiPicker516

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine51:
        CFI Block cfiCond517 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_228
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond518 Using cfiCommon0
        CFI (cfiCond518) NoFunction
        CFI (cfiCond518) Conditional ??CrossCallReturnLabel_229
        CFI (cfiCond518) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond518) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond518) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond518) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond518) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond518) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond518) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond518) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond518) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond518) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond518) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond518) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond518) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond518) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond518) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond518) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond518) CFA_SP SP+0
        CFI (cfiCond518) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiPicker519 Using cfiCommon1
        CFI (cfiPicker519) NoFunction
        CFI (cfiPicker519) Picker
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ?Subroutine79 & 0xFFFF
        CFI EndBlock cfiCond517
        CFI EndBlock cfiCond518
        CFI EndBlock cfiPicker519
??CrossCallReturnLabel_121:
        REQUIRE ??Subroutine114_0
        ; // Fall through to label ??Subroutine114_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine114_0:
        CFI Block cfiCond520 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_230
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond521 Using cfiCommon0
        CFI (cfiCond521) NoFunction
        CFI (cfiCond521) Conditional ??CrossCallReturnLabel_231
        CFI (cfiCond521) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond521) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond521) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond521) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond521) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond521) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond521) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond521) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond521) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond521) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond521) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond521) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond521) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond521) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond521) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond521) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond521) CFA_SP SP+0
        CFI (cfiCond521) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond522 Using cfiCommon0
        CFI (cfiCond522) NoFunction
        CFI (cfiCond522) Conditional ??CrossCallReturnLabel_232
        CFI (cfiCond522) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond522) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond522) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond522) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond522) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond522) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond522) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond522) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond522) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond522) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond522) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond522) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond522) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond522) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond522) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond522) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond522) CFA_SP SP+0
        CFI (cfiCond522) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond523 Using cfiCommon0
        CFI (cfiCond523) NoFunction
        CFI (cfiCond523) Conditional ??CrossCallReturnLabel_233
        CFI (cfiCond523) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond523) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond523) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond523) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond523) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond523) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond523) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond523) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond523) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond523) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond523) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond523) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond523) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond523) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond523) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond523) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond523) CFA_SP SP+0
        CFI (cfiCond523) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond524 Using cfiCommon0
        CFI (cfiCond524) NoFunction
        CFI (cfiCond524) Conditional ??CrossCallReturnLabel_234
        CFI (cfiCond524) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond524) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond524) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond524) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond524) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond524) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond524) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond524) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond524) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond524) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond524) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond524) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond524) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond524) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond524) CFA_SP SP+0
        CFI (cfiCond524) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond525 Using cfiCommon0
        CFI (cfiCond525) NoFunction
        CFI (cfiCond525) Conditional ??CrossCallReturnLabel_228
        CFI (cfiCond525) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond525) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond525) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond525) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond525) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond525) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond525) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond525) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond525) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond525) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond525) CFA_SP SP+0
        CFI (cfiCond525) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond526 Using cfiCommon0
        CFI (cfiCond526) NoFunction
        CFI (cfiCond526) Conditional ??CrossCallReturnLabel_229
        CFI (cfiCond526) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond526) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond526) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond526) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond526) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond526) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond526) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond526) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond526) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond526) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond526) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond526) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond526) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond526) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond526) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond526) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond526) CFA_SP SP+0
        CFI (cfiCond526) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiPicker527 Using cfiCommon1
        CFI (cfiPicker527) NoFunction
        CFI (cfiPicker527) Picker
        MOVX    @DPTR,A
        INC     DPTR
        MOV     R2,DPL
        MOV     R3,DPH
        RET
        CFI EndBlock cfiCond520
        CFI EndBlock cfiCond521
        CFI EndBlock cfiCond522
        CFI EndBlock cfiCond523
        CFI EndBlock cfiCond524
        CFI EndBlock cfiCond525
        CFI EndBlock cfiCond526
        CFI EndBlock cfiPicker527

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine41:
        CFI Block cfiCond528 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_238
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond529 Using cfiCommon0
        CFI (cfiCond529) NoFunction
        CFI (cfiCond529) Conditional ??CrossCallReturnLabel_239
        CFI (cfiCond529) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond529) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond529) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond529) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond529) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond529) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond529) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond529) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond529) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond529) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond529) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond529) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond529) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond529) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond529) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond529) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond529) CFA_SP SP+0
        CFI (cfiCond529) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiPicker530 Using cfiCommon1
        CFI (cfiPicker530) NoFunction
        CFI (cfiPicker530) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CFI EndBlock cfiCond528
        CFI EndBlock cfiCond529
        CFI EndBlock cfiPicker530
        REQUIRE ??Subroutine115_0
        ; // Fall through to label ??Subroutine115_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine115_0:
        CFI Block cfiCond531 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_235
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond532 Using cfiCommon0
        CFI (cfiCond532) NoFunction
        CFI (cfiCond532) Conditional ??CrossCallReturnLabel_236
        CFI (cfiCond532) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond532) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond532) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond532) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond532) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond532) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond532) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond532) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond532) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond532) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond532) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond532) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond532) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond532) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond532) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond532) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond532) CFA_SP SP+0
        CFI (cfiCond532) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond533 Using cfiCommon0
        CFI (cfiCond533) NoFunction
        CFI (cfiCond533) Conditional ??CrossCallReturnLabel_237
        CFI (cfiCond533) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond533) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond533) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond533) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond533) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond533) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond533) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond533) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond533) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond533) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond533) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond533) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond533) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond533) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond533) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond533) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond533) CFA_SP SP+0
        CFI (cfiCond533) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond534 Using cfiCommon0
        CFI (cfiCond534) NoFunction
        CFI (cfiCond534) Conditional ??CrossCallReturnLabel_238
        CFI (cfiCond534) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond534) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond534) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond534) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond534) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond534) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond534) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond534) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond534) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond534) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond534) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond534) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond534) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond534) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond534) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond534) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond534) CFA_SP SP+0
        CFI (cfiCond534) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond535 Using cfiCommon0
        CFI (cfiCond535) NoFunction
        CFI (cfiCond535) Conditional ??CrossCallReturnLabel_239
        CFI (cfiCond535) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond535) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond535) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond535) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond535) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond535) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond535) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond535) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond535) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond535) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond535) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond535) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond535) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond535) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond535) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond535) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond535) CFA_SP SP+0
        CFI (cfiCond535) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiPicker536 Using cfiCommon1
        CFI (cfiPicker536) NoFunction
        CFI (cfiPicker536) Picker
        LCALL   ?Subroutine74 & 0xFFFF
??CrossCallReturnLabel_247:
        RET
        CFI EndBlock cfiCond531
        CFI EndBlock cfiCond532
        CFI EndBlock cfiCond533
        CFI EndBlock cfiCond534
        CFI EndBlock cfiCond535
        CFI EndBlock cfiPicker536

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine74:
        CFI Block cfiCond537 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_247, ??CrossCallReturnLabel_238
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond538 Using cfiCommon0
        CFI (cfiCond538) NoFunction
        CFI (cfiCond538) Conditional ??CrossCallReturnLabel_247, ??CrossCallReturnLabel_239
        CFI (cfiCond538) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond538) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond538) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond538) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond538) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond538) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond538) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond538) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond538) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond538) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond538) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond538) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond538) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond538) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond538) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond538) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond538) CFA_SP SP+0
        CFI (cfiCond538) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond539 Using cfiCommon0
        CFI (cfiCond539) NoFunction
        CFI (cfiCond539) Conditional ??CrossCallReturnLabel_247, ??CrossCallReturnLabel_235
        CFI (cfiCond539) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond539) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond539) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond539) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond539) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond539) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond539) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond539) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond539) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond539) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond539) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond539) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond539) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond539) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond539) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond539) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond539) CFA_SP SP+0
        CFI (cfiCond539) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond540 Using cfiCommon0
        CFI (cfiCond540) NoFunction
        CFI (cfiCond540) Conditional ??CrossCallReturnLabel_247, ??CrossCallReturnLabel_236
        CFI (cfiCond540) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond540) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond540) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond540) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond540) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond540) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond540) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond540) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond540) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond540) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond540) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond540) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond540) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond540) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond540) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond540) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond540) CFA_SP SP+0
        CFI (cfiCond540) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond541 Using cfiCommon0
        CFI (cfiCond541) NoFunction
        CFI (cfiCond541) Conditional ??CrossCallReturnLabel_247, ??CrossCallReturnLabel_237
        CFI (cfiCond541) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond541) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond541) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond541) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond541) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond541) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond541) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond541) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond541) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond541) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond541) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond541) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond541) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond541) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond541) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond541) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond541) CFA_SP SP+0
        CFI (cfiCond541) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond542 Using cfiCommon0
        CFI (cfiCond542) NoFunction
        CFI (cfiCond542) Conditional ??CrossCallReturnLabel_246, ??CrossCallReturnLabel_10
        CFI (cfiCond542) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond542) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond542) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond542) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond542) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond542) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond542) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond542) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond542) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond542) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond542) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond542) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond542) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond542) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond542) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond542) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond542) CFA_SP SP+0
        CFI (cfiCond542) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond543 Using cfiCommon0
        CFI (cfiCond543) NoFunction
        CFI (cfiCond543) Conditional ??CrossCallReturnLabel_246, ??CrossCallReturnLabel_11
        CFI (cfiCond543) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond543) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond543) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond543) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond543) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond543) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond543) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond543) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond543) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond543) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond543) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond543) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond543) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond543) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond543) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond543) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond543) CFA_SP SP+0
        CFI (cfiCond543) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond544 Using cfiCommon0
        CFI (cfiCond544) NoFunction
        CFI (cfiCond544) Conditional ??CrossCallReturnLabel_248, ??CrossCallReturnLabel_244
        CFI (cfiCond544) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond544) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond544) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond544) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond544) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond544) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond544) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond544) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond544) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond544) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond544) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond544) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond544) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond544) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond544) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond544) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond544) CFA_SP SP+0
        CFI (cfiCond544) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond545 Using cfiCommon0
        CFI (cfiCond545) NoFunction
        CFI (cfiCond545) Conditional ??CrossCallReturnLabel_248, ??CrossCallReturnLabel_245
        CFI (cfiCond545) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond545) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond545) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond545) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond545) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond545) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond545) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond545) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond545) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond545) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond545) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond545) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond545) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond545) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond545) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond545) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond545) CFA_SP SP+0
        CFI (cfiCond545) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond546 Using cfiCommon0
        CFI (cfiCond546) NoFunction
        CFI (cfiCond546) Conditional ??CrossCallReturnLabel_248, ??CrossCallReturnLabel_240
        CFI (cfiCond546) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond546) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond546) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond546) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond546) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond546) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond546) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond546) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond546) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond546) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond546) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond546) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond546) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond546) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond546) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond546) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond546) CFA_SP SP+0
        CFI (cfiCond546) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond547 Using cfiCommon0
        CFI (cfiCond547) NoFunction
        CFI (cfiCond547) Conditional ??CrossCallReturnLabel_248, ??CrossCallReturnLabel_241
        CFI (cfiCond547) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond547) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond547) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond547) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond547) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond547) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond547) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond547) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond547) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond547) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond547) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond547) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond547) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond547) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond547) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond547) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond547) CFA_SP SP+0
        CFI (cfiCond547) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond548 Using cfiCommon0
        CFI (cfiCond548) NoFunction
        CFI (cfiCond548) Conditional ??CrossCallReturnLabel_248, ??CrossCallReturnLabel_242
        CFI (cfiCond548) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond548) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond548) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond548) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond548) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond548) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond548) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond548) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond548) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond548) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond548) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond548) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond548) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond548) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond548) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond548) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond548) CFA_SP SP+0
        CFI (cfiCond548) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond549 Using cfiCommon0
        CFI (cfiCond549) NoFunction
        CFI (cfiCond549) Conditional ??CrossCallReturnLabel_248, ??CrossCallReturnLabel_243
        CFI (cfiCond549) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond549) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond549) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond549) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond549) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond549) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond549) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond549) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond549) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond549) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond549) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond549) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond549) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond549) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond549) CFA_SP SP+0
        CFI (cfiCond549) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiPicker550 Using cfiCommon1
        CFI (cfiPicker550) NoFunction
        CFI (cfiPicker550) Picker
        MOVX    A,@DPTR
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    @DPTR,A
        INC     DPTR
        RET
        CFI EndBlock cfiCond537
        CFI EndBlock cfiCond538
        CFI EndBlock cfiCond539
        CFI EndBlock cfiCond540
        CFI EndBlock cfiCond541
        CFI EndBlock cfiCond542
        CFI EndBlock cfiCond543
        CFI EndBlock cfiCond544
        CFI EndBlock cfiCond545
        CFI EndBlock cfiCond546
        CFI EndBlock cfiCond547
        CFI EndBlock cfiCond548
        CFI EndBlock cfiCond549
        CFI EndBlock cfiPicker550

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine34:
        CFI Block cfiCond551 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_50
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond552 Using cfiCommon0
        CFI (cfiCond552) NoFunction
        CFI (cfiCond552) Conditional ??CrossCallReturnLabel_51
        CFI (cfiCond552) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond552) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond552) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond552) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond552) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond552) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond552) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond552) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond552) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond552) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond552) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond552) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond552) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond552) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond552) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond552) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond552) CFA_SP SP+0
        CFI (cfiCond552) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond553 Using cfiCommon0
        CFI (cfiCond553) NoFunction
        CFI (cfiCond553) Conditional ??CrossCallReturnLabel_52
        CFI (cfiCond553) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond553) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond553) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond553) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond553) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond553) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond553) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond553) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond553) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond553) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond553) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond553) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond553) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond553) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond553) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond553) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond553) CFA_SP SP+0
        CFI (cfiCond553) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiPicker554 Using cfiCommon1
        CFI (cfiPicker554) NoFunction
        CFI (cfiPicker554) Picker
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,#0x3
        RET
        CFI EndBlock cfiCond551
        CFI EndBlock cfiCond552
        CFI EndBlock cfiCond553
        CFI EndBlock cfiPicker554

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine15:
        CFI Block cfiCond555 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_10
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond556 Using cfiCommon0
        CFI (cfiCond556) NoFunction
        CFI (cfiCond556) Conditional ??CrossCallReturnLabel_11
        CFI (cfiCond556) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond556) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond556) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond556) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond556) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond556) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond556) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond556) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond556) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond556) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond556) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond556) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond556) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond556) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond556) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond556) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond556) CFA_SP SP+0
        CFI (cfiCond556) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiPicker557 Using cfiCommon1
        CFI (cfiPicker557) NoFunction
        CFI (cfiPicker557) Picker
        MOV     DPL,R4
        MOV     DPH,R5
        LCALL   ??Subroutine94_0 & 0xFFFF
??CrossCallReturnLabel_257:
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        LCALL   ?Subroutine74 & 0xFFFF
??CrossCallReturnLabel_246:
        INC     R2
        RET
        CFI EndBlock cfiCond555
        CFI EndBlock cfiCond556
        CFI EndBlock cfiPicker557

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiCond558 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_244
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond559 Using cfiCommon0
        CFI (cfiCond559) NoFunction
        CFI (cfiCond559) Conditional ??CrossCallReturnLabel_245
        CFI (cfiCond559) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond559) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond559) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond559) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond559) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond559) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond559) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond559) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond559) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond559) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond559) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond559) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond559) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond559) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond559) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond559) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond559) CFA_SP SP+0
        CFI (cfiCond559) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiPicker560 Using cfiCommon1
        CFI (cfiPicker560) NoFunction
        CFI (cfiPicker560) Picker
        MOV     DPL,?V0 + 0
        MOV     DPH,A
        CFI EndBlock cfiCond558
        CFI EndBlock cfiCond559
        CFI EndBlock cfiPicker560
        REQUIRE ??Subroutine116_0
        ; // Fall through to label ??Subroutine116_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine116_0:
        CFI Block cfiCond561 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_240
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond562 Using cfiCommon0
        CFI (cfiCond562) NoFunction
        CFI (cfiCond562) Conditional ??CrossCallReturnLabel_241
        CFI (cfiCond562) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond562) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond562) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond562) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond562) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond562) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond562) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond562) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond562) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond562) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond562) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond562) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond562) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond562) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond562) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond562) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond562) CFA_SP SP+0
        CFI (cfiCond562) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond563 Using cfiCommon0
        CFI (cfiCond563) NoFunction
        CFI (cfiCond563) Conditional ??CrossCallReturnLabel_242
        CFI (cfiCond563) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond563) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond563) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond563) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond563) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond563) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond563) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond563) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond563) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond563) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond563) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond563) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond563) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond563) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond563) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond563) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond563) CFA_SP SP+0
        CFI (cfiCond563) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond564 Using cfiCommon0
        CFI (cfiCond564) NoFunction
        CFI (cfiCond564) Conditional ??CrossCallReturnLabel_243
        CFI (cfiCond564) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond564) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond564) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond564) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond564) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond564) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond564) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond564) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond564) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond564) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond564) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond564) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond564) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond564) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond564) CFA_SP SP+0
        CFI (cfiCond564) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond565 Using cfiCommon0
        CFI (cfiCond565) NoFunction
        CFI (cfiCond565) Conditional ??CrossCallReturnLabel_244
        CFI (cfiCond565) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond565) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond565) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond565) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond565) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond565) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond565) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond565) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond565) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond565) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond565) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond565) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond565) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond565) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond565) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond565) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond565) CFA_SP SP+0
        CFI (cfiCond565) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond566 Using cfiCommon0
        CFI (cfiCond566) NoFunction
        CFI (cfiCond566) Conditional ??CrossCallReturnLabel_245
        CFI (cfiCond566) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond566) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond566) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond566) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond566) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond566) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond566) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond566) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond566) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond566) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond566) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond566) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond566) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond566) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond566) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond566) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond566) CFA_SP SP+0
        CFI (cfiCond566) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiPicker567 Using cfiCommon1
        CFI (cfiPicker567) NoFunction
        CFI (cfiPicker567) Picker
        LCALL   ?Subroutine74 & 0xFFFF
??CrossCallReturnLabel_248:
        MOV     R2,DPL
        MOV     R3,DPH
        RET
        CFI EndBlock cfiCond561
        CFI EndBlock cfiCond562
        CFI EndBlock cfiCond563
        CFI EndBlock cfiCond564
        CFI EndBlock cfiCond565
        CFI EndBlock cfiCond566
        CFI EndBlock cfiPicker567
// 1647 
// 1648 /*********************************************************************
// 1649  * @fn          ZDP_MgmtNwkUpdateNotify
// 1650  *
// 1651  * @brief       This builds and send a Mgmt_NWK_Update_notify message. This
// 1652  *              function sends a unicast message.
// 1653  *
// 1654  * @param       dstAddr - destination address of the message
// 1655  * @param       status - message status (ZDP_SUCCESS or other)
// 1656  * @param       scannedChannels - List of channels scanned by the request
// 1657  * @param       totalTransmissions - Total transmissions
// 1658  * @param       transmissionFailures - Sum of transmission failures
// 1659  * @param       listCount - Number of records contained in the energyValues list
// 1660  * @param       energyValues - List of descriptors, one for each of ListCount,
// 1661  *                             of the enegry detect descriptors
// 1662  * @param       txOptions - Transmit options
// 1663  * @param       securityEnable - Security options
// 1664  *
// 1665  * @return      afStatus_t
// 1666  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1667 afStatus_t ZDP_MgmtNwkUpdateNotify( uint8 TransSeq, zAddrType_t *dstAddr,
ZDP_MgmtNwkUpdateNotify:
        CFI Block cfiBlock568 Using cfiCommon0
        CFI Function ZDP_MgmtNwkUpdateNotify
        CODE
// 1668                                     uint8 status, uint32 scannedChannels,
// 1669                                     uint16 totalTransmissions, uint16 transmissionFailures,
// 1670                                     uint8 listCount, uint8 *energyValues, uint8 txOptions,
// 1671                                     uint8 securityEnable )
// 1672 {
        FUNCALL ZDP_MgmtNwkUpdateNotify, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_MgmtNwkUpdateNotify, osal_buffer_uint32
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_MgmtNwkUpdateNotify, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_MgmtNwkUpdateNotify, fillAndSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_MgmtNwkUpdateNotify, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 10
        MOV     A,#-0xa
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 24)
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R1
        MOVX    @DPTR,A
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine108_0 & 0xFFFF
??CrossCallReturnLabel_207:
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R4
        MOVX    @DPTR,A
        MOV     A,R5
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
        MOV     A,#0x18
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     A,#0x1c
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_24:
        MOV     A,#0x1e
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine17 & 0xFFFF
// 1673   uint8 *buf;
// 1674   uint8 *pBuf;
// 1675   uint8 len;
// 1676 
// 1677   (void)securityEnable;  // Intentionally unreferenced parameter
// 1678   
// 1679   // Status + ScannedChannels + totalTransmissions + transmissionFailures + ListCount + energyValues
// 1680   len = 1 + 4 + 2 + 2 + 1 + listCount;
??CrossCallReturnLabel_20:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        ADD     A,#0xa
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        LCALL   ??Subroutine105_0 & 0xFFFF
// 1681 
// 1682   buf = osal_mem_alloc( len+1 ); // +1 for transaction ID
??CrossCallReturnLabel_186:
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine59 & 0xFFFF
// 1683   if ( buf == NULL )
??CrossCallReturnLabel_94:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_42:
        JNZ     ??ZDP_MgmtNwkUpdateNotify_0
// 1684   {
// 1685     return afStatus_MEM_FAIL;
        MOV     R1,#0x10
        LJMP    ??ZDP_MgmtNwkUpdateNotify_1 & 0xFFFF
// 1686   }
// 1687 
// 1688   pBuf = buf+1;
??ZDP_MgmtNwkUpdateNotify_0:
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ADD     A,#0x1
        INC     R0
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine122_0 & 0xFFFF
??CrossCallReturnLabel_285:
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine120_0 & 0xFFFF
// 1689 
// 1690   *pBuf++ = status;
??CrossCallReturnLabel_268:
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine116_0 & 0xFFFF
// 1691 
// 1692   pBuf = osal_buffer_uint32( pBuf, scannedChannels );
??CrossCallReturnLabel_243:
        ; Setup parameters for call to function osal_buffer_uint32
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_FOUR
        CFI CFA_XSP16 add(XSP16, 28)
        LCALL   ??osal_buffer_uint32?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 24)
// 1693 
// 1694   *pBuf++ = LO_UINT16( totalTransmissions );
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,?V0 + 4
        MOVX    @DPTR,A
        INC     DPTR
// 1695   *pBuf++ = HI_UINT16( totalTransmissions );
        MOV     A,?V0 + 5
        MOVX    @DPTR,A
        INC     DPTR
// 1696 
// 1697   *pBuf++ = LO_UINT16( transmissionFailures );
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
// 1698   *pBuf++ = HI_UINT16( transmissionFailures );
        MOV     A,R7
        LCALL   ??Subroutine114_0 & 0xFFFF
// 1699 
// 1700   *pBuf++ = listCount;
??CrossCallReturnLabel_234:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ??Subroutine118_0 & 0xFFFF
// 1701 
// 1702   if ( listCount > 0 )
??CrossCallReturnLabel_253:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        JZ      ??ZDP_MgmtNwkUpdateNotify_2
// 1703     osal_memcpy( pBuf, energyValues, listCount );
        ; Setup parameters for call to function osal_memcpy
        MOV     A,#0x20
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine98_0 & 0xFFFF
??CrossCallReturnLabel_162:
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 27)
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_44:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 24)
// 1704 
// 1705   FillAndSendBufferTxOptions( &TransSeq, dstAddr, Mgmt_NWK_Update_notify, len, buf, txOptions );
??ZDP_MgmtNwkUpdateNotify_2:
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine36 & 0xFFFF
??CrossCallReturnLabel_62:
        LCALL   ??Subroutine122_0 & 0xFFFF
??CrossCallReturnLabel_286:
        MOV     A,#0x22
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     DPTR,#ZDP_TxOptions
        MOVX    @DPTR,A
        ; Setup parameters for call to function fillAndSend
        MOV     ?V0 + 0,#0x38
        MOV     ?V0 + 1,#-0x80
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 26)
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine35 & 0xFFFF
??CrossCallReturnLabel_59:
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine64 & 0xFFFF
??CrossCallReturnLabel_137:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 24)
        MOV     A,R1
        MOV     R6,A
        ; Setup parameters for call to function osal_mem_free
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine120_0 & 0xFFFF
??CrossCallReturnLabel_269:
        LCALL   ?Subroutine81 & 0xFFFF
??CrossCallReturnLabel_182:
        MOV     DPTR,#ZDP_TxOptions
        CLR     A
        MOVX    @DPTR,A
        MOV     A,R6
        MOV     R1,A
??ZDP_MgmtNwkUpdateNotify_1:
        MOV     A,#0xa
        CFI EndBlock cfiBlock568
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0
// 1706 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock569 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 26)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock569
        REQUIRE ??Subroutine117_0
        ; // Fall through to label ??Subroutine117_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine117_0:
        CFI Block cfiBlock570 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock570

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine81:
        CFI Block cfiCond571 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_181, ??CrossCallReturnLabel_177
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond572 Using cfiCommon0
        CFI (cfiCond572) NoFunction
        CFI (cfiCond572) Conditional ??CrossCallReturnLabel_181, ??CrossCallReturnLabel_178
        CFI (cfiCond572) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond572) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond572) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond572) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond572) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond572) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond572) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond572) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond572) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond572) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond572) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond572) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond572) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond572) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond572) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond572) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond572) CFA_SP SP+0
        CFI (cfiCond572) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond573 Using cfiCommon0
        CFI (cfiCond573) NoFunction
        CFI (cfiCond573) Conditional ??CrossCallReturnLabel_181, ??CrossCallReturnLabel_179
        CFI (cfiCond573) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond573) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond573) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond573) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond573) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond573) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond573) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond573) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond573) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond573) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond573) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond573) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond573) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond573) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond573) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond573) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond573) CFA_SP SP+0
        CFI (cfiCond573) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond574 Using cfiCommon0
        CFI (cfiCond574) NoFunction
        CFI (cfiCond574) Conditional ??CrossCallReturnLabel_181, ??CrossCallReturnLabel_180
        CFI (cfiCond574) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond574) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond574) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond574) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond574) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond574) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond574) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond574) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond574) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond574) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond574) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond574) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond574) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond574) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond574) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond574) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond574) CFA_SP SP+0
        CFI (cfiCond574) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond575 Using cfiCommon0
        CFI (cfiCond575) NoFunction
        CFI (cfiCond575) Conditional ??CrossCallReturnLabel_182
        CFI (cfiCond575) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond575) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond575) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond575) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond575) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond575) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond575) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond575) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond575) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond575) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond575) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond575) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond575) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond575) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond575) CFA_SP SP+0
        CFI (cfiCond575) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiPicker576 Using cfiCommon1
        CFI (cfiPicker576) NoFunction
        CFI (cfiPicker576) Picker
        LCALL   ??osal_mem_free?relay
        MOV     DPTR,#ZDP_TmpBuf
        MOV     A,#(ZDP_Buf + 1) & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#((ZDP_Buf + 1) >> 8) & 0xff
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond571
        CFI EndBlock cfiCond572
        CFI EndBlock cfiCond573
        CFI EndBlock cfiCond574
        CFI EndBlock cfiCond575
        CFI EndBlock cfiPicker576

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine40:
        CFI Block cfiCond577 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_254
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond578 Using cfiCommon0
        CFI (cfiCond578) NoFunction
        CFI (cfiCond578) Conditional ??CrossCallReturnLabel_255
        CFI (cfiCond578) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond578) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond578) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond578) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond578) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond578) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond578) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond578) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond578) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond578) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond578) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond578) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond578) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond578) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond578) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond578) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond578) CFA_SP SP+0
        CFI (cfiCond578) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiPicker579 Using cfiCommon1
        CFI (cfiPicker579) NoFunction
        CFI (cfiPicker579) Picker
        MOV     DPL,R0
        MOV     DPH,R1
        CFI EndBlock cfiCond577
        CFI EndBlock cfiCond578
        CFI EndBlock cfiPicker579
        REQUIRE ??Subroutine118_0
        ; // Fall through to label ??Subroutine118_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine118_0:
        CFI Block cfiCond580 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_249
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond581 Using cfiCommon0
        CFI (cfiCond581) NoFunction
        CFI (cfiCond581) Conditional ??CrossCallReturnLabel_250
        CFI (cfiCond581) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond581) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond581) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond581) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond581) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond581) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond581) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond581) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond581) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond581) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond581) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond581) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond581) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond581) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond581) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond581) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond581) CFA_SP SP+0
        CFI (cfiCond581) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond582 Using cfiCommon0
        CFI (cfiCond582) NoFunction
        CFI (cfiCond582) Conditional ??CrossCallReturnLabel_251
        CFI (cfiCond582) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond582) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond582) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond582) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond582) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond582) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond582) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond582) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond582) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond582) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond582) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond582) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond582) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond582) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond582) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond582) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond582) CFA_SP SP+0
        CFI (cfiCond582) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond583 Using cfiCommon0
        CFI (cfiCond583) NoFunction
        CFI (cfiCond583) Conditional ??CrossCallReturnLabel_252
        CFI (cfiCond583) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond583) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond583) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond583) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond583) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond583) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond583) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond583) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond583) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond583) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond583) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond583) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond583) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond583) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond583) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond583) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond583) CFA_SP SP+0
        CFI (cfiCond583) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond584 Using cfiCommon0
        CFI (cfiCond584) NoFunction
        CFI (cfiCond584) Conditional ??CrossCallReturnLabel_253
        CFI (cfiCond584) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond584) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond584) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond584) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond584) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond584) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond584) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond584) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond584) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond584) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond584) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond584) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond584) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond584) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond584) CFA_SP SP+0
        CFI (cfiCond584) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond585 Using cfiCommon0
        CFI (cfiCond585) NoFunction
        CFI (cfiCond585) Conditional ??CrossCallReturnLabel_254
        CFI (cfiCond585) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond585) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond585) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond585) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond585) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond585) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond585) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond585) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond585) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond585) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond585) CFA_SP SP+0
        CFI (cfiCond585) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond586 Using cfiCommon0
        CFI (cfiCond586) NoFunction
        CFI (cfiCond586) Conditional ??CrossCallReturnLabel_255
        CFI (cfiCond586) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond586) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond586) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond586) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond586) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond586) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond586) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond586) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond586) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond586) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond586) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond586) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond586) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond586) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond586) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond586) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond586) CFA_SP SP+0
        CFI (cfiCond586) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiPicker587 Using cfiCommon1
        CFI (cfiPicker587) NoFunction
        CFI (cfiPicker587) Picker
        LCALL   ??Subroutine94_0 & 0xFFFF
??CrossCallReturnLabel_261:
        RET
        CFI EndBlock cfiCond580
        CFI EndBlock cfiCond581
        CFI EndBlock cfiCond582
        CFI EndBlock cfiCond583
        CFI EndBlock cfiCond584
        CFI EndBlock cfiCond585
        CFI EndBlock cfiCond586
        CFI EndBlock cfiPicker587

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine28:
        CFI Block cfiCond588 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_43
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond589 Using cfiCommon0
        CFI (cfiCond589) NoFunction
        CFI (cfiCond589) Conditional ??CrossCallReturnLabel_44
        CFI (cfiCond589) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond589) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond589) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond589) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond589) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond589) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond589) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond589) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond589) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond589) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond589) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond589) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond589) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond589) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond589) CFA_SP SP+0
        CFI (cfiCond589) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond590 Using cfiCommon0
        CFI (cfiCond590) NoFunction
        CFI (cfiCond590) Conditional ??CrossCallReturnLabel_45
        CFI (cfiCond590) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond590) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond590) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond590) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond590) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond590) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond590) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond590) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond590) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond590) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond590) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond590) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond590) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond590) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond590) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond590) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond590) CFA_SP SP+0
        CFI (cfiCond590) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiPicker591 Using cfiCommon1
        CFI (cfiPicker591) NoFunction
        CFI (cfiPicker591) Picker
        MOVX    A,@DPTR
        MOV     R4,A
        LCALL   ?Subroutine80 & 0xFFFF
??CrossCallReturnLabel_263:
        RET
        CFI EndBlock cfiCond588
        CFI EndBlock cfiCond589
        CFI EndBlock cfiCond590
        CFI EndBlock cfiPicker591

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine80:
        CFI Block cfiCond592 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_262
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond593 Using cfiCommon0
        CFI (cfiCond593) NoFunction
        CFI (cfiCond593) Conditional ??CrossCallReturnLabel_263, ??CrossCallReturnLabel_43
        CFI (cfiCond593) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond593) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond593) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond593) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond593) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond593) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond593) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond593) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond593) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond593) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond593) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond593) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond593) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond593) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond593) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond593) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond593) CFA_SP SP+0
        CFI (cfiCond593) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond594 Using cfiCommon0
        CFI (cfiCond594) NoFunction
        CFI (cfiCond594) Conditional ??CrossCallReturnLabel_263, ??CrossCallReturnLabel_44
        CFI (cfiCond594) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond594) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond594) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond594) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond594) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond594) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond594) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond594) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond594) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond594) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond594) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond594) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond594) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond594) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond594) CFA_SP SP+0
        CFI (cfiCond594) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond595 Using cfiCommon0
        CFI (cfiCond595) NoFunction
        CFI (cfiCond595) Conditional ??CrossCallReturnLabel_263, ??CrossCallReturnLabel_45
        CFI (cfiCond595) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond595) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond595) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond595) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond595) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond595) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond595) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond595) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond595) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond595) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond595) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond595) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond595) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond595) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond595) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond595) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond595) CFA_SP SP+0
        CFI (cfiCond595) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond596 Using cfiCommon0
        CFI (cfiCond596) NoFunction
        CFI (cfiCond596) Conditional ??CrossCallReturnLabel_264
        CFI (cfiCond596) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond596) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond596) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond596) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond596) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond596) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond596) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond596) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond596) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond596) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond596) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond596) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond596) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond596) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond596) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond596) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond596) CFA_SP SP+0
        CFI (cfiCond596) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiPicker597 Using cfiCommon1
        CFI (cfiPicker597) NoFunction
        CFI (cfiPicker597) Picker
        MOV     R5,#0x0
        CFI EndBlock cfiCond592
        CFI EndBlock cfiCond593
        CFI EndBlock cfiCond594
        CFI EndBlock cfiCond595
        CFI EndBlock cfiCond596
        CFI EndBlock cfiPicker597
        REQUIRE ??Subroutine119_0
        ; // Fall through to label ??Subroutine119_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine119_0:
        CFI Block cfiCond598 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_265
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+-1
        CFI CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond599 Using cfiCommon0
        CFI (cfiCond599) NoFunction
        CFI (cfiCond599) Conditional ??CrossCallReturnLabel_262
        CFI (cfiCond599) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond599) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond599) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond599) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond599) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond599) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond599) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond599) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond599) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond599) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond599) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond599) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond599) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond599) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond599) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond599) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond599) CFA_SP SP+0
        CFI (cfiCond599) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond600 Using cfiCommon0
        CFI (cfiCond600) NoFunction
        CFI (cfiCond600) Conditional ??CrossCallReturnLabel_263, ??CrossCallReturnLabel_43
        CFI (cfiCond600) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond600) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond600) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond600) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond600) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond600) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond600) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond600) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond600) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond600) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond600) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond600) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond600) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond600) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond600) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond600) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond600) CFA_SP SP+0
        CFI (cfiCond600) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond601 Using cfiCommon0
        CFI (cfiCond601) NoFunction
        CFI (cfiCond601) Conditional ??CrossCallReturnLabel_263, ??CrossCallReturnLabel_44
        CFI (cfiCond601) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond601) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond601) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond601) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond601) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond601) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond601) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond601) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond601) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond601) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond601) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond601) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond601) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond601) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond601) CFA_SP SP+0
        CFI (cfiCond601) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond602 Using cfiCommon0
        CFI (cfiCond602) NoFunction
        CFI (cfiCond602) Conditional ??CrossCallReturnLabel_263, ??CrossCallReturnLabel_45
        CFI (cfiCond602) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond602) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond602) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond602) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond602) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond602) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond602) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond602) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond602) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond602) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond602) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond602) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond602) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond602) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond602) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond602) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond602) CFA_SP SP+0
        CFI (cfiCond602) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond603 Using cfiCommon0
        CFI (cfiCond603) NoFunction
        CFI (cfiCond603) Conditional ??CrossCallReturnLabel_264
        CFI (cfiCond603) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond603) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond603) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond603) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond603) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond603) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond603) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond603) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond603) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond603) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond603) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond603) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond603) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond603) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond603) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond603) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond603) CFA_SP SP+0
        CFI (cfiCond603) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiPicker604 Using cfiCommon1
        CFI (cfiPicker604) NoFunction
        CFI (cfiPicker604) Picker
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        RET
        CFI EndBlock cfiCond598
        CFI EndBlock cfiCond599
        CFI EndBlock cfiCond600
        CFI EndBlock cfiCond601
        CFI EndBlock cfiCond602
        CFI EndBlock cfiCond603
        CFI EndBlock cfiPicker604
// 1707 
// 1708 /*********************************************************************
// 1709  * Functions to register for ZDO Over-the-air messages
// 1710  */
// 1711 
// 1712 /*********************************************************************
// 1713  * @fn          ZDO_RegisterForZDOMsg
// 1714  *
// 1715  * @brief       Call this function to register of an incoming over
// 1716  *              the air ZDO message - probably a response message
// 1717  *              but requests can also be received.
// 1718  *              Messages are delivered to the task with ZDO_CB_MSG
// 1719  *              as the message ID.
// 1720  *
// 1721  * @param       taskID - Where you would like the message delivered
// 1722  * @param       clusterID - What message?
// 1723  *
// 1724  * @return      ZSuccess - successful, ZMemError if not
// 1725  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1726 ZStatus_t ZDO_RegisterForZDOMsg( uint8 taskID, uint16 clusterID )
ZDO_RegisterForZDOMsg:
        CFI Block cfiBlock605 Using cfiCommon0
        CFI Function ZDO_RegisterForZDOMsg
        CODE
// 1727 {
        FUNCALL ZDO_RegisterForZDOMsg, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     ?V0 + 2,R1
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 1728   ZDO_MsgCB_t *pList;
// 1729   ZDO_MsgCB_t *pLast;
// 1730   ZDO_MsgCB_t *pNew;
// 1731 
// 1732   // Look for duplicate
// 1733   pList = zdoMsgCBs;
        MOV     DPTR,#zdoMsgCBs
        SJMP    ??ZDO_RegisterForZDOMsg_0
// 1734   while ( pList )
// 1735   {
// 1736     if ( pList->taskID == taskID && pList->clusterID == clusterID )
// 1737       return ( ZSuccess );
// 1738     pLast = pList;
??ZDO_RegisterForZDOMsg_1:
        MOV     ?V0 + 0,R0
        MOV     ?V0 + 1,R1
// 1739     pList = (ZDO_MsgCB_t *)pList->next;
        MOV     DPL,R0
        MOV     DPH,R1
??ZDO_RegisterForZDOMsg_0:
        LCALL   ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_39:
        JZ      ??ZDO_RegisterForZDOMsg_2
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,?V0 + 2
        JNZ     ??ZDO_RegisterForZDOMsg_1
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R6
        JNZ     ??ZDO_RegisterForZDOMsg_3
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R7
??ZDO_RegisterForZDOMsg_3:
        JNZ     ??ZDO_RegisterForZDOMsg_1
??ZDO_RegisterForZDOMsg_4:
        MOV     R1,#0x0
        SJMP    ??ZDO_RegisterForZDOMsg_5
// 1740   }
// 1741 
// 1742   // Add to the list
// 1743   pNew = (ZDO_MsgCB_t *)osal_mem_alloc( sizeof ( ZDO_MsgCB_t ) );
??ZDO_RegisterForZDOMsg_2:
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0x5
        MOV     R3,#0x0
        LCALL   ??osal_mem_alloc?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     R0,?V0 + 4
        MOV     R1,?V0 + 5
// 1744   if ( pNew )
        MOV     A,R0
        ORL     A,R1
        JZ      ??ZDO_RegisterForZDOMsg_6
// 1745   {
// 1746     pNew->taskID = taskID;
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        MOV     A,?V0 + 2
        MOVX    @DPTR,A
// 1747     pNew->clusterID = clusterID;
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        MOVX    @DPTR,A
// 1748     pNew->next = NULL;
        MOV     DPL,R0
        MOV     DPH,R1
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 1749     if ( zdoMsgCBs )
        MOV     DPTR,#zdoMsgCBs
        LCALL   ??Subroutine120_0 & 0xFFFF
??CrossCallReturnLabel_270:
        MOV     A,R2
        ORL     A,R3
        JZ      ??ZDO_RegisterForZDOMsg_7
// 1750     {
// 1751       pLast->next = pNew;
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
// 1752     }
??ZDO_RegisterForZDOMsg_8:
        LCALL   ??Subroutine122_0 & 0xFFFF
??CrossCallReturnLabel_287:
        SJMP    ??ZDO_RegisterForZDOMsg_4
// 1753     else
// 1754       zdoMsgCBs = pNew;
??ZDO_RegisterForZDOMsg_7:
        MOV     DPTR,#zdoMsgCBs
        SJMP    ??ZDO_RegisterForZDOMsg_8
// 1755     return ( ZSuccess );
// 1756   }
// 1757   else
// 1758     return ( ZMemError );
??ZDO_RegisterForZDOMsg_6:
        MOV     R1,#0x10
??ZDO_RegisterForZDOMsg_5:
        LJMP    ??Subroutine117_0 & 0xFFFF
        CFI EndBlock cfiBlock605
// 1759 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine27:
        CFI Block cfiCond606 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_41
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond607 Using cfiCommon0
        CFI (cfiCond607) NoFunction
        CFI (cfiCond607) Conditional ??CrossCallReturnLabel_42
        CFI (cfiCond607) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond607) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond607) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond607) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond607) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond607) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond607) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond607) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond607) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond607) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond607) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond607) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond607) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond607) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond607) CFA_SP SP+0
        CFI (cfiCond607) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond608 Using cfiCommon0
        CFI (cfiCond608) NoFunction
        CFI (cfiCond608) Conditional ??CrossCallReturnLabel_39
        CFI (cfiCond608) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond608) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond608) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond608) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond608) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond608) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond608) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond608) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond608) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond608) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond608) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond608) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond608) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond608) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond608) CFA_SP SP+0
        CFI (cfiCond608) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond609 Using cfiCommon0
        CFI (cfiCond609) NoFunction
        CFI (cfiCond609) Conditional ??CrossCallReturnLabel_40
        CFI (cfiCond609) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond609) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond609) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond609) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond609) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond609) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond609) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond609) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond609) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond609) CFA_SP SP+0
        CFI (cfiCond609) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker610 Using cfiCommon1
        CFI (cfiPicker610) NoFunction
        CFI (cfiPicker610) Picker
        LCALL   ?Subroutine76 & 0xFFFF
??CrossCallReturnLabel_305:
        MOV     A,R0
        ORL     A,R1
        RET
        CFI EndBlock cfiCond606
        CFI EndBlock cfiCond607
        CFI EndBlock cfiCond608
        CFI EndBlock cfiCond609
        CFI EndBlock cfiPicker610
// 1760 
// 1761 /*********************************************************************
// 1762  * @fn          ZDO_RemoveRegisteredCB
// 1763  *
// 1764  * @brief       Call this function if you don't want to receive the
// 1765  *              incoming message.
// 1766  *
// 1767  * @param       taskID - Where the messages are being delivered.
// 1768  * @param       clusterID - What message?
// 1769  *
// 1770  * @return      ZSuccess - successful, ZFailure if not found
// 1771  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1772 ZStatus_t ZDO_RemoveRegisteredCB( uint8 taskID, uint16 clusterID )
ZDO_RemoveRegisteredCB:
        CFI Block cfiBlock611 Using cfiCommon0
        CFI Function ZDO_RemoveRegisteredCB
        CODE
// 1773 {
        FUNCALL ZDO_RemoveRegisteredCB, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
// 1774   ZDO_MsgCB_t *pList;
// 1775   ZDO_MsgCB_t *pLast = NULL;
        MOV     R4,#0x0
        MOV     R5,#0x0
// 1776 
// 1777   pList = zdoMsgCBs;
        MOV     DPTR,#zdoMsgCBs
        SJMP    ??ZDO_RemoveRegisteredCB_0
// 1778   while ( pList )
// 1779   {
// 1780     if ( pList->taskID == taskID && pList->clusterID == clusterID )
// 1781     {
// 1782       if ( pLast )
// 1783       {
// 1784         // remove this one from the linked list
// 1785         pLast->next = pList->next;
// 1786       }
// 1787       else if ( pList->next )
// 1788       {
// 1789         // remove the first one from the linked list
// 1790         zdoMsgCBs = pList->next;
// 1791       }
// 1792       else
// 1793       {
// 1794         // remove the only item from the list
// 1795         zdoMsgCBs = (ZDO_MsgCB_t *)NULL;
// 1796       }
// 1797       osal_mem_free( pList );
// 1798       return ( ZSuccess );
// 1799     }
// 1800     pLast = pList;
??ZDO_RemoveRegisteredCB_1:
        MOV     A,R0
        MOV     R4,A
        MOV     A,R1
        MOV     R5,A
// 1801     pList = pList->next;
        MOV     DPL,R0
        MOV     DPH,R1
??ZDO_RemoveRegisteredCB_0:
        LCALL   ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_40:
        JZ      ??ZDO_RemoveRegisteredCB_2
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R6
        JNZ     ??ZDO_RemoveRegisteredCB_1
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R2
        JNZ     ??ZDO_RemoveRegisteredCB_3
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R3
??ZDO_RemoveRegisteredCB_3:
        JNZ     ??ZDO_RemoveRegisteredCB_1
        MOV     DPL,R0
        MOV     DPH,R1
        LCALL   ??Subroutine120_0 & 0xFFFF
??CrossCallReturnLabel_271:
        MOV     A,R4
        ORL     A,R5
        JZ      ??ZDO_RemoveRegisteredCB_4
        MOV     DPL,R4
        MOV     DPH,R5
??ZDO_RemoveRegisteredCB_5:
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        SJMP    ??ZDO_RemoveRegisteredCB_6
??ZDO_RemoveRegisteredCB_4:
        MOV     A,R2
        ORL     A,R3
        MOV     DPTR,#zdoMsgCBs
        JNZ     ??ZDO_RemoveRegisteredCB_5
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
??ZDO_RemoveRegisteredCB_6:
        MOVX    @DPTR,A
        ; Setup parameters for call to function osal_mem_free
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        LCALL   ??osal_mem_free?relay
        MOV     R1,#0x0
        SJMP    ??ZDO_RemoveRegisteredCB_7
// 1802   }
// 1803 
// 1804   return ( ZFailure );
??ZDO_RemoveRegisteredCB_2:
        MOV     R1,#0x1
??ZDO_RemoveRegisteredCB_7:
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock611
// 1805 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine44:
        CFI Block cfiCond612 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_272
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond613 Using cfiCommon0
        CFI (cfiCond613) NoFunction
        CFI (cfiCond613) Conditional ??CrossCallReturnLabel_273
        CFI (cfiCond613) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond613) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond613) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond613) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond613) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond613) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond613) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond613) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond613) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond613) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond613) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond613) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond613) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond613) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond613) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond613) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond613) CFA_SP SP+0
        CFI (cfiCond613) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond614 Using cfiCommon0
        CFI (cfiCond614) NoFunction
        CFI (cfiCond614) Conditional ??CrossCallReturnLabel_274
        CFI (cfiCond614) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond614) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond614) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond614) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond614) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond614) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond614) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond614) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond614) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond614) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond614) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond614) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond614) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond614) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond614) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond614) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond614) CFA_SP SP+0
        CFI (cfiCond614) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond615 Using cfiCommon0
        CFI (cfiCond615) NoFunction
        CFI (cfiCond615) Conditional ??CrossCallReturnLabel_275
        CFI (cfiCond615) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond615) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond615) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond615) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond615) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond615) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond615) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond615) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond615) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond615) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond615) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond615) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond615) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond615) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond615) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond615) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond615) CFA_SP SP+0
        CFI (cfiCond615) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiPicker616 Using cfiCommon1
        CFI (cfiPicker616) NoFunction
        CFI (cfiPicker616) Picker
        MOV     DPTR,#ZDP_TmpBuf
        CFI EndBlock cfiCond612
        CFI EndBlock cfiCond613
        CFI EndBlock cfiCond614
        CFI EndBlock cfiCond615
        CFI EndBlock cfiPicker616
        REQUIRE ??Subroutine120_0
        ; // Fall through to label ??Subroutine120_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine120_0:
        CFI Block cfiCond617 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_266
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond618 Using cfiCommon0
        CFI (cfiCond618) NoFunction
        CFI (cfiCond618) Conditional ??CrossCallReturnLabel_267
        CFI (cfiCond618) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond618) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond618) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond618) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond618) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond618) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond618) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond618) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond618) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond618) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond618) CFA_SP SP+0
        CFI (cfiCond618) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond619 Using cfiCommon0
        CFI (cfiCond619) NoFunction
        CFI (cfiCond619) Conditional ??CrossCallReturnLabel_268
        CFI (cfiCond619) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond619) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond619) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond619) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond619) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond619) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond619) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond619) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond619) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond619) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond619) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond619) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond619) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond619) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond619) CFA_SP SP+0
        CFI (cfiCond619) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond620 Using cfiCommon0
        CFI (cfiCond620) NoFunction
        CFI (cfiCond620) Conditional ??CrossCallReturnLabel_269
        CFI (cfiCond620) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond620) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond620) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond620) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond620) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond620) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond620) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond620) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond620) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond620) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond620) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond620) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond620) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond620) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond620) CFA_SP SP+0
        CFI (cfiCond620) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond621 Using cfiCommon0
        CFI (cfiCond621) NoFunction
        CFI (cfiCond621) Conditional ??CrossCallReturnLabel_270
        CFI (cfiCond621) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond621) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond621) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond621) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond621) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond621) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond621) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond621) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond621) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond621) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond621) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond621) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond621) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond621) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond621) CFA_SP SP+0
        CFI (cfiCond621) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond622 Using cfiCommon0
        CFI (cfiCond622) NoFunction
        CFI (cfiCond622) Conditional ??CrossCallReturnLabel_271
        CFI (cfiCond622) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond622) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond622) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond622) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond622) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond622) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond622) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond622) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond622) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond622) CFA_SP SP+0
        CFI (cfiCond622) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond623 Using cfiCommon0
        CFI (cfiCond623) NoFunction
        CFI (cfiCond623) Conditional ??CrossCallReturnLabel_272
        CFI (cfiCond623) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond623) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond623) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond623) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond623) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond623) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond623) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond623) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond623) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond623) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond623) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond623) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond623) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond623) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond623) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond623) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond623) CFA_SP SP+0
        CFI (cfiCond623) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond624 Using cfiCommon0
        CFI (cfiCond624) NoFunction
        CFI (cfiCond624) Conditional ??CrossCallReturnLabel_273
        CFI (cfiCond624) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond624) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond624) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond624) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond624) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond624) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond624) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond624) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond624) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond624) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond624) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond624) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond624) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond624) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond624) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond624) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond624) CFA_SP SP+0
        CFI (cfiCond624) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond625 Using cfiCommon0
        CFI (cfiCond625) NoFunction
        CFI (cfiCond625) Conditional ??CrossCallReturnLabel_274
        CFI (cfiCond625) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond625) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond625) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond625) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond625) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond625) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond625) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond625) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond625) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond625) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond625) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond625) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond625) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond625) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond625) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond625) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond625) CFA_SP SP+0
        CFI (cfiCond625) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond626 Using cfiCommon0
        CFI (cfiCond626) NoFunction
        CFI (cfiCond626) Conditional ??CrossCallReturnLabel_275
        CFI (cfiCond626) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond626) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond626) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond626) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond626) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond626) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond626) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond626) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond626) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond626) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond626) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond626) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond626) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond626) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond626) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond626) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond626) CFA_SP SP+0
        CFI (cfiCond626) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiPicker627 Using cfiCommon1
        CFI (cfiPicker627) NoFunction
        CFI (cfiPicker627) Picker
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        RET
        CFI EndBlock cfiCond617
        CFI EndBlock cfiCond618
        CFI EndBlock cfiCond619
        CFI EndBlock cfiCond620
        CFI EndBlock cfiCond621
        CFI EndBlock cfiCond622
        CFI EndBlock cfiCond623
        CFI EndBlock cfiCond624
        CFI EndBlock cfiCond625
        CFI EndBlock cfiCond626
        CFI EndBlock cfiPicker627
// 1806 
// 1807 /*********************************************************************
// 1808  * @fn          ZDO_SendMsgCBs
// 1809  *
// 1810  * @brief       This function sends messages to registered tasks.
// 1811  *              Local to ZDO and shouldn't be called outside of ZDO.
// 1812  *
// 1813  * @param       inMsg - incoming message
// 1814  *
// 1815  * @return      TRUE if sent to at least 1 task, FALSE if not
// 1816  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1817 uint8 ZDO_SendMsgCBs( zdoIncomingMsg_t *inMsg )
ZDO_SendMsgCBs:
        CFI Block cfiBlock628 Using cfiCommon0
        CFI Function ZDO_SendMsgCBs
        CODE
// 1818 {
        FUNCALL ZDO_SendMsgCBs, osal_msg_allocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_SendMsgCBs, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_SendMsgCBs, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_SendMsgCBs, osal_msg_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV     ?V0 + 6,R2
        MOV     ?V0 + 7,R3
// 1819   uint8 ret = FALSE;
        MOV     ?V0 + 0,#0x0
// 1820   ZDO_MsgCB_t *pList = zdoMsgCBs;
        MOV     DPTR,#zdoMsgCBs
        LJMP    ??ZDO_SendMsgCBs_0 & 0xFFFF
// 1821   while ( pList )
// 1822   {
// 1823     if ( pList->clusterID == inMsg->clusterID )
??ZDO_SendMsgCBs_1:
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine124_0 & 0xFFFF
??CrossCallReturnLabel_298:
        MOV     A,?V0 + 6
        ADD     A,#0xc
        LCALL   ??Subroutine102_0 & 0xFFFF
??CrossCallReturnLabel_174:
        XRL     A,R0
        JNZ     ??ZDO_SendMsgCBs_2
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??ZDO_SendMsgCBs_2:
        JZ      $+5
        LJMP    ??ZDO_SendMsgCBs_3 & 0xFFFF
// 1824     {
// 1825       zdoIncomingMsg_t *msgPtr;
// 1826 
// 1827       // Send the address to the task
// 1828       msgPtr = (zdoIncomingMsg_t *)osal_msg_allocate( sizeof( zdoIncomingMsg_t ) + inMsg->asduLen );
        ; Setup parameters for call to function osal_msg_allocate
        LCALL   ?Subroutine65 & 0xFFFF
??CrossCallReturnLabel_175:
        ADD     A,#0x15
        MOV     R2,A
        CLR     A
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ??osal_msg_allocate?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     R6,?V0 + 2
        MOV     R7,?V0 + 3
// 1829       if ( msgPtr )
        MOV     A,R6
        ORL     A,R7
        JZ      ??ZDO_SendMsgCBs_3
// 1830       {
// 1831         // copy struct
// 1832         osal_memcpy( msgPtr, inMsg, sizeof( zdoIncomingMsg_t ));
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 0,?V0 + 6
        MOV     ?V0 + 1,?V0 + 7
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     R4,#0x15
        LCALL   ?Subroutine80 & 0xFFFF
??CrossCallReturnLabel_264:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
// 1833 
// 1834         if ( inMsg->asduLen )
        LCALL   ?Subroutine65 & 0xFFFF
??CrossCallReturnLabel_176:
        JZ      ??ZDO_SendMsgCBs_4
// 1835         {
// 1836           msgPtr->asdu = (byte*)(((byte*)msgPtr) + sizeof( zdoIncomingMsg_t ));
        MOV     A,R6
        ADD     A,#0x15
        MOV     R2,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R3,A
        MOV     A,R6
        ADD     A,#0x13
        LCALL   ?Subroutine68 & 0xFFFF
??CrossCallReturnLabel_283:
        LCALL   ??Subroutine108_0 & 0xFFFF
// 1837           osal_memcpy( msgPtr->asdu, inMsg->asdu, inMsg->asduLen );
??CrossCallReturnLabel_208:
        ; Setup parameters for call to function osal_memcpy
        MOV     A,?V0 + 6
        ADD     A,#0x13
        MOV     DPL,A
        MOV     A,?V0 + 7
        LCALL   ?Subroutine33 & 0xFFFF
// 1838         }
??CrossCallReturnLabel_164:
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     A,?V0 + 6
        ADD     A,#0x10
        MOV     DPL,A
        MOV     A,?V0 + 7
        LCALL   ??Subroutine121_0 & 0xFFFF
??CrossCallReturnLabel_279:
        LCALL   ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_45:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
// 1839 
// 1840         msgPtr->hdr.event = ZDO_CB_MSG;
??ZDO_SendMsgCBs_4:
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,#-0x2d
        MOVX    @DPTR,A
// 1841         osal_msg_send( pList->taskID, (uint8 *)msgPtr );
        ; Setup parameters for call to function osal_msg_send
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_send?relay
// 1842         ret = TRUE;
        MOV     ?V0 + 0,#0x1
// 1843       }
// 1844     }
// 1845     pList = (ZDO_MsgCB_t *)pList->next;
??ZDO_SendMsgCBs_3:
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
// 1846   }
??ZDO_SendMsgCBs_0:
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_25:
        MOV     A,?V0 + 4
        ORL     A,?V0 + 5
        JZ      $+5
        LJMP    ??ZDO_SendMsgCBs_1 & 0xFFFF
// 1847   return ( ret );
        MOV     R1,?V0 + 0
        LJMP    ??Subroutine101_0 & 0xFFFF
        CFI EndBlock cfiBlock628
// 1848 }
// 1849 
// 1850 /*********************************************************************
// 1851  * Incoming message processor
// 1852  */
// 1853 
// 1854 /*********************************************************************
// 1855  * @fn          ZDP_IncomingData
// 1856  *
// 1857  * @brief       This function indicates the transfer of a data PDU (ASDU)
// 1858  *              from the APS sub-layer to the ZDO.
// 1859  *
// 1860  * @param       pData - Incoming Message
// 1861  *
// 1862  * @return      none
// 1863  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1864 void ZDP_IncomingData( afIncomingMSGPacket_t *pData )
ZDP_IncomingData:
        CFI Block cfiBlock629 Using cfiCommon0
        CFI Function ZDP_IncomingData
        CODE
// 1865 {
        FUNCALL ZDP_IncomingData, ZDO_SendMsgCBs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_IncomingData, ZDApp_InMsgCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 21
        MOV     A,#-0x15
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 31)
// 1866   uint8 x = 0;
        MOV     R6,#0x0
// 1867   uint8 handled;
// 1868   zdoIncomingMsg_t inMsg;
// 1869 
// 1870   inMsg.srcAddr.addrMode = Addr16Bit;
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        LCALL   ?Subroutine61 & 0xFFFF
// 1871   inMsg.srcAddr.addr.shortAddr = pData->srcAddr.addr.shortAddr;
??CrossCallReturnLabel_97:
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine124_0 & 0xFFFF
??CrossCallReturnLabel_299:
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine122_0 & 0xFFFF
// 1872   inMsg.wasBroadcast = pData->wasBroadcast;
??CrossCallReturnLabel_288:
        MOV     A,R2
        ADD     A,#0x15
        MOV     DPL,A
        MOV     A,R3
        LCALL   ??Subroutine103_0 & 0xFFFF
??CrossCallReturnLabel_171:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine61 & 0xFFFF
// 1873   inMsg.clusterID = pData->clusterId;
??CrossCallReturnLabel_98:
        LCALL   ??Subroutine124_0 & 0xFFFF
??CrossCallReturnLabel_300:
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine122_0 & 0xFFFF
// 1874   inMsg.SecurityUse = pData->SecurityUse;
??CrossCallReturnLabel_289:
        MOV     A,R2
        ADD     A,#0x19
        MOV     DPL,A
        MOV     A,R3
        LCALL   ??Subroutine103_0 & 0xFFFF
??CrossCallReturnLabel_172:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 1875 
// 1876   inMsg.asduLen = pData->cmd.DataLength-1;
        MOV     A,R2
        ADD     A,#0x1f
        MOV     DPL,A
        MOV     A,R3
        LCALL   ??Subroutine103_0 & 0xFFFF
??CrossCallReturnLabel_173:
        DEC     A
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x10
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 1877   inMsg.asdu = pData->cmd.Data+1;
        MOV     A,R2
        ADD     A,#0x21
        MOV     R0,A
        MOV     A,R3
        LCALL   ?Subroutine67 & 0xFFFF
??CrossCallReturnLabel_107:
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R5,A
        MOV     A,#0x13
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
// 1878   inMsg.TransSeq = pData->cmd.Data[0];
        MOV     DPL,R0
        MOV     DPH,R1
        LCALL   ??Subroutine97_0 & 0xFFFF
??CrossCallReturnLabel_148:
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 1879   inMsg.macDestAddr = pData->macDestAddr;
        MOV     A,R2
        ADD     A,#0x12
        MOV     DPL,A
        MOV     A,R3
        LCALL   ??Subroutine121_0 & 0xFFFF
??CrossCallReturnLabel_280:
        LCALL   ??Subroutine124_0 & 0xFFFF
??CrossCallReturnLabel_301:
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        LCALL   ?Subroutine56 & 0xFFFF
// 1880 
// 1881   handled = ZDO_SendMsgCBs( &inMsg );
??CrossCallReturnLabel_90:
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??ZDO_SendMsgCBs?relay
        MOV     A,R1
        MOV     R4,A
        SJMP    ??ZDP_IncomingData_0
// 1882 
// 1883 #if defined( MT_ZDO_CB_FUNC )
// 1884   MT_ZdoDirectCB( pData, &inMsg );
// 1885 #endif
// 1886 
// 1887   while ( zdpMsgProcs[x].clusterID != 0xFFFF )
// 1888   {
// 1889     if ( zdpMsgProcs[x].clusterID == inMsg.clusterID )
// 1890     {
// 1891       zdpMsgProcs[x].pFn( &inMsg );
// 1892       return;
// 1893     }
// 1894     x++;
??ZDP_IncomingData_1:
        INC     R6
??ZDP_IncomingData_0:
        MOV     ?V0 + 0,R6
        MOV     ?V0 + 1,#0x0
        MOV     A,#0x2
        MOV     R0,#?V0 + 0
        LCALL   ?S_SHL
        MOV     A,#zdpMsgProcs & 0xff
        ADD     A,?V0 + 0
        MOV     R0,A
        MOV     A,#(zdpMsgProcs >> 8) & 0xff
        ADDC    A,?V0 + 1
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        CLR     A
        MOVC    A,@A+DPTR
        PUSH    A
        MOV     A,#0x1
        MOVC    A,@A+DPTR
        MOV     DPH,A
        POP     DPL
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     A,#-0x1
        XRL     A,R2
        JNZ     ??ZDP_IncomingData_2
        MOV     A,#-0x1
        XRL     A,R3
??ZDP_IncomingData_2:
        JZ      ??ZDP_IncomingData_3
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,R2
        JNZ     ??ZDP_IncomingData_4
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R3
??ZDP_IncomingData_4:
        JNZ     ??ZDP_IncomingData_1
        ; Setup parameters for indirect call
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        CLR     A
        MOVC    A,@A+DPTR
        PUSH    A
        MOV     A,#0x1
        MOVC    A,@A+DPTR
        MOV     DPH,A
        POP     DPL
        LCALL   ?CALL_IND
        SJMP    ??ZDP_IncomingData_5
// 1895   }
// 1896 
// 1897   // Handle unhandled messages
// 1898   if ( !handled )
??ZDP_IncomingData_3:
        MOV     A,R4
        JNZ     ??ZDP_IncomingData_5
// 1899     ZDApp_InMsgCB( &inMsg );
        ; Setup parameters for call to function ZDApp_InMsgCB
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??ZDApp_InMsgCB?relay
??ZDP_IncomingData_5:
        MOV     A,#0x15
        LJMP    ??Subroutine89_0 & 0xFFFF
        CFI EndBlock cfiBlock629
// 1900 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine68:
        CFI Block cfiCond630 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_281
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond631 Using cfiCommon0
        CFI (cfiCond631) NoFunction
        CFI (cfiCond631) Conditional ??CrossCallReturnLabel_282
        CFI (cfiCond631) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond631) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond631) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond631) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond631) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond631) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond631) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond631) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond631) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond631) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond631) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond631) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond631) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond631) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond631) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond631) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond631) CFA_SP SP+0
        CFI (cfiCond631) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond632 Using cfiCommon0
        CFI (cfiCond632) NoFunction
        CFI (cfiCond632) Conditional ??CrossCallReturnLabel_283
        CFI (cfiCond632) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond632) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond632) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond632) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond632) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond632) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond632) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond632) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond632) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond632) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond632) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond632) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond632) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond632) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond632) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond632) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond632) CFA_SP SP+0
        CFI (cfiCond632) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker633 Using cfiCommon1
        CFI (cfiPicker633) NoFunction
        CFI (cfiPicker633) Picker
        MOV     DPL,A
        MOV     A,R7
        CFI EndBlock cfiCond630
        CFI EndBlock cfiCond631
        CFI EndBlock cfiCond632
        CFI EndBlock cfiPicker633
        REQUIRE ??Subroutine121_0
        ; // Fall through to label ??Subroutine121_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine121_0:
        CFI Block cfiCond634 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_276
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond635 Using cfiCommon0
        CFI (cfiCond635) NoFunction
        CFI (cfiCond635) Conditional ??CrossCallReturnLabel_277
        CFI (cfiCond635) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond635) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond635) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond635) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond635) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond635) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond635) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond635) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond635) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond635) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond635) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond635) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond635) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond635) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond635) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond635) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond635) CFA_SP SP+0
        CFI (cfiCond635) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond636 Using cfiCommon0
        CFI (cfiCond636) NoFunction
        CFI (cfiCond636) Conditional ??CrossCallReturnLabel_278
        CFI (cfiCond636) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond636) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond636) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond636) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond636) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond636) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond636) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond636) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond636) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond636) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond636) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond636) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond636) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond636) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond636) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond636) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond636) CFA_SP SP+0
        CFI (cfiCond636) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond637 Using cfiCommon0
        CFI (cfiCond637) NoFunction
        CFI (cfiCond637) Conditional ??CrossCallReturnLabel_279
        CFI (cfiCond637) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond637) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond637) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond637) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond637) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond637) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond637) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond637) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond637) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond637) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond637) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond637) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond637) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond637) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond637) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond637) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond637) CFA_SP SP+0
        CFI (cfiCond637) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond638 Using cfiCommon0
        CFI (cfiCond638) NoFunction
        CFI (cfiCond638) Conditional ??CrossCallReturnLabel_280
        CFI (cfiCond638) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond638) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond638) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond638) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond638) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond638) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond638) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond638) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond638) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond638) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond638) CFA_SP SP+0
        CFI (cfiCond638) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond639 Using cfiCommon0
        CFI (cfiCond639) NoFunction
        CFI (cfiCond639) Conditional ??CrossCallReturnLabel_281
        CFI (cfiCond639) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond639) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond639) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond639) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond639) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond639) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond639) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond639) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond639) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond639) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond639) CFA_SP SP+0
        CFI (cfiCond639) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond640 Using cfiCommon0
        CFI (cfiCond640) NoFunction
        CFI (cfiCond640) Conditional ??CrossCallReturnLabel_282
        CFI (cfiCond640) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond640) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond640) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond640) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond640) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond640) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond640) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond640) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond640) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond640) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond640) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond640) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond640) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond640) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond640) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond640) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond640) CFA_SP SP+0
        CFI (cfiCond640) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond641 Using cfiCommon0
        CFI (cfiCond641) NoFunction
        CFI (cfiCond641) Conditional ??CrossCallReturnLabel_283
        CFI (cfiCond641) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond641) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond641) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond641) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond641) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond641) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond641) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond641) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond641) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond641) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond641) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond641) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond641) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond641) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond641) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond641) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond641) CFA_SP SP+0
        CFI (cfiCond641) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker642 Using cfiCommon1
        CFI (cfiPicker642) NoFunction
        CFI (cfiPicker642) Picker
        ADDC    A,#0x0
        MOV     DPH,A
        RET
        CFI EndBlock cfiCond634
        CFI EndBlock cfiCond635
        CFI EndBlock cfiCond636
        CFI EndBlock cfiCond637
        CFI EndBlock cfiCond638
        CFI EndBlock cfiCond639
        CFI EndBlock cfiCond640
        CFI EndBlock cfiCond641
        CFI EndBlock cfiPicker642

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine61:
        CFI Block cfiCond643 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_97
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond644 Using cfiCommon0
        CFI (cfiCond644) NoFunction
        CFI (cfiCond644) Conditional ??CrossCallReturnLabel_98
        CFI (cfiCond644) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond644) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond644) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond644) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond644) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond644) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond644) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond644) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond644) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond644) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond644) CFA_SP SP+0
        CFI (cfiCond644) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiPicker645 Using cfiCommon1
        CFI (cfiPicker645) NoFunction
        CFI (cfiPicker645) Picker
        MOVX    @DPTR,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond643
        CFI EndBlock cfiCond644
        CFI EndBlock cfiPicker645

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine57:
        CFI Block cfiCond646 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_290
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond647 Using cfiCommon0
        CFI (cfiCond647) NoFunction
        CFI (cfiCond647) Conditional ??CrossCallReturnLabel_291
        CFI (cfiCond647) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond647) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond647) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond647) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond647) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond647) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond647) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond647) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond647) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond647) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond647) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond647) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond647) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond647) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond647) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond647) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond647) CFA_SP SP+0
        CFI (cfiCond647) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiPicker648 Using cfiCommon1
        CFI (cfiPicker648) NoFunction
        CFI (cfiPicker648) Picker
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        INC     DPTR
        MOV     R0,DPL
        MOV     R1,DPH
        MOV     DPTR,#ZDP_TmpBuf
        CFI EndBlock cfiCond646
        CFI EndBlock cfiCond647
        CFI EndBlock cfiPicker648
        REQUIRE ??Subroutine122_0
        ; // Fall through to label ??Subroutine122_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine122_0:
        CFI Block cfiCond649 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_284
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond650 Using cfiCommon0
        CFI (cfiCond650) NoFunction
        CFI (cfiCond650) Conditional ??CrossCallReturnLabel_285
        CFI (cfiCond650) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond650) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond650) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond650) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond650) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond650) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond650) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond650) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond650) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond650) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond650) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond650) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond650) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond650) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond650) CFA_SP SP+0
        CFI (cfiCond650) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond651 Using cfiCommon0
        CFI (cfiCond651) NoFunction
        CFI (cfiCond651) Conditional ??CrossCallReturnLabel_286
        CFI (cfiCond651) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond651) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond651) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond651) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond651) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond651) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond651) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond651) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond651) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond651) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond651) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond651) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond651) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond651) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond651) CFA_SP SP+0
        CFI (cfiCond651) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond652 Using cfiCommon0
        CFI (cfiCond652) NoFunction
        CFI (cfiCond652) Conditional ??CrossCallReturnLabel_287
        CFI (cfiCond652) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond652) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond652) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond652) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond652) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond652) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond652) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond652) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond652) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond652) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond652) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond652) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond652) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond652) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond652) CFA_SP SP+0
        CFI (cfiCond652) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond653 Using cfiCommon0
        CFI (cfiCond653) NoFunction
        CFI (cfiCond653) Conditional ??CrossCallReturnLabel_288
        CFI (cfiCond653) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond653) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond653) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond653) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond653) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond653) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond653) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond653) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond653) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond653) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond653) CFA_SP SP+0
        CFI (cfiCond653) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond654 Using cfiCommon0
        CFI (cfiCond654) NoFunction
        CFI (cfiCond654) Conditional ??CrossCallReturnLabel_289
        CFI (cfiCond654) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond654) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond654) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond654) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond654) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond654) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond654) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond654) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond654) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond654) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond654) CFA_SP SP+0
        CFI (cfiCond654) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond655 Using cfiCommon0
        CFI (cfiCond655) NoFunction
        CFI (cfiCond655) Conditional ??CrossCallReturnLabel_290
        CFI (cfiCond655) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond655) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond655) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond655) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond655) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond655) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond655) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond655) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond655) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond655) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond655) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond655) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond655) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond655) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond655) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond655) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond655) CFA_SP SP+0
        CFI (cfiCond655) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond656 Using cfiCommon0
        CFI (cfiCond656) NoFunction
        CFI (cfiCond656) Conditional ??CrossCallReturnLabel_291
        CFI (cfiCond656) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond656) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond656) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond656) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond656) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond656) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond656) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond656) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond656) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond656) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond656) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond656) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond656) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond656) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond656) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond656) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond656) CFA_SP SP+0
        CFI (cfiCond656) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiPicker657 Using cfiCommon1
        CFI (cfiPicker657) NoFunction
        CFI (cfiPicker657) Picker
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond649
        CFI EndBlock cfiCond650
        CFI EndBlock cfiCond651
        CFI EndBlock cfiCond652
        CFI EndBlock cfiCond653
        CFI EndBlock cfiCond654
        CFI EndBlock cfiCond655
        CFI EndBlock cfiCond656
        CFI EndBlock cfiPicker657

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine37:
        CFI Block cfiCond658 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_292
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond659 Using cfiCommon0
        CFI (cfiCond659) NoFunction
        CFI (cfiCond659) Conditional ??CrossCallReturnLabel_293
        CFI (cfiCond659) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond659) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond659) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond659) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond659) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond659) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond659) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond659) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond659) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond659) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond659) CFA_SP SP+0
        CFI (cfiCond659) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiPicker660 Using cfiCommon1
        CFI (cfiPicker660) NoFunction
        CFI (cfiPicker660) Picker
        MOV     R6,A
        CFI EndBlock cfiCond658
        CFI EndBlock cfiCond659
        CFI EndBlock cfiPicker660
        REQUIRE ??Subroutine123_0
        ; // Fall through to label ??Subroutine123_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine123_0:
        CFI Block cfiCond661 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_302
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond662 Using cfiCommon0
        CFI (cfiCond662) NoFunction
        CFI (cfiCond662) Conditional ??CrossCallReturnLabel_303
        CFI (cfiCond662) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond662) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond662) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond662) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond662) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond662) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond662) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond662) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond662) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond662) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond662) CFA_SP SP+0
        CFI (cfiCond662) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond663 Using cfiCommon0
        CFI (cfiCond663) NoFunction
        CFI (cfiCond663) Conditional ??CrossCallReturnLabel_292
        CFI (cfiCond663) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond663) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond663) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond663) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond663) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond663) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond663) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond663) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond663) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond663) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond663) CFA_SP SP+0
        CFI (cfiCond663) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond664 Using cfiCommon0
        CFI (cfiCond664) NoFunction
        CFI (cfiCond664) Conditional ??CrossCallReturnLabel_293
        CFI (cfiCond664) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond664) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond664) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond664) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond664) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond664) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond664) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond664) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond664) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond664) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond664) CFA_SP SP+0
        CFI (cfiCond664) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiPicker665 Using cfiCommon1
        CFI (cfiPicker665) NoFunction
        CFI (cfiPicker665) Picker
        MOV     DPTR,#ZDP_TmpBuf
        CFI EndBlock cfiCond661
        CFI EndBlock cfiCond662
        CFI EndBlock cfiCond663
        CFI EndBlock cfiCond664
        CFI EndBlock cfiPicker665
        REQUIRE ??Subroutine124_0
        ; // Fall through to label ??Subroutine124_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine124_0:
        CFI Block cfiCond666 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_294
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond667 Using cfiCommon0
        CFI (cfiCond667) NoFunction
        CFI (cfiCond667) Conditional ??CrossCallReturnLabel_295
        CFI (cfiCond667) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond667) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond667) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond667) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond667) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond667) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond667) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond667) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond667) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond667) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond667) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond667) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond667) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond667) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond667) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond667) CFA_SP SP+0
        CFI (cfiCond667) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond668 Using cfiCommon0
        CFI (cfiCond668) NoFunction
        CFI (cfiCond668) Conditional ??CrossCallReturnLabel_296
        CFI (cfiCond668) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond668) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond668) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond668) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond668) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond668) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond668) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond668) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond668) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond668) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond668) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond668) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond668) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond668) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond668) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond668) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond668) CFA_SP SP+0
        CFI (cfiCond668) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond669 Using cfiCommon0
        CFI (cfiCond669) NoFunction
        CFI (cfiCond669) Conditional ??CrossCallReturnLabel_297
        CFI (cfiCond669) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond669) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond669) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond669) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond669) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond669) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond669) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond669) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond669) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond669) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond669) CFA_SP SP+0
        CFI (cfiCond669) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond670 Using cfiCommon0
        CFI (cfiCond670) NoFunction
        CFI (cfiCond670) Conditional ??CrossCallReturnLabel_298
        CFI (cfiCond670) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond670) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond670) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond670) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond670) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond670) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond670) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond670) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond670) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond670) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond670) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond670) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond670) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond670) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond670) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond670) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond670) CFA_SP SP+0
        CFI (cfiCond670) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond671 Using cfiCommon0
        CFI (cfiCond671) NoFunction
        CFI (cfiCond671) Conditional ??CrossCallReturnLabel_299
        CFI (cfiCond671) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond671) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond671) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond671) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond671) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond671) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond671) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond671) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond671) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond671) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond671) CFA_SP SP+0
        CFI (cfiCond671) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond672 Using cfiCommon0
        CFI (cfiCond672) NoFunction
        CFI (cfiCond672) Conditional ??CrossCallReturnLabel_300
        CFI (cfiCond672) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond672) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond672) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond672) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond672) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond672) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond672) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond672) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond672) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond672) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond672) CFA_SP SP+0
        CFI (cfiCond672) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond673 Using cfiCommon0
        CFI (cfiCond673) NoFunction
        CFI (cfiCond673) Conditional ??CrossCallReturnLabel_301
        CFI (cfiCond673) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond673) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond673) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond673) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond673) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond673) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond673) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond673) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond673) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond673) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond673) CFA_SP SP+0
        CFI (cfiCond673) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond674 Using cfiCommon0
        CFI (cfiCond674) NoFunction
        CFI (cfiCond674) Conditional ??CrossCallReturnLabel_302
        CFI (cfiCond674) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond674) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond674) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond674) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond674) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond674) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond674) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond674) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond674) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond674) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond674) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond674) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond674) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond674) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond674) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond674) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond674) CFA_SP SP+0
        CFI (cfiCond674) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond675 Using cfiCommon0
        CFI (cfiCond675) NoFunction
        CFI (cfiCond675) Conditional ??CrossCallReturnLabel_303
        CFI (cfiCond675) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond675) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond675) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond675) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond675) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond675) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond675) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond675) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond675) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond675) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond675) CFA_SP SP+0
        CFI (cfiCond675) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond676 Using cfiCommon0
        CFI (cfiCond676) NoFunction
        CFI (cfiCond676) Conditional ??CrossCallReturnLabel_292
        CFI (cfiCond676) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond676) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond676) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond676) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond676) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond676) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond676) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond676) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond676) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond676) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond676) CFA_SP SP+0
        CFI (cfiCond676) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond677 Using cfiCommon0
        CFI (cfiCond677) NoFunction
        CFI (cfiCond677) Conditional ??CrossCallReturnLabel_293
        CFI (cfiCond677) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond677) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond677) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond677) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond677) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond677) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond677) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond677) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond677) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond677) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond677) CFA_SP SP+0
        CFI (cfiCond677) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiPicker678 Using cfiCommon1
        CFI (cfiPicker678) NoFunction
        CFI (cfiPicker678) Picker
        LCALL   ?Subroutine76 & 0xFFFF
??CrossCallReturnLabel_307:
        RET
        CFI EndBlock cfiCond666
        CFI EndBlock cfiCond667
        CFI EndBlock cfiCond668
        CFI EndBlock cfiCond669
        CFI EndBlock cfiCond670
        CFI EndBlock cfiCond671
        CFI EndBlock cfiCond672
        CFI EndBlock cfiCond673
        CFI EndBlock cfiCond674
        CFI EndBlock cfiCond675
        CFI EndBlock cfiCond676
        CFI EndBlock cfiCond677
        CFI EndBlock cfiPicker678

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine76:
        CFI Block cfiCond679 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_304, ??CrossCallReturnLabel_35
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 26)
        CFI Block cfiCond680 Using cfiCommon0
        CFI (cfiCond680) NoFunction
        CFI (cfiCond680) Conditional ??CrossCallReturnLabel_304, ??CrossCallReturnLabel_36
        CFI (cfiCond680) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond680) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond680) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond680) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond680) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond680) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond680) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond680) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond680) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond680) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond680) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond680) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond680) CFA_SP SP+0
        CFI (cfiCond680) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond681 Using cfiCommon0
        CFI (cfiCond681) NoFunction
        CFI (cfiCond681) Conditional ??CrossCallReturnLabel_306, ??CrossCallReturnLabel_60
        CFI (cfiCond681) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond681) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond681) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond681) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond681) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond681) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond681) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond681) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond681) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond681) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond681) CFA_SP SP+0
        CFI (cfiCond681) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond682 Using cfiCommon0
        CFI (cfiCond682) NoFunction
        CFI (cfiCond682) Conditional ??CrossCallReturnLabel_306, ??CrossCallReturnLabel_61
        CFI (cfiCond682) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond682) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond682) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond682) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond682) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond682) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond682) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond682) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond682) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond682) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond682) CFA_SP SP+0
        CFI (cfiCond682) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond683 Using cfiCommon0
        CFI (cfiCond683) NoFunction
        CFI (cfiCond683) Conditional ??CrossCallReturnLabel_306, ??CrossCallReturnLabel_62
        CFI (cfiCond683) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond683) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond683) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond683) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond683) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond683) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond683) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond683) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond683) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond683) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond683) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond683) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond683) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond683) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond683) CFA_SP SP+0
        CFI (cfiCond683) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond684 Using cfiCommon0
        CFI (cfiCond684) NoFunction
        CFI (cfiCond684) Conditional ??CrossCallReturnLabel_305, ??CrossCallReturnLabel_41
        CFI (cfiCond684) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond684) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond684) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond684) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond684) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond684) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond684) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond684) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond684) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond684) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond684) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond684) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond684) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond684) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond684) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond684) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond684) CFA_SP SP+0
        CFI (cfiCond684) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond685 Using cfiCommon0
        CFI (cfiCond685) NoFunction
        CFI (cfiCond685) Conditional ??CrossCallReturnLabel_305, ??CrossCallReturnLabel_42
        CFI (cfiCond685) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond685) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond685) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond685) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond685) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond685) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond685) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond685) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond685) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond685) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond685) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond685) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond685) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond685) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond685) CFA_SP SP+0
        CFI (cfiCond685) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond686 Using cfiCommon0
        CFI (cfiCond686) NoFunction
        CFI (cfiCond686) Conditional ??CrossCallReturnLabel_305, ??CrossCallReturnLabel_39
        CFI (cfiCond686) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond686) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond686) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond686) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond686) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond686) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond686) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond686) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond686) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond686) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond686) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond686) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond686) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond686) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond686) CFA_SP SP+0
        CFI (cfiCond686) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond687 Using cfiCommon0
        CFI (cfiCond687) NoFunction
        CFI (cfiCond687) Conditional ??CrossCallReturnLabel_305, ??CrossCallReturnLabel_40
        CFI (cfiCond687) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond687) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond687) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond687) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond687) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond687) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond687) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond687) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond687) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond687) CFA_SP SP+0
        CFI (cfiCond687) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond688 Using cfiCommon0
        CFI (cfiCond688) NoFunction
        CFI (cfiCond688) Conditional ??CrossCallReturnLabel_307, ??CrossCallReturnLabel_292
        CFI (cfiCond688) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond688) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond688) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond688) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond688) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond688) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond688) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond688) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond688) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond688) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond688) CFA_SP SP+0
        CFI (cfiCond688) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond689 Using cfiCommon0
        CFI (cfiCond689) NoFunction
        CFI (cfiCond689) Conditional ??CrossCallReturnLabel_307, ??CrossCallReturnLabel_293
        CFI (cfiCond689) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond689) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond689) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond689) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond689) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond689) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond689) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond689) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond689) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond689) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond689) CFA_SP SP+0
        CFI (cfiCond689) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond690 Using cfiCommon0
        CFI (cfiCond690) NoFunction
        CFI (cfiCond690) Conditional ??CrossCallReturnLabel_307, ??CrossCallReturnLabel_302
        CFI (cfiCond690) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond690) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond690) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond690) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond690) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond690) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond690) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond690) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond690) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond690) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond690) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond690) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond690) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond690) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond690) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond690) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond690) CFA_SP SP+0
        CFI (cfiCond690) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond691 Using cfiCommon0
        CFI (cfiCond691) NoFunction
        CFI (cfiCond691) Conditional ??CrossCallReturnLabel_307, ??CrossCallReturnLabel_303
        CFI (cfiCond691) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond691) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond691) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond691) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond691) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond691) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond691) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond691) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond691) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond691) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond691) CFA_SP SP+0
        CFI (cfiCond691) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond692 Using cfiCommon0
        CFI (cfiCond692) NoFunction
        CFI (cfiCond692) Conditional ??CrossCallReturnLabel_307, ??CrossCallReturnLabel_294
        CFI (cfiCond692) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond692) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond692) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond692) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond692) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond692) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond692) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond692) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond692) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond692) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond692) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond692) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond692) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond692) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond692) CFA_SP SP+0
        CFI (cfiCond692) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond693 Using cfiCommon0
        CFI (cfiCond693) NoFunction
        CFI (cfiCond693) Conditional ??CrossCallReturnLabel_307, ??CrossCallReturnLabel_295
        CFI (cfiCond693) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond693) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond693) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond693) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond693) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond693) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond693) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond693) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond693) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond693) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond693) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond693) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond693) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond693) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond693) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond693) CFA_SP SP+0
        CFI (cfiCond693) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond694 Using cfiCommon0
        CFI (cfiCond694) NoFunction
        CFI (cfiCond694) Conditional ??CrossCallReturnLabel_307, ??CrossCallReturnLabel_296
        CFI (cfiCond694) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond694) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond694) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond694) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond694) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond694) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond694) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond694) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond694) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond694) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond694) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond694) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond694) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond694) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond694) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond694) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond694) CFA_SP SP+0
        CFI (cfiCond694) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond695 Using cfiCommon0
        CFI (cfiCond695) NoFunction
        CFI (cfiCond695) Conditional ??CrossCallReturnLabel_307, ??CrossCallReturnLabel_297
        CFI (cfiCond695) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond695) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond695) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond695) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond695) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond695) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond695) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond695) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond695) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond695) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond695) CFA_SP SP+0
        CFI (cfiCond695) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond696 Using cfiCommon0
        CFI (cfiCond696) NoFunction
        CFI (cfiCond696) Conditional ??CrossCallReturnLabel_307, ??CrossCallReturnLabel_298
        CFI (cfiCond696) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond696) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond696) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond696) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond696) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond696) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond696) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond696) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond696) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond696) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond696) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond696) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond696) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond696) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond696) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond696) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond696) CFA_SP SP+0
        CFI (cfiCond696) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond697 Using cfiCommon0
        CFI (cfiCond697) NoFunction
        CFI (cfiCond697) Conditional ??CrossCallReturnLabel_307, ??CrossCallReturnLabel_299
        CFI (cfiCond697) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond697) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond697) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond697) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond697) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond697) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond697) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond697) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond697) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond697) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond697) CFA_SP SP+0
        CFI (cfiCond697) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond698 Using cfiCommon0
        CFI (cfiCond698) NoFunction
        CFI (cfiCond698) Conditional ??CrossCallReturnLabel_307, ??CrossCallReturnLabel_300
        CFI (cfiCond698) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond698) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond698) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond698) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond698) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond698) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond698) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond698) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond698) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond698) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond698) CFA_SP SP+0
        CFI (cfiCond698) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond699 Using cfiCommon0
        CFI (cfiCond699) NoFunction
        CFI (cfiCond699) Conditional ??CrossCallReturnLabel_307, ??CrossCallReturnLabel_301
        CFI (cfiCond699) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond699) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond699) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond699) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond699) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond699) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond699) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond699) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond699) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond699) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond699) CFA_SP SP+0
        CFI (cfiCond699) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiPicker700 Using cfiCommon1
        CFI (cfiPicker700) NoFunction
        CFI (cfiPicker700) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        RET
        CFI EndBlock cfiCond679
        CFI EndBlock cfiCond680
        CFI EndBlock cfiCond681
        CFI EndBlock cfiCond682
        CFI EndBlock cfiCond683
        CFI EndBlock cfiCond684
        CFI EndBlock cfiCond685
        CFI EndBlock cfiCond686
        CFI EndBlock cfiCond687
        CFI EndBlock cfiCond688
        CFI EndBlock cfiCond689
        CFI EndBlock cfiCond690
        CFI EndBlock cfiCond691
        CFI EndBlock cfiCond692
        CFI EndBlock cfiCond693
        CFI EndBlock cfiCond694
        CFI EndBlock cfiCond695
        CFI EndBlock cfiCond696
        CFI EndBlock cfiCond697
        CFI EndBlock cfiCond698
        CFI EndBlock cfiCond699
        CFI EndBlock cfiPicker700

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for ZDP_TmpBuf>`:
        DATA16
        DW ZDP_Buf + 1H

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??fillAndSend?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    fillAndSend

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDP_SendData?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDP_SendData

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDP_NWKAddrOfInterestReq?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDP_NWKAddrOfInterestReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDP_NwkAddrReq?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDP_NwkAddrReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDP_IEEEAddrReq?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDP_IEEEAddrReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDP_MatchDescReq?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDP_MatchDescReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDP_SimpleDescReq?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDP_SimpleDescReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDP_UserDescSet?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDP_UserDescSet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDP_ServerDiscReq?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDP_ServerDiscReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDP_DeviceAnnce?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDP_DeviceAnnce

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zdpProcessAddrReq?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zdpProcessAddrReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDP_NodeDescMsg?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDP_NodeDescMsg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDP_PowerDescMsg?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDP_PowerDescMsg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDP_SimpleDescMsg?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDP_SimpleDescMsg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDP_EPRsp?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDP_EPRsp

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDP_UserDescRsp?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDP_UserDescRsp

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDP_ServerDiscRsp?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDP_ServerDiscRsp

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDP_GenericRsp?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDP_GenericRsp

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDP_EndDeviceBindReq?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDP_EndDeviceBindReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDP_BindUnbindReq?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDP_BindUnbindReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDP_MgmtNwkDiscReq?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDP_MgmtNwkDiscReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDP_MgmtDirectJoinReq?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDP_MgmtDirectJoinReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDP_MgmtPermitJoinReq?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDP_MgmtPermitJoinReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDP_MgmtLeaveReq?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDP_MgmtLeaveReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDP_MgmtNwkUpdateReq?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDP_MgmtNwkUpdateReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDP_MgmtNwkDiscRsp?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDP_MgmtNwkDiscRsp

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDP_MgmtLqiRsp?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDP_MgmtLqiRsp

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDP_MgmtRtgRsp?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDP_MgmtRtgRsp

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDP_MgmtBindRsp?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDP_MgmtBindRsp

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDP_MgmtNwkUpdateNotify?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDP_MgmtNwkUpdateNotify

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDO_RegisterForZDOMsg?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDO_RegisterForZDOMsg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDO_RemoveRegisteredCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDO_RemoveRegisteredCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDO_SendMsgCBs?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDO_SendMsgCBs

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDP_IncomingData?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDP_IncomingData

        END
// 1901 
// 1902 /*********************************************************************
// 1903 *********************************************************************/
// 1904 
// 
// 6 399 bytes in segment BANKED_CODE
//   204 bytes in segment BANK_RELAYS
//    29 bytes in segment CODE_C
//     2 bytes in segment XDATA_I
//     2 bytes in segment XDATA_ID
//    84 bytes in segment XDATA_Z
// 
// 6 634 bytes of CODE  memory
//    86 bytes of XDATA memory
//
//Errors: none
//Warnings: none
