###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         10/Jul/2018  16:37:46 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Components\zmac\f8w\zmac_cb.c                      #
#    Command line       =  -f D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ #
#                          ¸Ä\Projects\zstack\Utilities\SerialApp\CC2530DB\.. #
#                          \..\..\Tools\CC2530DB\f8wEndev.cfg (-DCPU32MHZ     #
#                          -DROOT=__near_func -DBLINK_LEDS) -f                #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\Tools\CC2530DB\f8wConfig.cfg (-DSECURE=0       #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xfFF1                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Components\zmac\f8w\zmac_cb.c -D ZIGBEEPRO -D      #
#                          NWK_AUTO_POLL -D HAL_UART=TRUE -D                  #
#                          SERIAL_APP_PORT=0 -D LCD_SUPPORTED -D              #
#                          xPOWER_SAVING -lC D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼ #
#                          «\WSN_ZigBee_ÐÞ¸Ä\Projects\zstack\Utilities\Serial #
#                          App\CC2530DB\EndDeviceEB-Pro\List\ -lA             #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\EndDe #
#                          viceEB-Pro\List\ --diag_suppress Pe001,Pa010 -o    #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\EndDe #
#                          viceEB-Pro\Obj\ -e --debug --core=plain            #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 8 -I D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ #
#                          °\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\Projects\zstack\Utilities\S #
#                          erialApp\CC2530DB\ -I D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ° #
#                          \ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\Projects\zstack\Utilities\Se #
#                          rialApp\CC2530DB\..\SOURCE\ -I                     #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\ZMAIN\TI2530DB\ -I D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ #
#                          °\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\Projects\zstack\Utilities\S #
#                          erialApp\CC2530DB\..\..\..\..\..\COMPONENTS\MT\    #
#                          -I D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ #
#                          ¸Ä\Projects\zstack\Utilities\SerialApp\CC2530DB\.. #
#                          \..\..\..\..\COMPONENTS\HAL\INCLUDE\ -I            #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\ -I       #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\OSAL\MCU\CCSOC\ -I            #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\OSAL\INCLUDE\ -I              #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\STACK\AF\ -I                  #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\STACK\NWK\ -I                 #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\STACK\SEC\ -I                 #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\STACK\SAPI\ -I                #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\STACK\SYS\ -I                 #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\STACK\ZDO\ -I                 #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\ZMAC\F8W\ -I                  #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\ZMAC\ -I                      #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\SERVICES\SADDR\ -I            #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\SERVICES\SDATA\ -I            #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\MAC\INCLUDE\ -I               #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\MAC\HIGH_LEVEL\ -I            #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\ -I       #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CH #
#                          IP\ -Ohz --require_prototypes                      #
#    List file          =  D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\EndDe #
#                          viceEB-Pro\List\zmac_cb.lst                        #
#    Object file        =  D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\EndDe #
#                          viceEB-Pro\Obj\zmac_cb.r51                         #
#                                                                             #
#                                                                             #
###############################################################################

D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\Components\zmac\f8w\zmac_cb.c
      1          /**************************************************************************************************
      2            Filename:       zmac_cb.c
      3            Revised:        $Date: 2009-03-06 14:52:01 -0800 (Fri, 06 Mar 2009) $
      4            Revision:       $Revision: 19326 $
      5          
      6            Description:    This file contains the NWK functions that the ZMAC calls
      7          
      8          
      9            Copyright 2005-2009 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, 
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE, 
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com. 
     38          **************************************************************************************************/
     39          
     40          /********************************************************************************************************
     41           *                                               INCLUDES
     42           ********************************************************************************************************/
     43          
     44          #include "ZComDef.h"
     45          #include "OSAL.h"
     46          #include "ZMAC.h"
     47          #include "MT_MAC.h"
     48          #include "hal_mcu.h"

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1
     49          
     50          #if !defined NONWK
     51          #include "nwk.h"
     52          #include "nwk_bufs.h"
     53          #include "ZGlobals.h"
     54          #endif
     55          
     56          #if defined( MACSIM )
     57            #include "mac_sim.h"
     58          #endif
     59          
     60          #include "mac_main.h"
     61          extern void *ZMac_ScanBuf;
     62          
     63          /********************************************************************************************************
     64           *                                               CONSTANTS
     65           ********************************************************************************************************/
     66          
     67          #if !defined NONWK
     68          /* Lookup table for size of structures. Must match with the order of MAC callback events */

   \                                 In  segment CODE_C, align 1
     69          const uint8 CODE zmacCBSizeTable [] = {
   \                     zmacCBSizeTable:
   \   000000   00           DB 0
   \   000001   16           DB 22
   \   000002   0F           DB 15
   \   000003   00           DB 0
   \   000004   00           DB 0
   \   000005   0B           DB 11
   \   000006   15           DB 21
   \   000007   0B           DB 11
   \   000008   02           DB 2
   \   000009   00           DB 0
   \   00000A   02           DB 2
   \   00000B   22           DB 34
   \   00000C   0F           DB 15
   \   00000D   32           DB 50
   \   00000E   00           DB 0
   \   00000F   00           DB 0
   \   000010   06           DB 6
     70            0,
     71            sizeof(ZMacAssociateInd_t),       // MAC_MLME_ASSOCIATE_IND      1   Associate indication
     72            sizeof(ZMacAssociateCnf_t),       // MAC_MLME_ASSOCIATE_CNF      2   Associate confirm
     73            0,                                // MAC_MLME_DISASSOCIATE_IND   3   Disassociate indication
     74            0,                                // MAC_MLME_DISASSOCIATE_CNF   4   Disassociate confirm
     75            sizeof(macMlmeBeaconNotifyInd_t), // MAC_MLME_BEACON_NOTIFY_IND  5   con notify indication
     76            sizeof(ZMacOrphanInd_t),          // MAC_MLME_ORPHAN_IND         6   Orphan indication
     77            sizeof(ZMacScanCnf_t),            // MAC_MLME_SCAN_CNF           7   Scan confirm
     78            sizeof(ZMacStartCnf_t),           // MAC_MLME_START_CNF          8   Start confirm
     79            0,                                // MAC_MLME_SYNC_LOSS_IND      9   Sync loss indication
     80            sizeof(ZMacPollCnf_t),            // MAC_MLME_POLL_CNF           10  Poll confirm
     81            sizeof(ZMacCommStatusInd_t),      // MAC_MLME_COMM_STATUS_IND    11  Comm status indication
     82            sizeof(ZMacDataCnf_t),            // MAC_MCPS_DATA_CNF           12  Data confirm
     83            sizeof(macMcpsDataInd_t),         // MAC_MCPS_DATA_IND           13  Data indication
     84            0,                                // MAC_MCPS_PURGE_CNF          14  Purge confirm
     85            0,                                // MAC_PWR_ON_CNF              15  Power on confirm
     86            sizeof(ZMacPollInd_t)             // MAC_MLME_POLL_IND           16  Poll indication
     87          };
     88          #endif /* !defined NONWK */
     89          
     90          
     91          /*********************************************************************
     92           * ZMAC Function Pointers
     93           */
     94          
     95          /*
     96           * ZMac Application callback function. This function will be called
     97           * for every MAC message that is received over-the-air or generated
     98           * locally by MAC for the application.
     99           *
    100           * The callback function should return TRUE if it has handled the
    101           * MAC message and no further action should be taken with it. It 
    102           * should return FALSE if it has not handled the MAC message and
    103           * normal processing should take place.
    104           *
    105           * NOTE: The processing in this function should be kept to the
    106           *       minimum.
    107           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    108          uint8 (*pZMac_AppCallback)( uint8 *msgPtr ) = (void*)NULL;
   \                     pZMac_AppCallback:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    109          
    110          
    111          /*********************************************************************
    112           * ZMAC Functions
    113           */
    114          
    115          /**************************************************************************************************
    116           * @fn       MAC_CbackEvent()
    117           *
    118           * @brief    convert MAC data confirm and indication to ZMac and send to NWK
    119           *
    120           * @param    pData - pointer to macCbackEvent_t
    121           *
    122           * @return   none
    123           *************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    124          void MAC_CbackEvent(macCbackEvent_t *pData)
   \                     MAC_CbackEvent:
    125          #ifndef MT_MAC_CB_FUNC
    126          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 6,R2
   \   00000C   8B..         MOV     ?V0 + 7,R3
    127          #if !defined NONWK
    128            uint8 event = pData->hdr.event;
   \   00000E   8A82         MOV     DPL,R2
   \   000010   8B83         MOV     DPH,R3
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F5..         MOV     ?V0 + 3,A
    129            uint16 tmp = zmacCBSizeTable[event];
   \   000015   F5..         MOV     ?V0 + 0,A
   \   000017   74..         MOV     A,#zmacCBSizeTable & 0xff
   \   000019   25..         ADD     A,?V0 + 0
   \   00001B   F582         MOV     DPL,A
   \   00001D   74..         MOV     A,#(zmacCBSizeTable >> 8) & 0xff
   \   00001F   3400         ADDC    A,#0x0
   \   000021   F583         MOV     DPH,A
   \   000023   E4           CLR     A
   \   000024   93           MOVC    A,@A+DPTR
   \   000025   FE           MOV     R6,A
   \   000026   85..82       MOV     DPL,?XSP + 0
   \   000029   85..83       MOV     DPH,?XSP + 1
   \   00002C   F0           MOVX    @DPTR,A
   \   00002D   A3           INC     DPTR
   \   00002E   E4           CLR     A
   \   00002F   F0           MOVX    @DPTR,A
    130            macCbackEvent_t *msgPtr;
    131          
    132            /* If the Network layer will handle a new MAC callback, a non-zero value must be entered in the
    133             * corresponding location in the zmacCBSizeTable[] - thus the table acts as "should handle"?
    134             */
    135            if (tmp == 0)
   \   000030   85..82       MOV     DPL,?XSP + 0
   \   000033   85..83       MOV     DPH,?XSP + 1
   \   000036   E0           MOVX    A,@DPTR
   \   000037   7003         JNZ     $+5
   \   000039   02....       LJMP    ??MAC_CbackEvent_0 & 0xFFFF
   \   00003C   740D         MOV     A,#0xd
   \   00003E   65..         XRL     A,?V0 + 3
   \   000040   7045         JNZ     ??MAC_CbackEvent_1
    136            {
    137              return;
    138            }
    139          
    140            // MAC_MCPS_DATA_IND is very special - it is the only event where the MAC does not free *pData.
    141            if ( event == MAC_MCPS_DATA_IND )
    142            {
    143              MAC_MlmeGetReq( MAC_SHORT_ADDRESS, &tmp );
   \   000042                ; Setup parameters for call to function MAC_MlmeGetReq
   \   000042   AA82         MOV     R2,DPL
   \   000044   AB83         MOV     R3,DPH
   \   000046   7953         MOV     R1,#0x53
   \   000048   12....       LCALL   ??MAC_MlmeGetReq?relay
    144              if ((tmp == INVALID_NODE_ADDR) || (tmp == NWK_BROADCAST_SHORTADDR_DEVALL) ||
    145                  (pData->dataInd.msdu.len == 0))
   \   00004B   85..82       MOV     DPL,?XSP + 0
   \   00004E   85..83       MOV     DPH,?XSP + 1
   \   000051   E0           MOVX    A,@DPTR
   \   000052   64FE         XRL     A,#0xfe
   \   000054   7003         JNZ     ??MAC_CbackEvent_2
   \   000056   A3           INC     DPTR
   \   000057   E0           MOVX    A,@DPTR
   \   000058   F4           CPL     A
   \                     ??MAC_CbackEvent_2:
   \   000059   601C         JZ      ??MAC_CbackEvent_3
   \   00005B   85..82       MOV     DPL,?XSP + 0
   \   00005E   85..83       MOV     DPH,?XSP + 1
   \   000061   E0           MOVX    A,@DPTR
   \   000062   F4           CPL     A
   \   000063   7003         JNZ     ??MAC_CbackEvent_4
   \   000065   A3           INC     DPTR
   \   000066   E0           MOVX    A,@DPTR
   \   000067   F4           CPL     A
   \                     ??MAC_CbackEvent_4:
   \   000068   600D         JZ      ??MAC_CbackEvent_3
   \   00006A   85..82       MOV     DPL,?V0 + 6
   \   00006D   85..83       MOV     DPH,?V0 + 7
   \   000070   A3           INC     DPTR
   \   000071   A3           INC     DPTR
   \   000072   A3           INC     DPTR
   \   000073   A3           INC     DPTR
   \   000074   E0           MOVX    A,@DPTR
   \   000075   7007         JNZ     ??MAC_CbackEvent_5
    146              {
    147                osal_msg_deallocate( (uint8 *)pData );
   \                     ??MAC_CbackEvent_3:
   \   000077                ; Setup parameters for call to function osal_msg_deallocate
   \   000077   AA..         MOV     R2,?V0 + 6
   \   000079   AB..         MOV     R3,?V0 + 7
   \   00007B   02....       LJMP    ??CrossCallReturnLabel_1 & 0xFFFF
    148                return;
    149              }
    150              msgPtr = pData;
   \                     ??MAC_CbackEvent_5:
   \   00007E   85....       MOV     ?V0 + 4,?V0 + 6
   \   000081   85....       MOV     ?V0 + 5,?V0 + 7
   \   000084   02....       LJMP    ??MAC_CbackEvent_6 & 0xFFFF
    151            }
    152            else
    153            {
    154              if (event == MAC_MLME_BEACON_NOTIFY_IND )
   \                     ??MAC_CbackEvent_1:
   \   000087   7405         MOV     A,#0x5
   \   000089   65..         XRL     A,?V0 + 3
   \   00008B   7016         JNZ     ??MAC_CbackEvent_7
    155              {
    156                tmp += sizeof(macPanDesc_t) + pData->beaconNotifyInd.sduLength;
   \   00008D   8A82         MOV     DPL,R2
   \   00008F   8B83         MOV     DPH,R3
   \   000091   A3           INC     DPTR
   \   000092   A3           INC     DPTR
   \   000093   A3           INC     DPTR
   \   000094   A3           INC     DPTR
   \   000095   A3           INC     DPTR
   \   000096   A3           INC     DPTR
   \   000097   A3           INC     DPTR
   \   000098   A3           INC     DPTR
   \   000099   E0           MOVX    A,@DPTR
   \   00009A   2421         ADD     A,#0x21
   \   00009C   F8           MOV     R0,A
   \   00009D   E4           CLR     A
   \   00009E   3400         ADDC    A,#0x0
   \   0000A0   F9           MOV     R1,A
   \   0000A1   8033         SJMP    ??MAC_CbackEvent_8
    157              }
    158              else if (event == MAC_MLME_SCAN_CNF)
   \                     ??MAC_CbackEvent_7:
   \   0000A3   7407         MOV     A,#0x7
   \   0000A5   65..         XRL     A,?V0 + 3
   \   0000A7   703A         JNZ     ??MAC_CbackEvent_9
    159              {
    160                if (pData->scanCnf.scanType == ZMAC_ED_SCAN)
   \   0000A9   8A82         MOV     DPL,R2
   \   0000AB   8B83         MOV     DPH,R3
   \   0000AD   A3           INC     DPTR
   \   0000AE   A3           INC     DPTR
   \   0000AF   E0           MOVX    A,@DPTR
   \   0000B0   7010         JNZ     ??MAC_CbackEvent_10
    161                {
    162                  tmp += ZMAC_ED_SCAN_MAXCHANNELS;
   \   0000B2   85..82       MOV     DPL,?XSP + 0
   \   0000B5   85..83       MOV     DPH,?XSP + 1
   \   0000B8   E0           MOVX    A,@DPTR
   \   0000B9   241B         ADD     A,#0x1b
   \   0000BB   F0           MOVX    @DPTR,A
   \   0000BC   A3           INC     DPTR
   \   0000BD   E0           MOVX    A,@DPTR
   \   0000BE   3400         ADDC    A,#0x0
   \   0000C0   8020         SJMP    ??MAC_CbackEvent_11
    163                }
    164                else
    165                {
    166                  tmp += sizeof( ZMacPanDesc_t ) * pData->scanCnf.resultListSize;
   \                     ??MAC_CbackEvent_10:
   \   0000C2   8A82         MOV     DPL,R2
   \   0000C4   8B83         MOV     DPH,R3
   \   0000C6   A3           INC     DPTR
   \   0000C7   A3           INC     DPTR
   \   0000C8   A3           INC     DPTR
   \   0000C9   A3           INC     DPTR
   \   0000CA   A3           INC     DPTR
   \   0000CB   A3           INC     DPTR
   \   0000CC   A3           INC     DPTR
   \   0000CD   A3           INC     DPTR
   \   0000CE   E0           MOVX    A,@DPTR
   \   0000CF   75F021       MOV     B,#0x21
   \   0000D2   A4           MUL     AB
   \   0000D3   F8           MOV     R0,A
   \   0000D4   A9F0         MOV     R1,B
   \                     ??MAC_CbackEvent_8:
   \   0000D6   85..82       MOV     DPL,?XSP + 0
   \   0000D9   85..83       MOV     DPH,?XSP + 1
   \   0000DC   E0           MOVX    A,@DPTR
   \   0000DD   28           ADD     A,R0
   \   0000DE   F0           MOVX    @DPTR,A
   \   0000DF   A3           INC     DPTR
   \   0000E0   E0           MOVX    A,@DPTR
   \   0000E1   39           ADDC    A,R1
   \                     ??MAC_CbackEvent_11:
   \   0000E2   F0           MOVX    @DPTR,A
    167                }
    168              }
    169          
    170              if ( !(msgPtr = (macCbackEvent_t *)osal_msg_allocate(tmp)) )
   \                     ??MAC_CbackEvent_9:
   \   0000E3                ; Setup parameters for call to function osal_msg_allocate
   \   0000E3   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   0000E6   7038         JNZ     ??MAC_CbackEvent_12
    171              {
    172                // Not enough memory. If data confirm - try again
    173                if ( event == MAC_MCPS_DATA_CNF )
   \   0000E8   740C         MOV     A,#0xc
   \   0000EA   65..         XRL     A,?V0 + 3
   \   0000EC   6003         JZ      $+5
   \   0000EE   02....       LJMP    ??MAC_CbackEvent_0 & 0xFFFF
    174                {
    175                  halIntState_t intState;
    176                  
    177                  // This is not normally deallocated here because the pZMac_AppCallback()
    178                  // application may need it.
    179                  HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
   \   0000F1   A2AF         MOV     C,0xa8.7
   \   0000F3   E4           CLR     A
   \   0000F4   33           RLC     A
   \   0000F5   F5..         MOV     ?V0 + 2,A
   \   0000F7   C2AF         CLR     0xa8.7
    180          
    181                  /* mark MAC data buffer as reserved so that MAC won't deallocate it */
    182                  macMainReserve( (uint8 *)pData->dataCnf.pDataReq );
   \   0000F9                ; Setup parameters for call to function macMainReserve
   \   0000F9   12....       LCALL   ?Subroutine0 & 0xFFFF
    183                  osal_msg_deallocate( (uint8*)pData->dataCnf.pDataReq );
   \                     ??CrossCallReturnLabel_0:
   \   0000FC   12....       LCALL   ??osal_msg_deallocate?relay
    184                  if ( !(msgPtr = (macCbackEvent_t *)osal_msg_allocate(tmp)) )
   \   0000FF                ; Setup parameters for call to function osal_msg_allocate
   \   0000FF   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000102   7009         JNZ     ??MAC_CbackEvent_13
    185                  {
    186                    // Still no allocation, something is wrong
    187                    HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
   \   000104   E5..         MOV     A,?V0 + 2
   \   000106   A2E0         MOV     C,0xE0 /* A   */.0
   \   000108   92AF         MOV     0xa8.7,C
    188                    return;
   \   00010A   02....       LJMP    ??MAC_CbackEvent_0 & 0xFFFF
    189                  }
    190                  HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
   \                     ??MAC_CbackEvent_13:
   \   00010D   E5..         MOV     A,?V0 + 2
   \   00010F   A2E0         MOV     C,0xE0 /* A   */.0
   \   000111   92AF         MOV     0xa8.7,C
    191                  pData->dataCnf.pDataReq = NULL;
   \   000113   85..82       MOV     DPL,?V0 + 6
   \   000116   85..83       MOV     DPH,?V0 + 7
   \   000119   A3           INC     DPTR
   \   00011A   A3           INC     DPTR
   \   00011B   A3           INC     DPTR
   \   00011C   E4           CLR     A
   \   00011D   F0           MOVX    @DPTR,A
   \   00011E   A3           INC     DPTR
   \   00011F   F0           MOVX    @DPTR,A
    192                }
    193                else
    194                {     
    195                  // This message is dropped
    196                  return;
    197                }
    198              }
    199              osal_memcpy(msgPtr, pData, zmacCBSizeTable[event]);
   \                     ??MAC_CbackEvent_12:
   \   000120                ; Setup parameters for call to function osal_memcpy
   \   000120   85....       MOV     ?V0 + 0,?V0 + 6
   \   000123   85....       MOV     ?V0 + 1,?V0 + 7
   \   000126   75..00       MOV     ?V0 + 2,#0x0
   \   000129   78..         MOV     R0,#?V0 + 0
   \   00012B   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00012E   EE           MOV     A,R6
   \   00012F   FC           MOV     R4,A
   \   000130   7D00         MOV     R5,#0x0
   \   000132   AA..         MOV     R2,?V0 + 4
   \   000134   AB..         MOV     R3,?V0 + 5
   \   000136   12....       LCALL   ??Subroutine5_0 & 0xFFFF
    200            }
   \                     ??CrossCallReturnLabel_7:
   \   000139   12....       LCALL   ?DEALLOC_XSTACK8
   \   00013C   E5..         MOV     A,?V0 + 4
   \   00013E   240B         ADD     A,#0xb
   \   000140   FE           MOV     R6,A
   \   000141   E5..         MOV     A,?V0 + 5
   \   000143   3400         ADDC    A,#0x0
   \   000145   FF           MOV     R7,A
   \   000146   7405         MOV     A,#0x5
   \   000148   65..         XRL     A,?V0 + 3
   \   00014A   6003         JZ      $+5
   \   00014C   02....       LJMP    ??MAC_CbackEvent_14 & 0xFFFF
   \   00014F                ; Setup parameters for call to function osal_memcpy
   \   00014F   85..82       MOV     DPL,?V0 + 4
   \   000152   85..83       MOV     DPH,?V0 + 5
   \   000155   A3           INC     DPTR
   \   000156   A3           INC     DPTR
   \   000157   A3           INC     DPTR
   \   000158   12....       LCALL   ??Subroutine6_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   00015B   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00015E   7C21         MOV     R4,#0x21
   \   000160   7D00         MOV     R5,#0x0
   \   000162   EE           MOV     A,R6
   \   000163   FA           MOV     R2,A
   \   000164   EF           MOV     A,R7
   \   000165   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000168   12....       LCALL   ?DEALLOC_XSTACK8
    201          
    202            if ( event == MAC_MLME_BEACON_NOTIFY_IND )
    203            {
    204              macMlmeBeaconNotifyInd_t *pBeacon = (macMlmeBeaconNotifyInd_t*)msgPtr;
    205          
    206              osal_memcpy(pBeacon+1, pBeacon->pPanDesc, sizeof(macPanDesc_t));
    207              pBeacon->pPanDesc = (macPanDesc_t *)(pBeacon+1);
   \   00016B   85..82       MOV     DPL,?V0 + 4
   \   00016E   85..83       MOV     DPH,?V0 + 5
   \   000171   A3           INC     DPTR
   \   000172   A3           INC     DPTR
   \   000173   A3           INC     DPTR
   \   000174   EE           MOV     A,R6
   \   000175   F0           MOVX    @DPTR,A
   \   000176   A3           INC     DPTR
   \   000177   EF           MOV     A,R7
   \   000178   F0           MOVX    @DPTR,A
    208              osal_memcpy(pBeacon->pPanDesc+1, pBeacon->pSdu, pBeacon->sduLength);
   \   000179                ; Setup parameters for call to function osal_memcpy
   \   000179   85..82       MOV     DPL,?V0 + 4
   \   00017C   85..83       MOV     DPH,?V0 + 5
   \   00017F   A3           INC     DPTR
   \   000180   A3           INC     DPTR
   \   000181   A3           INC     DPTR
   \   000182   A3           INC     DPTR
   \   000183   A3           INC     DPTR
   \   000184   A3           INC     DPTR
   \   000185   A3           INC     DPTR
   \   000186   A3           INC     DPTR
   \   000187   A3           INC     DPTR
   \   000188   12....       LCALL   ??Subroutine6_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   00018B   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00018E   85..82       MOV     DPL,?V0 + 4
   \   000191   85..83       MOV     DPH,?V0 + 5
   \   000194   A3           INC     DPTR
   \   000195   A3           INC     DPTR
   \   000196   A3           INC     DPTR
   \   000197   A3           INC     DPTR
   \   000198   A3           INC     DPTR
   \   000199   A3           INC     DPTR
   \   00019A   A3           INC     DPTR
   \   00019B   A3           INC     DPTR
   \   00019C   E0           MOVX    A,@DPTR
   \   00019D   FC           MOV     R4,A
   \   00019E   7D00         MOV     R5,#0x0
   \   0001A0   85..82       MOV     DPL,?V0 + 4
   \   0001A3   85..83       MOV     DPH,?V0 + 5
   \   0001A6   A3           INC     DPTR
   \   0001A7   A3           INC     DPTR
   \   0001A8   A3           INC     DPTR
   \   0001A9   E0           MOVX    A,@DPTR
   \   0001AA   2421         ADD     A,#0x21
   \   0001AC   FA           MOV     R2,A
   \   0001AD   A3           INC     DPTR
   \   0001AE   E0           MOVX    A,@DPTR
   \   0001AF   3400         ADDC    A,#0x0
   \   0001B1   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   0001B4   12....       LCALL   ?DEALLOC_XSTACK8
    209              pBeacon->pSdu = (uint8 *)(pBeacon->pPanDesc+1);
   \   0001B7   85..82       MOV     DPL,?V0 + 4
   \   0001BA   85..83       MOV     DPH,?V0 + 5
   \   0001BD   A3           INC     DPTR
   \   0001BE   A3           INC     DPTR
   \   0001BF   A3           INC     DPTR
   \   0001C0   E0           MOVX    A,@DPTR
   \   0001C1   2421         ADD     A,#0x21
   \   0001C3   F8           MOV     R0,A
   \   0001C4   A3           INC     DPTR
   \   0001C5   E0           MOVX    A,@DPTR
   \   0001C6   3400         ADDC    A,#0x0
   \   0001C8   F9           MOV     R1,A
   \   0001C9   85..82       MOV     DPL,?V0 + 4
   \   0001CC   85..83       MOV     DPH,?V0 + 5
   \   0001CF   A3           INC     DPTR
   \   0001D0   A3           INC     DPTR
   \   0001D1   A3           INC     DPTR
   \   0001D2   A3           INC     DPTR
   \   0001D3   A3           INC     DPTR
   \   0001D4   A3           INC     DPTR
   \   0001D5   A3           INC     DPTR
   \   0001D6   A3           INC     DPTR
   \   0001D7   A3           INC     DPTR
   \   0001D8   E8           MOV     A,R0
   \   0001D9   F0           MOVX    @DPTR,A
   \   0001DA   A3           INC     DPTR
   \   0001DB   E9           MOV     A,R1
   \   0001DC   807F         SJMP    ??MAC_CbackEvent_15
    210            }
    211            else if (event == MAC_MLME_SCAN_CNF)
   \                     ??MAC_CbackEvent_14:
   \   0001DE   7407         MOV     A,#0x7
   \   0001E0   65..         XRL     A,?V0 + 3
   \   0001E2   707A         JNZ     ??MAC_CbackEvent_6
    212            {
    213              macMlmeScanCnf_t *pScan = (macMlmeScanCnf_t*)msgPtr;
    214          
    215              if (ZMac_ScanBuf != NULL)
   \   0001E4   90....       MOV     DPTR,#ZMac_ScanBuf
   \   0001E7   E0           MOVX    A,@DPTR
   \   0001E8   F8           MOV     R0,A
   \   0001E9   A3           INC     DPTR
   \   0001EA   E0           MOVX    A,@DPTR
   \   0001EB   F9           MOV     R1,A
   \   0001EC   E8           MOV     A,R0
   \   0001ED   49           ORL     A,R1
   \   0001EE   606E         JZ      ??MAC_CbackEvent_6
    216              {
    217                if (pScan->scanType == ZMAC_ED_SCAN)
   \   0001F0   85..82       MOV     DPL,?V0 + 4
   \   0001F3   85..83       MOV     DPH,?V0 + 5
   \   0001F6   A3           INC     DPTR
   \   0001F7   A3           INC     DPTR
   \   0001F8   E0           MOVX    A,@DPTR
   \   0001F9   85..82       MOV     DPL,?V0 + 4
   \   0001FC   85..83       MOV     DPH,?V0 + 5
   \   0001FF   A3           INC     DPTR
   \   000200   A3           INC     DPTR
   \   000201   A3           INC     DPTR
   \   000202   A3           INC     DPTR
   \   000203   A3           INC     DPTR
   \   000204   A3           INC     DPTR
   \   000205   A3           INC     DPTR
   \   000206   A3           INC     DPTR
   \   000207   A3           INC     DPTR
   \   000208   701F         JNZ     ??MAC_CbackEvent_16
    218                {
    219                  pScan->result.pEnergyDetect = (uint8*) (pScan + 1);
   \   00020A   12....       LCALL   ?Subroutine1 & 0xFFFF
    220                  osal_memcpy(pScan->result.pEnergyDetect, ZMac_ScanBuf, ZMAC_ED_SCAN_MAXCHANNELS);
    221                }
   \                     ??CrossCallReturnLabel_8:
   \   00020D   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000210   7C1B         MOV     R4,#0x1b
   \   000212   7D00         MOV     R5,#0x0
   \   000214   85..82       MOV     DPL,?V0 + 4
   \   000217   85..83       MOV     DPH,?V0 + 5
   \   00021A   A3           INC     DPTR
   \   00021B   A3           INC     DPTR
   \   00021C   A3           INC     DPTR
   \   00021D   A3           INC     DPTR
   \   00021E   A3           INC     DPTR
   \   00021F   A3           INC     DPTR
   \   000220   A3           INC     DPTR
   \   000221   A3           INC     DPTR
   \   000222   A3           INC     DPTR
   \   000223   E0           MOVX    A,@DPTR
   \   000224   FA           MOV     R2,A
   \   000225   A3           INC     DPTR
   \   000226   E0           MOVX    A,@DPTR
   \   000227   801F         SJMP    ??MAC_CbackEvent_17
    222                else
    223                {
    224                  pScan->result.pPanDescriptor = (macPanDesc_t*) (pScan + 1);
   \                     ??MAC_CbackEvent_16:
   \   000229   12....       LCALL   ?Subroutine1 & 0xFFFF
    225                  osal_memcpy(pScan + 1, ZMac_ScanBuf, sizeof( ZMacPanDesc_t ) * pScan->resultListSize);
    226                }
   \                     ??CrossCallReturnLabel_9:
   \   00022C   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00022F   85..82       MOV     DPL,?V0 + 4
   \   000232   85..83       MOV     DPH,?V0 + 5
   \   000235   A3           INC     DPTR
   \   000236   A3           INC     DPTR
   \   000237   A3           INC     DPTR
   \   000238   A3           INC     DPTR
   \   000239   A3           INC     DPTR
   \   00023A   A3           INC     DPTR
   \   00023B   A3           INC     DPTR
   \   00023C   A3           INC     DPTR
   \   00023D   E0           MOVX    A,@DPTR
   \   00023E   75F021       MOV     B,#0x21
   \   000241   A4           MUL     AB
   \   000242   FC           MOV     R4,A
   \   000243   ADF0         MOV     R5,B
   \   000245   EE           MOV     A,R6
   \   000246   FA           MOV     R2,A
   \   000247   EF           MOV     A,R7
   \                     ??MAC_CbackEvent_17:
   \   000248   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   00024B   12....       LCALL   ?DEALLOC_XSTACK8
    227          
    228                osal_mem_free(ZMac_ScanBuf);
   \   00024E                ; Setup parameters for call to function osal_mem_free
   \   00024E   90....       MOV     DPTR,#ZMac_ScanBuf
   \   000251   12....       LCALL   ??Subroutine7_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000254   12....       LCALL   ??osal_mem_free?relay
    229                ZMac_ScanBuf = NULL;
   \   000257   90....       MOV     DPTR,#ZMac_ScanBuf
   \   00025A   E4           CLR     A
   \   00025B   F0           MOVX    @DPTR,A
   \   00025C   A3           INC     DPTR
   \                     ??MAC_CbackEvent_15:
   \   00025D   F0           MOVX    @DPTR,A
    230              }
    231            }
    232          
    233            if ( ( pZMac_AppCallback == NULL ) || ( pZMac_AppCallback( (uint8 *)msgPtr ) == FALSE ) )
   \                     ??MAC_CbackEvent_6:
   \   00025E   90....       MOV     DPTR,#pZMac_AppCallback
   \   000261   E0           MOVX    A,@DPTR
   \   000262   F8           MOV     R0,A
   \   000263   A3           INC     DPTR
   \   000264   E0           MOVX    A,@DPTR
   \   000265   F9           MOV     R1,A
   \   000266   E8           MOV     A,R0
   \   000267   49           ORL     A,R1
   \   000268   600F         JZ      ??MAC_CbackEvent_18
   \   00026A                ; Setup parameters for indirect call
   \   00026A   AA..         MOV     R2,?V0 + 4
   \   00026C   AB..         MOV     R3,?V0 + 5
   \   00026E   E0           MOVX    A,@DPTR
   \   00026F   F583         MOV     DPH,A
   \   000271   8882         MOV     DPL,R0
   \   000273   12....       LCALL   ?CALL_IND
   \   000276   E9           MOV     A,R1
   \   000277   700C         JNZ     ??MAC_CbackEvent_19
    234            {
    235              // Application hasn't already processed this message. Send it to NWK task.
    236              osal_msg_send( NWK_TaskID, (uint8 *)msgPtr );
   \                     ??MAC_CbackEvent_18:
   \   000279                ; Setup parameters for call to function osal_msg_send
   \   000279   AA..         MOV     R2,?V0 + 4
   \   00027B   AB..         MOV     R3,?V0 + 5
   \   00027D   90....       MOV     DPTR,#NWK_TaskID
   \   000280   E0           MOVX    A,@DPTR
   \   000281   F9           MOV     R1,A
   \   000282   12....       LCALL   ??osal_msg_send?relay
    237            }
    238          
    239            if ( event == MAC_MCPS_DATA_CNF )
   \                     ??MAC_CbackEvent_19:
   \   000285   740C         MOV     A,#0xc
   \   000287   65..         XRL     A,?V0 + 3
   \   000289   7006         JNZ     ??MAC_CbackEvent_0
    240            {
    241              // If the application needs 'pDataReq' then we cannot free it here.
    242              // The application must free it after using it. Note that 'pDataReq'
    243              // is of macMcpsDataReq_t (and not ZMacDataReq_t) type.
    244              
    245              /* mark MAC data buffer as reserved so that MAC won't deallocate it */
    246              macMainReserve( (uint8 *)pData->dataCnf.pDataReq );
   \   00028B                ; Setup parameters for call to function macMainReserve
   \   00028B   12....       LCALL   ?Subroutine0 & 0xFFFF
    247              osal_msg_deallocate( (uint8*)pData->dataCnf.pDataReq );
    248            }
   \                     ??CrossCallReturnLabel_1:
   \   00028E   12....       LCALL   ??osal_msg_deallocate?relay
   \                     ??MAC_CbackEvent_0:
   \   000291   7402         MOV     A,#0x2
   \   000293   12....       LCALL   ?DEALLOC_XSTACK8
   \   000296   7F08         MOV     R7,#0x8
   \   000298   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   00029B                REQUIRE _A_IEN0
    249          #endif
    250          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   FB           MOV     R3,A
   \   000001                REQUIRE ??Subroutine5_0
   \   000001                ; // Fall through to label ??Subroutine5_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine5_0:
   \   000000   12....       LCALL   ??osal_memcpy?relay
   \   000003   7403         MOV     A,#0x3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   12....       LCALL   ??Subroutine7_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000009   12....       LCALL   ??osal_msg_allocate?relay
   \   00000C   8A..         MOV     ?V0 + 4,R2
   \   00000E   8B..         MOV     ?V0 + 5,R3
   \   000010   EA           MOV     A,R2
   \   000011   45..         ORL     A,?V0 + 5
   \   000013   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   EE           MOV     A,R6
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   EF           MOV     A,R7
   \   000004   F0           MOVX    @DPTR,A
   \   000005                ; Setup parameters for call to function osal_memcpy
   \   000005                ; Setup parameters for call to function osal_memcpy
   \   000005   90....       MOV     DPTR,#ZMac_ScanBuf
   \   000008                REQUIRE ??Subroutine6_0
   \   000008                ; // Fall through to label ??Subroutine6_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine6_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 0,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 1,A
   \   000007   78..         MOV     R0,#?V0 + 0
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000003   12....       LCALL   ??macMainReserve?relay
   \   000006                ; Setup parameters for call to function osal_msg_deallocate
   \   000006                ; Setup parameters for call to function osal_msg_deallocate
   \   000006   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   85..82       MOV     DPL,?V0 + 6
   \   000003   85..83       MOV     DPH,?V0 + 7
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009                REQUIRE ??Subroutine7_0
   \   000009                ; // Fall through to label ??Subroutine7_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine7_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   22           RET
    251          #else  // ifdef MT_MAC_CB_FUNC
    252          {
    253            /* Check if MT has subscribed for this callback If so, pass it as an event to MonitorTest */
    254            switch (pData->hdr.event)
    255            {
    256              case MAC_MLME_ASSOCIATE_IND:
    257                if ( _macCallbackSub & CB_ID_NWK_ASSOCIATE_IND )
    258                  nwk_MTCallbackSubNwkAssociateInd ( (ZMacAssociateInd_t *)pData );
    259                break;
    260          
    261              case MAC_MLME_ASSOCIATE_CNF:
    262                if ( _macCallbackSub & CB_ID_NWK_ASSOCIATE_CNF )
    263                  nwk_MTCallbackSubNwkAssociateCnf ( (ZMacAssociateCnf_t *)pData );
    264                break;
    265          
    266              case MAC_MLME_DISASSOCIATE_IND:
    267                if ( _macCallbackSub & CB_ID_NWK_DISASSOCIATE_IND )
    268                  nwk_MTCallbackSubNwkDisassociateInd ( (ZMacDisassociateInd_t *)pData );
    269                break;
    270          
    271              case MAC_MLME_DISASSOCIATE_CNF:
    272                if ( _macCallbackSub & CB_ID_NWK_DISASSOCIATE_CNF )
    273                  nwk_MTCallbackSubNwkDisassociateCnf ( (ZMacDisassociateCnf_t *)pData );
    274                break;
    275          
    276              case MAC_MLME_BEACON_NOTIFY_IND:
    277                if ( _macCallbackSub & CB_ID_NWK_BEACON_NOTIFY_IND )
    278                  nwk_MTCallbackSubNwkBeaconNotifyInd( (ZMacBeaconNotifyInd_t *)pData );
    279                break;
    280          
    281              case MAC_MLME_ORPHAN_IND:
    282                if ( _macCallbackSub & CB_ID_NWK_ORPHAN_IND )
    283                  nwk_MTCallbackSubNwkOrphanInd( (ZMacOrphanInd_t *) pData );
    284                break;
    285          
    286              case MAC_MLME_SCAN_CNF:
    287                if ( _macCallbackSub & CB_ID_NWK_SCAN_CNF )
    288                {
    289                  pData->scanCnf.result.pEnergyDetect = ZMac_ScanBuf;
    290                  nwk_MTCallbackSubNwkScanCnf ( (ZMacScanCnf_t *) pData );
    291                }
    292          
    293                if (ZMac_ScanBuf != NULL)
    294                {
    295                  osal_mem_free(ZMac_ScanBuf);
    296                  ZMac_ScanBuf = NULL;
    297                }
    298                break;
    299          
    300              case MAC_MLME_START_CNF:
    301                if ( _macCallbackSub & CB_ID_NWK_START_CNF )
    302                  nwk_MTCallbackSubNwkStartCnf ( pData->hdr.status );
    303                break;
    304          
    305              case MAC_MLME_SYNC_LOSS_IND:
    306                if ( _macCallbackSub & CB_ID_NWK_SYNC_LOSS_IND )
    307                 nwk_MTCallbackSubNwkSyncLossInd( (ZMacSyncLossInd_t *) pData );
    308                break;
    309          
    310              case MAC_MLME_POLL_CNF:
    311                if ( _macCallbackSub & CB_ID_NWK_POLL_CNF )
    312                   nwk_MTCallbackSubNwkPollCnf( pData->hdr.status );
    313                break;
    314          
    315              case MAC_MLME_COMM_STATUS_IND:
    316                if ( _macCallbackSub & CB_ID_NWK_COMM_STATUS_IND )
    317                  nwk_MTCallbackSubCommStatusInd ( (ZMacCommStatusInd_t *) pData );
    318                break;
    319          
    320              case MAC_MCPS_DATA_CNF:
    321                /* mark MAC data buffer as reserved so that MAC won't deallocate it */
    322                macMainReserve( (uint8 *)pData->dataCnf.pDataReq );
    323                
    324                osal_msg_deallocate((uint8*)pData->dataCnf.pDataReq);
    325          
    326                if ( _macCallbackSub & CB_ID_NWK_DATA_CNF )
    327                  nwk_MTCallbackSubNwkDataCnf( (ZMacDataCnf_t *) pData );
    328                break;
    329          
    330              case MAC_MCPS_DATA_IND:
    331                  {
    332                    /*
    333                       Data Ind is unconventional: to save an alloc/copy, reuse the MAC
    334                       buffer and re-organize the contents into ZMAC format.
    335                    */
    336                    ZMacDataInd_t *pDataInd = (ZMacDataInd_t *) pData;
    337                    uint8 event, status, len, *msdu;
    338          
    339                    /* Store parameters */
    340                    event = pData->hdr.event;
    341                    status = pData->hdr.status;
    342                    len = pData->dataInd.msdu.len;
    343                    msdu = pData->dataInd.msdu.p;
    344          
    345                    /* Copy header */
    346                    osal_memcpy(&pDataInd->SrcAddr, &pData->dataInd.mac, sizeof(ZMacDataInd_t) - sizeof(ZMacEventHdr_t));
    347          
    348                    /* Security - set to zero for now*/
    349                    pDataInd->Sec.SecurityLevel = false;
    350          
    351                    /* Restore parameters */
    352                    pDataInd->hdr.Status = status;
    353                    pDataInd->hdr.Event = event;
    354                    pDataInd->msduLength = len;
    355          
    356                    if (len)
    357                      pDataInd->msdu = msdu;
    358                    else
    359                      pDataInd->msdu = NULL;
    360          
    361                    if ( _macCallbackSub & CB_ID_NWK_DATA_IND )
    362                      nwk_MTCallbackSubNwkDataInd ( pDataInd );
    363          
    364                    /* free buffer */
    365                    osal_msg_deallocate( (uint8 *) pData );
    366                  }
    367                  break;
    368          
    369              case MAC_MCPS_PURGE_CNF:
    370                if ( _macCallbackSub & CB_ID_NWK_PURGE_CNF )
    371                  nwk_MTCallbackSubNwkPurgeCnf( (ZMacPurgeCnf_t *) pData);
    372                break;
    373          
    374              default:
    375                break;
    376            }
    377          }
    378          #endif
    379          
    380          /********************************************************************************************************
    381           * @fn      MAC_CbackCheckPending
    382           *
    383           * @brief   Return number of pending indirect msg
    384           *
    385           * @param   None
    386           *
    387           * @return  Number of indirect msg holding
    388           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    389          uint8 MAC_CbackCheckPending(void)
   \                     MAC_CbackCheckPending:
    390          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    391          #if !defined (NONWK) 
    392            if ( ZSTACK_ROUTER_BUILD )
    393            {
    394              return (nwkDB_ReturnIndirectHoldingCnt());
    395            }
    396            else 
    397            {
    398              return (0);
   \   000000   7900         MOV     R1,#0x0
   \   000002   02....       LJMP    ?BRET
    399            }
    400          #else
    401            return (0);
    402          #endif
    403          }

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MAC_CbackEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MAC_CbackEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MAC_CbackCheckPending?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MAC_CbackCheckPending

   Maximum stack usage in bytes:

     Function                 ISTACK PSTACK XSTACK
     --------                 ------ ------ ------
     MAC_CbackCheckPending        0      0      0
     MAC_CbackEvent               0      0     21
       -> MAC_MlmeGetReq          0      0     36
       -> osal_msg_deallocate     0      0     36
       -> osal_msg_allocate       0      0     36
       -> macMainReserve          0      0     36
       -> osal_msg_deallocate     0      0     36
       -> osal_msg_allocate       0      0     36
       -> osal_memcpy             0      0     42
       -> osal_memcpy             0      0     42
       -> osal_memcpy             0      0     42
       -> osal_memcpy             0      0     42
       -> osal_memcpy             0      0     42
       -> osal_mem_free           0      0     36
       -> osal_msg_send           0      0     36
       -> macMainReserve          0      0     36
       -> osal_msg_deallocate     0      0     36


   Segment part sizes:

     Function/Label                Bytes
     --------------                -----
     _A_IEN0                          1
     zmacCBSizeTable                 17
     pZMac_AppCallback                2
     MAC_CbackEvent                 667
     ?Subroutine3                     1
     ??Subroutine5_0                  6
     ?Subroutine2                    20
     ?Subroutine1                     8
     ??Subroutine6_0                 10
     ?Subroutine0                    10
     ?Subroutine4                     9
     ??Subroutine7_0                  6
     MAC_CbackCheckPending            5
     ??MAC_CbackEvent?relay           6
     ??MAC_CbackCheckPending?relay    6

 
 742 bytes in segment BANKED_CODE
  12 bytes in segment BANK_RELAYS
  17 bytes in segment CODE_C
   1 byte  in segment SFR_AN
   2 bytes in segment XDATA_Z
 
 771 bytes of CODE  memory
   0 bytes of DATA  memory (+ 1 byte shared)
   2 bytes of XDATA memory

Errors: none
Warnings: none
