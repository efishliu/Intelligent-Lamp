///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.1.10194/W32 for 8051        11/Jul/2018  09:38:09 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  E:\123\´óÈý\Éú²úÊµÏ°\WSN_ZigBee_ÐÞ¸Ä\WSN_ZigBee_Ð /
//                          Þ¸Ä\Components\hal\target\CC2530EB\hal_sleep.c    /
//    Command line       =  -f E:\123\´óÈý\Éú²úÊµÏ°\WSN_ZigBee_ÐÞ¸Ä\WSN_ZigBe /
//                          e_ÐÞ¸Ä\Projects\zstack\Utilities\SerialApp\CC2530 /
//                          DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg           /
//                          (-DCPU32MHZ -DROOT=__near_func                    /
//                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                  /
//                          -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS) -f      /
//                          E:\123\´óÈý\Éú²úÊµÏ°\WSN_ZigBee_ÐÞ¸Ä\WSN_ZigBee_Ð /
//                          Þ¸Ä\Projects\zstack\Utilities\SerialApp\CC2530DB\ /
//                          ..\..\..\Tools\CC2530DB\f8wConfig.cfg             /
//                          (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR     /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xfFF1                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          "-DCONST=const __code" -DGENERIC=__generic        /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 E:\123\´óÈý\Éú²úÊµÏ°\WSN_Z /
//                          igBee_ÐÞ¸Ä\WSN_ZigBee_ÐÞ¸Ä\Components\hal\target\ /
//                          CC2530EB\hal_sleep.c -D ZIGBEEPRO -D              /
//                          HAL_UART=TRUE -D SERIAL_APP_PORT=0 -D             /
//                          LCD_SUPPORTED -D NV_RESTORE -lC                   /
//                          E:\123\´óÈý\Éú²úÊµÏ°\WSN_ZigBee_ÐÞ¸Ä\WSN_ZigBee_Ð /
//                          Þ¸Ä\Projects\zstack\Utilities\SerialApp\CC2530DB\ /
//                          CoordinatorEB-Pro\List\ -lA                       /
//                          E:\123\´óÈý\Éú²úÊµÏ°\WSN_ZigBee_ÐÞ¸Ä\WSN_ZigBee_Ð /
//                          Þ¸Ä\Projects\zstack\Utilities\SerialApp\CC2530DB\ /
//                          CoordinatorEB-Pro\List\ --diag_suppress           /
//                          Pe001,Pa010 -o E:\123\´óÈý\Éú²úÊµÏ°\WSN_ZigBee_ÐÞ /
//                          ¸Ä\WSN_ZigBee_ÐÞ¸Ä\Projects\zstack\Utilities\Seri /
//                          alApp\CC2530DB\CoordinatorEB-Pro\Obj\ -e --debug  /
//                          --core=plain --dptr=16,1 --data_model=large       /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 8 -I E:\123\´óÈý\Éú²úÊµÏ°\WSN_Z /
//                          igBee_ÐÞ¸Ä\WSN_ZigBee_ÐÞ¸Ä\Projects\zstack\Utilit /
//                          ies\SerialApp\CC2530DB\ -I                        /
//                          E:\123\´óÈý\Éú²úÊµÏ°\WSN_ZigBee_ÐÞ¸Ä\WSN_ZigBee_Ð /
//                          Þ¸Ä\Projects\zstack\Utilities\SerialApp\CC2530DB\ /
//                          ..\SOURCE\ -I E:\123\´óÈý\Éú²úÊµÏ°\WSN_ZigBee_ÐÞ¸ /
//                          Ä\WSN_ZigBee_ÐÞ¸Ä\Projects\zstack\Utilities\Seria /
//                          lApp\CC2530DB\..\..\..\ZMAIN\TI2530DB\ -I         /
//                          E:\123\´óÈý\Éú²úÊµÏ°\WSN_ZigBee_ÐÞ¸Ä\WSN_ZigBee_Ð /
//                          Þ¸Ä\Projects\zstack\Utilities\SerialApp\CC2530DB\ /
//                          ..\..\..\..\..\COMPONENTS\MT\ -I                  /
//                          E:\123\´óÈý\Éú²úÊµÏ°\WSN_ZigBee_ÐÞ¸Ä\WSN_ZigBee_Ð /
//                          Þ¸Ä\Projects\zstack\Utilities\SerialApp\CC2530DB\ /
//                          ..\..\..\..\..\COMPONENTS\HAL\INCLUDE\ -I         /
//                          E:\123\´óÈý\Éú²úÊµÏ°\WSN_ZigBee_ÐÞ¸Ä\WSN_ZigBee_Ð /
//                          Þ¸Ä\Projects\zstack\Utilities\SerialApp\CC2530DB\ /
//                          ..\..\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\    /
//                          -I E:\123\´óÈý\Éú²úÊµÏ°\WSN_ZigBee_ÐÞ¸Ä\WSN_ZigBe /
//                          e_ÐÞ¸Ä\Projects\zstack\Utilities\SerialApp\CC2530 /
//                          DB\..\..\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\ -I   /
//                          E:\123\´óÈý\Éú²úÊµÏ°\WSN_ZigBee_ÐÞ¸Ä\WSN_ZigBee_Ð /
//                          Þ¸Ä\Projects\zstack\Utilities\SerialApp\CC2530DB\ /
//                          ..\..\..\..\..\COMPONENTS\OSAL\INCLUDE\ -I        /
//                          E:\123\´óÈý\Éú²úÊµÏ°\WSN_ZigBee_ÐÞ¸Ä\WSN_ZigBee_Ð /
//                          Þ¸Ä\Projects\zstack\Utilities\SerialApp\CC2530DB\ /
//                          ..\..\..\..\..\COMPONENTS\STACK\AF\ -I            /
//                          E:\123\´óÈý\Éú²úÊµÏ°\WSN_ZigBee_ÐÞ¸Ä\WSN_ZigBee_Ð /
//                          Þ¸Ä\Projects\zstack\Utilities\SerialApp\CC2530DB\ /
//                          ..\..\..\..\..\COMPONENTS\STACK\NWK\ -I           /
//                          E:\123\´óÈý\Éú²úÊµÏ°\WSN_ZigBee_ÐÞ¸Ä\WSN_ZigBee_Ð /
//                          Þ¸Ä\Projects\zstack\Utilities\SerialApp\CC2530DB\ /
//                          ..\..\..\..\..\COMPONENTS\STACK\SEC\ -I           /
//                          E:\123\´óÈý\Éú²úÊµÏ°\WSN_ZigBee_ÐÞ¸Ä\WSN_ZigBee_Ð /
//                          Þ¸Ä\Projects\zstack\Utilities\SerialApp\CC2530DB\ /
//                          ..\..\..\..\..\COMPONENTS\STACK\SAPI\ -I          /
//                          E:\123\´óÈý\Éú²úÊµÏ°\WSN_ZigBee_ÐÞ¸Ä\WSN_ZigBee_Ð /
//                          Þ¸Ä\Projects\zstack\Utilities\SerialApp\CC2530DB\ /
//                          ..\..\..\..\..\COMPONENTS\STACK\SYS\ -I           /
//                          E:\123\´óÈý\Éú²úÊµÏ°\WSN_ZigBee_ÐÞ¸Ä\WSN_ZigBee_Ð /
//                          Þ¸Ä\Projects\zstack\Utilities\SerialApp\CC2530DB\ /
//                          ..\..\..\..\..\COMPONENTS\STACK\ZDO\ -I           /
//                          E:\123\´óÈý\Éú²úÊµÏ°\WSN_ZigBee_ÐÞ¸Ä\WSN_ZigBee_Ð /
//                          Þ¸Ä\Projects\zstack\Utilities\SerialApp\CC2530DB\ /
//                          ..\..\..\..\..\COMPONENTS\ZMAC\F8W\ -I            /
//                          E:\123\´óÈý\Éú²úÊµÏ°\WSN_ZigBee_ÐÞ¸Ä\WSN_ZigBee_Ð /
//                          Þ¸Ä\Projects\zstack\Utilities\SerialApp\CC2530DB\ /
//                          ..\..\..\..\..\COMPONENTS\ZMAC\ -I                /
//                          E:\123\´óÈý\Éú²úÊµÏ°\WSN_ZigBee_ÐÞ¸Ä\WSN_ZigBee_Ð /
//                          Þ¸Ä\Projects\zstack\Utilities\SerialApp\CC2530DB\ /
//                          ..\..\..\..\..\COMPONENTS\SERVICES\SADDR\ -I      /
//                          E:\123\´óÈý\Éú²úÊµÏ°\WSN_ZigBee_ÐÞ¸Ä\WSN_ZigBee_Ð /
//                          Þ¸Ä\Projects\zstack\Utilities\SerialApp\CC2530DB\ /
//                          ..\..\..\..\..\COMPONENTS\SERVICES\SDATA\ -I      /
//                          E:\123\´óÈý\Éú²úÊµÏ°\WSN_ZigBee_ÐÞ¸Ä\WSN_ZigBee_Ð /
//                          Þ¸Ä\Projects\zstack\Utilities\SerialApp\CC2530DB\ /
//                          ..\..\..\..\..\COMPONENTS\MAC\INCLUDE\ -I         /
//                          E:\123\´óÈý\Éú²úÊµÏ°\WSN_ZigBee_ÐÞ¸Ä\WSN_ZigBee_Ð /
//                          Þ¸Ä\Projects\zstack\Utilities\SerialApp\CC2530DB\ /
//                          ..\..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\ -I      /
//                          E:\123\´óÈý\Éú²úÊµÏ°\WSN_ZigBee_ÐÞ¸Ä\WSN_ZigBee_Ð /
//                          Þ¸Ä\Projects\zstack\Utilities\SerialApp\CC2530DB\ /
//                          ..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\    /
//                          -I E:\123\´óÈý\Éú²úÊµÏ°\WSN_ZigBee_ÐÞ¸Ä\WSN_ZigBe /
//                          e_ÐÞ¸Ä\Projects\zstack\Utilities\SerialApp\CC2530 /
//                          DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\ /
//                          SINGLE_CHIP\ -Ohz --require_prototypes            /
//    List file          =  E:\123\´óÈý\Éú²úÊµÏ°\WSN_ZigBee_ÐÞ¸Ä\WSN_ZigBee_Ð /
//                          Þ¸Ä\Projects\zstack\Utilities\SerialApp\CC2530DB\ /
//                          CoordinatorEB-Pro\List\hal_sleep.s51              /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME hal_sleep

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?INTERRUPT_ENTER_XSP
        EXTERN ?INTERRUPT_LEAVE_XSP
        EXTERN ?L_ADD_TO_X
        EXTERN ?L_ADD_X
        EXTERN ?L_AND_X
        EXTERN ?L_MOV_TO_X
        EXTERN ?L_MOV_X
        EXTERN ?L_MUL
        EXTERN ?L_SUB_X
        EXTERN ?UL_GE_X
        EXTERN ?UL_GT_X
        EXTERN ?UL_SHR
        EXTERN ?V0
        EXTERN ?XLOAD_R2345
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTORE_R2345
        EXTERN __INIT_XDATA_Z

        PUBLIC ??HalTimerElapsed?relay
        FUNCTION ??HalTimerElapsed?relay,0203H
        PUBLIC ??TimerElapsed?relay
        FUNCTION ??TimerElapsed?relay,0203H
        PUBLIC ??halRestoreSleepLevel?relay
        FUNCTION ??halRestoreSleepLevel?relay,0203H
        FUNCTION ??halSetSleepMode?relay,0203H
        PUBLIC ??halSleep?relay
        FUNCTION ??halSleep?relay,0203H
        PUBLIC ??halSleepSetTimer?relay
        FUNCTION ??halSleepSetTimer?relay,0203H
        PUBWEAK `??halSleepTimerIsr??INTVEC 43`
        PUBLIC ??halSleepWait?relay
        FUNCTION ??halSleepWait?relay,0203H
        PUBLIC HalTimerElapsed
        FUNCTION HalTimerElapsed,0203H
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 20, STACK
        PUBWEAK IEN2
        PUBWEAK PCON
        PUBWEAK SLEEPCMD
        PUBWEAK ST0
        PUBWEAK ST1
        PUBWEAK ST2
        PUBWEAK STLOAD
        PUBLIC TimerElapsed
        FUNCTION TimerElapsed,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBWEAK _A_IEN0
        PUBWEAK _A_IEN1
        PUBWEAK _A_IRCON
        PUBWEAK __Constant_0
        PUBWEAK __Constant_11
        PUBWEAK __Constant_185196
        PUBWEAK __Constant_185197
        PUBWEAK __Constant_1f
        PUBWEAK __Constant_29f
        PUBWEAK __Constant_2d
        PUBWEAK __Constant_64
        PUBWEAK __Constant_7d
        PUBWEAK __Constant_ffe7ae6a
        PUBWEAK __Constant_fff
        PUBWEAK __Constant_ffffff
        PUBWEAK __Constant_ffffffef
        PUBLIC halRestoreSleepLevel
        FUNCTION halRestoreSleepLevel,0203H
        ARGFRAME XSTACK, 0, STACK
        FUNCTION halSetSleepMode,080203H
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC halSleep
        FUNCTION halSleep,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 20, STACK
        PUBLIC halSleepSetTimer
        FUNCTION halSleepSetTimer,0203H
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 20, STACK
        PUBLIC halSleepTimerIsr
        FUNCTION halSleepTimerIsr,021233H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 15, STACK
        PUBLIC halSleepWait
        FUNCTION halSleepWait,080203H
        ARGFRAME XSTACK, 0, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
MAC_PwrNextTimeout  SYMBOL "MAC_PwrNextTimeout"
halAssertHandler    SYMBOL "halAssertHandler"
MAC_PwrOffReq       SYMBOL "MAC_PwrOffReq"
HalKeyEnterSleep    SYMBOL "HalKeyEnterSleep"
HalLedEnterSleep    SYMBOL "HalLedEnterSleep"
HalLedExitSleep     SYMBOL "HalLedExitSleep"
HalKeyExitSleep     SYMBOL "HalKeyExitSleep"
MAC_PwrOnReq        SYMBOL "MAC_PwrOnReq"
macMcuTimer2OverflowWorkaround SYMBOL "macMcuTimer2OverflowWorkaround"
??HalKeyEnterSleep?relay SYMBOL "?relay", HalKeyEnterSleep
??HalKeyExitSleep?relay SYMBOL "?relay", HalKeyExitSleep
??HalLedEnterSleep?relay SYMBOL "?relay", HalLedEnterSleep
??HalLedExitSleep?relay SYMBOL "?relay", HalLedExitSleep
??MAC_PwrNextTimeout?relay SYMBOL "?relay", MAC_PwrNextTimeout
??MAC_PwrOffReq?relay SYMBOL "?relay", MAC_PwrOffReq
??MAC_PwrOnReq?relay SYMBOL "?relay", MAC_PwrOnReq
??halAssertHandler?relay SYMBOL "?relay", halAssertHandler
??macMcuTimer2OverflowWorkaround?relay SYMBOL "?relay", macMcuTimer2OverflowWorkaround
HalTimerElapsed     SYMBOL "HalTimerElapsed"
??HalTimerElapsed?relay SYMBOL "?relay", HalTimerElapsed
TimerElapsed        SYMBOL "TimerElapsed"
??TimerElapsed?relay SYMBOL "?relay", TimerElapsed
halRestoreSleepLevel SYMBOL "halRestoreSleepLevel"
??halRestoreSleepLevel?relay SYMBOL "?relay", halRestoreSleepLevel
halSleep            SYMBOL "halSleep"
??halSleep?relay    SYMBOL "?relay", halSleep
halSleepSetTimer    SYMBOL "halSleepSetTimer"
??halSleepSetTimer?relay SYMBOL "?relay", halSleepSetTimer
halSleepTimerIsr    SYMBOL "halSleepTimerIsr"
`??halSleepTimerIsr??INTVEC 43` SYMBOL "??INTVEC 43", halSleepTimerIsr
halSleepWait        SYMBOL "halSleepWait"
??halSleepWait?relay SYMBOL "?relay", halSleepWait

        EXTERN MAC_PwrNextTimeout
        FUNCTION MAC_PwrNextTimeout,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN halAssertHandler
        FUNCTION halAssertHandler,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MAC_PwrOffReq
        FUNCTION MAC_PwrOffReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalKeyEnterSleep
        FUNCTION HalKeyEnterSleep,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedEnterSleep
        FUNCTION HalLedEnterSleep,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedExitSleep
        FUNCTION HalLedExitSleep,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalKeyExitSleep
        FUNCTION HalKeyExitSleep,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MAC_PwrOnReq
        FUNCTION MAC_PwrOnReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN macMcuTimer2OverflowWorkaround
        FUNCTION macMcuTimer2OverflowWorkaround,0202H
        ARGFRAME ISTACK, 15, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??HalKeyEnterSleep?relay
        FUNCTION ??HalKeyEnterSleep?relay,00H
        EXTERN ??HalKeyExitSleep?relay
        FUNCTION ??HalKeyExitSleep?relay,00H
        EXTERN ??HalLedEnterSleep?relay
        FUNCTION ??HalLedEnterSleep?relay,00H
        EXTERN ??HalLedExitSleep?relay
        FUNCTION ??HalLedExitSleep?relay,00H
        EXTERN ??MAC_PwrNextTimeout?relay
        FUNCTION ??MAC_PwrNextTimeout?relay,00H
        EXTERN ??MAC_PwrOffReq?relay
        FUNCTION ??MAC_PwrOffReq?relay,00H
        EXTERN ??MAC_PwrOnReq?relay
        FUNCTION ??MAC_PwrOnReq?relay,00H
        EXTERN ??halAssertHandler?relay
        FUNCTION ??halAssertHandler?relay,00H
        EXTERN ??macMcuTimer2OverflowWorkaround?relay
        FUNCTION ??macMcuTimer2OverflowWorkaround?relay,00H

// E:\123\´óÈý\Éú²úÊµÏ°\WSN_ZigBee_ÐÞ¸Ä\WSN_ZigBee_ÐÞ¸Ä\Components\hal\target\CC2530EB\hal_sleep.c
//    1 /**************************************************************************************************
//    2   Filename:       hal_sleep.c
//    3   Revised:        $Date: 2009-01-29 15:49:56 -0800 (Thu, 29 Jan 2009) $
//    4   Revision:       $Revision: 18906 $
//    5 
//    6   Description:    This module contains the HAL power management procedures for the CC2530.
//    7 
//    8 
//    9   Copyright 2006-2007 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License").  You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product.  Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 
//   40 /* ------------------------------------------------------------------------------------------------
//   41  *                                          Includes
//   42  * ------------------------------------------------------------------------------------------------
//   43  */
//   44 #include "hal_types.h"
//   45 #include "hal_mcu.h"

        ASEGN SFR_AN:DATA:NOROOT,087H
// unsigned char volatile __sfr PCON
PCON:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,095H
// unsigned char volatile __sfr ST0
ST0:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,096H
// unsigned char volatile __sfr ST1
ST1:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,097H
// unsigned char volatile __sfr ST2
ST2:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,09aH
// unsigned char volatile __sfr IEN2
IEN2:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0a8H
// union <unnamed> volatile __sfr _A_IEN0
_A_IEN0:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0adH
// unsigned char volatile __sfr STLOAD
STLOAD:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0b8H
// union <unnamed> volatile __sfr _A_IEN1
_A_IEN1:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0beH
// unsigned char volatile __sfr SLEEPCMD
SLEEPCMD:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0c0H
// union <unnamed> volatile __sfr _A_IRCON
_A_IRCON:
        DATA8
        DS 1
//   46 #include "hal_board.h"
//   47 #include "hal_sleep.h"
//   48 #include "hal_led.h"
//   49 #include "hal_key.h"
//   50 #include "mac_api.h"
//   51 #include "OSAL.h"
//   52 #include "OSAL_Timers.h"
//   53 #include "OSAL_Tasks.h"
//   54 #include "OSAL_PwrMgr.h"
//   55 #include "OnBoard.h"
//   56 #include "hal_drivers.h"
//   57 #include "hal_assert.h"
//   58 #include "mac_mcu.h"
//   59 
//   60 #if !defined (RTR_NWK) && defined (NWK_AUTO_POLL)
//   61 #include "nwk_globals.h"
//   62 #include "ZGlobals.h"
//   63 #endif
//   64 
//   65 /* ------------------------------------------------------------------------------------------------
//   66  *                                           Macros
//   67  * ------------------------------------------------------------------------------------------------
//   68  */
//   69 
//   70 /* POWER CONSERVATION DEFINITIONS
//   71  * Sleep mode H/W definitions (enabled with POWER_SAVING compile option)
//   72  */
//   73 #define CC2530_PM0            0  /* PM0, Clock oscillators on, voltage regulator on */
//   74 #define CC2530_PM1            1  /* PM1, 32.768 kHz oscillators on, voltage regulator on */
//   75 #define CC2530_PM2            2  /* PM2, 32.768 kHz oscillators on, voltage regulator off */
//   76 #define CC2530_PM3            3  /* PM3, All clock oscillators off, voltage regulator off */
//   77 
//   78 /* HAL power management mode is set according to the power management state. The default
//   79  * setting is HAL_SLEEP_OFF. The actual value is tailored to different HW platform. Both
//   80  * HAL_SLEEP_TIMER and HAL_SLEEP_DEEP selections will:
//   81  *   1. turn off the system clock, and
//   82  *   2. halt the MCU.
//   83  * HAL_SLEEP_TIMER can be woken up by sleep timer interrupt, I/O interrupt and reset.
//   84  * HAL_SLEEP_DEEP can be woken up by I/O interrupt and reset.
//   85  */
//   86 #define HAL_SLEEP_OFF         CC2530_PM0
//   87 #define HAL_SLEEP_TIMER       CC2530_PM2
//   88 #define HAL_SLEEP_DEEP        CC2530_PM3
//   89 
//   90 /* MAX_SLEEP_TIME calculation:
//   91  *   Sleep timer maximum duration = 0xFFFF7F / 32768 Hz = 511.996 seconds
//   92  *   Round it to 510 seconds or 510000 ms
//   93  */
//   94 #define MAX_SLEEP_TIME                   510000             /* maximum time to sleep allowed by ST */
//   95 
//   96 
//   97 /* minimum time to sleep, this macro is to:
//   98  * 1. avoid thrashing in-and-out of sleep with short OSAL timer (~2ms)
//   99  * 2. define minimum safe sleep period
//  100  */
//  101 #if !defined (PM_MIN_SLEEP_TIME)
//  102 #define PM_MIN_SLEEP_TIME                14                 /* default to minimum safe sleep time minimum CAP */
//  103 #endif
//  104 
//  105 /* The PCON instruction must be 4-byte aligned. The following code may cause excessive power
//  106  * consumption if not aligned. See linker file ".xcl" for actual placement.
//  107  */
//  108 #pragma location = "SLEEP_CODE"

        RSEG SLEEP_CODE:CODE:NOROOT(0)
//  109 static void halSetSleepMode(void)
halSetSleepMode:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function halSetSleepMode
        CODE
//  110 {
        ; Saved register size: 0
        ; Auto size: 0
//  111   PCON |= PCON_IDLE;
        ORL     0x87,#0x1
//  112   asm("NOP");
        NOP
//  113 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock0
        REQUIRE PCON
//  114 
//  115 /* This value is used to adjust the sleep timer compare value such that the sleep timer
//  116  * compare takes into account the amount of processing time spent in function halSleep().
//  117  * The first value is determined by measuring the number of sleep timer ticks it from
//  118  * the beginning of the function to entering sleep mode.  The second value is determined
//  119  * by measuring the number of sleep timer ticks from exit of sleep mode to the call to
//  120  * osal_adjust_timers().
//  121  */
//  122 #define HAL_SLEEP_ADJ_TICKS   (7 + 10)
//  123 
//  124 #ifndef HAL_SLEEP_DEBUG_POWER_MODE
//  125 /* set CC2530 power mode; always use PM2 */
//  126 #define HAL_SLEEP_SET_POWER_MODE(mode)       st( SLEEPCMD &= ~PMODE; /* clear mode bits */    \ 
//  127                                                  SLEEPCMD |= mode;   /* set mode bits   */    \ 
//  128                                                  while (!(STLOAD & LDRDY));                   \ 
//  129                                                  {                                            \ 
//  130                                                    halSetSleepMode();                         \ 
//  131                                                  }                                            \ 
//  132                                                )
//  133 #else
//  134 /* Debug: don't set power mode, just block until sleep timer interrupt */
//  135 #define HAL_SLEEP_SET_POWER_MODE(mode)      st( while(halSleepInt == FALSE); \ 
//  136                                                 halSleepInt = FALSE; )
//  137 #endif
//  138 
//  139 /* sleep and external interrupt port masks */
//  140 #define STIE_BV                             BV(5)
//  141 #define P0IE_BV                             BV(5)
//  142 #define P1IE_BV                             BV(4)
//  143 #define P2IE_BV                             BV(1)
//  144 
//  145 /* sleep timer interrupt control */
//  146 #define HAL_SLEEP_TIMER_ENABLE_INT()        st(IEN0 |= STIE_BV;)     /* enable sleep timer interrupt */
//  147 #define HAL_SLEEP_TIMER_DISABLE_INT()       st(IEN0 &= ~STIE_BV;)    /* disable sleep timer interrupt */
//  148 #define HAL_SLEEP_TIMER_CLEAR_INT()         st(IRCON &= ~0x80;)      /* clear sleep interrupt flag */
//  149 
//  150 /* backup interrupt enable registers before sleep */
//  151 #define HAL_SLEEP_IE_BACKUP_AND_DISABLE(ien0, ien1, ien2) st(ien0  = IEN0;    /* backup IEN0 register */ \ 
//  152                                                              ien1  = IEN1;    /* backup IEN1 register */ \ 
//  153                                                              ien2  = IEN2;    /* backup IEN2 register */ \ 
//  154                                                              IEN0 &= STIE_BV; /* disable IEN0 except STIE */ \ 
//  155                                                              IEN1 &= P0IE_BV; /* disable IEN1 except P0IE */ \ 
//  156                                                              IEN2 &= (P1IE_BV|P2IE_BV);) /* disable IEN2 except P1IE, P2IE */
//  157 
//  158 /* restore interrupt enable registers before sleep */
//  159 #define HAL_SLEEP_IE_RESTORE(ien0, ien1, ien2) st(IEN0 = ien0;   /* restore IEN0 register */ \ 
//  160                                                   IEN1 = ien1;   /* restore IEN1 register */ \ 
//  161                                                   IEN2 = ien2;)  /* restore IEN2 register */
//  162 
//  163 /* convert msec to 320 usec units with round */
//  164 #define HAL_SLEEP_MS_TO_320US(ms)           (((((uint32) (ms)) * 100) + 31) / 32)
//  165 
//  166 /* for optimized indexing of uint32's */
//  167 #if HAL_MCU_LITTLE_ENDIAN()
//  168 #define UINT32_NDX0   0
//  169 #define UINT32_NDX1   1
//  170 #define UINT32_NDX2   2
//  171 #define UINT32_NDX3   3
//  172 #else
//  173 #define UINT32_NDX0   3
//  174 #define UINT32_NDX1   2
//  175 #define UINT32_NDX2   1
//  176 #define UINT32_NDX3   0
//  177 #endif
//  178 
//  179 /* ------------------------------------------------------------------------------------------------
//  180  *                                        Local Variables
//  181  * ------------------------------------------------------------------------------------------------
//  182  */
//  183 
//  184 /* HAL power management mode is set according to the power management state.
//  185  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  186 static uint8 halPwrMgtMode = HAL_SLEEP_OFF;
halPwrMgtMode:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  187 
//  188 /* stores the sleep timer count upon entering sleep */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
//  189 static uint32 halSleepTimerStart;
halSleepTimerStart:
        DS 4
        REQUIRE __INIT_XDATA_Z
//  190 
//  191 /* stores the accumulated sleep time */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
//  192 static uint32 halAccumulatedSleepTime;
halAccumulatedSleepTime:
        DS 4
        REQUIRE __INIT_XDATA_Z
//  193 
//  194 #ifdef HAL_SLEEP_DEBUG_POWER_MODE
//  195 static bool halSleepInt = FALSE;
//  196 #endif
//  197 
//  198 /* ------------------------------------------------------------------------------------------------
//  199  *                                      Function Prototypes
//  200  * ------------------------------------------------------------------------------------------------
//  201  */
//  202 
//  203 void halSleepSetTimer(uint32 timeout);
//  204 uint32 HalTimerElapsed( void );
//  205 
//  206 /**************************************************************************************************
//  207  * @fn          halSleep
//  208  *
//  209  * @brief       This function is called from the OSAL task loop using and existing OSAL
//  210  *              interface.  It sets the low power mode of the MAC and the CC2530.
//  211  *
//  212  * input parameters
//  213  *
//  214  * @param       osal_timeout - Next OSAL timer timeout.
//  215  *
//  216  * output parameters
//  217  *
//  218  * None.
//  219  *
//  220  * @return      None.
//  221  **************************************************************************************************
//  222  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  223 void halSleep( uint16 osal_timeout )
halSleep:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function halSleep
        CODE
//  224 {
        FUNCALL halSleep, MAC_PwrNextTimeout
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halSleep, MAC_PwrNextTimeout
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halSleep, halAssertHandler
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halSleep, MAC_PwrOffReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halSleep, HalKeyEnterSleep
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halSleep, HalLedEnterSleep
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halSleep, halSleepSetTimer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halSleep, halSleepSetTimer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halSleep, halSetSleepMode
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halSleep, HalTimerElapsed
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halSleep, HalLedExitSleep
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halSleep, HalKeyExitSleep
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halSleep, MAC_PwrOnReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 4
        MOV     A,#-0x4
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
//  225   uint32        timeout;
//  226   uint32        macTimeout = 0;
//  227 
//  228   halAccumulatedSleepTime = 0;
        MOV     DPTR,#__Constant_0
        LCALL   ?XLOAD_R2345
        MOV     DPTR,#halAccumulatedSleepTime
        LCALL   ?XSTORE_R2345
//  229 
//  230   /* get next OSAL timer expiration converted to 320 usec units */
//  231   timeout = HAL_SLEEP_MS_TO_320US(osal_timeout);
        CLR     A
        MOV     ?V0 + 2,A
        MOV     ?V0 + 3,A
        MOV     DPTR,#__Constant_64
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?L_MUL
        MOV     DPTR,#__Constant_1f
        MOV     R0,#?V0 + 0
        LCALL   ?L_ADD_X
        MOV     A,#0x5
        MOV     R0,#?V0 + 0
        LCALL   ?UL_SHR
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_TO_X
//  232   if (timeout == 0)
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        LCALL   ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_4:
        JNZ     ??halSleep_0
//  233   {
//  234     timeout = MAC_PwrNextTimeout();
        ; Setup parameters for call to function MAC_PwrNextTimeout
        LCALL   ??MAC_PwrNextTimeout?relay
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?XSTORE_R2345
//  235   }
//  236   else
//  237   {
//  238     /* get next MAC timer expiration */
//  239     macTimeout = MAC_PwrNextTimeout();
//  240 
//  241     /* get lesser of two timeouts */
//  242     if ((macTimeout != 0) && (macTimeout < timeout))
//  243     {
//  244       timeout = macTimeout;
//  245     }
//  246   }
//  247 
//  248   /* HAL_SLEEP_PM2 is entered only if the timeout is zero and
//  249    * the device is a stimulated device.
//  250    */
//  251   halPwrMgtMode = (timeout == 0) ? HAL_SLEEP_DEEP : HAL_SLEEP_TIMER;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        LCALL   ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_5:
        JNZ     ??halSleep_1
        MOV     DPTR,#halPwrMgtMode
        MOV     A,#0x3
        MOVX    @DPTR,A
        SJMP    ??halSleep_2
??halSleep_0:
        ; Setup parameters for call to function MAC_PwrNextTimeout
        LCALL   ??MAC_PwrNextTimeout?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     ?V0 + 2,R4
        MOV     ?V0 + 3,R5
        MOV     A,R2
        LCALL   ??Subroutine3_0 & 0xFFFF
??CrossCallReturnLabel_3:
        JZ      ??halSleep_1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R0,#?V0 + 0
        LCALL   ?UL_GE_X
        JC      ??halSleep_1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_TO_X
??halSleep_1:
        MOV     DPTR,#halPwrMgtMode
        MOV     A,#0x2
        LCALL   ?Subroutine2 & 0xFFFF
//  252 
//  253   /* DEEP sleep can only be entered when zgPollRate == 0.
//  254    * This is to eliminate any possibility of entering PM3 between
//  255    * two network timers.
//  256    */
//  257 #if !defined (RTR_NWK) && defined (NWK_AUTO_POLL)
//  258   if ((timeout > HAL_SLEEP_MS_TO_320US(PM_MIN_SLEEP_TIME)) ||
//  259       (timeout == 0 && zgPollRate == 0))
//  260 #else
//  261   if ((timeout > HAL_SLEEP_MS_TO_320US(PM_MIN_SLEEP_TIME)) ||
//  262       (timeout == 0))
??CrossCallReturnLabel_0:
        PUSH    DPL
        CFI CFA_SP SP+-1
        PUSH    DPH
        CFI CFA_SP SP+-2
        MOV     DPTR,#__Constant_2d
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        POP     DPH
        CFI CFA_SP SP+-1
        POP     DPL
        CFI CFA_SP SP+0
        MOV     R0,#?V0 + 0
        LCALL   ?UL_GT_X
        JNC     ??halSleep_2
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        LCALL   ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_6:
        JZ      $+5
        LJMP    ??halSleep_3 & 0xFFFF
//  263 #endif
//  264   {
//  265     halIntState_t ien0, ien1, ien2;
//  266 
//  267     HAL_ASSERT(HAL_INTERRUPTS_ARE_ENABLED());
??halSleep_2:
        MOV     C,0xa8.7
        JC      ??halSleep_4
        ; Setup parameters for call to function halAssertHandler
        LCALL   ??halAssertHandler?relay
//  268     HAL_DISABLE_INTERRUPTS();
??halSleep_4:
        CLR     0xa8.7
//  269 
//  270     /* always use "deep sleep" to turn off radio VREG on CC2530 */
//  271     if (MAC_PwrOffReq(MAC_PWR_SLEEP_DEEP) == MAC_SUCCESS)
        ; Setup parameters for call to function MAC_PwrOffReq
        MOV     R1,#0x2
        LCALL   ??MAC_PwrOffReq?relay
        MOV     A,R1
        JZ      $+5
        LJMP    ??halSleep_5 & 0xFFFF
//  272     {
//  273       while ( (HAL_SLEEP_MS_TO_320US(halAccumulatedSleepTime) < timeout) || (timeout == 0) )
??halSleep_6:
        MOV     DPTR,#halAccumulatedSleepTime
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     DPTR,#__Constant_64
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?L_MUL
        MOV     DPTR,#__Constant_1f
        MOV     R0,#?V0 + 0
        LCALL   ?L_ADD_X
        MOV     A,#0x5
        MOV     R0,#?V0 + 0
        LCALL   ?UL_SHR
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R0,#?V0 + 0
        LCALL   ?UL_GE_X
        JNC     ??halSleep_7
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        LCALL   ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_7:
        JZ      $+5
        LJMP    ??halSleep_8 & 0xFFFF
//  274       {
//  275         /* get peripherals ready for sleep */
//  276         HalKeyEnterSleep();
??halSleep_7:
        ; Setup parameters for call to function HalKeyEnterSleep
        LCALL   ??HalKeyEnterSleep?relay
//  277 
//  278 #ifdef HAL_SLEEP_DEBUG_LED
//  279         HAL_TURN_OFF_LED3();
//  280 #else
//  281         /* use this to turn LEDs off during sleep */
//  282         HalLedEnterSleep();
        ; Setup parameters for call to function HalLedEnterSleep
        LCALL   ??HalLedEnterSleep?relay
//  283 #endif
//  284 
//  285         /* enable sleep timer interrupt */
//  286         if (timeout != 0)
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        LCALL   ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_8:
        JZ      ??halSleep_9
//  287         {
//  288           if (timeout > HAL_SLEEP_MS_TO_320US( MAX_SLEEP_TIME ))
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        PUSH    DPL
        CFI CFA_SP SP+-1
        PUSH    DPH
        CFI CFA_SP SP+-2
        MOV     DPTR,#__Constant_185197
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        POP     DPH
        CFI CFA_SP SP+-1
        POP     DPL
        CFI CFA_SP SP+0
        MOV     R0,#?V0 + 0
        LCALL   ?UL_GT_X
        JC      ??halSleep_10
//  289           {
//  290             timeout -= HAL_SLEEP_MS_TO_320US( MAX_SLEEP_TIME );
        MOV     DPTR,#__Constant_ffe7ae6a
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R0,#?V0 + 0
        LCALL   ?L_ADD_TO_X
//  291             halSleepSetTimer(HAL_SLEEP_MS_TO_320US( MAX_SLEEP_TIME ));
        ; Setup parameters for call to function halSleepSetTimer
        MOV     DPTR,#__Constant_185196
        SJMP    ??halSleep_11
//  292           }
//  293           else
//  294           {
//  295             /* set sleep timer */
//  296             halSleepSetTimer(timeout);
??halSleep_10:
        ; Setup parameters for call to function halSleepSetTimer
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
??halSleep_11:
        LCALL   ?XLOAD_R2345
        LCALL   ??halSleepSetTimer?relay
//  297           }
//  298 
//  299           /* set up sleep timer interrupt */
//  300           HAL_SLEEP_TIMER_CLEAR_INT();
        CLR     0xc0.7
//  301           HAL_SLEEP_TIMER_ENABLE_INT();
        SETB    0xa8.5
//  302         }
//  303 
//  304 #ifdef HAL_SLEEP_DEBUG_LED
//  305         if (halPwrMgtMode == CC2530_PM1)
//  306         {
//  307           HAL_TURN_ON_LED1();
//  308         }
//  309         else
//  310         {
//  311           HAL_TURN_OFF_LED1();
//  312         }
//  313 #endif
//  314 
//  315         /* save interrupt enable registers and disable all interrupts */
//  316         HAL_SLEEP_IE_BACKUP_AND_DISABLE(ien0, ien1, ien2);
??halSleep_9:
        MOV     A,0xa8
        MOV     R6,A
        MOV     A,0xb8
        MOV     R7,A
        MOV     A,0x9a
        MOV     ?V0 + 0,A
        ANL     0xa8,#0x20
        ANL     0xb8,#0x20
        ANL     0x9a,#0x12
//  317         HAL_ENABLE_INTERRUPTS();
        SETB    0xa8.7
//  318 
//  319         /* set CC2530 power mode, interrupt is disabled after this function */
//  320         HAL_SLEEP_SET_POWER_MODE(halPwrMgtMode);
        ANL     0xbe,#0xfc
        MOV     DPTR,#halPwrMgtMode
        MOVX    A,@DPTR
        ORL     0xbe,A
??halSleep_12:
        MOV     A,0xad
        MOV     C,0xE0 /* A   */.0
        JNC     ??halSleep_12
        ; Setup parameters for call to function halSetSleepMode
        LCALL   ??halSetSleepMode?relay
//  321         HAL_DISABLE_INTERRUPTS();
        CLR     0xa8.7
//  322 
//  323         /* restore interrupt enable registers */
//  324         HAL_SLEEP_IE_RESTORE(ien0, ien1, ien2);
        MOV     0xa8,R6
        MOV     0xb8,R7
        MOV     0x9a,?V0 + 0
//  325 
//  326         /* disable sleep timer interrupt */
//  327         HAL_SLEEP_TIMER_DISABLE_INT();
        CLR     0xa8.5
//  328 
//  329         /* Calculate timer elasped */
//  330         halAccumulatedSleepTime += (HalTimerElapsed() / TICK_COUNT);
        ; Setup parameters for call to function HalTimerElapsed
        LCALL   ??HalTimerElapsed?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     ?V0 + 2,R4
        MOV     ?V0 + 3,R5
        MOV     DPTR,#halAccumulatedSleepTime
        MOV     R0,#?V0 + 0
        LCALL   ?L_ADD_TO_X
//  331 
//  332         /* deduct the sleep time for the next iteration */
//  333         if ( osal_timeout > halAccumulatedSleepTime)
//  334         {
//  335           osal_timeout -= halAccumulatedSleepTime;
//  336         }
//  337 
//  338 #ifdef HAL_SLEEP_DEBUG_LED
//  339         HAL_TURN_ON_LED3();
//  340 #else
//  341         /* use this to turn LEDs back on after sleep */
//  342         HalLedExitSleep();
        ; Setup parameters for call to function HalLedExitSleep
        LCALL   ??HalLedExitSleep?relay
//  343 #endif
//  344 
//  345         /* handle peripherals; exit loop if key presses */
//  346         if ( HalKeyExitSleep() )
        ; Setup parameters for call to function HalKeyExitSleep
        LCALL   ??HalKeyExitSleep?relay
        MOV     A,R1
        JNZ     ??halSleep_8
//  347         {
//  348           break;
//  349         }
//  350 
//  351         /* exit loop if no timer active */
//  352         if ( timeout == 0 ) break;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        LCALL   ?Subroutine1 & 0xFFFF
//  353       }
??CrossCallReturnLabel_9:
        JZ      $+5
        LJMP    ??halSleep_6 & 0xFFFF
//  354 
//  355       /* power on the MAC; blocks until completion */
//  356       MAC_PwrOnReq();
??halSleep_8:
        ; Setup parameters for call to function MAC_PwrOnReq
        LCALL   ??MAC_PwrOnReq?relay
//  357 
//  358     }
//  359 
//  360     HAL_ENABLE_INTERRUPTS();
??halSleep_5:
        SETB    0xa8.7
        CFI EndBlock cfiBlock1
//  361   }
//  362 }
??halSleep_3:
        REQUIRE ?Subroutine0
        REQUIRE _A_IEN0
        REQUIRE _A_IRCON
        REQUIRE _A_IEN1
        REQUIRE IEN2
        REQUIRE SLEEPCMD
        REQUIRE STLOAD
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock2

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiCond3 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond4 Using cfiCommon0
        CFI (cfiCond4) NoFunction
        CFI (cfiCond4) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond4) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond4) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond4) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond4) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond4) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond4) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond4) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond4) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond4) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond4) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond4) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond4) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond4) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond4) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond4) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond4) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond4) CFA_SP SP+0
        CFI (cfiCond4) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond5 Using cfiCommon0
        CFI (cfiCond5) NoFunction
        CFI (cfiCond5) Conditional ??CrossCallReturnLabel_6
        CFI (cfiCond5) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond5) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond5) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond5) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond5) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond5) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond5) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond5) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond5) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond5) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond5) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond5) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond5) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond5) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond5) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond5) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond5) CFA_SP SP+0
        CFI (cfiCond5) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond6 Using cfiCommon0
        CFI (cfiCond6) NoFunction
        CFI (cfiCond6) Conditional ??CrossCallReturnLabel_7
        CFI (cfiCond6) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond6) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond6) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond6) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond6) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond6) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond6) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond6) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond6) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond6) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond6) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond6) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond6) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond6) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond6) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond6) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond6) CFA_SP SP+0
        CFI (cfiCond6) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond7 Using cfiCommon0
        CFI (cfiCond7) NoFunction
        CFI (cfiCond7) Conditional ??CrossCallReturnLabel_8
        CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond7) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond7) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond7) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond7) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond7) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond7) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond7) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond7) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond7) CFA_SP SP+0
        CFI (cfiCond7) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond8 Using cfiCommon0
        CFI (cfiCond8) NoFunction
        CFI (cfiCond8) Conditional ??CrossCallReturnLabel_9
        CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond8) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond8) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond8) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond8) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond8) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond8) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond8) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond8) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond8) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond8) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond8) CFA_SP SP+0
        CFI (cfiCond8) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiPicker9 Using cfiCommon1
        CFI (cfiPicker9) NoFunction
        CFI (cfiPicker9) Picker
        MOV     A,?V0 + 0
        CFI EndBlock cfiCond3
        CFI EndBlock cfiCond4
        CFI EndBlock cfiCond5
        CFI EndBlock cfiCond6
        CFI EndBlock cfiCond7
        CFI EndBlock cfiCond8
        CFI EndBlock cfiPicker9
        REQUIRE ??Subroutine3_0
        ; // Fall through to label ??Subroutine3_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine3_0:
        CFI Block cfiCond10 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_3
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond11 Using cfiCommon0
        CFI (cfiCond11) NoFunction
        CFI (cfiCond11) Conditional ??CrossCallReturnLabel_4
        CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond11) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond11) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond11) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond11) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond11) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond11) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond11) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond11) CFA_SP SP+0
        CFI (cfiCond11) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond12 Using cfiCommon0
        CFI (cfiCond12) NoFunction
        CFI (cfiCond12) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond12) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond12) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond12) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond12) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond12) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond12) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond12) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond12) CFA_SP SP+0
        CFI (cfiCond12) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond13 Using cfiCommon0
        CFI (cfiCond13) NoFunction
        CFI (cfiCond13) Conditional ??CrossCallReturnLabel_6
        CFI (cfiCond13) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond13) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond13) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond13) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond13) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond13) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond13) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond13) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond13) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond13) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond13) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond13) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond13) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond13) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond13) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond13) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond13) CFA_SP SP+0
        CFI (cfiCond13) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond14 Using cfiCommon0
        CFI (cfiCond14) NoFunction
        CFI (cfiCond14) Conditional ??CrossCallReturnLabel_7
        CFI (cfiCond14) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond14) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond14) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond14) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond14) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond14) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond14) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond14) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond14) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond14) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond14) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond14) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond14) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond14) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond14) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond14) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond14) CFA_SP SP+0
        CFI (cfiCond14) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond15 Using cfiCommon0
        CFI (cfiCond15) NoFunction
        CFI (cfiCond15) Conditional ??CrossCallReturnLabel_8
        CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond15) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond15) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond15) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond15) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond15) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond15) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond15) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond15) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond15) CFA_SP SP+0
        CFI (cfiCond15) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond16 Using cfiCommon0
        CFI (cfiCond16) NoFunction
        CFI (cfiCond16) Conditional ??CrossCallReturnLabel_9
        CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond16) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond16) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond16) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond16) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond16) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond16) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond16) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond16) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond16) CFA_SP SP+0
        CFI (cfiCond16) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiPicker17 Using cfiCommon1
        CFI (cfiPicker17) NoFunction
        CFI (cfiPicker17) Picker
        ORL     A,?V0 + 1
        ORL     A,?V0 + 2
        ORL     A,?V0 + 3
        RET
        CFI EndBlock cfiCond10
        CFI EndBlock cfiCond11
        CFI EndBlock cfiCond12
        CFI EndBlock cfiCond13
        CFI EndBlock cfiCond14
        CFI EndBlock cfiCond15
        CFI EndBlock cfiCond16
        CFI EndBlock cfiPicker17
//  363 
//  364 /**************************************************************************************************
//  365  * @fn          halSleepSetTimer
//  366  *
//  367  * @brief       This function sets the CC2530 sleep timer compare value.  First it reads and
//  368  *              stores the value of the sleep timer; this value is used later to update OSAL
//  369  *              timers.  Then the timeout value is converted from 320 usec units to 32 kHz
//  370  *              period units and the compare value is set to the timeout.
//  371  *
//  372  * input parameters
//  373  *
//  374  * @param       timeout - Timeout value in 320 usec units.  The sleep timer compare is set to
//  375  *                        this value.
//  376  *
//  377  * output parameters
//  378  *
//  379  * None.
//  380  *
//  381  * @return      None.
//  382  **************************************************************************************************
//  383  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  384 void halSleepSetTimer(uint32 timeout)
halSleepSetTimer:
        CFI Block cfiBlock18 Using cfiCommon0
        CFI Function halSleepSetTimer
        CODE
//  385 {
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 4
        MOV     A,#-0x4
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     ?V0 + 2,R4
        MOV     ?V0 + 3,R5
//  386   uint32 ticks;
//  387 
//  388   /* read the sleep timer; ST0 must be read first */
//  389   ((uint8 *) &ticks)[UINT32_NDX0] = ST0;
        MOV     A,0x95
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
//  390   ((uint8 *) &ticks)[UINT32_NDX1] = ST1;
        MOV     A,0x96
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  391   ((uint8 *) &ticks)[UINT32_NDX2] = ST2;
        MOV     A,0x97
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  392   ((uint8 *) &ticks)[UINT32_NDX3] = 0;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        LCALL   ?Subroutine2 & 0xFFFF
//  393 
//  394   /* store value for later */
//  395   halSleepTimerStart = ticks;
??CrossCallReturnLabel_1:
        LCALL   ?XLOAD_R2345
        MOV     DPTR,#halSleepTimerStart
        LCALL   ?XSTORE_R2345
//  396 
//  397   /* Compute sleep timer compare value.  The ratio of 32 kHz ticks to 320 usec ticks
//  398    * is 32768/3125 = 10.48576.  This is nearly 671/64 = 10.484375.
//  399    */
//  400   ticks += (timeout * 671) / 64;
//  401 
//  402   /* subtract the processing time spent in function halSleep() */
//  403   ticks -= HAL_SLEEP_ADJ_TICKS;
        MOV     DPTR,#__Constant_29f
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?L_MUL
        MOV     A,#0x6
        MOV     R0,#?V0 + 0
        LCALL   ?UL_SHR
        MOV     DPTR,#__Constant_ffffffef
        MOV     R0,#?V0 + 0
        LCALL   ?L_ADD_X
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R0,#?V0 + 0
        LCALL   ?L_ADD_TO_X
//  404 
//  405   /* set sleep timer compare; ST0 must be written last */
//  406   ST2 = ((uint8 *) &ticks)[UINT32_NDX2];
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     0x97,A
//  407   ST1 = ((uint8 *) &ticks)[UINT32_NDX1];
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     0x96,A
//  408   ST0 = ((uint8 *) &ticks)[UINT32_NDX0];
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     0x95,A
//  409 }
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock18
        REQUIRE ST0
        REQUIRE ST1
        REQUIRE ST2

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond19 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond20 Using cfiCommon0
        CFI (cfiCond20) NoFunction
        CFI (cfiCond20) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond20) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond20) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond20) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond20) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond20) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond20) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond20) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond20) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond20) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond20) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond20) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond20) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond20) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond20) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond20) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond20) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond20) CFA_SP SP+0
        CFI (cfiCond20) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond21 Using cfiCommon0
        CFI (cfiCond21) NoFunction
        CFI (cfiCond21) Conditional ??CrossCallReturnLabel_2
        CFI (cfiCond21) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond21) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond21) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond21) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond21) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond21) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond21) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond21) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond21) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond21) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond21) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond21) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond21) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond21) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond21) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond21) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond21) CFA_SP SP+0
        CFI (cfiCond21) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiPicker22 Using cfiCommon1
        CFI (cfiPicker22) NoFunction
        CFI (cfiPicker22) Picker
        MOVX    @DPTR,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        RET
        CFI EndBlock cfiCond19
        CFI EndBlock cfiCond20
        CFI EndBlock cfiCond21
        CFI EndBlock cfiPicker22
//  410 
//  411 /**************************************************************************************************
//  412  * @fn          TimerElapsed
//  413  *
//  414  * @brief       Determine the number of OSAL timer ticks elapsed during sleep.
//  415  *
//  416  * input parameters
//  417  *
//  418  * @param       None.
//  419  *
//  420  * output parameters
//  421  *
//  422  * None.
//  423  *
//  424  * @return      Number of timer ticks elapsed during sleep.
//  425  **************************************************************************************************
//  426  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  427 uint32 TimerElapsed( void )
TimerElapsed:
        CFI Block cfiBlock23 Using cfiCommon0
        CFI Function TimerElapsed
        CODE
//  428 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  429   return ( halAccumulatedSleepTime );
        MOV     DPTR,#halAccumulatedSleepTime
        LCALL   ?XLOAD_R2345
        POP     DPH
        CFI DPH0 SameValue
        CFI CFA_SP SP+-4
        POP     DPL
        CFI DPL0 SameValue
        CFI CFA_SP SP+-3
        LJMP    ?BRET
        CFI EndBlock cfiBlock23
//  430 }
//  431 
//  432 /**************************************************************************************************
//  433  * @fn          HalTimerElapsed
//  434  *
//  435  * @brief       Determine the number of OSAL timer ticks elapsed during sleep.  This function
//  436  *              relies on OSAL macro TICK_COUNT to be set to 1; then ticks are calculated in
//  437  *              units of msec.
//  438  *
//  439  * input parameters
//  440  *
//  441  * @param       None.
//  442  *
//  443  * output parameters
//  444  *
//  445  * None.
//  446  *
//  447  * @return      Number of timer ticks elapsed during sleep.
//  448  **************************************************************************************************
//  449  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  450 uint32 HalTimerElapsed( void )
HalTimerElapsed:
        CFI Block cfiBlock24 Using cfiCommon0
        CFI Function HalTimerElapsed
        CODE
//  451 {
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 4
        MOV     A,#-0x4
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
//  452   uint32 ticks;
//  453 
//  454   /* read the sleep timer; ST0 must be read first */
//  455   ((uint8 *) &ticks)[UINT32_NDX0] = ST0;
        MOV     A,0x95
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
//  456   ((uint8 *) &ticks)[UINT32_NDX1] = ST1;
        MOV     A,0x96
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  457   ((uint8 *) &ticks)[UINT32_NDX2] = ST2;
        MOV     A,0x97
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  458 
//  459   /* set bit 24 to handle wraparound */
//  460   ((uint8 *) &ticks)[UINT32_NDX3] = 0x01;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        LCALL   ?Subroutine2 & 0xFFFF
//  461 
//  462   /* calculate elapsed time */
//  463   ticks -= halSleepTimerStart;
//  464 
//  465   /* add back the processing time spent in function halSleep() */
//  466   ticks += HAL_SLEEP_ADJ_TICKS;
//  467 
//  468   /* mask off excess if no wraparound */
//  469   ticks &= 0x00FFFFFF;
//  470 
//  471   /* Convert elapsed time in milliseconds with round.  1000/32768 = 125/4096 */
//  472   return ( ((ticks * 125) + 4095) / 4096 );
??CrossCallReturnLabel_2:
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     DPTR,#halSleepTimerStart
        MOV     R0,#?V0 + 0
        LCALL   ?L_SUB_X
        MOV     DPTR,#__Constant_11
        MOV     R0,#?V0 + 0
        LCALL   ?L_ADD_X
        MOV     DPTR,#__Constant_ffffff
        MOV     R0,#?V0 + 0
        LCALL   ?L_AND_X
        MOV     DPTR,#__Constant_7d
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?L_MUL
        MOV     DPTR,#__Constant_fff
        MOV     R0,#?V0 + 0
        LCALL   ?L_ADD_X
        MOV     A,#0xc
        MOV     R0,#?V0 + 0
        LCALL   ?UL_SHR
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     R4,?V0 + 2
        MOV     R5,A
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock24
        REQUIRE ST0
        REQUIRE ST1
        REQUIRE ST2
//  473 }
//  474 
//  475 /**************************************************************************************************
//  476  * @fn          halSleepWait
//  477  *
//  478  * @brief       Perform a blocking wait.
//  479  *
//  480  * input parameters
//  481  *
//  482  * @param       duration - Duration of wait in microseconds.
//  483  *
//  484  * output parameters
//  485  *
//  486  * None.
//  487  *
//  488  * @return      None.
//  489  **************************************************************************************************
//  490  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  491 void halSleepWait(uint16 duration)
halSleepWait:
        CFI Block cfiBlock25 Using cfiCommon0
        CFI Function halSleepWait
        CODE
//  492 {
        ; Saved register size: 0
        ; Auto size: 0
        SJMP    ??halSleepWait_0
//  493   while (duration--)
//  494   {
//  495     asm("NOP");
??halSleepWait_1:
        NOP
//  496     asm("NOP");
        NOP
//  497     asm("NOP");
        NOP
//  498     asm("NOP");
        NOP
//  499     asm("NOP");
        NOP
//  500     asm("NOP");
        NOP
//  501     asm("NOP");
        NOP
//  502     asm("NOP");
        NOP
//  503   }
??halSleepWait_0:
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
        MOV     A,R0
        ADD     A,#-0x1
        DEC     R2
        MOV     A,R1
        ADDC    A,#-0x1
        MOV     R3,A
        MOV     A,R0
        ORL     A,R1
        JNZ     ??halSleepWait_1
//  504 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock25
//  505 
//  506 /**************************************************************************************************
//  507  * @fn          halRestoreSleepLevel
//  508  *
//  509  * @brief       Restore the deepest timer sleep level.
//  510  *
//  511  * input parameters
//  512  *
//  513  * @param       None
//  514  *
//  515  * output parameters
//  516  *
//  517  *              None.
//  518  *
//  519  * @return      None.
//  520  **************************************************************************************************
//  521  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  522 void halRestoreSleepLevel( void )
halRestoreSleepLevel:
        CFI Block cfiBlock26 Using cfiCommon0
        CFI Function halRestoreSleepLevel
        CODE
//  523 {
        ; Saved register size: 0
        ; Auto size: 0
//  524   /* Stubs */
//  525 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock26
//  526 
//  527 /**************************************************************************************************
//  528  * @fn          halSleepTimerIsr
//  529  *
//  530  * @brief       Sleep timer ISR.
//  531  *
//  532  * input parameters
//  533  *
//  534  * None.
//  535  *
//  536  * output parameters
//  537  *
//  538  * None.
//  539  *
//  540  * @return      None.
//  541  **************************************************************************************************
//  542  */

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  543 HAL_ISR_FUNCTION(halSleepTimerIsr, ST_VECTOR)
halSleepTimerIsr:
        CFI Block cfiBlock27 Using cfiCommon1
        CFI Function halSleepTimerIsr
        CODE
//  544 {
        FUNCALL halSleepTimerIsr, macMcuTimer2OverflowWorkaround
        LOCFRAME ISTACK, 15, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 15, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    A
        CFI A Frame(CFA_SP, 3)
        CFI CFA_SP SP+-3
        MOV     A,#-0xe
        LCALL   ?INTERRUPT_ENTER_XSP
        CFI B load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI PSW load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 15
        ; Auto size: 0
//  545   HAL_SLEEP_TIMER_CLEAR_INT();
        CLR     0xc0.7
//  546   CLEAR_SLEEP_MODE();
//  547 
//  548   /* CC2530 chip bug workaround */
//  549   macMcuTimer2OverflowWorkaround();
        ; Setup parameters for call to function macMcuTimer2OverflowWorkaround
        LCALL   ??macMcuTimer2OverflowWorkaround?relay
//  550 
//  551 #ifdef HAL_SLEEP_DEBUG_POWER_MODE
//  552   halSleepInt = TRUE;
//  553 #endif
//  554 }
        MOV     R7,#0x1
        LJMP    ?INTERRUPT_LEAVE_XSP
        CFI EndBlock cfiBlock27
        REQUIRE _A_IRCON

        COMMON INTVEC:CODE:ROOT(0)
        ORG 43
`??halSleepTimerIsr??INTVEC 43`:
        LJMP       (halSleepTimerIsr)

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_0:
        DD 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_64:
        DD 100

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_1f:
        DD 31

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_2d:
        DD 45

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_185197:
        DD 1593751

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_ffe7ae6a:
        DD 4293373546

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_185196:
        DD 1593750

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_29f:
        DD 671

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_ffffffef:
        DD 4294967279

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_11:
        DD 17

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_ffffff:
        DD 16777215

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_7d:
        DD 125

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_fff:
        DD 4095

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??halSetSleepMode?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    halSetSleepMode

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??halSleep?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    halSleep

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??halSleepSetTimer?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    halSleepSetTimer

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??TimerElapsed?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    TimerElapsed

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalTimerElapsed?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalTimerElapsed

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??halSleepWait?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    halSleepWait

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??halRestoreSleepLevel?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    halRestoreSleepLevel

        END
//  555 
// 
// 834 bytes in segment BANKED_CODE
//  42 bytes in segment BANK_RELAYS
//   3 bytes in segment INTVEC
//  17 bytes in segment NEAR_CODE
//  10 bytes in segment SFR_AN
//   7 bytes in segment SLEEP_CODE
//  52 bytes in segment XDATA_ROM_C
//   9 bytes in segment XDATA_Z
// 
// 900 bytes of CODE  memory (+  3 bytes shared)
//   0 bytes of CONST memory (+ 52 bytes shared)
//   0 bytes of DATA  memory (+ 10 bytes shared)
//   9 bytes of XDATA memory
//
//Errors: none
//Warnings: none
