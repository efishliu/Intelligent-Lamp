///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.1.10194/W32 for 8051        11/Jul/2018  09:38:09 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  E:\123\´óÈý\Éú²úÊµÏ°\WSN_ZigBee_ÐÞ¸Ä\WSN_ZigBee_Ð /
//                          Þ¸Ä\Components\mac\low_level\srf04\mac_autopend.c /
//    Command line       =  -f E:\123\´óÈý\Éú²úÊµÏ°\WSN_ZigBee_ÐÞ¸Ä\WSN_ZigBe /
//                          e_ÐÞ¸Ä\Projects\zstack\Utilities\SerialApp\CC2530 /
//                          DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg           /
//                          (-DCPU32MHZ -DROOT=__near_func                    /
//                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                  /
//                          -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS) -f      /
//                          E:\123\´óÈý\Éú²úÊµÏ°\WSN_ZigBee_ÐÞ¸Ä\WSN_ZigBee_Ð /
//                          Þ¸Ä\Projects\zstack\Utilities\SerialApp\CC2530DB\ /
//                          ..\..\..\Tools\CC2530DB\f8wConfig.cfg             /
//                          (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR     /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xfFF1                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          "-DCONST=const __code" -DGENERIC=__generic        /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 E:\123\´óÈý\Éú²úÊµÏ°\WSN_Z /
//                          igBee_ÐÞ¸Ä\WSN_ZigBee_ÐÞ¸Ä\Components\mac\low_lev /
//                          el\srf04\mac_autopend.c -D ZIGBEEPRO -D           /
//                          HAL_UART=TRUE -D SERIAL_APP_PORT=0 -D             /
//                          LCD_SUPPORTED -D NV_RESTORE -lC                   /
//                          E:\123\´óÈý\Éú²úÊµÏ°\WSN_ZigBee_ÐÞ¸Ä\WSN_ZigBee_Ð /
//                          Þ¸Ä\Projects\zstack\Utilities\SerialApp\CC2530DB\ /
//                          CoordinatorEB-Pro\List\ -lA                       /
//                          E:\123\´óÈý\Éú²úÊµÏ°\WSN_ZigBee_ÐÞ¸Ä\WSN_ZigBee_Ð /
//                          Þ¸Ä\Projects\zstack\Utilities\SerialApp\CC2530DB\ /
//                          CoordinatorEB-Pro\List\ --diag_suppress           /
//                          Pe001,Pa010 -o E:\123\´óÈý\Éú²úÊµÏ°\WSN_ZigBee_ÐÞ /
//                          ¸Ä\WSN_ZigBee_ÐÞ¸Ä\Projects\zstack\Utilities\Seri /
//                          alApp\CC2530DB\CoordinatorEB-Pro\Obj\ -e --debug  /
//                          --core=plain --dptr=16,1 --data_model=large       /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 8 -I E:\123\´óÈý\Éú²úÊµÏ°\WSN_Z /
//                          igBee_ÐÞ¸Ä\WSN_ZigBee_ÐÞ¸Ä\Projects\zstack\Utilit /
//                          ies\SerialApp\CC2530DB\ -I                        /
//                          E:\123\´óÈý\Éú²úÊµÏ°\WSN_ZigBee_ÐÞ¸Ä\WSN_ZigBee_Ð /
//                          Þ¸Ä\Projects\zstack\Utilities\SerialApp\CC2530DB\ /
//                          ..\SOURCE\ -I E:\123\´óÈý\Éú²úÊµÏ°\WSN_ZigBee_ÐÞ¸ /
//                          Ä\WSN_ZigBee_ÐÞ¸Ä\Projects\zstack\Utilities\Seria /
//                          lApp\CC2530DB\..\..\..\ZMAIN\TI2530DB\ -I         /
//                          E:\123\´óÈý\Éú²úÊµÏ°\WSN_ZigBee_ÐÞ¸Ä\WSN_ZigBee_Ð /
//                          Þ¸Ä\Projects\zstack\Utilities\SerialApp\CC2530DB\ /
//                          ..\..\..\..\..\COMPONENTS\MT\ -I                  /
//                          E:\123\´óÈý\Éú²úÊµÏ°\WSN_ZigBee_ÐÞ¸Ä\WSN_ZigBee_Ð /
//                          Þ¸Ä\Projects\zstack\Utilities\SerialApp\CC2530DB\ /
//                          ..\..\..\..\..\COMPONENTS\HAL\INCLUDE\ -I         /
//                          E:\123\´óÈý\Éú²úÊµÏ°\WSN_ZigBee_ÐÞ¸Ä\WSN_ZigBee_Ð /
//                          Þ¸Ä\Projects\zstack\Utilities\SerialApp\CC2530DB\ /
//                          ..\..\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\    /
//                          -I E:\123\´óÈý\Éú²úÊµÏ°\WSN_ZigBee_ÐÞ¸Ä\WSN_ZigBe /
//                          e_ÐÞ¸Ä\Projects\zstack\Utilities\SerialApp\CC2530 /
//                          DB\..\..\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\ -I   /
//                          E:\123\´óÈý\Éú²úÊµÏ°\WSN_ZigBee_ÐÞ¸Ä\WSN_ZigBee_Ð /
//                          Þ¸Ä\Projects\zstack\Utilities\SerialApp\CC2530DB\ /
//                          ..\..\..\..\..\COMPONENTS\OSAL\INCLUDE\ -I        /
//                          E:\123\´óÈý\Éú²úÊµÏ°\WSN_ZigBee_ÐÞ¸Ä\WSN_ZigBee_Ð /
//                          Þ¸Ä\Projects\zstack\Utilities\SerialApp\CC2530DB\ /
//                          ..\..\..\..\..\COMPONENTS\STACK\AF\ -I            /
//                          E:\123\´óÈý\Éú²úÊµÏ°\WSN_ZigBee_ÐÞ¸Ä\WSN_ZigBee_Ð /
//                          Þ¸Ä\Projects\zstack\Utilities\SerialApp\CC2530DB\ /
//                          ..\..\..\..\..\COMPONENTS\STACK\NWK\ -I           /
//                          E:\123\´óÈý\Éú²úÊµÏ°\WSN_ZigBee_ÐÞ¸Ä\WSN_ZigBee_Ð /
//                          Þ¸Ä\Projects\zstack\Utilities\SerialApp\CC2530DB\ /
//                          ..\..\..\..\..\COMPONENTS\STACK\SEC\ -I           /
//                          E:\123\´óÈý\Éú²úÊµÏ°\WSN_ZigBee_ÐÞ¸Ä\WSN_ZigBee_Ð /
//                          Þ¸Ä\Projects\zstack\Utilities\SerialApp\CC2530DB\ /
//                          ..\..\..\..\..\COMPONENTS\STACK\SAPI\ -I          /
//                          E:\123\´óÈý\Éú²úÊµÏ°\WSN_ZigBee_ÐÞ¸Ä\WSN_ZigBee_Ð /
//                          Þ¸Ä\Projects\zstack\Utilities\SerialApp\CC2530DB\ /
//                          ..\..\..\..\..\COMPONENTS\STACK\SYS\ -I           /
//                          E:\123\´óÈý\Éú²úÊµÏ°\WSN_ZigBee_ÐÞ¸Ä\WSN_ZigBee_Ð /
//                          Þ¸Ä\Projects\zstack\Utilities\SerialApp\CC2530DB\ /
//                          ..\..\..\..\..\COMPONENTS\STACK\ZDO\ -I           /
//                          E:\123\´óÈý\Éú²úÊµÏ°\WSN_ZigBee_ÐÞ¸Ä\WSN_ZigBee_Ð /
//                          Þ¸Ä\Projects\zstack\Utilities\SerialApp\CC2530DB\ /
//                          ..\..\..\..\..\COMPONENTS\ZMAC\F8W\ -I            /
//                          E:\123\´óÈý\Éú²úÊµÏ°\WSN_ZigBee_ÐÞ¸Ä\WSN_ZigBee_Ð /
//                          Þ¸Ä\Projects\zstack\Utilities\SerialApp\CC2530DB\ /
//                          ..\..\..\..\..\COMPONENTS\ZMAC\ -I                /
//                          E:\123\´óÈý\Éú²úÊµÏ°\WSN_ZigBee_ÐÞ¸Ä\WSN_ZigBee_Ð /
//                          Þ¸Ä\Projects\zstack\Utilities\SerialApp\CC2530DB\ /
//                          ..\..\..\..\..\COMPONENTS\SERVICES\SADDR\ -I      /
//                          E:\123\´óÈý\Éú²úÊµÏ°\WSN_ZigBee_ÐÞ¸Ä\WSN_ZigBee_Ð /
//                          Þ¸Ä\Projects\zstack\Utilities\SerialApp\CC2530DB\ /
//                          ..\..\..\..\..\COMPONENTS\SERVICES\SDATA\ -I      /
//                          E:\123\´óÈý\Éú²úÊµÏ°\WSN_ZigBee_ÐÞ¸Ä\WSN_ZigBee_Ð /
//                          Þ¸Ä\Projects\zstack\Utilities\SerialApp\CC2530DB\ /
//                          ..\..\..\..\..\COMPONENTS\MAC\INCLUDE\ -I         /
//                          E:\123\´óÈý\Éú²úÊµÏ°\WSN_ZigBee_ÐÞ¸Ä\WSN_ZigBee_Ð /
//                          Þ¸Ä\Projects\zstack\Utilities\SerialApp\CC2530DB\ /
//                          ..\..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\ -I      /
//                          E:\123\´óÈý\Éú²úÊµÏ°\WSN_ZigBee_ÐÞ¸Ä\WSN_ZigBee_Ð /
//                          Þ¸Ä\Projects\zstack\Utilities\SerialApp\CC2530DB\ /
//                          ..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\    /
//                          -I E:\123\´óÈý\Éú²úÊµÏ°\WSN_ZigBee_ÐÞ¸Ä\WSN_ZigBe /
//                          e_ÐÞ¸Ä\Projects\zstack\Utilities\SerialApp\CC2530 /
//                          DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\ /
//                          SINGLE_CHIP\ -Ohz --require_prototypes            /
//    List file          =  E:\123\´óÈý\Éú²úÊµÏ°\WSN_ZigBee_ÐÞ¸Ä\WSN_ZigBee_Ð /
//                          Þ¸Ä\Projects\zstack\Utilities\SerialApp\CC2530DB\ /
//                          CoordinatorEB-Pro\List\mac_autopend.s51           /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME mac_autopend

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_AND
        EXTERN ?L_AND_X
        EXTERN ?L_IOR
        EXTERN ?PUSH_XSTACK_I_FOUR
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?S_SHL
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTORE_R2345
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC ??MAC_SrcMatchAckAllPending?relay
        FUNCTION ??MAC_SrcMatchAckAllPending?relay,0203H
        PUBLIC ??MAC_SrcMatchAddEntry?relay
        FUNCTION ??MAC_SrcMatchAddEntry?relay,0203H
        PUBLIC ??MAC_SrcMatchCheckAllPending?relay
        FUNCTION ??MAC_SrcMatchCheckAllPending?relay,0203H
        PUBLIC ??MAC_SrcMatchCheckResult?relay
        FUNCTION ??MAC_SrcMatchCheckResult?relay,0203H
        PUBLIC ??MAC_SrcMatchDeleteEntry?relay
        FUNCTION ??MAC_SrcMatchDeleteEntry?relay,0203H
        PUBLIC ??MAC_SrcMatchEnable?relay
        FUNCTION ??MAC_SrcMatchEnable?relay,0203H
        FUNCTION ??macSrcMatchCheckSrcAddr?relay,0203H
        FUNCTION ??macSrcMatchGetEnableBit?relay,0203H
        FUNCTION ??macSrcMatchSetEnableBit?relay,0203H
        PUBLIC MAC_SrcMatchAckAllPending
        FUNCTION MAC_SrcMatchAckAllPending,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC MAC_SrcMatchAddEntry
        FUNCTION MAC_SrcMatchAddEntry,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 37, STACK
        PUBLIC MAC_SrcMatchCheckAllPending
        FUNCTION MAC_SrcMatchCheckAllPending,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC MAC_SrcMatchCheckResult
        FUNCTION MAC_SrcMatchCheckResult,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC MAC_SrcMatchDeleteEntry
        FUNCTION MAC_SrcMatchDeleteEntry,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC MAC_SrcMatchEnable
        FUNCTION MAC_SrcMatchEnable,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC macSrcMatchAddrMode
        FUNCTION macSrcMatchCheckSrcAddr,021203H
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 34, STACK
        FUNCTION macSrcMatchGetEnableBit,021203H
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 3, STACK
        PUBLIC macSrcMatchIsAckAllPending
        PUBLIC macSrcMatchIsEnabled
        PUBLIC macSrcMatchMaxNumEntries
        FUNCTION macSrcMatchSetEnableBit,021203H
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 20, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
macMemWriteRam      SYMBOL "macMemWriteRam"
macMemReadRam       SYMBOL "macMemReadRam"
osal_build_uint32   SYMBOL "osal_build_uint32"
osal_buffer_uint24  SYMBOL "osal_buffer_uint24"
osal_memcmp         SYMBOL "osal_memcmp"
??macMemReadRam?relay SYMBOL "?relay", macMemReadRam
??macMemWriteRam?relay SYMBOL "?relay", macMemWriteRam
??osal_buffer_uint24?relay SYMBOL "?relay", osal_buffer_uint24
??osal_build_uint32?relay SYMBOL "?relay", osal_build_uint32
??osal_memcmp?relay SYMBOL "?relay", osal_memcmp
MAC_SrcMatchAckAllPending SYMBOL "MAC_SrcMatchAckAllPending"
??MAC_SrcMatchAckAllPending?relay SYMBOL "?relay", MAC_SrcMatchAckAllPending
MAC_SrcMatchAddEntry SYMBOL "MAC_SrcMatchAddEntry"
??MAC_SrcMatchAddEntry?relay SYMBOL "?relay", MAC_SrcMatchAddEntry
MAC_SrcMatchCheckAllPending SYMBOL "MAC_SrcMatchCheckAllPending"
??MAC_SrcMatchCheckAllPending?relay SYMBOL "?relay", MAC_SrcMatchCheckAllPending
MAC_SrcMatchCheckResult SYMBOL "MAC_SrcMatchCheckResult"
??MAC_SrcMatchCheckResult?relay SYMBOL "?relay", MAC_SrcMatchCheckResult
MAC_SrcMatchDeleteEntry SYMBOL "MAC_SrcMatchDeleteEntry"
??MAC_SrcMatchDeleteEntry?relay SYMBOL "?relay", MAC_SrcMatchDeleteEntry
MAC_SrcMatchEnable  SYMBOL "MAC_SrcMatchEnable"
??MAC_SrcMatchEnable?relay SYMBOL "?relay", MAC_SrcMatchEnable

        EXTERN macMemWriteRam
        FUNCTION macMemWriteRam,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN macMemReadRam
        FUNCTION macMemReadRam,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_build_uint32
        FUNCTION osal_build_uint32,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_buffer_uint24
        FUNCTION osal_buffer_uint24,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcmp
        FUNCTION osal_memcmp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??macMemReadRam?relay
        FUNCTION ??macMemReadRam?relay,00H
        EXTERN ??macMemWriteRam?relay
        FUNCTION ??macMemWriteRam?relay,00H
        EXTERN ??osal_buffer_uint24?relay
        FUNCTION ??osal_buffer_uint24?relay,00H
        EXTERN ??osal_build_uint32?relay
        FUNCTION ??osal_build_uint32?relay,00H
        EXTERN ??osal_memcmp?relay
        FUNCTION ??osal_memcmp?relay,00H

// E:\123\´óÈý\Éú²úÊµÏ°\WSN_ZigBee_ÐÞ¸Ä\WSN_ZigBee_ÐÞ¸Ä\Components\mac\low_level\srf04\mac_autopend.c
//    1 /**************************************************************************************************
//    2   Filename:       mac_autopend.c
//    3   Revised:        $Date: 2008-07-31 17:11:07 -0700 (Thu, 31 Jul 2008) $
//    4   Revision:       $Revision: 17677 $
//    5 
//    6   Description:    This file implements the TIMAC Autopend feature.
//    7 
//    8 
//    9   Copyright 2006-2009 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License").  You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product.  Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 
//   40 /* low-level */
//   41 #include "mac_api.h"
//   42 #include "mac_radio_defs.h"
//   43 
//   44 /* osal */
//   45 #include "OSAL.h"
//   46 #include "saddr.h"
//   47 #include "ZComDef.h"
//   48 
//   49 #include "mac_autopend.h"
//   50 
//   51 /* ------------------------------------------------------------------------------------------------
//   52  *                                           Defines
//   53  * ------------------------------------------------------------------------------------------------
//   54  */
//   55 #define MAC_SRCMATCH_INVALID_INDEX           0xFF
//   56 
//   57 #define MAC_SRCMATCH_SHORT_ENTRY_SIZE        4
//   58 #define MAC_SRCMATCH_EXT_ENTRY_SIZE          Z_EXTADDR_LEN
//   59 
//   60 #define MAC_SRCMATCH_SHORT_MAX_NUM_ENTRIES   24
//   61 #define MAC_SRCMATCH_EXT_MAX_NUM_ENTRIES     12
//   62 
//   63 #define MAC_SRCMATCH_ENABLE_BITMAP_LEN       3
//   64           
//   65 
//   66 /* ------------------------------------------------------------------------------------------------
//   67  *                                      Global Variables
//   68  * ------------------------------------------------------------------------------------------------
//   69  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   70 bool macSrcMatchIsEnabled = FALSE; 
macSrcMatchIsEnabled:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   71 
//   72 
//   73 /* ------------------------------------------------------------------------------------------------
//   74  *                                         Local Variables
//   75  * ------------------------------------------------------------------------------------------------
//   76  */
//   77 
//   78 /* 
//   79  The following local Varables are only set in MAC_SrcMatchEnable()  
//   80  They are read only to the rest of the module.
//   81  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   82 uint8 macSrcMatchMaxNumEntries = 0;   
macSrcMatchMaxNumEntries:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_I:XDATA:NOROOT(0)
//   83 uint8 macSrcMatchAddrMode = SADDR_MODE_SHORT;  
macSrcMatchAddrMode:
        DATA8
        DS 1
        REQUIRE `?<Initializer for macSrcMatchAddrMode>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   84 bool macSrcMatchIsAckAllPending = FALSE;
macSrcMatchIsAckAllPending:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   85 
//   86 /* ------------------------------------------------------------------------------------------------
//   87  *                                         Local Functions
//   88  * ------------------------------------------------------------------------------------------------
//   89  */
//   90 static uint8 macSrcMatchFindEmptyEntry( void );
//   91 static uint8 macSrcMatchCheckSrcAddr ( sAddr_t *addr, uint16 panID  );
//   92 static void macSrcMatchSetPendEnBit( uint8 index );
//   93 static void macSrcMatchSetEnableBit( uint8 index, bool option );
//   94 static bool macSrcMatchCheckEnableBit( uint8 index );
//   95 static uint24 macSrcMatchGetEnableBit( void );
//   96 static uint24 macSrcMatchGetPendEnBit( void );
//   97 
//   98 
//   99 
//  100 /*********************************************************************
//  101  * @fn          MAC_SrcMatchEnable
//  102  *
//  103  * @brief      Enabled AUTOPEND and source address matching. If number of source
//  104  *             address table entries asked for is more than the hardware
//  105  *             supports. It will allocate maximum number of entries and return 
//  106  *             MAC_INVALID_PARAMETER. This function shall be not be called from 
//  107  *             ISR. It is not thread safe.
//  108  *
//  109  * @param      addressType - address type that the application uses
//  110  *                           SADDR_MODE_SHORT or SADDR_MODE_EXT
//  111  * @param      num - number of source address table entries to be used
//  112  *
//  113  * @return     MAC_SUCCESS or MAC_INVALID_PARAMETER
//  114  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  115 uint8 MAC_SrcMatchEnable ( uint8 addrType, uint8 num  )
MAC_SrcMatchEnable:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function MAC_SrcMatchEnable
        CODE
//  116 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        MOV     A,R1
        MOV     R0,A
//  117   uint8 rtn;
//  118   uint8 maxNum;
//  119     
//  120   /* Verify the address type */
//  121   if( addrType != SADDR_MODE_SHORT && addrType != SADDR_MODE_EXT )
        MOV     A,#0x2
        XRL     A,R0
        JZ      ??MAC_SrcMatchEnable_0
        MOV     A,#0x3
        XRL     A,R0
        JZ      ??MAC_SrcMatchEnable_1
//  122   {
//  123     return MAC_INVALID_PARAMETER;
        MOV     R1,#-0x18
        SJMP    ??MAC_SrcMatchEnable_2
//  124   }
??MAC_SrcMatchEnable_0:
        MOV     R3,#0x18
        SJMP    ??MAC_SrcMatchEnable_3
??MAC_SrcMatchEnable_1:
        MOV     R3,#0xc
//  125   
//  126   maxNum = ( addrType == SADDR_MODE_SHORT ) ? 
//  127            MAC_SRCMATCH_SHORT_MAX_NUM_ENTRIES : MAC_SRCMATCH_EXT_MAX_NUM_ENTRIES;
//  128            
//  129   if( num > maxNum )
??MAC_SrcMatchEnable_3:
        MOV     A,R3
        CLR     C
        SUBB    A,R2
        JNC     ??MAC_SrcMatchEnable_4
//  130   {
//  131     rtn = MAC_INVALID_PARAMETER;
        MOV     R1,#-0x18
//  132     num = maxNum;
        MOV     A,R3
        MOV     R2,A
        SJMP    ??MAC_SrcMatchEnable_5
//  133   }
//  134   else
//  135   {
//  136     rtn = MAC_SUCCESS;
??MAC_SrcMatchEnable_4:
        MOV     R1,#0x0
//  137   }
//  138     
//  139   /* Turn on Frame Filter (TIMAC enables frame filter by default), TBD */
//  140   MAC_RADIO_TURN_ON_RX_FRAME_FILTERING();
??MAC_SrcMatchEnable_5:
        MOV     DPTR,#0x6180
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.0
        MOVX    @DPTR,A
//  141   
//  142   /* Turn on Auto ACK (TIMAC turn on Auto ACK by default), TBD */
//  143   MAC_RADIO_TURN_ON_AUTO_ACK();
        MOV     DPTR,#0x6189
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.5
        MOVX    @DPTR,A
//  144   
//  145   /* Turn on Autopend: set SRCMATCH.AUTOPEND and SRCMATCH.SRC_MATCH_EN */
//  146   MAC_RADIO_TURN_ON_SRC_MATCH();
        MOV     DPTR,#0x6182
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.0
        MOVX    @DPTR,A
//  147  
//  148   /* Set SRCMATCH.AUTOPEND */
//  149   MAC_RADIO_TURN_ON_AUTOPEND();
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.1
        MOVX    @DPTR,A
//  150   
//  151   /* Configure all the globals */
//  152   macSrcMatchIsEnabled = TRUE;
        MOV     DPTR,#macSrcMatchIsEnabled
        MOV     A,#0x1
        MOVX    @DPTR,A
//  153   macSrcMatchMaxNumEntries = num;
        MOV     A,R2
        MOV     DPTR,#macSrcMatchMaxNumEntries
        MOVX    @DPTR,A
//  154   macSrcMatchAddrMode = addrType;           
        MOV     A,R0
        MOV     DPTR,#macSrcMatchAddrMode
        MOVX    @DPTR,A
//  155 
//  156   return rtn;
??MAC_SrcMatchEnable_2:
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock0
//  157 }
//  158 
//  159 /*********************************************************************
//  160  * @fn          MAC_SrcMatchAddEntry
//  161  *
//  162  * @brief       Add a short or extended address to source address table. This 
//  163  *              function shall be not be called from ISR. It is not thread safe.
//  164  *
//  165  * @param       addr - a pointer to sAddr_t which contains addrMode 
//  166  *                     and a union of a short 16-bit MAC address or an extended 
//  167  *                     64-bit MAC address to be added to the source address table. 
//  168  * @param       panID - the device PAN ID. It is only used when the addr is 
//  169  *                      using short address 
//  170 
//  171  * @return      MAC_SUCCESS or MAC_NO_RESOURCES (source address table full) 
//  172  *              or MAC_DUPLICATED_ENTRY (the entry added is duplicated),
//  173  *              or MAC_INVALID_PARAMETER if the input parameters are invalid.
//  174  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  175 uint8 MAC_SrcMatchAddEntry ( sAddr_t *addr, uint16 panID )
MAC_SrcMatchAddEntry:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function MAC_SrcMatchAddEntry
        CODE
//  176 {
        FUNCALL MAC_SrcMatchAddEntry, macSrcMatchCheckSrcAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MAC_SrcMatchAddEntry, macSrcMatchGetEnableBit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MAC_SrcMatchAddEntry, macMemWriteRam
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MAC_SrcMatchAddEntry, macMemWriteRam
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MAC_SrcMatchAddEntry, macMemReadRam
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MAC_SrcMatchAddEntry, macMemReadRam
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MAC_SrcMatchAddEntry, osal_build_uint32
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MAC_SrcMatchAddEntry, osal_buffer_uint24
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 37, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MAC_SrcMatchAddEntry, macMemWriteRam
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MAC_SrcMatchAddEntry, osal_buffer_uint24
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 37, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MAC_SrcMatchAddEntry, macMemWriteRam
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MAC_SrcMatchAddEntry, macSrcMatchSetEnableBit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 17
        MOV     A,#-0x11
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 33)
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
//  177   uint8 index;
//  178   uint8 entry[MAC_SRCMATCH_SHORT_ENTRY_SIZE];
//  179   
//  180   /* Check if the input parameters are valid */
//  181   if ( addr == NULL || addr->addrMode != macSrcMatchAddrMode )
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JZ      ??MAC_SrcMatchAddEntry_0
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     DPTR,#macSrcMatchAddrMode
        MOVX    A,@DPTR
        XRL     A,R0
        JZ      ??MAC_SrcMatchAddEntry_1
//  182   {
//  183     return MAC_INVALID_PARAMETER;  
??MAC_SrcMatchAddEntry_0:
        MOV     R1,#-0x18
        LJMP    ??MAC_SrcMatchAddEntry_2 & 0xFFFF
//  184   }
//  185   
//  186   /* Check if the entry already exists. Do not add duplicated entry */
//  187   if ( macSrcMatchCheckSrcAddr( addr, panID ) != MAC_SRCMATCH_INVALID_INDEX )
??MAC_SrcMatchAddEntry_1:
        ; Setup parameters for call to function macSrcMatchCheckSrcAddr
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R2,A
        LCALL   ??macSrcMatchCheckSrcAddr?relay
        MOV     A,R1
        CPL     A
        JZ      ??MAC_SrcMatchAddEntry_3
//  188   {
//  189     return MAC_DUPLICATED_ENTRY; 
        MOV     R1,#0x1e
        LJMP    ??MAC_SrcMatchAddEntry_2 & 0xFFFF
//  190   }
//  191   
//  192   /* If not duplicated, write to the radio RAM and enable the control bit */
//  193   
//  194   /* Find the first empty entry */
//  195   index = macSrcMatchFindEmptyEntry();
??MAC_SrcMatchAddEntry_3:
        ; Setup parameters for call to function macSrcMatchGetEnableBit
        LCALL   ??macSrcMatchGetEnableBit?relay
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?XSTORE_R2345
        MOV     DPTR,#macSrcMatchAddrMode
        MOVX    A,@DPTR
        XRL     A,#0x2
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        JNZ     ??MAC_SrcMatchAddEntry_4
        CLR     A
??MAC_SrcMatchAddEntry_5:
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_0:
        JNC     ??MAC_SrcMatchAddEntry_6
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        PUSH    DPL
        CFI CFA_SP SP+-1
        PUSH    DPH
        CFI CFA_SP SP+-2
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R0,#?V0 + 0
        LCALL   ?S_SHL
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_5:
        POP     DPH
        CFI CFA_SP SP+-1
        POP     DPL
        CFI CFA_SP SP+0
        MOV     R0,#?V0 + 0
        LCALL   ?L_AND_X
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        ORL     A,?V0 + 2
        ORL     A,?V0 + 3
        JZ      ??MAC_SrcMatchAddEntry_7
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        INC     A
        SJMP    ??MAC_SrcMatchAddEntry_5
??MAC_SrcMatchAddEntry_4:
        CLR     A
        SJMP    ??MAC_SrcMatchAddEntry_8
??MAC_SrcMatchAddEntry_9:
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        PUSH    DPL
        CFI CFA_SP SP+-1
        PUSH    DPH
        CFI CFA_SP SP+-2
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        CLR     C
        RLC     A
        MOV     R0,#?V0 + 0
        LCALL   ?S_SHL
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_6:
        POP     DPH
        CFI CFA_SP SP+-1
        POP     DPL
        CFI CFA_SP SP+0
        MOV     R0,#?V0 + 0
        LCALL   ?L_AND_X
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        ORL     A,?V0 + 2
        ORL     A,?V0 + 3
        JZ      ??MAC_SrcMatchAddEntry_10
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        INC     A
??MAC_SrcMatchAddEntry_8:
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_1:
        JC      ??MAC_SrcMatchAddEntry_9
//  196   if ( index == macSrcMatchMaxNumEntries )
??MAC_SrcMatchAddEntry_6:
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     DPTR,#macSrcMatchMaxNumEntries
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??MAC_SrcMatchAddEntry_11
//  197   {
//  198     return MAC_NO_RESOURCES;   /* Table is full */
        MOV     R1,#0x1a
        LJMP    ??MAC_SrcMatchAddEntry_2 & 0xFFFF
//  199   }
//  200   
//  201   if ( macSrcMatchAddrMode == SADDR_MODE_SHORT )
??MAC_SrcMatchAddEntry_11:
        MOV     DPTR,#macSrcMatchAddrMode
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??MAC_SrcMatchAddEntry_10
//  202   {
//  203     /* Write the PanID and short address */
//  204     entry[0] = LO_UINT16( panID );  /* Little Endian for the radio RAM */
??MAC_SrcMatchAddEntry_7:
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R6
        MOVX    @DPTR,A
//  205     entry[1] = HI_UINT16( panID );
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R7
        MOVX    @DPTR,A
//  206     entry[2] = LO_UINT16( addr->addr.shortAddr );
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_2:
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  207     entry[3] = HI_UINT16( addr->addr.shortAddr );
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_3:
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  208     MAC_RADIO_SRC_MATCH_TABLE_WRITE( ( index * MAC_SRCMATCH_SHORT_ENTRY_SIZE ), 
//  209                    entry, MAC_SRCMATCH_SHORT_ENTRY_SIZE );
        ; Setup parameters for call to function macMemWriteRam
        MOV     R1,#0x4
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        MOV     ?V0 + 1,#0x0
        MOV     A,#0x2
        SJMP    ??MAC_SrcMatchAddEntry_12
//  210   }
//  211   else
//  212   {
//  213     /* Write the extended address */
//  214     MAC_RADIO_SRC_MATCH_TABLE_WRITE( ( index * MAC_SRCMATCH_EXT_ENTRY_SIZE ), 
//  215                    addr->addr.extAddr, MAC_SRCMATCH_EXT_ENTRY_SIZE ); 
??MAC_SrcMatchAddEntry_10:
        ; Setup parameters for call to function macMemWriteRam
        MOV     R1,#0x8
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        MOV     ?V0 + 1,#0x0
        MOV     A,#0x3
??MAC_SrcMatchAddEntry_12:
        MOV     R0,#?V0 + 0
        LCALL   ?S_SHL
        ADD     A,?V0 + 0
        MOV     R2,A
        MOV     A,#0x61
        ADDC    A,?V0 + 1
        MOV     R3,A
        LCALL   ??macMemWriteRam?relay
//  216   }
//  217   
//  218   /* Set the Autopend enable bits */
//  219   macSrcMatchSetPendEnBit( index );
        MOV     DPTR,#macSrcMatchAddrMode
        MOVX    A,@DPTR
        XRL     A,#0x2
        MOV     R1,#0x3
        JNZ     ??MAC_SrcMatchAddEntry_13
        ; Setup parameters for call to function macMemReadRam
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,#0x67
        SJMP    ??MAC_SrcMatchAddEntry_14
??MAC_SrcMatchAddEntry_13:
        ; Setup parameters for call to function macMemReadRam
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,#0x64
??MAC_SrcMatchAddEntry_14:
        MOV     R3,#0x61
        LCALL   ??macMemReadRam?relay
        ; Setup parameters for call to function osal_build_uint32
        MOV     R1,#0x3
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_build_uint32?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     ?V0 + 2,R4
        MOV     ?V0 + 3,R5
        MOV     DPTR,#macSrcMatchAddrMode
        MOVX    A,@DPTR
        XRL     A,#0x2
        MOV     ?V0 + 4,#0x1
        MOV     ?V0 + 5,#0x0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        JNZ     ??MAC_SrcMatchAddEntry_15
        ; Setup parameters for call to function osal_buffer_uint24
        MOVX    A,@DPTR
        MOV     R0,#?V0 + 4
        LCALL   ?S_SHL
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_11:
        LCALL   ?L_IOR
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_FOUR
        CFI CFA_XSP16 add(XSP16, 37)
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_buffer_uint24?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 33)
        ; Setup parameters for call to function macMemWriteRam
        MOV     R1,#0x3
        MOV     A,R1
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,#0x67
        SJMP    ??MAC_SrcMatchAddEntry_16
??MAC_SrcMatchAddEntry_15:
        ; Setup parameters for call to function osal_buffer_uint24
        MOVX    A,@DPTR
        CLR     C
        RLC     A
        MOV     R0,#?V0 + 4
        LCALL   ?S_SHL
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_12:
        LCALL   ?L_IOR
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_FOUR
        CFI CFA_XSP16 add(XSP16, 37)
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_buffer_uint24?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 33)
        ; Setup parameters for call to function macMemWriteRam
        MOV     R1,#0x3
        MOV     A,R1
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,#0x64
??MAC_SrcMatchAddEntry_16:
        MOV     R3,#0x61
        LCALL   ??macMemWriteRam?relay
//  220   
//  221   /* Set the Src Match enable bits */
//  222   macSrcMatchSetEnableBit( index, TRUE );
        ; Setup parameters for call to function macSrcMatchSetEnableBit
        MOV     R2,#0x1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??macSrcMatchSetEnableBit?relay
//  223   
//  224   return MAC_SUCCESS;
        MOV     R1,#0x0
??MAC_SrcMatchAddEntry_2:
        MOV     A,#0x11
        CFI EndBlock cfiBlock1
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1
//  225   
//  226 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 33)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Valid
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock2

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond3 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_11
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond4 Using cfiCommon0
        CFI (cfiCond4) NoFunction
        CFI (cfiCond4) Conditional ??CrossCallReturnLabel_12
        CFI (cfiCond4) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond4) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond4) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond4) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond4) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond4) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond4) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond4) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond4) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond4) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond4) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond4) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond4) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond4) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond4) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond4) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond4) CFA_SP SP+0
        CFI (cfiCond4) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond5 Using cfiCommon0
        CFI (cfiCond5) NoFunction
        CFI (cfiCond5) Conditional ??CrossCallReturnLabel_13
        CFI (cfiCond5) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond5) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond5) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond5) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond5) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond5) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond5) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond5) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond5) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond5) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond5) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond5) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond5) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond5) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond5) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond5) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond5) CFA_SP SP+0
        CFI (cfiCond5) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker6 Using cfiCommon1
        CFI (cfiPicker6) NoFunction
        CFI (cfiPicker6) Picker
        MOV     A,?V0 + 5
        CFI EndBlock cfiCond3
        CFI EndBlock cfiCond4
        CFI EndBlock cfiCond5
        CFI EndBlock cfiPicker6
        REQUIRE ??Subroutine6_0
        ; // Fall through to label ??Subroutine6_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine6_0:
        CFI Block cfiCond7 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_8
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond8 Using cfiCommon0
        CFI (cfiCond8) NoFunction
        CFI (cfiCond8) Conditional ??CrossCallReturnLabel_9
        CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond8) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond8) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond8) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond8) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond8) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond8) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond8) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond8) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond8) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond8) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond8) CFA_SP SP+0
        CFI (cfiCond8) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond9 Using cfiCommon0
        CFI (cfiCond9) NoFunction
        CFI (cfiCond9) Conditional ??CrossCallReturnLabel_10
        CFI (cfiCond9) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond9) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond9) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond9) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond9) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond9) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond9) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond9) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond9) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond9) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond9) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond9) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond9) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond9) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond9) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond9) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond9) CFA_SP SP+0
        CFI (cfiCond9) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond10 Using cfiCommon0
        CFI (cfiCond10) NoFunction
        CFI (cfiCond10) Conditional ??CrossCallReturnLabel_11
        CFI (cfiCond10) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond10) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond10) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond10) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond10) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond10) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond10) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond10) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond10) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond10) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond10) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond10) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond10) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond10) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond10) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond10) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond10) CFA_SP SP+0
        CFI (cfiCond10) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond11 Using cfiCommon0
        CFI (cfiCond11) NoFunction
        CFI (cfiCond11) Conditional ??CrossCallReturnLabel_12
        CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond11) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond11) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond11) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond11) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond11) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond11) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond11) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond11) CFA_SP SP+0
        CFI (cfiCond11) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond12 Using cfiCommon0
        CFI (cfiCond12) NoFunction
        CFI (cfiCond12) Conditional ??CrossCallReturnLabel_13
        CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond12) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond12) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond12) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond12) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond12) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond12) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond12) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond12) CFA_SP SP+0
        CFI (cfiCond12) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker13 Using cfiCommon1
        CFI (cfiPicker13) NoFunction
        CFI (cfiPicker13) Picker
        RLC     A
        SUBB    A,0xE0 /* A   */
        MOV     ?V0 + 6,A
        MOV     ?V0 + 7,A
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        RET
        CFI EndBlock cfiCond7
        CFI EndBlock cfiCond8
        CFI EndBlock cfiCond9
        CFI EndBlock cfiCond10
        CFI EndBlock cfiCond11
        CFI EndBlock cfiCond12
        CFI EndBlock cfiPicker13

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond14 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond15 Using cfiCommon0
        CFI (cfiCond15) NoFunction
        CFI (cfiCond15) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond15) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond15) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond15) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond15) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond15) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond15) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond15) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond15) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond15) CFA_SP SP+0
        CFI (cfiCond15) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiPicker16 Using cfiCommon1
        CFI (cfiPicker16) NoFunction
        CFI (cfiPicker16) Picker
        MOVX    @DPTR,A
        MOV     DPTR,#macSrcMatchMaxNumEntries
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,R0
        RET
        CFI EndBlock cfiCond14
        CFI EndBlock cfiCond15
        CFI EndBlock cfiPicker16
//  227 
//  228 /*********************************************************************
//  229  * @fn         MAC_SrcMatchDeleteEntry
//  230  *
//  231  * @brief      Delete a short or extended address from source address table. 
//  232  *             This function shall be not be called from ISR. It is not thread safe.
//  233  *
//  234  * @param      addr - a pointer to sAddr_t which contains addrMode 
//  235  *                    and a union of a short 16-bit MAC address or an extended 
//  236  *                    64-bit MAC address to be deleted from the source address table. 
//  237  * @param      panID - the device PAN ID. It is only used when the addr is 
//  238  *                     using short address  
//  239  *
//  240  * @return     MAC_SUCCESS or MAC_INVALID_PARAMETER (address to be deleted 
//  241  *                  cannot be found in the source address table).
//  242  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  243 uint8 MAC_SrcMatchDeleteEntry ( sAddr_t *addr, uint16 panID  )
MAC_SrcMatchDeleteEntry:
        CFI Block cfiBlock17 Using cfiCommon0
        CFI Function MAC_SrcMatchDeleteEntry
        CODE
//  244 {
        FUNCALL MAC_SrcMatchDeleteEntry, macSrcMatchCheckSrcAddr
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MAC_SrcMatchDeleteEntry, macSrcMatchSetEnableBit
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  245   uint8 index;
//  246   
//  247   if ( addr == NULL || addr->addrMode != macSrcMatchAddrMode )
        MOV     A,R2
        ORL     A,R3
        JZ      ??MAC_SrcMatchDeleteEntry_0
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     DPTR,#macSrcMatchAddrMode
        MOVX    A,@DPTR
        XRL     A,R0
        JZ      ??MAC_SrcMatchDeleteEntry_1
//  248   {
//  249     return MAC_INVALID_PARAMETER;  
??MAC_SrcMatchDeleteEntry_0:
        MOV     R1,#-0x18
        SJMP    ??MAC_SrcMatchDeleteEntry_2
//  250   }
//  251   
//  252   /* Look up the source address table and find the entry. */
//  253   index = macSrcMatchCheckSrcAddr( addr, panID );
??MAC_SrcMatchDeleteEntry_1:
        ; Setup parameters for call to function macSrcMatchCheckSrcAddr
        LCALL   ??macSrcMatchCheckSrcAddr?relay
//  254 
//  255   if( index == MAC_SRCMATCH_INVALID_INDEX )
        MOV     A,#-0x1
        XRL     A,R1
        JZ      ??MAC_SrcMatchDeleteEntry_0
//  256   {
//  257     return MAC_INVALID_PARAMETER; 
//  258   }
//  259   
//  260   /* Clear Src Match enable bits */
//  261   macSrcMatchSetEnableBit( index, FALSE );
        ; Setup parameters for call to function macSrcMatchSetEnableBit
        MOV     R2,#0x0
        LCALL   ??macSrcMatchSetEnableBit?relay
//  262 
//  263   return MAC_SUCCESS;
        MOV     R1,#0x0
??MAC_SrcMatchDeleteEntry_2:
        SJMP    ?Subroutine0
        CFI EndBlock cfiBlock17
//  264 }
//  265                   
//  266 
//  267 /*********************************************************************
//  268  * @fn          MAC_SrcMatchAckAllPending
//  269  *
//  270  * @brief       Enabled/disable acknowledging all packets with pending bit set
//  271  *              The application normally enables it when adding new entries to 
//  272  *              the source address table fails due to the table is full, or 
//  273  *              disables it when more entries are deleted and the table has
//  274  *              empty slots.
//  275  *
//  276  * @param       option - TRUE (acknowledging all packets with pending field set)
//  277  *                       FALSE (acknowledging all packets with pending field cleared) 
//  278  *
//  279  * @return      none
//  280  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  281 void MAC_SrcMatchAckAllPending ( uint8 option  ) 
MAC_SrcMatchAckAllPending:
        CFI Block cfiBlock18 Using cfiCommon0
        CFI Function MAC_SrcMatchAckAllPending
        CODE
//  282 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  283   if( option == TRUE )
        MOV     A,#0x1
        XRL     A,R1
        MOV     DPTR,#macSrcMatchIsAckAllPending
        JNZ     ??MAC_SrcMatchAckAllPending_0
//  284   {
//  285     macSrcMatchIsAckAllPending = TRUE;
        MOV     A,#0x1
        MOVX    @DPTR,A
//  286     
//  287     /* Set the PENDING_OR register */
//  288     MAC_RADIO_TURN_ON_PENDING_OR();
        MOV     DPTR,#0x618a
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.2
        SJMP    ??MAC_SrcMatchAckAllPending_1
//  289   }
//  290   else
//  291   {
//  292     macSrcMatchIsAckAllPending = FALSE;
??MAC_SrcMatchAckAllPending_0:
        CLR     A
        MOVX    @DPTR,A
//  293     
//  294     /* Clear the PENDING_OR register */
//  295     MAC_RADIO_TURN_OFF_PENDING_OR();
        MOV     DPTR,#0x618a
        MOVX    A,@DPTR
        CLR     0xE0 /* A   */.2
??MAC_SrcMatchAckAllPending_1:
        MOVX    @DPTR,A
//  296   }
//  297 }
        SJMP    ?Subroutine0
        CFI EndBlock cfiBlock18
//  298 
//  299 /*********************************************************************
//  300  * @fn          MAC_SrcMatchCheckAllPending
//  301  *
//  302  * @brief       Check if acknowledging all packets with pending bit set
//  303  *              is enabled. 
//  304  *
//  305  * @param       none 
//  306  *
//  307  * @return      MAC_AUTOACK_PENDING_ALL_ON or MAC_AUTOACK_PENDING_ALL_OFF
//  308  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  309 uint8 MAC_SrcMatchCheckAllPending ( void )
MAC_SrcMatchCheckAllPending:
        CFI Block cfiBlock19 Using cfiCommon0
        CFI Function MAC_SrcMatchCheckAllPending
        CODE
//  310 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  311   if( macSrcMatchIsAckAllPending == TRUE )
        MOV     DPTR,#macSrcMatchIsAckAllPending
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??MAC_SrcMatchCheckAllPending_0
//  312   {
//  313     return MAC_AUTOACK_PENDING_ALL_ON; 
        MOV     R1,#-0x2
        SJMP    ??MAC_SrcMatchCheckAllPending_1
//  314   }
//  315   
//  316   return MAC_AUTOACK_PENDING_ALL_OFF;
??MAC_SrcMatchCheckAllPending_0:
        MOV     R1,#-0x1
        CFI EndBlock cfiBlock19
??MAC_SrcMatchCheckAllPending_1:
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0
//  317 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock20 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP     DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP    ?BRET
        CFI EndBlock cfiBlock20
//  318 
//  319 /*********************************************************************
//  320  * @fn          MAC_SrcMatchCheckResult
//  321  *
//  322  * @brief       Check the result of source matching
//  323  *
//  324  * @param       index - index of the entry in the source address table
//  325  *
//  326  * @return      TRUE or FALSE
//  327  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  328 bool MAC_SrcMatchCheckResult( void )
MAC_SrcMatchCheckResult:
        CFI Block cfiBlock21 Using cfiCommon0
        CFI Function MAC_SrcMatchCheckResult
        CODE
//  329 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  330   uint8 resIndex;
//  331   
//  332   if ( macSrcMatchIsAckAllPending )
        MOV     DPTR,#macSrcMatchIsAckAllPending
        MOVX    A,@DPTR
        JZ      ??MAC_SrcMatchCheckResult_0
//  333   {
//  334     return (TRUE);
        MOV     R1,#0x1
        SJMP    ??MAC_SrcMatchCheckResult_1
//  335   }
//  336   
//  337   MAC_RADIO_SRC_MATCH_RESINDEX( resIndex );
??MAC_SrcMatchCheckResult_0:
        MOV     DPTR,#0x6163
        MOVX    A,@DPTR
        MOV     R0,A
//  338   
//  339   return ( resIndex & AUTOPEND_RES );
        MOV     A,#0x40
        ANL     A,R0
        MOV     R1,A
??MAC_SrcMatchCheckResult_1:
        SJMP    ?Subroutine0
        CFI EndBlock cfiBlock21
//  340 }
//  341 
//  342 /*********************************************************************
//  343  * @fn          macSrcMatchFindEmptyEntry
//  344  *
//  345  * @brief       return index of the first empty entry found
//  346  *
//  347  * @param       none
//  348  *
//  349  * @return      uint8 - return index of the first empty entry found
//  350  */
//  351 static uint8 macSrcMatchFindEmptyEntry( void )
//  352 {
//  353   uint8  index;
//  354   uint24 enable;
//  355      
//  356   enable = MAC_RADIO_SRC_MATCH_GET_EN();
//  357         
//  358   if( macSrcMatchAddrMode == SADDR_MODE_SHORT )
//  359   {
//  360     for( index = 0; index < macSrcMatchMaxNumEntries; index++ )
//  361     {  
//  362       if( ( enable & ( 0x01 << index ) ) == 0 )
//  363       {
//  364         return index;
//  365       }
//  366     }
//  367   }
//  368   else
//  369   {
//  370     for( index = 0; index < macSrcMatchMaxNumEntries; index++ )
//  371     {  
//  372       if( ( enable & ( 0x01 << ( index * 2 ) ) ) == 0 )
//  373       {
//  374         return index;
//  375       }
//  376     }
//  377   }
//  378   
//  379   /* 
//  380    The value of index shall be macSrcMatchMaxNumEntries when it executes
//  381    here. The table is full.
//  382   */
//  383   return index;
//  384 }
//  385 
//  386 /*********************************************************************
//  387  * @fn         macSrcMatchCheckSrcAddr
//  388  *
//  389  * @brief      Check if a short or extended address is in the source address table.
//  390  *             This function shall not be called from ISR. It is not thread safe.
//  391  *
//  392  * @param      addr - a pointer to sAddr_t which contains addrMode 
//  393  *                    and a union of a short 16-bit MAC address or an extended 
//  394  *                    64-bit MAC address to be checked in the source address table. 
//  395  * @param      panID - the device PAN ID. It is only used when the addr is 
//  396  *                     using short address 
//  397 
//  398  * @return     uint8 - index of the entry in the table. Return 
//  399  *                     MAC_SRCMATCH_INVALID_INDEX (0xFF) if address not found.
//  400  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  401 static uint8 macSrcMatchCheckSrcAddr ( sAddr_t *addr, uint16 panID  )
macSrcMatchCheckSrcAddr:
        CFI Block cfiBlock22 Using cfiCommon0
        CFI Function macSrcMatchCheckSrcAddr
        CODE
//  402 {
        FUNCALL macSrcMatchCheckSrcAddr, macSrcMatchGetEnableBit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL macSrcMatchCheckSrcAddr, macMemReadRam
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL macSrcMatchCheckSrcAddr, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 15
        MOV     A,#-0xf
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 31)
//  403   
//  404   uint8 index;     
//  405   uint8 *pAddr;
//  406   uint8 entrySize;
//  407   uint8 entry[MAC_SRCMATCH_SHORT_ENTRY_SIZE];  
//  408   uint8 ramEntry[MAC_SRCMATCH_EXT_ENTRY_SIZE];
//  409       
//  410   /*
//  411    Currently, shadow memory is not supported to optimize SPI traffic.
//  412   */
//  413   
//  414   if( macSrcMatchAddrMode == SADDR_MODE_SHORT )
        MOV     DPTR,#macSrcMatchAddrMode
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??macSrcMatchCheckSrcAddr_0
//  415   {
//  416     entry[0] = LO_UINT16( panID );  /* Little Endian for the radio RAM */
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R4
        MOVX    @DPTR,A
//  417     entry[1] = HI_UINT16( panID );
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R5
        MOVX    @DPTR,A
//  418     entry[2] = LO_UINT16( addr->addr.shortAddr );
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  419     entry[3] = HI_UINT16( addr->addr.shortAddr );
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  420     pAddr = entry;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,DPL
        MOV     R1,DPH
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  421     entrySize = MAC_SRCMATCH_SHORT_ENTRY_SIZE;
        MOV     R7,#0x4
        SJMP    ??macSrcMatchCheckSrcAddr_1
//  422   }
//  423   else
//  424   {
//  425     pAddr = addr->addr.extAddr;
??macSrcMatchCheckSrcAddr_0:
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  426     entrySize = MAC_SRCMATCH_EXT_ENTRY_SIZE;
        MOV     R7,#0x8
//  427   }
//  428   
//  429   for( index = 0; index < macSrcMatchMaxNumEntries; index++ )
??macSrcMatchCheckSrcAddr_1:
        MOV     R6,#0x0
        SJMP    ??macSrcMatchCheckSrcAddr_2
??macSrcMatchCheckSrcAddr_3:
        INC     R6
??macSrcMatchCheckSrcAddr_2:
        MOV     DPTR,#macSrcMatchMaxNumEntries
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,R6
        CLR     C
        SUBB    A,R0
        JC      $+5
        LJMP    ??macSrcMatchCheckSrcAddr_4 & 0xFFFF
//  430   {
//  431     /* Check if the entry is enabled */
//  432     if( macSrcMatchCheckEnableBit( index ) == FALSE )
        MOV     A,R6
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
        MOV     DPTR,#macSrcMatchAddrMode
        MOVX    A,@DPTR
        XRL     A,#0x3
        JNZ     ??macSrcMatchCheckSrcAddr_5
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        CLR     C
        RLC     A
        MOVX    @DPTR,A
??macSrcMatchCheckSrcAddr_5:
        ; Setup parameters for call to function macSrcMatchGetEnableBit
        LCALL   ??macSrcMatchGetEnableBit?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     ?V0 + 6,R4
        MOV     ?V0 + 7,R5
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R0,#?V0 + 0
        LCALL   ?S_SHL
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_7:
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 0
        LCALL   ?L_AND
        MOV     A,?V0 + 4
        ORL     A,?V0 + 5
        ORL     A,?V0 + 6
        ORL     A,?V0 + 7
        JZ      ??macSrcMatchCheckSrcAddr_3
//  433     {
//  434       continue; 
//  435     }
//  436       
//  437     /* Compare the short address and pan ID */
//  438     MAC_RADIO_SRC_MATCH_TABLE_READ( ( index * entrySize ), ramEntry, entrySize );
        ; Setup parameters for call to function macMemReadRam
        MOV     A,R7
        MOV     R1,A
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,R6
        MOV     B,R1
        MUL     AB
        MOV     R2,A
        MOV     R0,B
        CLR     A
        ADD     A,R0
        MOV     R3,A
        MOV     A,#0x61
        ADDC    A,R3
        MOV     R3,A
        LCALL   ??macMemReadRam?relay
//  439      
//  440     if( osal_memcmp( pAddr, ramEntry, entrySize ) == TRUE )
        ; Setup parameters for call to function osal_memcmp
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOV     R1,DPL
        MOV     R2,DPH
        MOV     ?V0 + 0,R1
        MOV     ?V0 + 1,R2
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 34)
        MOV     ?V0 + 0,R7
        MOV     R4,?V0 + 0
        MOV     R5,#0x0
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_4:
        MOV     R1,DPL
        MOV     R2,DPH
        MOV     R3,#0x0
        LCALL   ??osal_memcmp?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 31)
        MOV     A,R1
        XRL     A,#0x1
        JZ      $+5
        LJMP    ??macSrcMatchCheckSrcAddr_3 & 0xFFFF
//  441     {
//  442       /* Match found */
//  443       return index;
        MOV     A,R6
        MOV     R1,A
        SJMP    ??macSrcMatchCheckSrcAddr_6
//  444     }
//  445   }
//  446   
//  447   return MAC_SRCMATCH_INVALID_INDEX;
??macSrcMatchCheckSrcAddr_4:
        MOV     R1,#-0x1
??macSrcMatchCheckSrcAddr_6:
        MOV     A,#0xf
        LJMP    ?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock22
//  448 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond23 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_5
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+-2
        CFI CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond24 Using cfiCommon0
        CFI (cfiCond24) NoFunction
        CFI (cfiCond24) Conditional ??CrossCallReturnLabel_6
        CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond24) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond24) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond24) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond24) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond24) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond24) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond24) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond24) CFA_SP SP+-2
        CFI (cfiCond24) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond25 Using cfiCommon0
        CFI (cfiCond25) NoFunction
        CFI (cfiCond25) Conditional ??CrossCallReturnLabel_7
        CFI (cfiCond25) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond25) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond25) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond25) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond25) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond25) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond25) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond25) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond25) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond25) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond25) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond25) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond25) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond25) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond25) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond25) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond25) CFA_SP SP+0
        CFI (cfiCond25) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiPicker26 Using cfiCommon1
        CFI (cfiPicker26) NoFunction
        CFI (cfiPicker26) Picker
        MOV     A,?V0 + 1
        RLC     A
        SUBB    A,0xE0 /* A   */
        MOV     ?V0 + 2,A
        MOV     ?V0 + 3,A
        RET
        CFI EndBlock cfiCond23
        CFI EndBlock cfiCond24
        CFI EndBlock cfiCond25
        CFI EndBlock cfiPicker26

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond27 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond28 Using cfiCommon0
        CFI (cfiCond28) NoFunction
        CFI (cfiCond28) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond28) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond28) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond28) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond28) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond28) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond28) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond28) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond28) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond28) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond28) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond28) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond28) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond28) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond28) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond28) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond28) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond28) CFA_SP SP+0
        CFI (cfiCond28) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond29 Using cfiCommon0
        CFI (cfiCond29) NoFunction
        CFI (cfiCond29) Conditional ??CrossCallReturnLabel_4
        CFI (cfiCond29) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond29) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond29) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond29) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond29) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond29) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond29) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond29) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond29) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond29) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond29) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond29) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond29) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond29) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond29) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond29) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond29) CFA_SP SP+0
        CFI (cfiCond29) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiPicker30 Using cfiCommon1
        CFI (cfiPicker30) NoFunction
        CFI (cfiPicker30) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        RET
        CFI EndBlock cfiCond27
        CFI EndBlock cfiCond28
        CFI EndBlock cfiCond29
        CFI EndBlock cfiPicker30
//  449 
//  450 
//  451 /*********************************************************************
//  452  * @fn          macSrcMatchSetPendEnBit
//  453  *
//  454  * @brief       Set the enable bit in the source address table
//  455  *
//  456  * @param       index - index of the entry in the source address table
//  457  *
//  458  * @return      none
//  459  */
//  460 static void macSrcMatchSetPendEnBit( uint8 index )
//  461 {
//  462   uint24 enable;
//  463   uint8 buf[MAC_SRCMATCH_ENABLE_BITMAP_LEN];
//  464        
//  465   enable = MAC_RADIO_SRC_MATCH_GET_PENDEN(); 
//  466       
//  467   if( macSrcMatchAddrMode == SADDR_MODE_SHORT )
//  468   {
//  469     enable |= ( 0x01 << index );
//  470     osal_buffer_uint24( buf, enable );
//  471     MAC_RADIO_SRC_MATCH_SET_SHORTPENDEN( buf );
//  472   }
//  473   else
//  474   {
//  475     enable |= ( 0x01 << ( index * 2 ) );
//  476     osal_buffer_uint24( buf, enable );
//  477     MAC_RADIO_SRC_MATCH_SET_EXTPENDEN( buf );
//  478   }
//  479 }
//  480 
//  481 /*********************************************************************
//  482  * @fn          macSrcMatchSetEnableBit
//  483  *
//  484  * @brief       Set or clear the enable bit in the SRCMATCH EN register
//  485  *
//  486  * @param       index - index of the entry in the source address table
//  487  * @param       option - true (set the enable bit), or false (clear the enable bit)
//  488  *
//  489  * @return      none
//  490  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  491 static void macSrcMatchSetEnableBit( uint8 index, bool option )
macSrcMatchSetEnableBit:
        CFI Block cfiBlock31 Using cfiCommon0
        CFI Function macSrcMatchSetEnableBit
        CODE
//  492 {
        FUNCALL macSrcMatchSetEnableBit, macSrcMatchGetEnableBit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL macSrcMatchSetEnableBit, osal_buffer_uint24
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL macSrcMatchSetEnableBit, osal_buffer_uint24
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL macSrcMatchSetEnableBit, osal_buffer_uint24
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL macSrcMatchSetEnableBit, osal_buffer_uint24
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
        MOV     A,R2
        MOV     R7,A
//  493   uint24 enable;  
//  494   
//  495   enable = MAC_RADIO_SRC_MATCH_GET_EN(); 
        ; Setup parameters for call to function macSrcMatchGetEnableBit
        LCALL   ??macSrcMatchGetEnableBit?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     ?V0 + 2,R4
        MOV     ?V0 + 3,R5
//  496       
//  497   if( option == TRUE )
        MOV     ?V0 + 6,#0x1
        MOV     ?V0 + 7,#0x0
        MOV     A,R6
        CLR     C
        RLC     A
        MOV     R0,#?V0 + 6
        LCALL   ?S_SHL
        MOV     ?V0 + 4,?V0 + 6
        MOV     ?V0 + 5,?V0 + 7
        MOV     ?V0 + 6,#0x1
        MOV     ?V0 + 7,A
        MOV     A,R6
        MOV     R0,#?V0 + 6
        LCALL   ?S_SHL
        MOV     R0,?V0 + 6
        MOV     R1,?V0 + 7
        INC     A
        XRL     A,R7
        MOV     DPTR,#macSrcMatchAddrMode
        JNZ     ??macSrcMatchSetEnableBit_0
//  498   {
//  499     if( macSrcMatchAddrMode == SADDR_MODE_SHORT )
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??macSrcMatchSetEnableBit_1
//  500     {
//  501       enable |= ( 0x01 << index );
//  502       MAC_RADIO_SRC_MATCH_SET_SHORTEN( enable );
        ; Setup parameters for call to function osal_buffer_uint24
        MOV     ?V0 + 4,R0
        MOV     A,R1
        MOV     ?V0 + 5,A
        LCALL   ??Subroutine6_0 & 0xFFFF
//  503     }
??CrossCallReturnLabel_8:
        LCALL   ?L_IOR
??macSrcMatchSetEnableBit_2:
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_FOUR
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     R2,#-0x7d
        SJMP    ??macSrcMatchSetEnableBit_3
        CFI CFA_XSP16 add(XSP16, 16)
//  504     else
//  505     {
//  506       enable |= ( 0x01 << ( index * 2 ) );
//  507       MAC_RADIO_SRC_MATCH_SET_EXTEN( enable );
??macSrcMatchSetEnableBit_1:
        ; Setup parameters for call to function osal_buffer_uint24
        LCALL   ?Subroutine4 & 0xFFFF
//  508     }
//  509   }
??CrossCallReturnLabel_13:
        LCALL   ?L_IOR
        SJMP    ??macSrcMatchSetEnableBit_4
//  510   else
//  511   {
//  512     if( macSrcMatchAddrMode == SADDR_MODE_SHORT )
??macSrcMatchSetEnableBit_0:
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??macSrcMatchSetEnableBit_5
//  513     {
//  514       enable &= ~( 0x01 << index );
//  515       MAC_RADIO_SRC_MATCH_SET_SHORTEN( enable );
        ; Setup parameters for call to function osal_buffer_uint24
        MOV     A,R0
        CPL     A
        MOV     ?V0 + 4,A
        MOV     A,R1
        CPL     A
        MOV     ?V0 + 5,A
        LCALL   ??Subroutine6_0 & 0xFFFF
//  516     }
??CrossCallReturnLabel_9:
        LCALL   ?L_AND
        SJMP    ??macSrcMatchSetEnableBit_2
//  517     else
//  518     {
//  519       enable &= ~( 0x01 << ( index * 2 ) );
//  520       MAC_RADIO_SRC_MATCH_SET_EXTEN( enable );
??macSrcMatchSetEnableBit_5:
        ; Setup parameters for call to function osal_buffer_uint24
        MOV     A,?V0 + 4
        CPL     A
        MOV     R0,A
        MOV     A,?V0 + 5
        CPL     A
        MOV     ?V0 + 4,R0
        MOV     ?V0 + 5,A
        LCALL   ??Subroutine6_0 & 0xFFFF
//  521     }
//  522 
//  523   }
??CrossCallReturnLabel_10:
        LCALL   ?L_AND
??macSrcMatchSetEnableBit_4:
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_FOUR
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     R2,#-0x7a
??macSrcMatchSetEnableBit_3:
        MOV     R3,#0x61
        LCALL   ??osal_buffer_uint24?relay
        MOV     A,#0x4
        LJMP    ?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock31
//  524 }
//  525 
//  526 /*********************************************************************
//  527  * @fn          macSrcMatchCheckEnableBit
//  528  *
//  529  * @brief       Check the enable bit in the source address table
//  530  *
//  531  * @param       index - index of the entry in the source address table
//  532  *
//  533  * @return      TRUE or FALSE
//  534  */
//  535 static bool macSrcMatchCheckEnableBit( uint8 index )
//  536 {
//  537   uint24 enable;
//  538   
//  539   if( macSrcMatchAddrMode == SADDR_MODE_EXT )
//  540   {
//  541     index *= 2;
//  542   }
//  543   
//  544   enable = MAC_RADIO_SRC_MATCH_GET_EN();
//  545      
//  546   if( enable & ( 0x01 << index ) )
//  547   {
//  548     return TRUE;
//  549   }
//  550 
//  551   return FALSE; 
//  552 }
//  553  
//  554 
//  555 /*********************************************************************
//  556  * @fn          macSrcMatchGetEnableBit
//  557  *
//  558  * @brief       Return the SRCMATCH enable bitmap
//  559  *
//  560  * @param       none
//  561  *
//  562  * @return      uint24 - 24 bits bitmap
//  563  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  564 static uint24 macSrcMatchGetEnableBit( void )
macSrcMatchGetEnableBit:
        CFI Block cfiBlock32 Using cfiCommon0
        CFI Function macSrcMatchGetEnableBit
        CODE
//  565 { 
        FUNCALL macSrcMatchGetEnableBit, macMemReadRam
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 3, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 3, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL macSrcMatchGetEnableBit, macMemReadRam
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 3, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 3, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL macSrcMatchGetEnableBit, osal_build_uint32
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 3, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 3, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 3
        MOV     A,#-0x3
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 3)
//  566   uint8 buf[MAC_SRCMATCH_ENABLE_BITMAP_LEN];
//  567   
//  568   if( macSrcMatchAddrMode == SADDR_MODE_SHORT )
        MOV     DPTR,#macSrcMatchAddrMode
        MOVX    A,@DPTR
        XRL     A,#0x2
        MOV     R1,#0x3
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        JNZ     ??macSrcMatchGetEnableBit_0
//  569   {
//  570     MAC_RADIO_GET_SRC_SHORTEN( buf );
        ; Setup parameters for call to function macMemReadRam
        MOV     R2,#-0x7d
        SJMP    ??macSrcMatchGetEnableBit_1
//  571   }
//  572   else
//  573   {
//  574     MAC_RADIO_GET_SRC_EXTEN( buf );
??macSrcMatchGetEnableBit_0:
        ; Setup parameters for call to function macMemReadRam
        MOV     R2,#-0x7a
??macSrcMatchGetEnableBit_1:
        MOV     R3,#0x61
        LCALL   ??macMemReadRam?relay
//  575   }
//  576   
//  577   return osal_build_uint32( buf, MAC_SRCMATCH_ENABLE_BITMAP_LEN );
        ; Setup parameters for call to function osal_build_uint32
        MOV     R1,#0x3
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_build_uint32?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 XSP16+0
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock32
//  578 
//  579 }

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for macSrcMatchAddrMode>`:
        DATA8
        DB 2

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MAC_SrcMatchEnable?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MAC_SrcMatchEnable

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MAC_SrcMatchAddEntry?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MAC_SrcMatchAddEntry

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MAC_SrcMatchDeleteEntry?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MAC_SrcMatchDeleteEntry

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MAC_SrcMatchAckAllPending?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MAC_SrcMatchAckAllPending

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MAC_SrcMatchCheckAllPending?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MAC_SrcMatchCheckAllPending

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MAC_SrcMatchCheckResult?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MAC_SrcMatchCheckResult

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??macSrcMatchCheckSrcAddr?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    macSrcMatchCheckSrcAddr

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??macSrcMatchSetEnableBit?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    macSrcMatchSetEnableBit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??macSrcMatchGetEnableBit?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    macSrcMatchGetEnableBit

        END
//  580 
//  581 
//  582 /*********************************************************************
//  583  * @fn          macSrcMatchGetPendEnBit
//  584  *
//  585  * @brief       Return the SRCMATCH Pend enable bitmap
//  586  *
//  587  * @param       none
//  588  *
//  589  * @return      uint24 - 24 bits bitmap
//  590  */
//  591 static uint24 macSrcMatchGetPendEnBit( void )
//  592 {
//  593   uint8 buf[MAC_SRCMATCH_ENABLE_BITMAP_LEN];
//  594 
//  595   if( macSrcMatchAddrMode == SADDR_MODE_SHORT )
//  596   {
//  597     MAC_RADIO_GET_SRC_SHORTPENDEN( buf );
//  598   }
//  599   else
//  600   {
//  601     MAC_RADIO_GET_SRC_EXTENPEND( buf );
//  602   }
//  603   
//  604   return osal_build_uint32( buf, MAC_SRCMATCH_ENABLE_BITMAP_LEN );
//  605 }
//  606 
//  607 
// 
// 1 364 bytes in segment BANKED_CODE
//    54 bytes in segment BANK_RELAYS
//     1 byte  in segment XDATA_I
//     1 byte  in segment XDATA_ID
//     3 bytes in segment XDATA_Z
// 
// 1 419 bytes of CODE  memory
//     4 bytes of XDATA memory
//
//Errors: none
//Warnings: none
