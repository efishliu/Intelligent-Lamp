///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.3.10338/W32 for 8051        03/Jul/2018  14:52:41 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Components\mt\MT_SYS.c                           /
//    Command line       =  -f D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_Ð /
//                          Þ¸Ä\Projects\zstack\Utilities\SerialApp\CC2530DB\ /
//                          ..\..\..\Tools\CC2530DB\f8wRouter.cfg             /
//                          (-DCPU32MHZ -DROOT=__near_func                    /
//                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE -DRTR_NWK        /
//                          -DBLINK_LEDS) -f D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼ /
//                          «\WSN_ZigBee_ÐÞ¸Ä\Projects\zstack\Utilities\Seria /
//                          lApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.c /
//                          fg (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR  /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          "-DCONST=const __code" -DGENERIC=__generic        /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµ /
//                          Ï°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\Components\mt\MT_SYS.c    /
//                          -D ZIGBEEPRO -D HAL_UART=TRUE -D                  /
//                          SERIAL_APP_PORT=0 -D LCD_SUPPORTED -lC            /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\Rou /
//                          terEB-Pro\List\ -lA D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ /
//                          ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\Projects\zstack\Utilities\Se /
//                          rialApp\CC2530DB\RouterEB-Pro\List\               /
//                          --diag_suppress Pe001,Pa010 -o                    /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\Rou /
//                          terEB-Pro\Obj\ -e --debug --core=plain            /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 8 -I D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµ /
//                          Ï°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\Projects\zstack\Utilities /
//                          \SerialApp\CC2530DB\ -I                           /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          SOURCE\ -I D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ /
//                          ZigBee_ÐÞ¸Ä\Projects\zstack\Utilities\SerialApp\C /
//                          C2530DB\..\..\..\ZMAIN\TI2530DB\ -I               /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\MT\ -I                     /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\HAL\INCLUDE\ -I            /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\ -I    /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\ -I         /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\OSAL\INCLUDE\ -I           /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\STACK\AF\ -I               /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\STACK\NWK\ -I              /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\STACK\SEC\ -I              /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\STACK\SAPI\ -I             /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\STACK\SYS\ -I              /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\STACK\ZDO\ -I              /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\ZMAC\F8W\ -I               /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\ZMAC\ -I                   /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\SERVICES\SADDR\ -I         /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\SERVICES\SDATA\ -I         /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\MAC\INCLUDE\ -I            /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\ -I         /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\ -I    /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE /
//                          _CHIP\ -Ohz --require_prototypes                  /
//    List file          =  D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\Rou /
//                          terEB-Pro\List\MT_SYS.s51                         /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME MT_SYS

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8

        PUBLIC ??MT_SysOsalTimerExpired?relay
        FUNCTION ??MT_SysOsalTimerExpired?relay,0203H
        PUBLIC ??MT_SysResetInd?relay
        FUNCTION ??MT_SysResetInd?relay,0203H
        PUBLIC MT_SysOsalEventId
        PUBLIC MT_SysOsalTimerExpired
        FUNCTION MT_SysOsalTimerExpired,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC MT_SysResetInd
        FUNCTION MT_SysResetInd,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 3, STACK
        LOCFRAME XSTACK, 6, STACK
        PUBWEAK SLEEPSTA
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
MT_BuildAndSendZToolResponse SYMBOL "MT_BuildAndSendZToolResponse"
??MT_BuildAndSendZToolResponse?relay SYMBOL "?relay", MT_BuildAndSendZToolResponse
MT_SysOsalTimerExpired SYMBOL "MT_SysOsalTimerExpired"
??MT_SysOsalTimerExpired?relay SYMBOL "?relay", MT_SysOsalTimerExpired
MT_SysResetInd      SYMBOL "MT_SysResetInd"
??MT_SysResetInd?relay SYMBOL "?relay", MT_SysResetInd

        EXTERN MT_BuildAndSendZToolResponse
        FUNCTION MT_BuildAndSendZToolResponse,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??MT_BuildAndSendZToolResponse?relay
        FUNCTION ??MT_BuildAndSendZToolResponse?relay,00H

// D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\Components\mt\MT_SYS.c
//    1 /***************************************************************************************************
//    2   Filename:       MT.c
//    3   Revised:        $Date: 2009-03-12 16:25:22 -0700 (Thu, 12 Mar 2009) $
//    4   Revision:       $Revision: 19404 $
//    5 
//    6   Description:   MonitorTest
//    7 
//    8   Copyright 2007 Texas Instruments Incorporated. All rights reserved.
//    9 
//   10   IMPORTANT: Your use of this Software is limited to those specific rights
//   11   granted under the terms of a software license agreement between the user
//   12   who downloaded the software, his/her employer (which must be your employer)
//   13   and Texas Instruments Incorporated (the "License").  You may not use this
//   14   Software unless you agree to abide by the terms of the License. The License
//   15   limits your use, and you acknowledge, that the Software may not be modified,
//   16   copied or distributed unless embedded on a Texas Instruments microcontroller
//   17   or used solely and exclusively in conjunction with a Texas Instruments radio
//   18   frequency transceiver, which is integrated into your product.  Other than for
//   19   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   20   works of, modify, distribute, perform, display or sell this Software and/or
//   21   its documentation for any purpose.
//   22 
//   23   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   24   PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   25   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   26   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   27   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   28   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   29   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   30   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   31   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   32   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   33   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   34 
//   35   Should you have any questions regarding your right to use this Software,
//   36   contact Texas Instruments Incorporated at www.TI.com.
//   37 
//   38  ***************************************************************************************************/
//   39 
//   40 /***************************************************************************************************
//   41  * INCLUDES
//   42  ***************************************************************************************************/
//   43 #include "ZComDef.h"
//   44 #include "MT.h"
//   45 #include "MT_SYS.h"
//   46 #include "MT_VERSION.h"
//   47 #include "nwk_util.h"
//   48 #include "OSAL_NV.h"
//   49 #include "Onboard.h"  /* This is here because RAM read/write macros need it */

        ASEGN SFR_AN:DATA:NOROOT,09dH
// unsigned char volatile __sfr SLEEPSTA
SLEEPSTA:
        DATA8
        DS 1
//   50 #include "hal_adc.h"
//   51 #include "ZGlobals.h"
//   52 
//   53 #include "Osal_Memory.h"
//   54 #include "OSAL.h"
//   55 
//   56 /***************************************************************************************************
//   57  * MACROS
//   58  ***************************************************************************************************/
//   59 
//   60 #define MT_SYS_DEVICE_INFO_RESPONSE_LEN 14
//   61 #define MT_NV_ITEM_MAX_LENGTH           250
//   62 
//   63 /***************************************************************************************************
//   64  * CONSTANT
//   65  ***************************************************************************************************/

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//   66 const uint16 MT_SysOsalEventId [] = {
MT_SysOsalEventId:
        DATA16
        DW 2048
        DW 1024
        DW 512
        DW 256
//   67                                       MT_SYS_OSAL_EVENT_0,
//   68                                       MT_SYS_OSAL_EVENT_1,
//   69                                       MT_SYS_OSAL_EVENT_2,
//   70                                       MT_SYS_OSAL_EVENT_3
//   71                                     };
//   72 
//   73 typedef enum {
//   74   GPIO_DIR,
//   75   GPIO_TRI,
//   76   GPIO_SET,
//   77   GPIO_CLR,
//   78   GPIO_TOG,
//   79   GPIO_GET,
//   80   GPIO_HiD = 0x12
//   81 } GPIO_Op_t;
//   82 
//   83 #define GPIO_MASK  0x33
//   84 
//   85 /***************************************************************************************************
//   86  * EXTERNAL FUNCTIONS
//   87  ***************************************************************************************************/
//   88 extern uint16 HalAdcReadVoltage(void);
//   89 extern uint16 HalAdcReadTemperature(void);
//   90 
//   91 /***************************************************************************************************
//   92  * LOCAL FUNCTIONS
//   93  ***************************************************************************************************/
//   94 #if defined (MT_SYS_FUNC)
//   95 void MT_SysReset(uint8 *pBuf);
//   96 void MT_SysPing(void);
//   97 void MT_SysVersion(void);
//   98 void MT_SysSetExtAddr(uint8 *pBuf);
//   99 void MT_SysGetExtAddr(void);
//  100 void MT_SysOsalNVWrite(uint8 *pBuf);
//  101 void MT_SysOsalNVRead(uint8 *pBuf);
//  102 void MT_SysOsalStartTimer(uint8 *pBuf);
//  103 void MT_SysOsalStopTimer(uint8 *pBuf);
//  104 void MT_SysRandom(void);
//  105 void MT_SysAdcRead(uint8 *pBuf);
//  106 void MT_SysGpio(uint8 *pBuf);
//  107 void MT_SysGetDeviceInfo(uint8 *pBuf);
//  108 #endif /* MT_SYS_FUNC */
//  109 
//  110 #if defined (MT_SYS_FUNC)
//  111 /***************************************************************************************************
//  112  * @fn      MT_SysProcessing
//  113  *
//  114  * @brief   Process all the SYS commands that are issued by test tool
//  115  *
//  116  * @param   pBuf - pointer to the msg buffer
//  117  *
//  118  *          | LEN  | CMD0  | CMD1  |  DATA  |
//  119  *          |  1   |   1   |   1   |  0-255 |
//  120  *
//  121  * @return  status
//  122  ***************************************************************************************************/
//  123 uint8 MT_SysCommandProcessing(uint8 *pBuf)
//  124 {
//  125   uint8 status = MT_RPC_SUCCESS;
//  126 
//  127   switch (pBuf[MT_RPC_POS_CMD1])
//  128   {
//  129     case MT_SYS_RESET_REQ:
//  130       MT_SysReset(pBuf);
//  131       break;
//  132 
//  133     case MT_SYS_PING:
//  134       MT_SysPing();
//  135       break;
//  136 
//  137     case MT_SYS_VERSION:
//  138       MT_SysVersion();
//  139       break;
//  140 
//  141     case MT_SYS_SET_EXTADDR:
//  142       MT_SysSetExtAddr(pBuf);
//  143       break;
//  144 
//  145     case MT_SYS_GET_EXTADDR:
//  146       MT_SysGetExtAddr();
//  147       break;
//  148 
//  149     case MT_SYS_OSAL_NV_READ:
//  150       MT_SysOsalNVRead(pBuf);
//  151       break;
//  152 
//  153     case MT_SYS_OSAL_NV_WRITE:
//  154       MT_SysOsalNVWrite(pBuf);
//  155       break;
//  156 
//  157     case MT_SYS_OSAL_START_TIMER:
//  158       MT_SysOsalStartTimer(pBuf);
//  159       break;
//  160 
//  161     case MT_SYS_OSAL_STOP_TIMER:
//  162       MT_SysOsalStopTimer(pBuf);
//  163       break;
//  164 
//  165     case MT_SYS_RANDOM:
//  166       MT_SysRandom();
//  167       break;
//  168 
//  169     case MT_SYS_ADC_READ:
//  170       MT_SysAdcRead(pBuf);
//  171       break;
//  172 
//  173     case MT_SYS_GPIO:
//  174       MT_SysGpio(pBuf);
//  175       break;
//  176 
//  177     case MT_SYS_RESET_IND:
//  178       //TBD
//  179       break;
//  180 
//  181     default:
//  182       status = MT_RPC_ERR_COMMAND_ID;
//  183       break;
//  184   }
//  185 
//  186   return status;
//  187 }
//  188 
//  189 /***************************************************************************************************
//  190  * @fn      MT_SysReset
//  191  *
//  192  * @brief   Reset/reprogram the device.
//  193  * @param   typID: 0=reset, 1=serial bootloader
//  194  *
//  195  * @return  None
//  196  ***************************************************************************************************/
//  197 void MT_SysReset(uint8 *pBuf)
//  198 {
//  199   (void)pBuf;  // Intentionally unreferenced parameter
//  200   SystemReset();  /* Restart this program */
//  201 }
//  202 
//  203 /***************************************************************************************************
//  204  * @fn      MT_SysPing
//  205  *
//  206  * @brief   Process the Ping command
//  207  *
//  208  * @param   None
//  209  *
//  210  * @return  None
//  211  ***************************************************************************************************/
//  212 void MT_SysPing(void)
//  213 {
//  214   uint16 tmp16;
//  215   uint8 retArray[2];
//  216 
//  217   /* Build Capabilities */
//  218   tmp16 = MT_CAP_SYS | MT_CAP_MAC | MT_CAP_NWK | MT_CAP_AF | MT_CAP_ZDO|
//  219           MT_CAP_SAPI | MT_CAP_UTIL | MT_CAP_DEBUG | MT_CAP_APP | MT_CAP_ZOAD;
//  220 
//  221   /* Convert to high byte first into temp buffer */
//  222   retArray[0] = LO_UINT16( tmp16 );
//  223   retArray[1] = HI_UINT16( tmp16 );
//  224 
//  225   /* Build and send back the response */
//  226   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), MT_SYS_PING,
//  227                                 sizeof (tmp16), retArray );
//  228 }
//  229 
//  230 /***************************************************************************************************
//  231  * @fn      MT_SysVersion
//  232  *
//  233  * @brief   Process the Version command
//  234  *
//  235  * @param   None
//  236  *
//  237  * @return  None
//  238  ***************************************************************************************************/
//  239 void MT_SysVersion(void)
//  240 {
//  241   byte *verStr = (byte *)MTVersionString;
//  242   uint8 respLen = sizeof(MTVersionString);
//  243 
//  244   /* Build and send back the response */
//  245   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), MT_SYS_VERSION,
//  246                                respLen, verStr);
//  247 }
//  248 
//  249 /***************************************************************************************************
//  250  * @fn      MT_SysSetExtAddr
//  251  *
//  252  * @brief   Set the Extended Address
//  253  *
//  254  * @param   pBuf
//  255  *
//  256  * @return  None
//  257  ***************************************************************************************************/
//  258 void MT_SysSetExtAddr(uint8 *pBuf)
//  259 {
//  260   uint8 retValue = ZFailure;
//  261   uint8 cmdId;
//  262 
//  263   /* parse header */
//  264   cmdId = pBuf[MT_RPC_POS_CMD1];
//  265   pBuf += MT_RPC_FRAME_HDR_SZ;
//  266 
//  267   if ( ZMacSetReq(ZMacExtAddr, pBuf) == ZMacSuccess )
//  268   {
//  269     retValue = osal_nv_write(ZCD_NV_EXTADDR, 0, Z_EXTADDR_LEN, pBuf);
//  270   }
//  271 
//  272   /* Build and send back the response */
//  273   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), cmdId, 1, &retValue);
//  274 
//  275 }
//  276 
//  277 /***************************************************************************************************
//  278  * @fn      MT_SysVersion
//  279  *
//  280  * @brief   Process the Version command
//  281  *
//  282  * @param   None
//  283  *
//  284  * @return  None
//  285  ***************************************************************************************************/
//  286 void MT_SysGetExtAddr(void)
//  287 {
//  288   uint8 extAddr[Z_EXTADDR_LEN];
//  289 
//  290   ZMacGetReq( ZMacExtAddr, extAddr );
//  291 
//  292   /* Build and send back the response */
//  293   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), MT_SYS_GET_EXTADDR,
//  294                                Z_EXTADDR_LEN, extAddr);
//  295 }
//  296 
//  297 /***************************************************************************************************
//  298  * @fn      MT_SysOsalNVRead
//  299  *
//  300  * @brief  Read a NV value
//  301  *
//  302  * @param  uint8 pBuf - pointer to the data
//  303  *
//  304  * @return  None
//  305  ***************************************************************************************************/
//  306 void MT_SysOsalNVRead(uint8 *pBuf)
//  307 {
//  308   uint16 nvId;
//  309   uint8 nvItemLen=0, nvItemOffset=0;
//  310   uint8 *pRetBuf=NULL;
//  311   uint8 respLen, cmdId;
//  312 
//  313   /* parse header */
//  314   cmdId = pBuf[MT_RPC_POS_CMD1];
//  315   pBuf += MT_RPC_FRAME_HDR_SZ;
//  316 
//  317   /* Get the ID */
//  318   nvId = BUILD_UINT16(pBuf[0], pBuf[1]);
//  319   pBuf += sizeof(uint16);
//  320 
//  321   /* Calculate the offset */
//  322   nvItemOffset = *pBuf;
//  323 
//  324   nvItemLen = osal_nv_item_len(nvId);
//  325 
//  326   /* Return only 250 bytes max */
//  327   if (nvItemLen > MT_NV_ITEM_MAX_LENGTH)
//  328   {
//  329     nvItemLen = MT_NV_ITEM_MAX_LENGTH;
//  330   }
//  331 
//  332   if ((nvItemLen > 0) && ((nvItemLen - nvItemOffset) > 0))
//  333   {
//  334     respLen = nvItemLen - nvItemOffset + 2;
//  335   }
//  336   else
//  337   {
//  338     respLen = 2;
//  339   }
//  340 
//  341   pRetBuf = osal_mem_alloc(respLen);
//  342 
//  343   if (pRetBuf != NULL)
//  344   {
//  345     osal_memset(pRetBuf, 0, respLen);
//  346 
//  347     /* Default to ZFailure */
//  348     pRetBuf[0] = ZFailure;
//  349 
//  350     if (respLen > 2)
//  351     {
//  352       if (((osal_nv_read( nvId, (uint16)nvItemOffset, (uint16)nvItemLen, &pRetBuf[2])) == ZSUCCESS) && (respLen > 2))
//  353       {
//  354         pRetBuf[0] = ZSuccess;
//  355       }
//  356       pRetBuf[1] = nvItemLen - nvItemOffset;
//  357     }
//  358     else
//  359     {
//  360       pRetBuf[1] = 0;
//  361     }
//  362 
//  363     /* Build and send back the response */
//  364     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), cmdId, respLen, pRetBuf );
//  365 
//  366     osal_mem_free(pRetBuf);
//  367   }
//  368 
//  369 
//  370 }
//  371 
//  372 /***************************************************************************************************
//  373  * @fn      MT_SysOsalNVWrite
//  374  *
//  375  * @brief
//  376  *
//  377  * @param   uint8 pData - pointer to the data
//  378  *
//  379  * @return  None
//  380  ***************************************************************************************************/
//  381 void MT_SysOsalNVWrite(uint8 *pBuf)
//  382 {
//  383   uint16 nvId;
//  384   uint8 nvItemLen=0, nvItemOffset=0;
//  385   uint8 retValue, cmdId;
//  386 
//  387   /* parse header */
//  388   cmdId = pBuf[MT_RPC_POS_CMD1];
//  389   pBuf += MT_RPC_FRAME_HDR_SZ;
//  390 
//  391   /* Get the ID */
//  392   nvId = BUILD_UINT16(pBuf[0], pBuf[1]);
//  393   pBuf += sizeof(uint16);
//  394 
//  395   /* Calculate the offset */
//  396   nvItemOffset = *pBuf++;
//  397 
//  398   /* Calculate the length */
//  399   nvItemLen = *pBuf++;
//  400 
//  401   /* Default to ZFailure */
//  402   retValue = ZFailure;
//  403 
//  404   /* Set the zGlobal value of this NV item. */
//  405   zgSetItem( nvId, (uint16)nvItemLen, pBuf );
//  406 
//  407   if ((osal_nv_write( nvId, (uint16)nvItemOffset, (uint16)nvItemLen, pBuf)) == ZSUCCESS)
//  408   {
//  409     retValue = ZSuccess;
//  410   }
//  411 
//  412   /* Build and send back the response */
//  413   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), cmdId, 1, &retValue );
//  414 }
//  415 
//  416 /***************************************************************************************************
//  417  * @fn      MT_SysOsalStartTimer
//  418  *
//  419  * @brief
//  420  *
//  421  * @param   uint8 pData - pointer to the data
//  422  *
//  423  * @return  None
//  424  ***************************************************************************************************/
//  425 void MT_SysOsalStartTimer(uint8 *pBuf)
//  426 {
//  427   uint16 eventId;
//  428   uint8 retValue = ZFailure;
//  429   uint8 cmdId;
//  430 
//  431   /* parse header */
//  432   cmdId = pBuf[MT_RPC_POS_CMD1];
//  433   pBuf += MT_RPC_FRAME_HDR_SZ;
//  434 
//  435   if (*pBuf <= 3)
//  436   {
//  437     eventId = (uint16) MT_SysOsalEventId[*pBuf];
//  438     retValue = osal_start_timerEx(MT_TaskID, eventId, BUILD_UINT16(pBuf[1], pBuf[2]));
//  439   }
//  440   else
//  441   {
//  442     retValue = ZInvalidParameter;
//  443   }
//  444 
//  445   /* Build and send back the response */
//  446   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), cmdId, 1, &retValue);
//  447 }
//  448 
//  449 /***************************************************************************************************
//  450  * @fn      MT_SysOsalStopTimer
//  451  *
//  452  * @brief
//  453  *
//  454  * @param   uint8 pData - pointer to the data
//  455  *
//  456  * @return  None
//  457  ***************************************************************************************************/
//  458 void MT_SysOsalStopTimer(uint8 *pBuf)
//  459 {
//  460   uint16 eventId;
//  461   uint8 retValue = ZFailure;
//  462   uint8 cmdId;
//  463 
//  464   /* parse header */
//  465   cmdId = pBuf[MT_RPC_POS_CMD1];
//  466   pBuf += MT_RPC_FRAME_HDR_SZ;
//  467 
//  468   if (*pBuf <= 3)
//  469   {
//  470     eventId = (uint16) MT_SysOsalEventId[*pBuf];
//  471     retValue = osal_stop_timerEx(MT_TaskID, eventId);
//  472   }
//  473   else
//  474   {
//  475     retValue = ZInvalidParameter;
//  476   }
//  477 
//  478   /* Build and send back the response */
//  479   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), cmdId, 1, &retValue );
//  480 }
//  481 
//  482 /***************************************************************************************************
//  483  * @fn      MT_SysRandom
//  484  *
//  485  * @brief
//  486  *
//  487  * @param   uint8 pData - pointer to the data
//  488  *
//  489  * @return  None
//  490  ***************************************************************************************************/
//  491 void MT_SysRandom()
//  492 {
//  493   uint16 randValue = Onboard_rand();
//  494   uint8 retArray[2];
//  495 
//  496   retArray[0] = LO_UINT16(randValue);
//  497   retArray[1] = HI_UINT16(randValue);
//  498 
//  499   /* Build and send back the response */
//  500   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), MT_SYS_RANDOM, 2, retArray );
//  501 }
//  502 
//  503 /***************************************************************************************************
//  504  * @fn      MT_SysAdcRead
//  505  *
//  506  * @brief   Reading ADC value, temperature sensor and voltage
//  507  *
//  508  * @param   uint8 pData - pointer to the data
//  509  *
//  510  * @return  None
//  511  ***************************************************************************************************/
//  512 void MT_SysAdcRead(uint8 *pBuf)
//  513 {
//  514   uint8 channel, resolution;
//  515   uint16 tempValue;
//  516   uint8 retArray[2];
//  517   uint8 cmdId;
//  518 
//  519   /* parse header */
//  520   cmdId = pBuf[MT_RPC_POS_CMD1];
//  521   pBuf += MT_RPC_FRAME_HDR_SZ;
//  522 
//  523   /* Channel */
//  524   channel = *pBuf++;
//  525 
//  526   /* Resolution */
//  527   resolution = *pBuf++;
//  528 
//  529   /* Voltage reading */
//  530   switch (channel)
//  531   {
//  532     /* Analog input channel */
//  533     case HAL_ADC_CHANNEL_0:
//  534     case HAL_ADC_CHANNEL_1:
//  535     case HAL_ADC_CHANNEL_2:
//  536     case HAL_ADC_CHANNEL_3:
//  537     case HAL_ADC_CHANNEL_4:
//  538     case HAL_ADC_CHANNEL_5:
//  539     case HAL_ADC_CHANNEL_6:
//  540     case HAL_ADC_CHANNEL_7:
//  541       tempValue = HalAdcRead(channel, resolution);
//  542       break;
//  543 
//  544     /* Temperature sensor */
//  545     case(HAL_ADC_CHANNEL_TEMP):
//  546       tempValue = HalAdcRead(HAL_ADC_CHANNEL_TEMP, HAL_ADC_RESOLUTION_14);
//  547       break;
//  548 
//  549     /* Voltage reading */
//  550     case(HAL_ADC_CHANNEL_VDD):
//  551       tempValue = HalAdcRead(HAL_ADC_CHANNEL_VDD, HAL_ADC_RESOLUTION_14);
//  552       break;
//  553 
//  554     default:
//  555       break;
//  556   }
//  557 
//  558   retArray[0] = LO_UINT16(tempValue);
//  559   retArray[1] = HI_UINT16(tempValue);
//  560 
//  561   /* Build and send back the response */
//  562   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), cmdId, 2, retArray);
//  563 }
//  564 
//  565 /**************************************************************************************************
//  566  * @fn      MT_SysGpio
//  567  *
//  568  * @brief   ZAccel RPC interface for controlling the available GPIO pins.
//  569  *
//  570  * @param   uint8 pData - Pointer to the data.
//  571  *
//  572  * @return  None
//  573  *************************************************************************************************/
//  574 void MT_SysGpio(uint8 *pBuf)
//  575 {
//  576   uint8 cmd, val;
//  577 
//  578   cmd = pBuf[MT_RPC_POS_CMD1];
//  579   pBuf += MT_RPC_FRAME_HDR_SZ;
//  580 
//  581   /* Board specific GPIO goes here */
//  582 
//  583   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), cmd, 1, &val);
//  584 }
//  585 
//  586 #endif /* MT_SYS_FUNC */
//  587 
//  588 /***************************************************************************************************
//  589  * SUPPORT
//  590  ***************************************************************************************************/
//  591 
//  592 /***************************************************************************************************
//  593  * @fn      MT_SysResetInd()
//  594  *
//  595  * @brief   Sends a ZTOOL "reset response" message.
//  596  *
//  597  * @param   None
//  598  *
//  599  * @return  None
//  600  *
//  601  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  602 void MT_SysResetInd(void)
MT_SysResetInd:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function MT_SysResetInd
        CODE
//  603 {
        FUNCALL MT_SysResetInd, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 6, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 6, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 6
        MOV     A,#-0x6
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 6)
//  604   uint8 retArray[6];
//  605 
//  606   retArray[0] = ResetReason();   /* Reason */
        MOV     A,0x9d
        RRC     A
        RRC     A
        RRC     A
        ANL     A,#0x1f
        ANL     A,#0x3
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
//  607   retArray[1] = 0x00;            /* Transport Revision */
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  608   retArray[2] = 0x00;            /* Product */
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  609   retArray[3] = 0x00;            /* Major Revision */
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  610   retArray[4] = 0x00;            /* Minor Revision */
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  611   retArray[5] = 0x00;            /* Hardware Revision */
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  612 
//  613   /* Send out Reset Response message */
//  614   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_SYS), MT_SYS_RESET_IND,
//  615                                 sizeof(retArray), retArray);
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R3,#0x6
        MOV     R2,#-0x80
        MOV     R1,#0x41
        LCALL   ??MT_BuildAndSendZToolResponse?relay
//  616 }
        MOV     A,#0x6
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 XSP16+0
        POP     DPH
        CFI DPH0 SameValue
        CFI CFA_SP SP+-4
        POP     DPL
        CFI DPL0 SameValue
        CFI CFA_SP SP+-3
        LJMP    ?BRET
        CFI EndBlock cfiBlock0
        REQUIRE SLEEPSTA
//  617 
//  618 /***************************************************************************************************
//  619  * @fn      MT_SysOsalTimerExpired()
//  620  *
//  621  * @brief   Sends a SYS Osal Timer Expired
//  622  *
//  623  * @param   None
//  624  *
//  625  * @return  None
//  626  *
//  627  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  628 void MT_SysOsalTimerExpired(uint8 Id)
MT_SysOsalTimerExpired:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function MT_SysOsalTimerExpired
        CODE
//  629 {
        FUNCALL MT_SysOsalTimerExpired, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
        MOV     A,R1
//  630   uint8 retValue;
//  631   retValue = Id;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
//  632   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_SYS), MT_SYS_OSAL_TIMER_EXPIRED, 1, &retValue);
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R3,#0x1
        MOV     R2,#-0x7f
        MOV     R1,#0x41
        LCALL   ??MT_BuildAndSendZToolResponse?relay
//  633 }
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 9)
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock1

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_SysResetInd?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MT_SysResetInd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_SysOsalTimerExpired?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MT_SysOsalTimerExpired

        END
//  634 
//  635 /***************************************************************************************************
//  636  ***************************************************************************************************/
// 
// 132 bytes in segment BANKED_CODE
//  12 bytes in segment BANK_RELAYS
//   1 byte  in segment SFR_AN
//   8 bytes in segment XDATA_ROM_C
// 
// 144 bytes of CODE  memory
//   8 bytes of CONST memory
//   0 bytes of DATA  memory (+ 1 byte shared)
//
//Errors: none
//Warnings: none
