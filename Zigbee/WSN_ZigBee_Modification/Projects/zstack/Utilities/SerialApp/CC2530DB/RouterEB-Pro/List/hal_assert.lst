###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         03/Jul/2018  14:53:02 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Components\hal\common\hal_assert.c                 #
#    Command line       =  -f D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ #
#                          ¸Ä\Projects\zstack\Utilities\SerialApp\CC2530DB\.. #
#                          \..\..\Tools\CC2530DB\f8wRouter.cfg (-DCPU32MHZ    #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRU #
#                          E -DRTR_NWK -DBLINK_LEDS) -f                       #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\Tools\CC2530DB\f8wConfig.cfg (-DSECURE=0       #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Components\hal\common\hal_assert.c -D ZIGBEEPRO    #
#                          -D HAL_UART=TRUE -D SERIAL_APP_PORT=0 -D           #
#                          LCD_SUPPORTED -lC D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼ #
#                          «\WSN_ZigBee_ÐÞ¸Ä\Projects\zstack\Utilities\Serial #
#                          App\CC2530DB\RouterEB-Pro\List\ -lA                #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\Route #
#                          rEB-Pro\List\ --diag_suppress Pe001,Pa010 -o       #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\Route #
#                          rEB-Pro\Obj\ -e --debug --core=plain --dptr=16,1   #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 8 -I  #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\ -I   #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\SO #
#                          URCE\ -I D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_Zig #
#                          Bee_ÐÞ¸Ä\Projects\zstack\Utilities\SerialApp\CC253 #
#                          0DB\..\..\..\ZMAIN\TI2530DB\ -I                    #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\MT\ -I                        #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\HAL\INCLUDE\ -I               #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\ -I       #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\OSAL\MCU\CCSOC\ -I            #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\OSAL\INCLUDE\ -I              #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\STACK\AF\ -I                  #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\STACK\NWK\ -I                 #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\STACK\SEC\ -I                 #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\STACK\SAPI\ -I                #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\STACK\SYS\ -I                 #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\STACK\ZDO\ -I                 #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\ZMAC\F8W\ -I                  #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\ZMAC\ -I                      #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\SERVICES\SADDR\ -I            #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\SERVICES\SDATA\ -I            #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\MAC\INCLUDE\ -I               #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\MAC\HIGH_LEVEL\ -I            #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\ -I       #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CH #
#                          IP\ -Ohz --require_prototypes                      #
#    List file          =  D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\Route #
#                          rEB-Pro\List\hal_assert.lst                        #
#    Object file        =  D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\Route #
#                          rEB-Pro\Obj\hal_assert.r51                         #
#                                                                             #
#                                                                             #
###############################################################################

D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\Components\hal\common\hal_assert.c
      1          /**************************************************************************************************
      2            Filename:       hal_assert.c
      3            Revised:        $Date: 2008-06-13 19:14:56 -0700 (Fri, 13 Jun 2008) $
      4            Revision:       $Revision: 17243 $
      5          
      6            Description:    Describe the purpose and contents of the file.
      7          
      8          
      9            Copyright 2006-2008 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          
     41          /* ------------------------------------------------------------------------------------------------
     42           *                                          Includes
     43           * ------------------------------------------------------------------------------------------------
     44           */
     45          #include "hal_assert.h"
     46          #include "hal_types.h"
     47          #include "hal_board.h"

   \                                 In  segment SFR_AN, at 0x80
   \   union <unnamed> volatile __sfr _A_P0
   \                     _A_P0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x8f
   \   unsigned char volatile __sfr P0INP
   \                     P0INP:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x9d
   \   unsigned char volatile __sfr SLEEPSTA
   \                     SLEEPSTA:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x9e
   \   unsigned char volatile __sfr CLKCONSTA
   \                     CLKCONSTA:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xbe
   \   unsigned char volatile __sfr SLEEPCMD
   \                     SLEEPCMD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc6
   \   unsigned char volatile __sfr CLKCONCMD
   \                     CLKCONCMD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfe
   \   unsigned char volatile __sfr P1DIR
   \                     P1DIR:
   \   000000                DS 1
     48          #include "hal_defs.h"
     49          #include "hal_mcu.h"
     50          
     51          #ifndef HAL_ONLY_BUILD
     52            /* for access to debug data */
     53            #include "mac_rx.h"
     54            #include "mac_tx.h"
     55          #endif
     56          
     57          /* ------------------------------------------------------------------------------------------------
     58           *                                       Local Prototypes
     59           * ------------------------------------------------------------------------------------------------
     60           */
     61          void halAssertHazardLights(void);
     62          
     63          
     64          /**************************************************************************************************
     65           * @fn          halAssertHandler
     66           *
     67           * @brief       Logic to handle an assert.
     68           *
     69           * @param       none
     70           *
     71           * @return      none
     72           **************************************************************************************************
     73           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     74          void halAssertHandler(void)
   \                     halAssertHandler:
     75          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     76            /* execute code that handles asserts */
     77          #ifdef ASSERT_RESET
     78            HAL_SYSTEM_RESET();
     79          #else
     80            halAssertHazardLights();
   \   000004                ; Setup parameters for call to function halAssertHazardLights
   \   000004   12....       LCALL   ??halAssertHazardLights?relay
     81          #endif
     82          
     83          }
   \   000007   D083         POP     DPH
   \   000009   D082         POP     DPL
   \   00000B   02....       LJMP    ?BRET
     84          
     85          
     86          /**************************************************************************************************
     87           * @fn          halAssertHazardLights
     88           *
     89           * @brief       Blink LEDs to indicate an error.
     90           *
     91           * @param       none
     92           *
     93           * @return      none
     94           **************************************************************************************************
     95           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     96          void halAssertHazardLights(void)
   \                     halAssertHazardLights:
     97          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
     98            enum
     99            {
    100              DEBUG_DATA_RSTACK_HIGH_OFS,
    101              DEBUG_DATA_RSTACK_LOW_OFS,
    102              DEBUG_DATA_TX_ACTIVE_OFS,
    103              DEBUG_DATA_RX_ACTIVE_OFS,
    104          
    105          #if (defined HAL_MCU_AVR) || (defined HAL_MCU_CC2430)
    106              DEBUG_DATA_INT_MASK_OFS,
    107          #elif (defined HAL_MCU_CC2530)
    108              DEBUG_DATA_INT_MASK0_OFS,
    109              DEBUG_DATA_INT_MASK1_OFS,
    110          #endif
    111          
    112              DEBUG_DATA_SIZE
    113            };
    114          
    115            uint8 buttonHeld;
    116            uint8 debugData[DEBUG_DATA_SIZE];
    117          
    118            /* disable all interrupts before anything else */
    119            HAL_DISABLE_INTERRUPTS();
   \   00000A   C2AF         CLR     0xa8.7
    120          
    121            /*-------------------------------------------------------------------------------
    122             *  Initialize LEDs and turn them off.
    123             */
    124            HAL_BOARD_INIT();
   \   00000C   53BEFB       ANL     0xbe,#0xfb
   \                     ??halAssertHazardLights_0:
   \   00000F   E59D         MOV     A,0x9d
   \   000011   A2E6         MOV     C,0xE0 /* A   */.6
   \   000013   50FA         JNC     ??halAssertHazardLights_0
   \   000015   00           NOP
   \   000016   78F8         MOV     R0,#-0x8
   \   000018   7901         MOV     R1,#0x1
   \                     ??halAssertHazardLights_1:
   \   00001A   00           NOP
   \   00001B   E8           MOV     A,R0
   \   00001C   24FF         ADD     A,#-0x1
   \   00001E   18           DEC     R0
   \   00001F   E9           MOV     A,R1
   \   000020   34FF         ADDC    A,#-0x1
   \   000022   F9           MOV     R1,A
   \   000023   E8           MOV     A,R0
   \   000024   49           ORL     A,R1
   \   000025   70F3         JNZ     ??halAssertHazardLights_1
   \   000027   75C680       MOV     0xc6,#-0x80
   \                     ??halAssertHazardLights_2:
   \   00002A   7480         MOV     A,#-0x80
   \   00002C   659E         XRL     A,0x9e
   \   00002E   70FA         JNZ     ??halAssertHazardLights_2
   \   000030   43BE04       ORL     0xbe,#0x4
   \   000033   43FE01       ORL     0xfe,#0x1
   \   000036   43FE02       ORL     0xfe,#0x2
   \   000039   43FE10       ORL     0xfe,#0x10
   \   00003C   438F01       ORL     0x8f,#0x1
    125          
    126            HAL_TURN_OFF_LED1();
   \   00003F   D290         SETB    0x90.0
    127            HAL_TURN_OFF_LED2();
   \   000041   D291         SETB    0x90.1
    128            HAL_TURN_OFF_LED3();
   \   000043   D294         SETB    0x90.4
    129            HAL_TURN_OFF_LED4();
   \   000045   8017         SJMP    ??halAssertHazardLights_3
    130          
    131            /*-------------------------------------------------------------------------------
    132             *  Master infinite loop.
    133             */
    134            for (;;)
    135            {
    136              buttonHeld = 0;
    137          
    138              /*-------------------------------------------------------------------------------
    139               *  "Hazard lights" loop.  A held keypress will exit this loop.
    140               */
    141              do
    142              {
    143                HAL_LED_BLINK_DELAY();
    144          
    145                /* toggle LEDS, the #ifdefs are in case HAL has logically remapped non-existent LEDs */
    146          #if (HAL_NUM_LEDS >= 1)
    147                HAL_TOGGLE_LED1();
    148          #if (HAL_NUM_LEDS >= 2)
    149                HAL_TOGGLE_LED2();
    150          #if (HAL_NUM_LEDS >= 3)
    151                HAL_TOGGLE_LED3();
    152          #if (HAL_NUM_LEDS >= 4)
    153                HAL_TOGGLE_LED4();
    154          #endif
    155          #endif
    156          #endif
    157          #endif
    158          
    159                /* escape hatch to continue execution, set escape to '1' to continue execution */
    160                {
    161                  static uint8 escape = 0;
    162                  if (escape)
    163                  {
    164                    escape = 0;
    165                    return;
    166                  }
    167                }
    168          
    169                /* break out of loop if button is held long enough */
    170                if (HAL_PUSH_BUTTON1())
    171                {
    172                  buttonHeld++;
    173                }
    174                else
    175                {
    176                  buttonHeld = 0;
    177                }
    178              }
    179              while (buttonHeld != 10);  /* loop until button is held specified number of loops */
    180          
    181              /*-------------------------------------------------------------------------------
    182               *  Just exited from "hazard lights" loop.
    183               */
    184          
    185              /* turn off all LEDs */
    186              HAL_TURN_OFF_LED1();
    187              HAL_TURN_OFF_LED2();
    188              HAL_TURN_OFF_LED3();
    189              HAL_TURN_OFF_LED4();
    190          
    191              /* wait for button release */
    192              HAL_DEBOUNCE(!HAL_PUSH_BUTTON1());
    193          
    194              /*-------------------------------------------------------------------------------
    195               *  Load debug data into memory.
    196               */
    197          #ifdef HAL_MCU_AVR
    198              {
    199                uint8 * pStack;
    200                pStack = (uint8 *) SP;
    201                pStack++; /* point to return address on stack */
    202                debugData[DEBUG_DATA_RSTACK_HIGH_OFS] = *pStack;
    203                pStack++;
    204                debugData[DEBUG_DATA_RSTACK_LOW_OFS] = *pStack;
    205              }
    206              debugData[DEBUG_DATA_INT_MASK_OFS] = EIMSK;
    207          #endif
    208          
    209          #if (defined HAL_MCU_CC2430)
    210              debugData[DEBUG_DATA_INT_MASK_OFS] = RFIM;
    211          #elif (defined HAL_MCU_CC2530)
    212              debugData[DEBUG_DATA_INT_MASK0_OFS] = RFIRQM0;
    213              debugData[DEBUG_DATA_INT_MASK1_OFS] = RFIRQM1;
    214          #endif
    215          
    216          
    217          #ifndef HAL_ONLY_BUILD
    218              debugData[DEBUG_DATA_TX_ACTIVE_OFS] = macTxActive;
    219              debugData[DEBUG_DATA_RX_ACTIVE_OFS] = macRxActive;
    220          #endif
    221          
    222             /* initialize for data dump loop */
    223              {
    224                uint8 iBit;
    225                uint8 iByte;
    226          
    227                iBit  = 0;
    228                iByte = 0;
    229          
    230                /*-------------------------------------------------------------------------------
    231                 *  Data dump loop.  A button press cycles data bits to an LED.
    232                 */
    233                while (iByte < DEBUG_DATA_SIZE)
    234                {
    235                  /* wait for key press */
    236                  while(!HAL_PUSH_BUTTON1());
    237          
    238                  /* turn on all LEDs for first bit of byte, turn on three LEDs if not first bit */
    239                  HAL_TURN_ON_LED1();
    240                  HAL_TURN_ON_LED2();
    241                  HAL_TURN_ON_LED3();
    242                  if (iBit == 0)
    243                  {
    244                    HAL_TURN_ON_LED4();
    245                  }
    246                  else
    247                  {
    248                    HAL_TURN_OFF_LED4();
    249                  }
    250          
    251                  /* wait for debounced key release */
    252                  HAL_DEBOUNCE(!HAL_PUSH_BUTTON1());
    253          
    254                  /* turn off all LEDs */
    255                  HAL_TURN_OFF_LED1();
    256                  HAL_TURN_OFF_LED2();
    257                  HAL_TURN_OFF_LED3();
    258                  HAL_TURN_OFF_LED4();
    259          
    260                  /* output value of data bit to LED1 */
    261                  if (debugData[iByte] & (1 << (7 - iBit)))
    262                  {
    263                    HAL_TURN_ON_LED1();
    264                  }
    265                  else
    266                  {
    267                    HAL_TURN_OFF_LED1();
   \                     ??halAssertHazardLights_4:
   \   000047   D290         SETB    0x90.0
    268                  }
    269          
    270                  /* advance to next bit */
    271                  iBit++;
   \                     ??halAssertHazardLights_5:
   \   000049   0B           INC     R3
    272                  if (iBit == 8)
   \   00004A   7408         MOV     A,#0x8
   \   00004C   6B           XRL     A,R3
   \   00004D   6003         JZ      $+5
   \   00004F   02....       LJMP    ??halAssertHazardLights_6 & 0xFFFF
    273                  {
    274                    iBit = 0;
   \   000052   7B00         MOV     R3,#0x0
    275                    iByte++;
   \   000054   0A           INC     R2
    276                  }
   \   000055   EA           MOV     A,R2
   \   000056   C3           CLR     C
   \   000057   9406         SUBB    A,#0x6
   \   000059   5003         JNC     $+5
   \   00005B   02....       LJMP    ??halAssertHazardLights_6 & 0xFFFF
    277                }
    278              }
    279          
    280              /*
    281               *  About to enter "hazard lights" loop again.  Turn off LED1 in case the last bit
    282               *  displayed happened to be one.  This guarantees all LEDs are off at the start of
    283               *  the flashing loop which uses a toggle operation to change LED states.
    284               */
    285              HAL_TURN_OFF_LED1();
   \                     ??halAssertHazardLights_3:
   \   00005E   D290         SETB    0x90.0
   \                     ??halAssertHazardLights_7:
   \   000060   7900         MOV     R1,#0x0
   \                     ??halAssertHazardLights_8:
   \   000062   90....       MOV     DPTR,#__Constant_0
   \   000065   12....       LCALL   ?XLOAD_R2345
   \   000068   7406         MOV     A,#0x6
   \   00006A   12....       LCALL   ?XSTACK_DISP0_8
   \   00006D   12....       LCALL   ?XSTORE_R2345
   \   000070   8012         SJMP    ??halAssertHazardLights_9
   \                     ??halAssertHazardLights_10:
   \   000072   90....       MOV     DPTR,#__Constant_1
   \   000075   78..         MOV     R0,#?V0 + 0
   \   000077   12....       LCALL   ?L_MOV_X
   \   00007A   7406         MOV     A,#0x6
   \   00007C   12....       LCALL   ?XSTACK_DISP0_8
   \   00007F   78..         MOV     R0,#?V0 + 0
   \   000081   12....       LCALL   ?L_ADD_TO_X
   \                     ??halAssertHazardLights_9:
   \   000084   7406         MOV     A,#0x6
   \   000086   12....       LCALL   ?XSTACK_DISP0_8
   \   000089   C082         PUSH    DPL
   \   00008B   C083         PUSH    DPH
   \   00008D   90....       MOV     DPTR,#__Constant_5800
   \   000090   78..         MOV     R0,#?V0 + 0
   \   000092   12....       LCALL   ?L_MOV_X
   \   000095   D083         POP     DPH
   \   000097   D082         POP     DPL
   \   000099   78..         MOV     R0,#?V0 + 0
   \   00009B   12....       LCALL   ?UL_GT_X
   \   00009E   40D2         JC      ??halAssertHazardLights_10
   \   0000A0   A290         MOV     C,0x90.0
   \   0000A2   5004         JNC     ??halAssertHazardLights_11
   \   0000A4   C290         CLR     0x90.0
   \   0000A6   8002         SJMP    ??halAssertHazardLights_12
   \                     ??halAssertHazardLights_11:
   \   0000A8   D290         SETB    0x90.0
   \                     ??halAssertHazardLights_12:
   \   0000AA   A291         MOV     C,0x90.1
   \   0000AC   5004         JNC     ??halAssertHazardLights_13
   \   0000AE   C291         CLR     0x90.1
   \   0000B0   8002         SJMP    ??halAssertHazardLights_14
   \                     ??halAssertHazardLights_13:
   \   0000B2   D291         SETB    0x90.1
   \                     ??halAssertHazardLights_14:
   \   0000B4   A294         MOV     C,0x90.4
   \   0000B6   5004         JNC     ??halAssertHazardLights_15
   \   0000B8   C294         CLR     0x90.4
   \   0000BA   8002         SJMP    ??halAssertHazardLights_16
   \                     ??halAssertHazardLights_15:
   \   0000BC   D294         SETB    0x90.4
   \                     ??halAssertHazardLights_16:
   \   0000BE   90....       MOV     DPTR,#??escape
   \   0000C1   E0           MOVX    A,@DPTR
   \   0000C2   600C         JZ      ??halAssertHazardLights_17
   \   0000C4   E4           CLR     A
   \   0000C5   F0           MOVX    @DPTR,A
   \   0000C6   740A         MOV     A,#0xa
   \   0000C8   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000CB   7F04         MOV     R7,#0x4
   \   0000CD   02....       LJMP    ?BANKED_LEAVE_XDATA
   \                     ??halAssertHazardLights_17:
   \   0000D0   A281         MOV     C,0x80.1
   \   0000D2   508C         JNC     ??halAssertHazardLights_7
   \   0000D4   09           INC     R1
   \   0000D5   740A         MOV     A,#0xa
   \   0000D7   69           XRL     A,R1
   \   0000D8   7088         JNZ     ??halAssertHazardLights_8
   \   0000DA   D290         SETB    0x90.0
   \   0000DC   D291         SETB    0x90.1
   \   0000DE   D294         SETB    0x90.4
   \   0000E0   D290         SETB    0x90.0
   \   0000E2   7800         MOV     R0,#0x0
   \   0000E4   7900         MOV     R1,#0x0
   \                     ??halAssertHazardLights_18:
   \   0000E6   A281         MOV     C,0x80.1
   \   0000E8   5004         JNC     ??halAssertHazardLights_19
   \   0000EA   7800         MOV     R0,#0x0
   \   0000EC   7900         MOV     R1,#0x0
   \                     ??halAssertHazardLights_19:
   \   0000EE   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   0000F1   40F3         JC      ??halAssertHazardLights_18
   \   0000F3   9061A3       MOV     DPTR,#0x61a3
   \   0000F6   E0           MOVX    A,@DPTR
   \   0000F7   C0E0         PUSH    A
   \   0000F9   7404         MOV     A,#0x4
   \   0000FB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FE   D0E0         POP     A
   \   000100   F0           MOVX    @DPTR,A
   \   000101   9061A4       MOV     DPTR,#0x61a4
   \   000104   E0           MOVX    A,@DPTR
   \   000105   C0E0         PUSH    A
   \   000107   7405         MOV     A,#0x5
   \   000109   12....       LCALL   ?XSTACK_DISP0_8
   \   00010C   D0E0         POP     A
   \   00010E   F0           MOVX    @DPTR,A
   \   00010F   90....       MOV     DPTR,#macTxActive
   \   000112   E0           MOVX    A,@DPTR
   \   000113   C0E0         PUSH    A
   \   000115   7402         MOV     A,#0x2
   \   000117   12....       LCALL   ?XSTACK_DISP0_8
   \   00011A   D0E0         POP     A
   \   00011C   F0           MOVX    @DPTR,A
   \   00011D   90....       MOV     DPTR,#macRxActive
   \   000120   E0           MOVX    A,@DPTR
   \   000121   C0E0         PUSH    A
   \   000123   7403         MOV     A,#0x3
   \   000125   12....       LCALL   ?XSTACK_DISP0_8
   \   000128   D0E0         POP     A
   \   00012A   F0           MOVX    @DPTR,A
   \   00012B   7B00         MOV     R3,#0x0
   \   00012D   7A00         MOV     R2,#0x0
   \                     ??halAssertHazardLights_6:
   \   00012F   A281         MOV     C,0x80.1
   \   000131   50FC         JNC     ??halAssertHazardLights_6
   \   000133   C290         CLR     0x90.0
   \   000135   C291         CLR     0x90.1
   \   000137   C294         CLR     0x90.4
   \   000139   EB           MOV     A,R3
   \   00013A   7004         JNZ     ??halAssertHazardLights_20
   \   00013C   C290         CLR     0x90.0
   \   00013E   8002         SJMP    ??halAssertHazardLights_21
   \                     ??halAssertHazardLights_20:
   \   000140   D290         SETB    0x90.0
   \                     ??halAssertHazardLights_21:
   \   000142   7800         MOV     R0,#0x0
   \   000144   7900         MOV     R1,#0x0
   \                     ??halAssertHazardLights_22:
   \   000146   A281         MOV     C,0x80.1
   \   000148   5004         JNC     ??halAssertHazardLights_23
   \   00014A   7800         MOV     R0,#0x0
   \   00014C   7900         MOV     R1,#0x0
   \                     ??halAssertHazardLights_23:
   \   00014E   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000151   40F3         JC      ??halAssertHazardLights_22
   \   000153   D290         SETB    0x90.0
   \   000155   D291         SETB    0x90.1
   \   000157   D294         SETB    0x90.4
   \   000159   D290         SETB    0x90.0
   \   00015B   75..01       MOV     ?V0 + 0,#0x1
   \   00015E   75..00       MOV     ?V0 + 1,#0x0
   \   000161   7407         MOV     A,#0x7
   \   000163   C3           CLR     C
   \   000164   9B           SUBB    A,R3
   \   000165   78..         MOV     R0,#?V0 + 0
   \   000167   12....       LCALL   ?S_SHL
   \   00016A   8A..         MOV     ?V0 + 2,R2
   \   00016C   85..82       MOV     DPL,?XSP + 0
   \   00016F   85..83       MOV     DPH,?XSP + 1
   \   000172   E582         MOV     A,DPL
   \   000174   25..         ADD     A,?V0 + 2
   \   000176   F582         MOV     DPL,A
   \   000178   E583         MOV     A,DPH
   \   00017A   3400         ADDC    A,#0x0
   \   00017C   F583         MOV     DPH,A
   \   00017E   E0           MOVX    A,@DPTR
   \   00017F   55..         ANL     A,?V0 + 0
   \   000181   7003         JNZ     $+5
   \   000183   02....       LJMP    ??halAssertHazardLights_4 & 0xFFFF
   \   000186   C290         CLR     0x90.0
   \   000188   02....       LJMP    ??halAssertHazardLights_5 & 0xFFFF
   \   00018B                REQUIRE _A_IEN0
   \   00018B                REQUIRE SLEEPCMD
   \   00018B                REQUIRE SLEEPSTA
   \   00018B                REQUIRE CLKCONCMD
   \   00018B                REQUIRE CLKCONSTA
   \   00018B                REQUIRE P1DIR
   \   00018B                REQUIRE P0INP
   \   00018B                REQUIRE _A_P1
   \   00018B                REQUIRE _A_P0
    286            }
    287          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   E8           MOV     A,R0
   \   000001   2401         ADD     A,#0x1
   \   000003   08           INC     R0
   \   000004   E9           MOV     A,R1
   \   000005   3400         ADDC    A,#0x0
   \   000007   F9           MOV     R1,A
   \   000008   C3           CLR     C
   \   000009   E8           MOV     A,R0
   \   00000A   94F4         SUBB    A,#-0xc
   \   00000C   E9           MOV     A,R1
   \   00000D   9401         SUBB    A,#0x1
   \   00000F   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000011   65D0         XRL     A,PSW
   \   000013   33           RLC     A
   \   000014   22           RET

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??escape:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_0:
   \   000000   00000000     DD 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_1:
   \   000000   01000000     DD 1

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_5800:
   \   000000   00580000     DD 22528

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??halAssertHandler?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    halAssertHandler

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??halAssertHazardLights?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    halAssertHazardLights
    288          
    289          
    290          /* ------------------------------------------------------------------------------------------------
    291           *                                    Compile Time Assertions
    292           * ------------------------------------------------------------------------------------------------
    293           */
    294          
    295          /* integrity check of type sizes */
    296          HAL_ASSERT_SIZE(  int8, 1);
    297          HAL_ASSERT_SIZE( uint8, 1);
    298          HAL_ASSERT_SIZE( int16, 2);
    299          HAL_ASSERT_SIZE(uint16, 2);
    300          HAL_ASSERT_SIZE( int32, 4);
    301          HAL_ASSERT_SIZE(uint32, 4);
    302          
    303          
    304          /**************************************************************************************************
    305          */

   Maximum stack usage in bytes:

     Function                   ISTACK PSTACK XSTACK
     --------                   ------ ------ ------
     halAssertHandler               2      0      0
       -> halAssertHazardLights     4      0      0
     halAssertHazardLights          2      0     22


   Segment part sizes:

     Function/Label                Bytes
     --------------                -----
     _A_P0                            1
     P0INP                            1
     _A_P1                            1
     SLEEPSTA                         1
     CLKCONSTA                        1
     _A_IEN0                          1
     SLEEPCMD                         1
     CLKCONCMD                        1
     P1DIR                            1
     halAssertHandler                14
     halAssertHazardLights          395
     ?Subroutine0                    21
     escape                           1
     __Constant_0                     4
     __Constant_1                     4
     __Constant_5800                  4
     ??halAssertHandler?relay         6
     ??halAssertHazardLights?relay    6

 
 430 bytes in segment BANKED_CODE
  12 bytes in segment BANK_RELAYS
   9 bytes in segment SFR_AN
  12 bytes in segment XDATA_ROM_C
   1 byte  in segment XDATA_Z
 
 442 bytes of CODE  memory
   0 bytes of CONST memory (+ 12 bytes shared)
   0 bytes of DATA  memory (+  9 bytes shared)
   1 byte  of XDATA memory

Errors: none
Warnings: none
