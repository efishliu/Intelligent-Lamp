///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.3.10338/W32 for 8051        03/Jul/2018  14:52:43 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Components\osal\common\OSAL.c                    /
//    Command line       =  -f D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_Ð /
//                          Þ¸Ä\Projects\zstack\Utilities\SerialApp\CC2530DB\ /
//                          ..\..\..\Tools\CC2530DB\f8wRouter.cfg             /
//                          (-DCPU32MHZ -DROOT=__near_func                    /
//                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE -DRTR_NWK        /
//                          -DBLINK_LEDS) -f D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼ /
//                          «\WSN_ZigBee_ÐÞ¸Ä\Projects\zstack\Utilities\Seria /
//                          lApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.c /
//                          fg (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR  /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          "-DCONST=const __code" -DGENERIC=__generic        /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµ /
//                          Ï°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\Components\osal\common\OS /
//                          AL.c -D ZIGBEEPRO -D HAL_UART=TRUE -D             /
//                          SERIAL_APP_PORT=0 -D LCD_SUPPORTED -lC            /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\Rou /
//                          terEB-Pro\List\ -lA D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ /
//                          ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\Projects\zstack\Utilities\Se /
//                          rialApp\CC2530DB\RouterEB-Pro\List\               /
//                          --diag_suppress Pe001,Pa010 -o                    /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\Rou /
//                          terEB-Pro\Obj\ -e --debug --core=plain            /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 8 -I D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµ /
//                          Ï°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\Projects\zstack\Utilities /
//                          \SerialApp\CC2530DB\ -I                           /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          SOURCE\ -I D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ /
//                          ZigBee_ÐÞ¸Ä\Projects\zstack\Utilities\SerialApp\C /
//                          C2530DB\..\..\..\ZMAIN\TI2530DB\ -I               /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\MT\ -I                     /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\HAL\INCLUDE\ -I            /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\ -I    /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\ -I         /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\OSAL\INCLUDE\ -I           /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\STACK\AF\ -I               /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\STACK\NWK\ -I              /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\STACK\SEC\ -I              /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\STACK\SAPI\ -I             /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\STACK\SYS\ -I              /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\STACK\ZDO\ -I              /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\ZMAC\F8W\ -I               /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\ZMAC\ -I                   /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\SERVICES\SADDR\ -I         /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\SERVICES\SDATA\ -I         /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\MAC\INCLUDE\ -I            /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\ -I         /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\ -I    /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE /
//                          _CHIP\ -Ohz --require_prototypes                  /
//    List file          =  D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\Rou /
//                          terEB-Pro\List\OSAL.s51                           /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME OSAL

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?CALL_IND
        EXTERN ?C_GPTR_LOAD
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_ADD
        EXTERN ?L_MOV_X
        EXTERN ?L_SHL
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?UL_DIV_MOD
        EXTERN ?UL_SHR
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_Z

        PUBLIC ??_ltoa?relay
        FUNCTION ??_ltoa?relay,0203H
        PUBLIC ??osal_buffer_uint24?relay
        FUNCTION ??osal_buffer_uint24?relay,0203H
        PUBLIC ??osal_buffer_uint32?relay
        FUNCTION ??osal_buffer_uint32?relay,0203H
        PUBLIC ??osal_build_uint16?relay
        FUNCTION ??osal_build_uint16?relay,0203H
        PUBLIC ??osal_build_uint32?relay
        FUNCTION ??osal_build_uint32?relay,0203H
        PUBLIC ??osal_init_system?relay
        FUNCTION ??osal_init_system?relay,0203H
        PUBLIC ??osal_int_disable?relay
        FUNCTION ??osal_int_disable?relay,0203H
        PUBLIC ??osal_int_enable?relay
        FUNCTION ??osal_int_enable?relay,0203H
        PUBLIC ??osal_isr_register?relay
        FUNCTION ??osal_isr_register?relay,0203H
        PUBLIC ??osal_memcmp?relay
        FUNCTION ??osal_memcmp?relay,0203H
        PUBLIC ??osal_memcpy?relay
        FUNCTION ??osal_memcpy?relay,0203H
        PUBLIC ??osal_memset?relay
        FUNCTION ??osal_memset?relay,0203H
        PUBLIC ??osal_msg_allocate?relay
        FUNCTION ??osal_msg_allocate?relay,0203H
        PUBLIC ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,0203H
        PUBLIC ??osal_msg_dequeue?relay
        FUNCTION ??osal_msg_dequeue?relay,0203H
        PUBLIC ??osal_msg_enqueue?relay
        FUNCTION ??osal_msg_enqueue?relay,0203H
        PUBLIC ??osal_msg_enqueue_max?relay
        FUNCTION ??osal_msg_enqueue_max?relay,0203H
        PUBLIC ??osal_msg_extract?relay
        FUNCTION ??osal_msg_extract?relay,0203H
        PUBLIC ??osal_msg_push?relay
        FUNCTION ??osal_msg_push?relay,0203H
        PUBLIC ??osal_msg_receive?relay
        FUNCTION ??osal_msg_receive?relay,0203H
        PUBLIC ??osal_msg_send?relay
        FUNCTION ??osal_msg_send?relay,0203H
        PUBLIC ??osal_rand?relay
        FUNCTION ??osal_rand?relay,0203H
        PUBLIC ??osal_set_event?relay
        FUNCTION ??osal_set_event?relay,0203H
        PUBLIC ??osal_start_system?relay
        FUNCTION ??osal_start_system?relay,0203H
        PUBLIC ??osal_strlen?relay
        FUNCTION ??osal_strlen?relay,0203H
        PUBWEAK _A_IEN0
        PUBWEAK __Constant_2710
        PUBWEAK __Constant_5f5e100
        PUBLIC _ltoa
        FUNCTION _ltoa,021203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 55, STACK
        PUBLIC osal_buffer_uint24
        FUNCTION osal_buffer_uint24,0203H
        ARGFRAME XSTACK, 4, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC osal_buffer_uint32
        FUNCTION osal_buffer_uint32,0203H
        ARGFRAME XSTACK, 4, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC osal_build_uint16
        FUNCTION osal_build_uint16,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC osal_build_uint32
        FUNCTION osal_build_uint32,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC osal_init_system
        FUNCTION osal_init_system,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC osal_int_disable
        FUNCTION osal_int_disable,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC osal_int_enable
        FUNCTION osal_int_enable,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC osal_isr_register
        FUNCTION osal_isr_register,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC osal_memcmp
        FUNCTION osal_memcmp,0203H
        ARGFRAME XSTACK, 3, STACK
        LOCFRAME XSTACK, 18, STACK
        PUBLIC osal_memcpy
        FUNCTION osal_memcpy,0203H
        ARGFRAME XSTACK, 3, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 11, STACK
        PUBLIC osal_memset
        FUNCTION osal_memset,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC osal_msg_allocate
        FUNCTION osal_msg_allocate,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC osal_msg_deallocate
        FUNCTION osal_msg_deallocate,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC osal_msg_dequeue
        FUNCTION osal_msg_dequeue,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC osal_msg_enqueue
        FUNCTION osal_msg_enqueue,0203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC osal_msg_enqueue_max
        FUNCTION osal_msg_enqueue_max,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC osal_msg_extract
        FUNCTION osal_msg_extract,0203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 11, STACK
        PUBLIC osal_msg_push
        FUNCTION osal_msg_push,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC osal_msg_receive
        FUNCTION osal_msg_receive,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC osal_msg_send
        FUNCTION osal_msg_send,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC osal_qHead
        PUBLIC osal_rand
        FUNCTION osal_rand,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC osal_set_event
        FUNCTION osal_set_event,0203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC osal_start_system
        FUNCTION osal_start_system,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC osal_strlen
        FUNCTION osal_strlen,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
strlen              SYMBOL "strlen"
memset              SYMBOL "memset"
_itoa               SYMBOL "_itoa"
strcpy              SYMBOL "strcpy"
strcat              SYMBOL "strcat"
Onboard_rand        SYMBOL "Onboard_rand"
osal_mem_alloc      SYMBOL "osal_mem_alloc"
osal_mem_free       SYMBOL "osal_mem_free"
osal_mem_init       SYMBOL "osal_mem_init"
osalTimerInit       SYMBOL "osalTimerInit"
osal_pwrmgr_init    SYMBOL "osal_pwrmgr_init"
osalInitTasks       SYMBOL "osalInitTasks"
osal_mem_kick       SYMBOL "osal_mem_kick"
osalTimeUpdate      SYMBOL "osalTimeUpdate"
Hal_ProcessPoll     SYMBOL "Hal_ProcessPoll"
??Hal_ProcessPoll?relay SYMBOL "?relay", Hal_ProcessPoll
??Onboard_rand?relay SYMBOL "?relay", Onboard_rand
??_itoa?relay       SYMBOL "?relay", _itoa
??memset?relay      SYMBOL "?relay", memset
??osalInitTasks?relay SYMBOL "?relay", osalInitTasks
??osalTimeUpdate?relay SYMBOL "?relay", osalTimeUpdate
??osalTimerInit?relay SYMBOL "?relay", osalTimerInit
??osal_mem_alloc?relay SYMBOL "?relay", osal_mem_alloc
??osal_mem_free?relay SYMBOL "?relay", osal_mem_free
??osal_mem_init?relay SYMBOL "?relay", osal_mem_init
??osal_mem_kick?relay SYMBOL "?relay", osal_mem_kick
??osal_pwrmgr_init?relay SYMBOL "?relay", osal_pwrmgr_init
??strcat?relay      SYMBOL "?relay", strcat
??strcpy?relay      SYMBOL "?relay", strcpy
??strlen?relay      SYMBOL "?relay", strlen
_ltoa               SYMBOL "_ltoa"
??_ltoa?relay       SYMBOL "?relay", _ltoa
osal_buffer_uint24  SYMBOL "osal_buffer_uint24"
??osal_buffer_uint24?relay SYMBOL "?relay", osal_buffer_uint24
osal_buffer_uint32  SYMBOL "osal_buffer_uint32"
??osal_buffer_uint32?relay SYMBOL "?relay", osal_buffer_uint32
osal_build_uint16   SYMBOL "osal_build_uint16"
??osal_build_uint16?relay SYMBOL "?relay", osal_build_uint16
osal_build_uint32   SYMBOL "osal_build_uint32"
??osal_build_uint32?relay SYMBOL "?relay", osal_build_uint32
osal_init_system    SYMBOL "osal_init_system"
??osal_init_system?relay SYMBOL "?relay", osal_init_system
osal_int_disable    SYMBOL "osal_int_disable"
??osal_int_disable?relay SYMBOL "?relay", osal_int_disable
osal_int_enable     SYMBOL "osal_int_enable"
??osal_int_enable?relay SYMBOL "?relay", osal_int_enable
osal_isr_register   SYMBOL "osal_isr_register"
??osal_isr_register?relay SYMBOL "?relay", osal_isr_register
osal_memcmp         SYMBOL "osal_memcmp"
??osal_memcmp?relay SYMBOL "?relay", osal_memcmp
osal_memcpy         SYMBOL "osal_memcpy"
??osal_memcpy?relay SYMBOL "?relay", osal_memcpy
osal_memset         SYMBOL "osal_memset"
??osal_memset?relay SYMBOL "?relay", osal_memset
osal_msg_allocate   SYMBOL "osal_msg_allocate"
??osal_msg_allocate?relay SYMBOL "?relay", osal_msg_allocate
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
osal_msg_dequeue    SYMBOL "osal_msg_dequeue"
??osal_msg_dequeue?relay SYMBOL "?relay", osal_msg_dequeue
osal_msg_enqueue    SYMBOL "osal_msg_enqueue"
??osal_msg_enqueue?relay SYMBOL "?relay", osal_msg_enqueue
osal_msg_enqueue_max SYMBOL "osal_msg_enqueue_max"
??osal_msg_enqueue_max?relay SYMBOL "?relay", osal_msg_enqueue_max
osal_msg_extract    SYMBOL "osal_msg_extract"
??osal_msg_extract?relay SYMBOL "?relay", osal_msg_extract
osal_msg_push       SYMBOL "osal_msg_push"
??osal_msg_push?relay SYMBOL "?relay", osal_msg_push
osal_msg_receive    SYMBOL "osal_msg_receive"
??osal_msg_receive?relay SYMBOL "?relay", osal_msg_receive
osal_msg_send       SYMBOL "osal_msg_send"
??osal_msg_send?relay SYMBOL "?relay", osal_msg_send
osal_rand           SYMBOL "osal_rand"
??osal_rand?relay   SYMBOL "?relay", osal_rand
osal_set_event      SYMBOL "osal_set_event"
??osal_set_event?relay SYMBOL "?relay", osal_set_event
osal_start_system   SYMBOL "osal_start_system"
??osal_start_system?relay SYMBOL "?relay", osal_start_system
osal_strlen         SYMBOL "osal_strlen"
??osal_strlen?relay SYMBOL "?relay", osal_strlen

        EXTERN strlen
        FUNCTION strlen,010202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 55, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN memset
        FUNCTION memset,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN _itoa
        FUNCTION _itoa,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 55, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN strcpy
        FUNCTION strcpy,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 55, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN strcat
        FUNCTION strcat,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 55, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN Onboard_rand
        FUNCTION Onboard_rand,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_init
        FUNCTION osal_mem_init,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osalTimerInit
        FUNCTION osalTimerInit,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_pwrmgr_init
        FUNCTION osal_pwrmgr_init,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osalInitTasks
        FUNCTION osalInitTasks,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_kick
        FUNCTION osal_mem_kick,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osalTimeUpdate
        FUNCTION osalTimeUpdate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN Hal_ProcessPoll
        FUNCTION Hal_ProcessPoll,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??Hal_ProcessPoll?relay
        FUNCTION ??Hal_ProcessPoll?relay,00H
        EXTERN ??Onboard_rand?relay
        FUNCTION ??Onboard_rand?relay,00H
        EXTERN ??_itoa?relay
        FUNCTION ??_itoa?relay,00H
        EXTERN ??memset?relay
        FUNCTION ??memset?relay,00H
        EXTERN ??osalInitTasks?relay
        FUNCTION ??osalInitTasks?relay,00H
        EXTERN ??osalTimeUpdate?relay
        FUNCTION ??osalTimeUpdate?relay,00H
        EXTERN ??osalTimerInit?relay
        FUNCTION ??osalTimerInit?relay,00H
        EXTERN ??osal_mem_alloc?relay
        FUNCTION ??osal_mem_alloc?relay,00H
        EXTERN ??osal_mem_free?relay
        FUNCTION ??osal_mem_free?relay,00H
        EXTERN ??osal_mem_init?relay
        FUNCTION ??osal_mem_init?relay,00H
        EXTERN ??osal_mem_kick?relay
        FUNCTION ??osal_mem_kick?relay,00H
        EXTERN ??osal_pwrmgr_init?relay
        FUNCTION ??osal_pwrmgr_init?relay,00H
        EXTERN ??strcat?relay
        FUNCTION ??strcat?relay,00H
        EXTERN ??strcpy?relay
        FUNCTION ??strcpy?relay,00H
        EXTERN ??strlen?relay
        FUNCTION ??strlen?relay,00H
        EXTERN tasksArr
        EXTERN tasksCnt
        EXTERN tasksEvents

// D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\Components\osal\common\OSAL.c
//    1 /**************************************************************************************************
//    2   Filename:       OSAL.c
//    3   Revised:        $Date: 2009-03-12 16:25:22 -0700 (Thu, 12 Mar 2009) $
//    4   Revision:       $Revision: 19404 $
//    5 
//    6 
//    7   Description:    This API allows the software components in the Z-stack to be written
//    8                   independently of the specifics of the operating system, kernel or tasking
//    9                   environment (including control loops or connect-to-interrupt systems).
//   10 
//   11 
//   12   Copyright 2004-2009 Texas Instruments Incorporated. All rights reserved.
//   13 
//   14   IMPORTANT: Your use of this Software is limited to those specific rights
//   15   granted under the terms of a software license agreement between the user
//   16   who downloaded the software, his/her employer (which must be your employer)
//   17   and Texas Instruments Incorporated (the "License").  You may not use this
//   18   Software unless you agree to abide by the terms of the License. The License
//   19   limits your use, and you acknowledge, that the Software may not be modified,
//   20   copied or distributed unless embedded on a Texas Instruments microcontroller
//   21   or used solely and exclusively in conjunction with a Texas Instruments radio
//   22   frequency transceiver, which is integrated into your product.  Other than for
//   23   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   24   works of, modify, distribute, perform, display or sell this Software and/or
//   25   its documentation for any purpose.
//   26 
//   27   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   28   PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, 
//   29   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE, 
//   30   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   31   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   32   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   33   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   34   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   35   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   36   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   37   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   38 
//   39   Should you have any questions regarding your right to use this Software,
//   40   contact Texas Instruments Incorporated at www.TI.com. 
//   41 **************************************************************************************************/
//   42 
//   43 /*********************************************************************
//   44  * INCLUDES
//   45  */
//   46 
//   47 #include <string.h>
//   48 
//   49 #include "comdef.h"
//   50 #include "OSAL.h"
//   51 #include "OSAL_Tasks.h"
//   52 #include "OSAL_Memory.h"
//   53 #include "OSAL_PwrMgr.h"
//   54 #include "OSAL_Clock.h"   
//   55 
//   56 #include "OnBoard.h"

        ASEGN SFR_AN:DATA:NOROOT,0a8H
// union <unnamed> volatile __sfr _A_IEN0
_A_IEN0:
        DATA8
        DS 1
//   57 
//   58 /* HAL */
//   59 #include "hal_drivers.h"
//   60 
//   61 
//   62 /*********************************************************************
//   63  * MACROS
//   64  */
//   65 
//   66 #define OSAL_MSG_LEN(msg_ptr)      ((osal_msg_hdr_t *) (msg_ptr) - 1)->len
//   67 
//   68 #define OSAL_MSG_ID(msg_ptr)      ((osal_msg_hdr_t *) (msg_ptr) - 1)->dest_id
//   69 
//   70 /*********************************************************************
//   71  * CONSTANTS
//   72  */
//   73 
//   74 /*********************************************************************
//   75  * TYPEDEFS
//   76  */
//   77 
//   78 /*********************************************************************
//   79  * GLOBAL VARIABLES
//   80  */
//   81 
//   82 // Message Pool Definitions

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//   83 osal_msg_q_t osal_qHead;
osal_qHead:
        DS 2
        REQUIRE __INIT_XDATA_Z
//   84 
//   85 #if defined( OSAL_TOTAL_MEM )
//   86   uint16 osal_msg_cnt;
//   87 #endif
//   88 
//   89 /*********************************************************************
//   90  * EXTERNAL VARIABLES
//   91  */
//   92 
//   93 /*********************************************************************
//   94  * EXTERNAL FUNCTIONS
//   95  */
//   96 
//   97 /*********************************************************************
//   98  * LOCAL VARIABLES
//   99  */
//  100 
//  101 /*********************************************************************
//  102  * LOCAL FUNCTION PROTOTYPES
//  103  */
//  104 
//  105 /*********************************************************************
//  106  * HELPER FUNCTIONS
//  107  */
//  108 /* very ugly stub so Keil can compile */
//  109 #ifdef __KEIL__
//  110 char *  itoa ( int value, char * buffer, int radix )
//  111 {
//  112   return(buffer);
//  113 }
//  114 #endif
//  115 
//  116 /*********************************************************************
//  117  * @fn      osal_strlen
//  118  *
//  119  * @brief
//  120  *
//  121  *   Calculates the length of a string.  The string must be null
//  122  *   terminated.
//  123  *
//  124  * @param   char *pString - pointer to text string
//  125  *
//  126  * @return  int - number of characters
//  127  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  128 int osal_strlen( char *pString )
osal_strlen:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function osal_strlen
        CODE
//  129 {
        FUNCALL osal_strlen, strlen
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  130   return (int)( strlen( pString ) );
        ; Setup parameters for call to function strlen
        LCALL   ??strlen?relay
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock0
//  131 }
//  132 
//  133 /*********************************************************************
//  134  * @fn      osal_memcpy
//  135  *
//  136  * @brief
//  137  *
//  138  *   Generic memory copy.
//  139  *
//  140  *   Note: This function differs from the standard memcpy(), since
//  141  *         it returns the pointer to the next destination uint8. The
//  142  *         standard memcpy() returns the original destination address.
//  143  *
//  144  * @param   dst - destination address
//  145  * @param   src - source address
//  146  * @param   len - number of bytes to copy
//  147  *
//  148  * @return  pointer to end of destination buffer
//  149  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  150 void *osal_memcpy( void *dst, const void GENERIC *src, unsigned int len )
osal_memcpy:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function osal_memcpy
        CODE
//  151 {
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_6:
        INC     DPTR
        MOVX    A,@DPTR
//  152   uint8 *pDst;
//  153   const uint8 GENERIC *pSrc;
//  154 
//  155   pSrc = src;
        MOV     R1,?V0 + 0
        MOV     R2,?V0 + 1
        MOV     R3,A
//  156   pDst = dst;
        MOV     DPL,R6
        MOV     DPH,R7
        SJMP    ??osal_memcpy_0
//  157 
//  158   while ( len-- )
//  159     *pDst++ = *pSrc++;
??osal_memcpy_1:
        LCALL   ?C_GPTR_LOAD
        MOVX    @DPTR,A
        MOV     A,R1
        ADD     A,#0x1
        INC     R1
        MOV     A,R2
        ADDC    A,#0x0
        MOV     R2,A
        INC     DPTR
??osal_memcpy_0:
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
        MOV     A,R6
        ADD     A,#-0x1
        DEC     R4
        MOV     A,R7
        ADDC    A,#-0x1
        MOV     R5,A
        MOV     A,R6
        ORL     A,R7
        JNZ     ??osal_memcpy_1
//  160 
//  161   return ( pDst );
        MOV     R2,DPL
        MOV     R3,DPH
        CFI EndBlock cfiBlock1
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1
//  162 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x3
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock2
//  163 
//  164 /*********************************************************************
//  165  * @fn      osal_memcmp
//  166  *
//  167  * @brief
//  168  *
//  169  *   Generic memory compare.
//  170  *
//  171  * @param   src1 - source 1 addrexx
//  172  * @param   src2 - source 2 address
//  173  * @param   len - number of bytes to compare
//  174  *
//  175  * @return  TRUE - same, FALSE - different
//  176  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  177 uint8 osal_memcmp( const void GENERIC *src1, const void GENERIC *src2, unsigned int len )
osal_memcmp:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function osal_memcmp
        CODE
//  178 {
        MOV     A,#-0xf
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 3
        MOV     A,#-0x3
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 18)
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R1
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        MOV     ?V0 + 0,R4
        MOV     ?V0 + 1,R5
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R1,A
        INC     DPTR
        LCALL   ??Subroutine25_0 & 0xFFFF
//  179   const uint8 GENERIC *pSrc1;
//  180   const uint8 GENERIC *pSrc2;
//  181 
//  182   pSrc1 = src1;
??CrossCallReturnLabel_37:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 5,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 6,A
//  183   pSrc2 = src2;
        MOV     A,R1
        MOV     R4,A
        MOV     A,R2
        MOV     R5,A
        MOV     A,R3
        MOV     R6,A
//  184 
//  185   while ( len-- )
??osal_memcmp_0:
        MOV     R0,?V0 + 0
        MOV     R1,?V0 + 1
        MOV     A,R0
        ADD     A,#-0x1
        MOV     ?V0 + 0,A
        MOV     A,R1
        ADDC    A,#-0x1
        MOV     ?V0 + 1,A
        MOV     A,R0
        ORL     A,R1
        JZ      ??osal_memcmp_1
//  186   {
//  187     if( *pSrc1++ != *pSrc2++ )
        MOV     R1,?V0 + 4
        MOV     R2,?V0 + 5
        MOV     R3,?V0 + 6
        MOV     A,R1
        ADD     A,#0x1
        MOV     ?V0 + 4,A
        MOV     A,R2
        ADDC    A,#0x0
        MOV     ?V0 + 5,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R6
        MOVX    @DPTR,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,R4
        ADD     A,#0x1
        INC     R4
        MOV     A,R5
        ADDC    A,#0x0
        MOV     R5,A
        LCALL   ?C_GPTR_LOAD
        MOV     R0,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R1,A
        INC     DPTR
        LCALL   ??Subroutine25_0 & 0xFFFF
??CrossCallReturnLabel_38:
        LCALL   ?C_GPTR_LOAD
        XRL     A,R0
        JZ      ??osal_memcmp_0
//  188       return FALSE;
        MOV     R1,#0x0
        SJMP    ??osal_memcmp_2
//  189   }
//  190   return TRUE;
??osal_memcmp_1:
        MOV     R1,#0x1
??osal_memcmp_2:
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 15)
        MOV     R7,#0x7
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock3
//  191 }
//  192 
//  193 
//  194 /*********************************************************************
//  195  * @fn      osal_memset
//  196  *
//  197  * @brief
//  198  *
//  199  *   Set memory buffer to value.
//  200  *
//  201  * @param   dest - pointer to buffer
//  202  * @param   value - what to set each uint8 of the message
//  203  * @param   size - how big
//  204  *
//  205  * @return  value of next widget, 0 if no widget found
//  206  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  207 void *osal_memset( void *dest, uint8 value, int len )
osal_memset:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI Function osal_memset
        CODE
//  208 {
        FUNCALL osal_memset, memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  209   return memset( dest, value, len );
        ; Setup parameters for call to function memset
        MOV     ?V0 + 0,R4
        MOV     ?V0 + 1,R5
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     ?V0 + 0,R6
        MOV     R4,?V0 + 0
        MOV     R5,#0x0
        LCALL   ??memset?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock4
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2
//  210 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiBlock5 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock5
//  211 
//  212 /*********************************************************************
//  213  * @fn      osal_build_uint16
//  214  *
//  215  * @brief
//  216  *
//  217  *   Build a uint16 out of 2 bytes (0 then 1).
//  218  *
//  219  * @param   swapped - 0 then 1
//  220  *
//  221  * @return  uint16
//  222  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  223 uint16 osal_build_uint16( uint8 *swapped )
osal_build_uint16:
        CFI Block cfiBlock6 Using cfiCommon0
        CFI Function osal_build_uint16
        CODE
//  224 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  225   return ( BUILD_UINT16( swapped[0], swapped[1] ) );
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R4
        ADD     A,#0x0
        MOV     R2,A
        CLR     A
        ADDC    A,R1
        MOV     R3,A
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock6
//  226 }
//  227 
//  228 /*********************************************************************
//  229  * @fn      osal_build_uint32
//  230  *
//  231  * @brief
//  232  *
//  233  *   Build a uint32 out of sequential bytes.
//  234  *
//  235  * @param   swapped - sequential bytes
//  236  * @param   len - number of bytes in the uint8 array
//  237  *
//  238  * @return  uint32
//  239  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  240 uint32 osal_build_uint32( uint8 *swapped, uint8 len )
osal_build_uint32:
        CFI Block cfiBlock7 Using cfiCommon0
        CFI Function osal_build_uint32
        CODE
//  241 {
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  242   if ( len == 2 )
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        CLR     A
        MOV     ?V0 + 1,A
        MOV     ?V0 + 2,A
        MOV     ?V0 + 3,A
        MOV     A,#0x2
        XRL     A,R6
        JNZ     ??osal_build_uint32_0
//  243     return ( BUILD_UINT32( swapped[0], swapped[1], 0L, 0L ) );
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_33:
        SJMP    ??osal_build_uint32_1
//  244   else if ( len == 3 )
??osal_build_uint32_0:
        MOV     A,#0x3
        XRL     A,R6
        JNZ     ??osal_build_uint32_2
//  245     return ( BUILD_UINT32( swapped[0], swapped[1], swapped[2], 0L ) );
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_14:
        LCALL   ?L_SHL
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?L_ADD
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_27:
        SJMP    ??osal_build_uint32_1
//  246   else if ( len == 4 )
??osal_build_uint32_2:
        MOV     A,#0x4
        XRL     A,R6
        JNZ     ??osal_build_uint32_3
//  247     return ( BUILD_UINT32( swapped[0], swapped[1], swapped[2], swapped[3] ) );
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_15:
        LCALL   ?L_SHL
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?L_ADD
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_28:
        MOV     R0,#?V0 + 4
        LCALL   ?L_SHL
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?L_ADD
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        CLR     A
        MOV     ?V0 + 6,A
        MOV     A,#0x18
??osal_build_uint32_1:
        MOV     R0,#?V0 + 4
        LCALL   ?L_SHL
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?L_ADD
//  248   else
//  249     return ( (uint32)swapped[0] );
??osal_build_uint32_3:
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     R4,?V0 + 2
        MOV     R5,?V0 + 3
        LJMP    ??Subroutine29_0 & 0xFFFF
        CFI EndBlock cfiBlock7
//  250 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine16:
        CFI Block cfiCond8 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_27
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond9 Using cfiCommon0
        CFI (cfiCond9) NoFunction
        CFI (cfiCond9) Conditional ??CrossCallReturnLabel_28
        CFI (cfiCond9) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond9) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond9) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond9) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond9) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond9) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond9) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond9) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond9) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond9) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond9) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond9) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond9) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond9) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond9) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond9) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond9) CFA_SP SP+0
        CFI (cfiCond9) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker10 Using cfiCommon1
        CFI (cfiPicker10) NoFunction
        CFI (cfiPicker10) Picker
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        CLR     A
        MOV     ?V0 + 5,A
        MOV     A,#0x10
        RET
        CFI EndBlock cfiCond8
        CFI EndBlock cfiCond9
        CFI EndBlock cfiPicker10

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
        CFI Block cfiCond11 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_14
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond12 Using cfiCommon0
        CFI (cfiCond12) NoFunction
        CFI (cfiCond12) Conditional ??CrossCallReturnLabel_15
        CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond12) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond12) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond12) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond12) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond12) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond12) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond12) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond12) CFA_SP SP+0
        CFI (cfiCond12) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker13 Using cfiCommon1
        CFI (cfiPicker13) NoFunction
        CFI (cfiPicker13) Picker
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_34:
        MOV     R0,#?V0 + 4
        RET
        CFI EndBlock cfiCond11
        CFI EndBlock cfiCond12
        CFI EndBlock cfiPicker13

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine20:
        CFI Block cfiCond14 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_33
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond15 Using cfiCommon0
        CFI (cfiCond15) NoFunction
        CFI (cfiCond15) Conditional ??CrossCallReturnLabel_34, ??CrossCallReturnLabel_14
        CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond15) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond15) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond15) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond15) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond15) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond15) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond15) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond15) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond15) CFA_SP SP+0
        CFI (cfiCond15) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond16 Using cfiCommon0
        CFI (cfiCond16) NoFunction
        CFI (cfiCond16) Conditional ??CrossCallReturnLabel_34, ??CrossCallReturnLabel_15
        CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond16) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond16) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond16) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond16) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond16) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond16) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond16) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond16) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond16) CFA_SP SP+0
        CFI (cfiCond16) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker17 Using cfiCommon1
        CFI (cfiPicker17) NoFunction
        CFI (cfiPicker17) Picker
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        CLR     A
        MOV     ?V0 + 5,A
        MOV     ?V0 + 6,A
        MOV     ?V0 + 7,A
        MOV     A,#0x8
        RET
        CFI EndBlock cfiCond14
        CFI EndBlock cfiCond15
        CFI EndBlock cfiCond16
        CFI EndBlock cfiPicker17
//  251 
//  252 #if !defined ( ZBIT ) && !defined ( ZBIT2 ) && !defined (UBIT)
//  253 /*********************************************************************
//  254  * @fn      _ltoa
//  255  *
//  256  * @brief
//  257  *
//  258  *   convert a long unsigned int to a string.
//  259  *
//  260  * @param  l - long to convert
//  261  * @param  buf - buffer to convert to
//  262  * @param  radix - 10 dec, 16 hex
//  263  *
//  264  * @return  pointer to buffer
//  265  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  266 unsigned char * _ltoa(unsigned long l, unsigned char *buf, unsigned char radix)
_ltoa:
        CFI Block cfiBlock18 Using cfiCommon0
        CFI Function _ltoa
        CODE
//  267 {
        FUNCALL _ltoa, _itoa
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 55, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 55, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL _ltoa, _itoa
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 55, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 55, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL _ltoa, _itoa
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 55, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 55, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL _ltoa, strcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 55, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 55, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL _ltoa, strcat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 55, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 55, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL _ltoa, strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 55, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 55, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL _ltoa, strcat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 55, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 55, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL _ltoa, strcat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 55, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 55, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL _ltoa, strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 55, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 55, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL _ltoa, strcat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 55, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 55, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL _ltoa, strcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 55, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 55, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL _ltoa, _itoa
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 55, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 55, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL _ltoa, _itoa
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 55, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 55, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL _ltoa, strcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 55, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 55, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL _ltoa, strcat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 55, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 55, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL _ltoa, strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 55, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 55, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL _ltoa, strcat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 55, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 55, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 39
        MOV     A,#-0x27
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 55)
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R1
        MOVX    @DPTR,A
//  268 #if defined( __GNUC__ )
//  269   return ( (char*)ltoa( l, buf, radix ) );
//  270 #else
//  271   unsigned char tmp1[10] = "", tmp2[10] = "", tmp3[10] = "";
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant "">` >> 8) & 0xff
        MOV     DPL,#`?<Constant "">` & 0xff
        MOV     A,#0xa
        LCALL   ?MOVE_LONG8_XDATA_XDATA
        MOV     DPH,#(`?<Constant "">_1` >> 8) & 0xff
        MOV     DPL,#`?<Constant "">_1` & 0xff
        MOV     A,#0xa
        LCALL   ?MOVE_LONG8_XDATA_XDATA
        MOV     DPH,#(`?<Constant "">_2` >> 8) & 0xff
        MOV     DPL,#`?<Constant "">_2` & 0xff
        MOV     A,#0xa
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  272   unsigned short num1, num2, num3;
//  273   unsigned char i;
//  274 
//  275   buf[0] = '\0';
        MOV     A,#0x37
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_29:
        CLR     A
        MOVX    @DPTR,A
//  276 
//  277   if ( radix == 10 )
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#`?<Constant "0">` & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(`?<Constant "0">` >> 8) & 0xff
        MOVX    @DPTR,A
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,#0xa
        JZ      $+5
        LJMP    ??_ltoa_0 & 0xFFFF
//  278   {
//  279     num1 = l % 10000;
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     DPTR,#__Constant_2710
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 0
        LCALL   ?UL_DIV_MOD
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 1
        MOVX    @DPTR,A
//  280     num2 = (l / 10000) % 10000;
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     DPTR,#__Constant_2710
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 0
        LCALL   ?UL_DIV_MOD
        MOV     DPTR,#__Constant_2710
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 0
        LCALL   ?UL_DIV_MOD
        MOV     R6,?V0 + 0
        MOV     R7,?V0 + 1
//  281     num3 = (unsigned short)(l / 100000000);
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     DPTR,#__Constant_5f5e100
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 0
        LCALL   ?UL_DIV_MOD
        MOV     ?V0 + 6,?V0 + 4
        MOV     ?V0 + 7,?V0 + 5
//  282 
//  283     if (num3) _itoa(num3, tmp3, 10);
        MOV     A,?V0 + 6
        ORL     A,?V0 + 7
        JZ      ??_ltoa_1
        ; Setup parameters for call to function _itoa
        MOV     R1,#0xa
        MOV     A,#0x1d
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,?V0 + 6
        MOV     R3,?V0 + 7
        LCALL   ??_itoa?relay
//  284     if (num2) _itoa(num2, tmp2, 10);
??_ltoa_1:
        MOV     A,R6
        ORL     A,R7
        JZ      ??_ltoa_2
        ; Setup parameters for call to function _itoa
        MOV     R1,#0xa
        MOV     A,#0x13
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??_itoa?relay
//  285     if (num1) _itoa(num1, tmp1, 10);
??_ltoa_2:
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_64:
        JZ      ??CrossCallReturnLabel_25
        ; Setup parameters for call to function _itoa
        MOV     R1,#0xa
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine14 & 0xFFFF
//  286 
//  287     if (num3)
??CrossCallReturnLabel_25:
        MOV     A,?V0 + 6
        ORL     A,?V0 + 7
        JZ      ??_ltoa_3
//  288     {
//  289       strcpy((char*)buf, (char const*)tmp3);
        ; Setup parameters for call to function strcpy
        MOV     A,#0x1d
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,#0x37
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine12 & 0xFFFF
//  290       for (i = 0; i < 4 - strlen((char const*)tmp2); i++)
??CrossCallReturnLabel_18:
        SJMP    ??CrossCallReturnLabel_3
//  291         strcat((char*)buf, "0");
??_ltoa_4:
        ; Setup parameters for call to function strcat
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_10:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_3:
        MOV     ?V0 + 2,?V0 + 0
        ; Setup parameters for call to function strlen
        MOV     A,#0x13
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine5 & 0xFFFF
//  292     }
??CrossCallReturnLabel_0:
        JC      ??_ltoa_4
//  293     strcat((char*)buf, (char const*)tmp2);
??_ltoa_3:
        ; Setup parameters for call to function strcat
        MOV     A,#0x13
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,#0x37
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine11 & 0xFFFF
//  294     if (num3 || num2)
??CrossCallReturnLabel_16:
        JNZ     ??_ltoa_5
        MOV     A,R6
        ORL     A,R7
        JZ      ??_ltoa_6
//  295     {
//  296       for (i = 0; i < 4 - strlen((char const*)tmp1); i++)
??_ltoa_5:
        MOV     ?V0 + 0,#0x0
        SJMP    ??CrossCallReturnLabel_4
//  297         strcat((char*)buf, "0");
??_ltoa_7:
        ; Setup parameters for call to function strcat
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_11:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_4:
        MOV     ?V0 + 2,?V0 + 0
        ; Setup parameters for call to function strlen
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine5 & 0xFFFF
//  298     }
??CrossCallReturnLabel_1:
        JC      ??_ltoa_7
//  299     strcat((char*)buf, (char const*)tmp1);
??_ltoa_6:
        ; Setup parameters for call to function strcat
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,#0x37
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine11 & 0xFFFF
//  300     if (!num3 && !num2 && !num1)
??CrossCallReturnLabel_17:
        JNZ     ??_ltoa_8
        MOV     A,R6
        ORL     A,R7
        JNZ     ??_ltoa_8
??_ltoa_9:
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_65:
        JNZ     ??_ltoa_8
//  301       strcpy((char*)buf, "0");
        ; Setup parameters for call to function strcpy
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine9 & 0xFFFF
//  302   }
??CrossCallReturnLabel_12:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine25_0 & 0xFFFF
??CrossCallReturnLabel_39:
        LCALL   ??strcpy?relay
//  303   else if ( radix == 16 )
//  304   {
//  305     num1 = l & 0x0000FFFF;
//  306     num2 = l >> 16;
//  307 
//  308     if (num2) _itoa(num2, tmp2, 16);
//  309     if (num1) _itoa(num1, tmp1, 16);
//  310 
//  311     if (num2)
//  312     {
//  313       strcpy((char*)buf,(char const*)tmp2);
//  314       for (i = 0; i < 4 - strlen((char const*)tmp1); i++)
//  315         strcat((char*)buf, "0");
//  316     }
//  317     strcat((char*)buf, (char const*)tmp1);
//  318     if (!num2 && !num1)
//  319       strcpy((char*)buf, "0");
//  320   }
//  321   else
//  322     return NULL;
//  323 
//  324   return buf;
??_ltoa_8:
        MOV     A,#0x37
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine25_0 & 0xFFFF
??CrossCallReturnLabel_40:
        MOV     A,#0x27
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
        LJMP    ??Subroutine29_0 & 0xFFFF
        CFI CFA_XSP16 add(XSP16, 55)
??_ltoa_0:
        MOVX    A,@DPTR
        XRL     A,#0x10
        JZ      $+5
        LJMP    ??_ltoa_10 & 0xFFFF
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 1
        MOVX    @DPTR,A
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     A,#0x10
        MOV     R0,#?V0 + 0
        LCALL   ?UL_SHR
        MOV     R6,?V0 + 0
        MOV     R7,?V0 + 1
        MOV     A,R6
        ORL     A,R7
        JZ      ??_ltoa_11
        ; Setup parameters for call to function _itoa
        MOV     R1,#0x10
        MOV     A,#0x13
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??_itoa?relay
??_ltoa_11:
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_66:
        JZ      ??CrossCallReturnLabel_26
        ; Setup parameters for call to function _itoa
        MOV     R1,#0x10
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_26:
        MOV     A,R6
        ORL     A,R7
        JZ      ??_ltoa_12
        ; Setup parameters for call to function strcpy
        MOV     A,#0x13
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,#0x37
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_19:
        SJMP    ??CrossCallReturnLabel_5
??_ltoa_13:
        ; Setup parameters for call to function strcat
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_13:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_5:
        MOV     ?V0 + 2,?V0 + 0
        ; Setup parameters for call to function strlen
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_2:
        JC      ??_ltoa_13
??_ltoa_12:
        ; Setup parameters for call to function strcat
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,#0x37
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine25_0 & 0xFFFF
??CrossCallReturnLabel_41:
        LCALL   ??strcat?relay
        MOV     A,R6
        ORL     A,R7
        JZ      $+5
        LJMP    ??_ltoa_8 & 0xFFFF
        LJMP    ??_ltoa_9 & 0xFFFF
??_ltoa_10:
        MOV     R2,#0x0
        MOV     R3,#0x0
        LJMP    ??CrossCallReturnLabel_40 & 0xFFFF
        CFI EndBlock cfiBlock18
//  325 #endif
//  326 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine14:
        CFI Block cfiCond19 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_25
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 55)
        CFI Block cfiCond20 Using cfiCommon0
        CFI (cfiCond20) NoFunction
        CFI (cfiCond20) Conditional ??CrossCallReturnLabel_26
        CFI (cfiCond20) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond20) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond20) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond20) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond20) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond20) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond20) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond20) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond20) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond20) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond20) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond20) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond20) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond20) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond20) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond20) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond20) CFA_SP SP+0
        CFI (cfiCond20) CFA_XSP16 add(XSP16, 55)
        CFI Block cfiPicker21 Using cfiCommon1
        CFI (cfiPicker21) NoFunction
        CFI (cfiPicker21) Picker
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_47:
        LCALL   ??_itoa?relay
        RET
        CFI EndBlock cfiCond19
        CFI EndBlock cfiCond20
        CFI EndBlock cfiPicker21

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
        CFI Block cfiCond22 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_18
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 55)
        CFI Block cfiCond23 Using cfiCommon0
        CFI (cfiCond23) NoFunction
        CFI (cfiCond23) Conditional ??CrossCallReturnLabel_19
        CFI (cfiCond23) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond23) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond23) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond23) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond23) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond23) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond23) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond23) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond23) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond23) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond23) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond23) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond23) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond23) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond23) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond23) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond23) CFA_SP SP+0
        CFI (cfiCond23) CFA_XSP16 add(XSP16, 55)
        CFI Block cfiPicker24 Using cfiCommon1
        CFI (cfiPicker24) NoFunction
        CFI (cfiPicker24) Picker
        LCALL   ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_46:
        LCALL   ??strcpy?relay
        MOV     ?V0 + 0,#0x0
        RET
        CFI EndBlock cfiCond22
        CFI EndBlock cfiCond23
        CFI EndBlock cfiPicker24

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
        CFI Block cfiCond25 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_16
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 55)
        CFI Block cfiCond26 Using cfiCommon0
        CFI (cfiCond26) NoFunction
        CFI (cfiCond26) Conditional ??CrossCallReturnLabel_17
        CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond26) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond26) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond26) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond26) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond26) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond26) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond26) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond26) CFA_SP SP+0
        CFI (cfiCond26) CFA_XSP16 add(XSP16, 55)
        CFI Block cfiPicker27 Using cfiCommon1
        CFI (cfiPicker27) NoFunction
        CFI (cfiPicker27) Picker
        LCALL   ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_35:
        MOV     A,?V0 + 6
        ORL     A,?V0 + 7
        RET
        CFI EndBlock cfiCond25
        CFI EndBlock cfiCond26
        CFI EndBlock cfiPicker27

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
        CFI Block cfiCond28 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_10
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 55)
        CFI Block cfiCond29 Using cfiCommon0
        CFI (cfiCond29) NoFunction
        CFI (cfiCond29) Conditional ??CrossCallReturnLabel_11
        CFI (cfiCond29) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond29) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond29) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond29) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond29) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond29) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond29) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond29) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond29) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond29) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond29) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond29) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond29) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond29) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond29) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond29) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond29) CFA_SP SP+0
        CFI (cfiCond29) CFA_XSP16 add(XSP16, 55)
        CFI Block cfiCond30 Using cfiCommon0
        CFI (cfiCond30) NoFunction
        CFI (cfiCond30) Conditional ??CrossCallReturnLabel_12
        CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond30) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond30) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond30) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond30) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond30) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond30) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond30) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond30) CFA_SP SP+0
        CFI (cfiCond30) CFA_XSP16 add(XSP16, 55)
        CFI Block cfiCond31 Using cfiCommon0
        CFI (cfiCond31) NoFunction
        CFI (cfiCond31) Conditional ??CrossCallReturnLabel_13
        CFI (cfiCond31) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond31) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond31) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond31) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond31) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond31) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond31) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond31) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond31) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond31) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond31) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond31) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond31) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond31) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond31) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond31) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond31) CFA_SP SP+0
        CFI (cfiCond31) CFA_XSP16 add(XSP16, 55)
        CFI Block cfiPicker32 Using cfiCommon1
        CFI (cfiPicker32) NoFunction
        CFI (cfiPicker32) Picker
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,#0x37
        RET
        CFI EndBlock cfiCond28
        CFI EndBlock cfiCond29
        CFI EndBlock cfiCond30
        CFI EndBlock cfiCond31
        CFI EndBlock cfiPicker32

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond33 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_3
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 55)
        CFI Block cfiCond34 Using cfiCommon0
        CFI (cfiCond34) NoFunction
        CFI (cfiCond34) Conditional ??CrossCallReturnLabel_4
        CFI (cfiCond34) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond34) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond34) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond34) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond34) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond34) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond34) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond34) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond34) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond34) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond34) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond34) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond34) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond34) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond34) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond34) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond34) CFA_SP SP+0
        CFI (cfiCond34) CFA_XSP16 add(XSP16, 55)
        CFI Block cfiCond35 Using cfiCommon0
        CFI (cfiCond35) NoFunction
        CFI (cfiCond35) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond35) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond35) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond35) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond35) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond35) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond35) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond35) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond35) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond35) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond35) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond35) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond35) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond35) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond35) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond35) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond35) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond35) CFA_SP SP+0
        CFI (cfiCond35) CFA_XSP16 add(XSP16, 55)
        CFI Block cfiPicker36 Using cfiCommon1
        CFI (cfiPicker36) NoFunction
        CFI (cfiPicker36) Picker
        LCALL   ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_36:
        INC     ?V0 + 0
        RET
        CFI EndBlock cfiCond33
        CFI EndBlock cfiCond34
        CFI EndBlock cfiCond35
        CFI EndBlock cfiPicker36

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine21:
        CFI Block cfiCond37 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_35, ??CrossCallReturnLabel_16
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 55)
        CFI Block cfiCond38 Using cfiCommon0
        CFI (cfiCond38) NoFunction
        CFI (cfiCond38) Conditional ??CrossCallReturnLabel_35, ??CrossCallReturnLabel_17
        CFI (cfiCond38) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond38) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond38) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond38) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond38) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond38) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond38) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond38) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond38) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond38) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond38) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond38) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond38) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond38) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond38) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond38) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond38) CFA_SP SP+0
        CFI (cfiCond38) CFA_XSP16 add(XSP16, 55)
        CFI Block cfiCond39 Using cfiCommon0
        CFI (cfiCond39) NoFunction
        CFI (cfiCond39) Conditional ??CrossCallReturnLabel_36, ??CrossCallReturnLabel_3
        CFI (cfiCond39) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond39) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond39) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond39) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond39) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond39) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond39) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond39) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond39) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond39) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond39) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond39) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond39) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond39) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond39) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond39) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond39) CFA_SP SP+0
        CFI (cfiCond39) CFA_XSP16 add(XSP16, 55)
        CFI Block cfiCond40 Using cfiCommon0
        CFI (cfiCond40) NoFunction
        CFI (cfiCond40) Conditional ??CrossCallReturnLabel_36, ??CrossCallReturnLabel_4
        CFI (cfiCond40) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond40) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond40) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond40) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond40) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond40) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond40) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond40) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond40) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond40) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond40) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond40) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond40) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond40) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond40) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond40) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond40) CFA_SP SP+0
        CFI (cfiCond40) CFA_XSP16 add(XSP16, 55)
        CFI Block cfiCond41 Using cfiCommon0
        CFI (cfiCond41) NoFunction
        CFI (cfiCond41) Conditional ??CrossCallReturnLabel_36, ??CrossCallReturnLabel_5
        CFI (cfiCond41) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond41) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond41) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond41) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond41) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond41) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond41) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond41) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond41) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond41) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond41) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond41) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond41) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond41) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond41) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond41) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond41) CFA_SP SP+0
        CFI (cfiCond41) CFA_XSP16 add(XSP16, 55)
        CFI Block cfiPicker42 Using cfiCommon1
        CFI (cfiPicker42) NoFunction
        CFI (cfiPicker42) Picker
        LCALL   ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_48:
        LCALL   ??strcat?relay
        RET
        CFI EndBlock cfiCond37
        CFI EndBlock cfiCond38
        CFI EndBlock cfiCond39
        CFI EndBlock cfiCond40
        CFI EndBlock cfiCond41
        CFI EndBlock cfiPicker42

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond43 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 55)
        CFI Block cfiCond44 Using cfiCommon0
        CFI (cfiCond44) NoFunction
        CFI (cfiCond44) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond44) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond44) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond44) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond44) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond44) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond44) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond44) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond44) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond44) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond44) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond44) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond44) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond44) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond44) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond44) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond44) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond44) CFA_SP SP+0
        CFI (cfiCond44) CFA_XSP16 add(XSP16, 55)
        CFI Block cfiCond45 Using cfiCommon0
        CFI (cfiCond45) NoFunction
        CFI (cfiCond45) Conditional ??CrossCallReturnLabel_2
        CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond45) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond45) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond45) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond45) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond45) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond45) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond45) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond45) CFA_SP SP+0
        CFI (cfiCond45) CFA_XSP16 add(XSP16, 55)
        CFI Block cfiPicker46 Using cfiCommon1
        CFI (cfiPicker46) NoFunction
        CFI (cfiPicker46) Picker
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??strlen?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     A,#0x4
        CLR     C
        SUBB    A,?V0 + 4
        MOV     R0,A
        CLR     A
        SUBB    A,?V0 + 5
        MOV     R1,A
        CLR     C
        MOV     A,?V0 + 2
        SUBB    A,R0
        CLR     A
        SUBB    A,R1
        RET
        CFI EndBlock cfiCond43
        CFI EndBlock cfiCond44
        CFI EndBlock cfiCond45
        CFI EndBlock cfiPicker46
//  327 #endif // !defined(ZBIT) && !defined(ZBIT2)
//  328 
//  329 /*********************************************************************
//  330  * @fn        osal_rand
//  331  *
//  332  * @brief    Random number generator
//  333  *
//  334  * @param   none
//  335  *
//  336  * @return  uint16 - new random number
//  337  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  338 uint16 osal_rand( void )
osal_rand:
        CFI Block cfiBlock47 Using cfiCommon0
        CFI Function osal_rand
        CODE
//  339 {
        FUNCALL osal_rand, Onboard_rand
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  340   return ( Onboard_rand() );
        ; Setup parameters for call to function Onboard_rand
        LCALL   ??Onboard_rand?relay
        CFI EndBlock cfiBlock47
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0
//  341 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock48 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP     DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP    ?BRET
        CFI EndBlock cfiBlock48
//  342 
//  343 /*********************************************************************
//  344  * API FUNCTIONS
//  345  *********************************************************************/
//  346 
//  347 /*********************************************************************
//  348  * @fn      osal_msg_allocate
//  349  *
//  350  * @brief
//  351  *
//  352  *    This function is called by a task to allocate a message buffer
//  353  *    into which the task will encode the particular message it wishes
//  354  *    to send.  This common buffer scheme is used to strictly limit the
//  355  *    creation of message buffers within the system due to RAM size
//  356  *    limitations on the microprocessor.   Note that all message buffers
//  357  *    are a fixed size (at least initially).  The parameter len is kept
//  358  *    in case a message pool with varying fixed message sizes is later
//  359  *    created (for example, a pool of message buffers of size LARGE,
//  360  *    MEDIUM and SMALL could be maintained and allocated based on request
//  361  *    from the tasks).
//  362  *
//  363  *
//  364  * @param   uint8 len  - wanted buffer length
//  365  *
//  366  *
//  367  * @return  pointer to allocated buffer or NULL if allocation failed.
//  368  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  369 uint8 * osal_msg_allocate( uint16 len )
osal_msg_allocate:
        CFI Block cfiBlock49 Using cfiCommon0
        CFI Function osal_msg_allocate
        CODE
//  370 {
        FUNCALL osal_msg_allocate, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  371   osal_msg_hdr_t *hdr;
//  372 
//  373   if ( len == 0 )
        MOV     A,R6
        ORL     A,R7
        JNZ     ??osal_msg_allocate_0
//  374     return ( NULL );
??osal_msg_allocate_1:
        MOV     R2,#0x0
        MOV     R3,#0x0
        SJMP    ??osal_msg_allocate_2
//  375 
//  376   hdr = (osal_msg_hdr_t *) osal_mem_alloc( (short)(len + sizeof( osal_msg_hdr_t )) );
??osal_msg_allocate_0:
        ; Setup parameters for call to function osal_mem_alloc
        MOV     A,R6
        ADD     A,#0x5
        MOV     R2,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ??osal_mem_alloc?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R0,?V0 + 0
        MOV     R1,?V0 + 1
//  377   if ( hdr )
        MOV     A,R0
        ORL     A,R1
        JZ      ??osal_msg_allocate_1
//  378   {
//  379     hdr->next = NULL;
        MOV     DPL,R0
        MOV     DPH,R1
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  380     hdr->len = len;
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        MOVX    @DPTR,A
//  381     hdr->dest_id = TASK_NO_TASK;
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,#-0x1
        MOVX    @DPTR,A
//  382 
//  383 #if defined( OSAL_TOTAL_MEM )
//  384     osal_msg_cnt++;
//  385 #endif
//  386     return ( (uint8 *) (hdr + 1) );
        MOV     A,R0
        ADD     A,#0x5
        MOV     R2,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R3,A
//  387   }
??osal_msg_allocate_2:
        LJMP    ?Subroutine2 & 0xFFFF
        CFI EndBlock cfiBlock49
//  388   else
//  389     return ( NULL );
//  390 }
//  391 
//  392 /*********************************************************************
//  393  * @fn      osal_msg_deallocate
//  394  *
//  395  * @brief
//  396  *
//  397  *    This function is used to deallocate a message buffer. This function
//  398  *    is called by a task (or processing element) after it has finished
//  399  *    processing a received message.
//  400  *
//  401  *
//  402  * @param   uint8 *msg_ptr - pointer to new message buffer
//  403  *
//  404  * @return  SUCCESS, INVALID_MSG_POINTER
//  405  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  406 uint8 osal_msg_deallocate( uint8 *msg_ptr )
osal_msg_deallocate:
        CFI Block cfiBlock50 Using cfiCommon0
        CFI Function osal_msg_deallocate
        CODE
//  407 {
        FUNCALL osal_msg_deallocate, osal_mem_free
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  408   uint8 *x;
//  409 
//  410   if ( msg_ptr == NULL )
        MOV     A,R2
        ORL     A,R3
        JNZ     ??osal_msg_deallocate_0
//  411     return ( INVALID_MSG_POINTER );
        MOV     R1,#0x5
        SJMP    ??osal_msg_deallocate_1
//  412 
//  413   // don't deallocate queued buffer
//  414   if ( OSAL_MSG_ID( msg_ptr ) != TASK_NO_TASK )
??osal_msg_deallocate_0:
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_57:
        MOVX    A,@DPTR
        CPL     A
        JZ      ??osal_msg_deallocate_2
//  415     return ( MSG_BUFFER_NOT_AVAIL );
        MOV     R1,#0x4
        SJMP    ??osal_msg_deallocate_1
//  416 
//  417   x = (uint8 *)((uint8 *)msg_ptr - sizeof( osal_msg_hdr_t ));
//  418 
//  419   osal_mem_free( (void *)x );
??osal_msg_deallocate_2:
        ; Setup parameters for call to function osal_mem_free
        MOV     A,R2
        ADD     A,#-0x5
        MOV     R2,A
        MOV     A,R3
        ADDC    A,#-0x1
        MOV     R3,A
        LCALL   ??osal_mem_free?relay
//  420 
//  421 #if defined( OSAL_TOTAL_MEM )
//  422   if ( osal_msg_cnt )
//  423     osal_msg_cnt--;
//  424 #endif
//  425 
//  426   return ( SUCCESS );
        MOV     R1,#0x0
??osal_msg_deallocate_1:
        SJMP    ?Subroutine0
        CFI EndBlock cfiBlock50
//  427 }
//  428 
//  429 #if defined( OSAL_TOTAL_MEM )
//  430 /*********************************************************************
//  431  * @fn      osal_num_msgs
//  432  *
//  433  * @brief
//  434  *
//  435  *    This function returns the number of allocated messages
//  436  *
//  437  * @param   void
//  438  *
//  439  * @return  uint16 - number of msgs out
//  440  */
//  441 uint16 osal_num_msgs( void )
//  442 {
//  443   return ( osal_msg_cnt );
//  444 }
//  445 #endif
//  446 
//  447 /*********************************************************************
//  448  * @fn      osal_msg_send
//  449  *
//  450  * @brief
//  451  *
//  452  *    This function is called by a task to send a command message to
//  453  *    another task or processing element.  The sending_task field must
//  454  *    refer to a valid task, since the task ID will be used
//  455  *    for the response message.  This function will also set a message
//  456  *    ready event in the destination tasks event list.
//  457  *
//  458  *
//  459  * @param   uint8 destination task - Send msg to?  Task ID
//  460  * @param   uint8 *msg_ptr - pointer to new message buffer
//  461  * @param   uint8 len - length of data in message
//  462  *
//  463  * @return  SUCCESS, INVALID_TASK, INVALID_MSG_POINTER
//  464  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  465 uint8 osal_msg_send( uint8 destination_task, uint8 *msg_ptr )
osal_msg_send:
        CFI Block cfiBlock51 Using cfiCommon0
        CFI Function osal_msg_send
        CODE
//  466 {
        FUNCALL osal_msg_send, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_msg_send, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_msg_send, osal_msg_enqueue
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_msg_send, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  467   if ( msg_ptr == NULL )
        MOV     A,R2
        ORL     A,R3
        JNZ     ??osal_msg_send_0
//  468     return ( INVALID_MSG_POINTER );
??osal_msg_send_1:
        MOV     R1,#0x5
        SJMP    ??osal_msg_send_2
//  469 
//  470   if ( destination_task >= tasksCnt )
??osal_msg_send_0:
        MOV     DPTR,#tasksCnt
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,R6
        CLR     C
        SUBB    A,R0
        JC      ??osal_msg_send_3
//  471   {
//  472     osal_msg_deallocate( msg_ptr );
        ; Setup parameters for call to function osal_msg_deallocate
        LCALL   ??osal_msg_deallocate?relay
//  473     return ( INVALID_TASK );
        MOV     R1,#0x3
        SJMP    ??osal_msg_send_2
//  474   }
//  475 
//  476   // Check the message header
//  477   if ( OSAL_MSG_NEXT( msg_ptr ) != NULL ||
//  478        OSAL_MSG_ID( msg_ptr ) != TASK_NO_TASK )
??osal_msg_send_3:
        MOV     A,R2
        ADD     A,#-0x5
        LCALL   ??Subroutine26_0 & 0xFFFF
??CrossCallReturnLabel_56:
        LCALL   ??Subroutine28_0 & 0xFFFF
??CrossCallReturnLabel_60:
        JNZ     ??osal_msg_send_4
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_58:
        MOVX    A,@DPTR
        CPL     A
        JZ      ??osal_msg_send_5
//  479   {
//  480     osal_msg_deallocate( msg_ptr );
??osal_msg_send_4:
        ; Setup parameters for call to function osal_msg_deallocate
        LCALL   ??osal_msg_deallocate?relay
//  481     return ( INVALID_MSG_POINTER );
        SJMP    ??osal_msg_send_1
//  482   }
//  483 
//  484   OSAL_MSG_ID( msg_ptr ) = destination_task;
??osal_msg_send_5:
        MOV     A,R6
        MOVX    @DPTR,A
//  485 
//  486   // queue message
//  487   osal_msg_enqueue( &osal_qHead, msg_ptr );
        ; Setup parameters for call to function osal_msg_enqueue
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     R2,#osal_qHead & 0xff
        MOV     R3,#(osal_qHead >> 8) & 0xff
        LCALL   ??osal_msg_enqueue?relay
//  488 
//  489   // Signal the task that a message is waiting
//  490   osal_set_event( destination_task, SYS_EVENT_MSG );
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x0
        MOV     R3,#-0x80
        MOV     A,R6
        MOV     R1,A
        LCALL   ??osal_set_event?relay
//  491 
//  492   return ( SUCCESS );
        MOV     R1,#0x0
??osal_msg_send_2:
        SJMP    ??Subroutine23_0
        CFI EndBlock cfiBlock51
//  493 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiBlock52 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     0xa8.7,C
        CFI EndBlock cfiBlock52
        REQUIRE ??Subroutine23_0
        ; // Fall through to label ??Subroutine23_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine23_0:
        CFI Block cfiBlock53 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock53
//  494 
//  495 /*********************************************************************
//  496  * @fn      osal_msg_receive
//  497  *
//  498  * @brief
//  499  *
//  500  *    This function is called by a task to retrieve a received command
//  501  *    message. The calling task must deallocate the message buffer after
//  502  *    processing the message using the osal_msg_deallocate() call.
//  503  *
//  504  * @param   uint8 task_id - receiving tasks ID
//  505  *
//  506  * @return  *uint8 - message information or NULL if no message
//  507  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  508 uint8 *osal_msg_receive( uint8 task_id )
osal_msg_receive:
        CFI Block cfiBlock54 Using cfiCommon0
        CFI Function osal_msg_receive
        CODE
//  509 {
        FUNCALL osal_msg_receive, osal_msg_extract
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  510   osal_msg_hdr_t *listHdr;
//  511   osal_msg_hdr_t *prevHdr=0;
        MOV     ?V0 + 2,#0x0
        MOV     ?V0 + 3,#0x0
//  512   halIntState_t   intState;
//  513 
//  514   // Hold off interrupts
//  515   HAL_ENTER_CRITICAL_SECTION(intState);
        MOV     C,0xa8.7
        CLR     A
        RLC     A
        MOV     R7,A
        CLR     0xa8.7
//  516 
//  517   // Point to the top of the queue
//  518   listHdr = osal_qHead;
        MOV     DPTR,#osal_qHead
        SJMP    ??CrossCallReturnLabel_51
//  519 
//  520   // Look through the queue for a message that belongs to the asking task
//  521   while ( listHdr != NULL )
//  522   {
//  523     if ( (listHdr - 1)->dest_id == task_id )
??osal_msg_receive_0:
        MOV     A,?V0 + 0
        ADD     A,#-0x1
        MOV     DPL,A
        MOV     A,?V0 + 1
        LCALL   ??Subroutine27_0 & 0xFFFF
??CrossCallReturnLabel_50:
        MOVX    A,@DPTR
        XRL     A,R6
        JZ      ??osal_msg_receive_1
//  524     {
//  525       break;
//  526     }
//  527     prevHdr = listHdr;
        MOV     ?V0 + 2,?V0 + 0
        MOV     ?V0 + 3,?V0 + 1
//  528     listHdr = OSAL_MSG_NEXT( listHdr );
        MOV     A,?V0 + 0
        ADD     A,#-0x5
        MOV     DPL,A
        MOV     A,?V0 + 1
        LCALL   ??Subroutine27_0 & 0xFFFF
//  529   }
??CrossCallReturnLabel_51:
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_7:
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JNZ     ??osal_msg_receive_0
//  530 
//  531   // Did we find a message?
//  532   if ( listHdr == NULL )
//  533   {
//  534     // Release interrupts
//  535     HAL_EXIT_CRITICAL_SECTION(intState);
        MOV     A,R7
        MOV     C,0xE0 /* A   */.0
        MOV     0xa8.7,C
//  536     return NULL;
        MOV     R2,#0x0
        MOV     R3,#0x0
        SJMP    ??osal_msg_receive_2
//  537   }
//  538 
//  539   // Take out of the link list
//  540   osal_msg_extract( &osal_qHead, listHdr, prevHdr );
??osal_msg_receive_1:
        ; Setup parameters for call to function osal_msg_extract
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     R2,#osal_qHead & 0xff
        MOV     R3,#(osal_qHead >> 8) & 0xff
        LCALL   ??osal_msg_extract?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
//  541 
//  542   // Release interrupts
//  543   HAL_EXIT_CRITICAL_SECTION(intState);
        MOV     A,R7
        MOV     C,0xE0 /* A   */.0
        MOV     0xa8.7,C
//  544 
//  545   return ( (uint8*) listHdr );
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
??osal_msg_receive_2:
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock54
        REQUIRE _A_IEN0
//  546 }
//  547 
//  548 /*********************************************************************
//  549  * @fn      osal_msg_enqueue
//  550  *
//  551  * @brief
//  552  *
//  553  *    This function enqueues an OSAL message into an OSAL queue.
//  554  *
//  555  * @param   osal_msg_q_t *q_ptr - OSAL queue
//  556  * @param   void *msg_ptr  - OSAL message
//  557  *
//  558  * @return  none
//  559  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  560 void osal_msg_enqueue( osal_msg_q_t *q_ptr, void *msg_ptr )
osal_msg_enqueue:
        CFI Block cfiBlock55 Using cfiCommon0
        CFI Function osal_msg_enqueue
        CODE
//  561 {
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  562   void *list;
//  563   halIntState_t intState;
//  564 
//  565   // Hold off interrupts
//  566   HAL_ENTER_CRITICAL_SECTION(intState);
        MOV     C,0xa8.7
        CLR     A
        RLC     A
        MOV     R2,A
        CLR     0xa8.7
//  567 
//  568   OSAL_MSG_NEXT( msg_ptr ) = NULL;
        MOV     A,R4
        ADD     A,#-0x5
        MOV     DPL,A
        MOV     A,R5
        LCALL   ??Subroutine27_0 & 0xFFFF
??CrossCallReturnLabel_52:
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  569   // If first message in queue
//  570   if ( *q_ptr == NULL )
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine28_0 & 0xFFFF
??CrossCallReturnLabel_61:
        JNZ     ??CrossCallReturnLabel_20
//  571   {
//  572     *q_ptr = msg_ptr;
        MOV     DPL,R6
        MOV     DPH,R7
        SJMP    ??osal_msg_enqueue_0
//  573   }
//  574   else
//  575   {
//  576     // Find end of queue
//  577     for ( list = *q_ptr; OSAL_MSG_NEXT( list ) != NULL; list = OSAL_MSG_NEXT( list ) );
??osal_msg_enqueue_1:
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_20:
        MOV     A,R0
        ADD     A,#-0x5
        MOV     R0,A
        MOV     A,R1
        ADDC    A,#-0x1
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
        MOV     A,R6
        ORL     A,R7
        MOV     DPL,R0
        MOV     DPH,R1
        JNZ     ??osal_msg_enqueue_1
//  578 
//  579     // Add message to end of queue
//  580     OSAL_MSG_NEXT( list ) = msg_ptr;
??osal_msg_enqueue_0:
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
//  581   }
//  582 
//  583   // Re-enable interrupts
//  584   HAL_EXIT_CRITICAL_SECTION(intState);
        MOV     A,R2
        MOV     C,0xE0 /* A   */.0
        LJMP    ?Subroutine4 & 0xFFFF
        CFI EndBlock cfiBlock55
        REQUIRE _A_IEN0
//  585 }
//  586 
//  587 /*********************************************************************
//  588  * @fn      osal_msg_dequeue
//  589  *
//  590  * @brief
//  591  *
//  592  *    This function dequeues an OSAL message from an OSAL queue.
//  593  *
//  594  * @param   osal_msg_q_t *q_ptr - OSAL queue
//  595  *
//  596  * @return  void * - pointer to OSAL message or NULL of queue is empty.
//  597  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  598 void *osal_msg_dequeue( osal_msg_q_t *q_ptr )
osal_msg_dequeue:
        CFI Block cfiBlock56 Using cfiCommon0
        CFI Function osal_msg_dequeue
        CODE
//  599 {
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
//  600   void *msg_ptr;
//  601   halIntState_t intState;
//  602 
//  603   // Hold off interrupts
//  604   HAL_ENTER_CRITICAL_SECTION(intState);
        MOV     C,0xa8.7
        CLR     A
        RLC     A
        MOV     R6,A
        CLR     0xa8.7
//  605 
//  606   if ( *q_ptr == NULL )
        LCALL   ??Subroutine24_0 & 0xFFFF
??CrossCallReturnLabel_43:
        MOV     A,R2
        ORL     A,R3
        JNZ     ??osal_msg_dequeue_0
//  607   {
//  608     HAL_EXIT_CRITICAL_SECTION(intState);
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        MOV     0xa8.7,C
//  609     return NULL;
        MOV     R2,#0x0
        MOV     R3,#0x0
        SJMP    ??osal_msg_dequeue_1
//  610   }
//  611 
//  612   // Dequeue message
//  613   msg_ptr = *q_ptr;
//  614   *q_ptr = OSAL_MSG_NEXT( msg_ptr );
??osal_msg_dequeue_0:
        MOV     A,R2
        ADD     A,#-0x5
        MOV     R4,A
        MOV     A,R3
        ADDC    A,#-0x1
        MOV     R5,A
        MOV     DPL,R4
        MOV     DPH,R5
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_8:
        MOV     DPL,R0
        MOV     DPH,R1
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 1
        MOVX    @DPTR,A
//  615   OSAL_MSG_NEXT( msg_ptr ) = NULL;
        MOV     DPL,R4
        MOV     DPH,R5
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  616   OSAL_MSG_ID( msg_ptr ) = TASK_NO_TASK;
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_59:
        MOV     A,#-0x1
        MOVX    @DPTR,A
//  617 
//  618   // Re-enable interrupts
//  619   HAL_EXIT_CRITICAL_SECTION(intState);
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        MOV     0xa8.7,C
//  620 
//  621   return msg_ptr;
??osal_msg_dequeue_1:
        LJMP    ?Subroutine2 & 0xFFFF
        CFI EndBlock cfiBlock56
        REQUIRE _A_IEN0
//  622 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine15:
        CFI Block cfiCond57 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_44
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond58 Using cfiCommon0
        CFI (cfiCond58) NoFunction
        CFI (cfiCond58) Conditional ??CrossCallReturnLabel_45
        CFI (cfiCond58) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond58) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond58) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond58) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond58) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond58) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond58) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond58) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond58) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond58) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond58) CFA_SP SP+0
        CFI (cfiCond58) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker59 Using cfiCommon1
        CFI (cfiPicker59) NoFunction
        CFI (cfiPicker59) Picker
        MOV     R1,A
        CFI EndBlock cfiCond57
        CFI EndBlock cfiCond58
        CFI EndBlock cfiPicker59
        REQUIRE ??Subroutine24_0
        ; // Fall through to label ??Subroutine24_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine24_0:
        CFI Block cfiCond60 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_43
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond61 Using cfiCommon0
        CFI (cfiCond61) NoFunction
        CFI (cfiCond61) Conditional ??CrossCallReturnLabel_44
        CFI (cfiCond61) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond61) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond61) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond61) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond61) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond61) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond61) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond61) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond61) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond61) CFA_SP SP+0
        CFI (cfiCond61) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond62 Using cfiCommon0
        CFI (cfiCond62) NoFunction
        CFI (cfiCond62) Conditional ??CrossCallReturnLabel_45
        CFI (cfiCond62) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond62) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond62) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond62) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond62) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond62) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond62) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond62) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond62) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond62) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond62) CFA_SP SP+0
        CFI (cfiCond62) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker63 Using cfiCommon1
        CFI (cfiPicker63) NoFunction
        CFI (cfiPicker63) Picker
        MOV     DPL,R0
        MOV     DPH,R1
        CFI EndBlock cfiCond60
        CFI EndBlock cfiCond61
        CFI EndBlock cfiCond62
        CFI EndBlock cfiPicker63
        REQUIRE ??Subroutine25_0
        ; // Fall through to label ??Subroutine25_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine25_0:
        CFI Block cfiCond64 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_37
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond65 Using cfiCommon0
        CFI (cfiCond65) NoFunction
        CFI (cfiCond65) Conditional ??CrossCallReturnLabel_38
        CFI (cfiCond65) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond65) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond65) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond65) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond65) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond65) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond65) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond65) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond65) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond65) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond65) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond65) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond65) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond65) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond65) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond65) CFA_SP SP+0
        CFI (cfiCond65) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond66 Using cfiCommon0
        CFI (cfiCond66) NoFunction
        CFI (cfiCond66) Conditional ??CrossCallReturnLabel_39
        CFI (cfiCond66) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond66) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond66) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond66) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond66) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond66) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond66) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond66) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond66) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond66) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond66) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond66) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond66) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond66) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond66) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond66) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond66) CFA_SP SP+0
        CFI (cfiCond66) CFA_XSP16 add(XSP16, 55)
        CFI Block cfiCond67 Using cfiCommon0
        CFI (cfiCond67) NoFunction
        CFI (cfiCond67) Conditional ??CrossCallReturnLabel_40
        CFI (cfiCond67) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond67) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond67) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond67) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond67) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond67) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond67) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond67) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond67) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond67) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond67) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond67) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond67) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond67) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond67) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond67) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond67) CFA_SP SP+0
        CFI (cfiCond67) CFA_XSP16 add(XSP16, 55)
        CFI Block cfiCond68 Using cfiCommon0
        CFI (cfiCond68) NoFunction
        CFI (cfiCond68) Conditional ??CrossCallReturnLabel_41
        CFI (cfiCond68) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond68) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond68) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond68) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond68) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond68) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond68) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond68) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond68) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond68) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond68) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond68) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond68) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond68) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond68) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond68) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond68) CFA_SP SP+0
        CFI (cfiCond68) CFA_XSP16 add(XSP16, 55)
        CFI Block cfiCond69 Using cfiCommon0
        CFI (cfiCond69) NoFunction
        CFI (cfiCond69) Conditional ??CrossCallReturnLabel_42
        CFI (cfiCond69) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond69) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond69) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond69) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond69) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond69) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond69) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond69) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond69) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond69) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond69) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond69) CFA_SP SP+0
        CFI (cfiCond69) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond70 Using cfiCommon0
        CFI (cfiCond70) NoFunction
        CFI (cfiCond70) Conditional ??CrossCallReturnLabel_43
        CFI (cfiCond70) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond70) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond70) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond70) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond70) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond70) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond70) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond70) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond70) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond70) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond70) CFA_SP SP+0
        CFI (cfiCond70) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond71 Using cfiCommon0
        CFI (cfiCond71) NoFunction
        CFI (cfiCond71) Conditional ??CrossCallReturnLabel_44
        CFI (cfiCond71) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond71) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond71) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond71) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond71) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond71) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond71) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond71) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond71) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond71) CFA_SP SP+0
        CFI (cfiCond71) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond72 Using cfiCommon0
        CFI (cfiCond72) NoFunction
        CFI (cfiCond72) Conditional ??CrossCallReturnLabel_45
        CFI (cfiCond72) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond72) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond72) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond72) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond72) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond72) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond72) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond72) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond72) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond72) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond72) CFA_SP SP+0
        CFI (cfiCond72) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker73 Using cfiCommon1
        CFI (cfiPicker73) NoFunction
        CFI (cfiPicker73) Picker
        LCALL   ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_49:
        RET
        CFI EndBlock cfiCond64
        CFI EndBlock cfiCond65
        CFI EndBlock cfiCond66
        CFI EndBlock cfiCond67
        CFI EndBlock cfiCond68
        CFI EndBlock cfiCond69
        CFI EndBlock cfiCond70
        CFI EndBlock cfiCond71
        CFI EndBlock cfiCond72
        CFI EndBlock cfiPicker73

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine22:
        CFI Block cfiCond74 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_47, ??CrossCallReturnLabel_25
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 55)
        CFI Block cfiCond75 Using cfiCommon0
        CFI (cfiCond75) NoFunction
        CFI (cfiCond75) Conditional ??CrossCallReturnLabel_47, ??CrossCallReturnLabel_26
        CFI (cfiCond75) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond75) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond75) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond75) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond75) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond75) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond75) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond75) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond75) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond75) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond75) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond75) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond75) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond75) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond75) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond75) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond75) CFA_SP SP+0
        CFI (cfiCond75) CFA_XSP16 add(XSP16, 55)
        CFI Block cfiCond76 Using cfiCommon0
        CFI (cfiCond76) NoFunction
        CFI (cfiCond76) Conditional ??CrossCallReturnLabel_46, ??CrossCallReturnLabel_18
        CFI (cfiCond76) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond76) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond76) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond76) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond76) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond76) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond76) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond76) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond76) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond76) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond76) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond76) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond76) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond76) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond76) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond76) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond76) CFA_SP SP+0
        CFI (cfiCond76) CFA_XSP16 add(XSP16, 55)
        CFI Block cfiCond77 Using cfiCommon0
        CFI (cfiCond77) NoFunction
        CFI (cfiCond77) Conditional ??CrossCallReturnLabel_46, ??CrossCallReturnLabel_19
        CFI (cfiCond77) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond77) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond77) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond77) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond77) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond77) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond77) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond77) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond77) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond77) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond77) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond77) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond77) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond77) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond77) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond77) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond77) CFA_SP SP+0
        CFI (cfiCond77) CFA_XSP16 add(XSP16, 55)
        CFI Block cfiCond78 Using cfiCommon0
        CFI (cfiCond78) NoFunction
        CFI (cfiCond78) Conditional ??CrossCallReturnLabel_48, ??CrossCallReturnLabel_35, ??CrossCallReturnLabel_16
        CFI (cfiCond78) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond78) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond78) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond78) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond78) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond78) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond78) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond78) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond78) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond78) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond78) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond78) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond78) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond78) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond78) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond78) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond78) CFA_SP SP+0
        CFI (cfiCond78) CFA_XSP16 add(XSP16, 55)
        CFI Block cfiCond79 Using cfiCommon0
        CFI (cfiCond79) NoFunction
        CFI (cfiCond79) Conditional ??CrossCallReturnLabel_48, ??CrossCallReturnLabel_35, ??CrossCallReturnLabel_17
        CFI (cfiCond79) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond79) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond79) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond79) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond79) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond79) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond79) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond79) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond79) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond79) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond79) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond79) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond79) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond79) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond79) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond79) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond79) CFA_SP SP+0
        CFI (cfiCond79) CFA_XSP16 add(XSP16, 55)
        CFI Block cfiCond80 Using cfiCommon0
        CFI (cfiCond80) NoFunction
        CFI (cfiCond80) Conditional ??CrossCallReturnLabel_48, ??CrossCallReturnLabel_36, ??CrossCallReturnLabel_3
        CFI (cfiCond80) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond80) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond80) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond80) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond80) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond80) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond80) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond80) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond80) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond80) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond80) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond80) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond80) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond80) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond80) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond80) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond80) CFA_SP SP+0
        CFI (cfiCond80) CFA_XSP16 add(XSP16, 55)
        CFI Block cfiCond81 Using cfiCommon0
        CFI (cfiCond81) NoFunction
        CFI (cfiCond81) Conditional ??CrossCallReturnLabel_48, ??CrossCallReturnLabel_36, ??CrossCallReturnLabel_4
        CFI (cfiCond81) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond81) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond81) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond81) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond81) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond81) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond81) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond81) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond81) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond81) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond81) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond81) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond81) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond81) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond81) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond81) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond81) CFA_SP SP+0
        CFI (cfiCond81) CFA_XSP16 add(XSP16, 55)
        CFI Block cfiCond82 Using cfiCommon0
        CFI (cfiCond82) NoFunction
        CFI (cfiCond82) Conditional ??CrossCallReturnLabel_48, ??CrossCallReturnLabel_36, ??CrossCallReturnLabel_5
        CFI (cfiCond82) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond82) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond82) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond82) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond82) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond82) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond82) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond82) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond82) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond82) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond82) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond82) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond82) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond82) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond82) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond82) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond82) CFA_SP SP+0
        CFI (cfiCond82) CFA_XSP16 add(XSP16, 55)
        CFI Block cfiCond83 Using cfiCommon0
        CFI (cfiCond83) NoFunction
        CFI (cfiCond83) Conditional ??CrossCallReturnLabel_49, ??CrossCallReturnLabel_44
        CFI (cfiCond83) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond83) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond83) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond83) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond83) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond83) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond83) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond83) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond83) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond83) CFA_SP SP+0
        CFI (cfiCond83) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond84 Using cfiCommon0
        CFI (cfiCond84) NoFunction
        CFI (cfiCond84) Conditional ??CrossCallReturnLabel_49, ??CrossCallReturnLabel_45
        CFI (cfiCond84) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond84) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond84) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond84) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond84) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond84) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond84) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond84) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond84) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond84) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond84) CFA_SP SP+0
        CFI (cfiCond84) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond85 Using cfiCommon0
        CFI (cfiCond85) NoFunction
        CFI (cfiCond85) Conditional ??CrossCallReturnLabel_49, ??CrossCallReturnLabel_43
        CFI (cfiCond85) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond85) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond85) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond85) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond85) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond85) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond85) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond85) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond85) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond85) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond85) CFA_SP SP+0
        CFI (cfiCond85) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond86 Using cfiCommon0
        CFI (cfiCond86) NoFunction
        CFI (cfiCond86) Conditional ??CrossCallReturnLabel_49, ??CrossCallReturnLabel_37
        CFI (cfiCond86) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond86) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond86) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond86) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond86) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond86) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond86) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond86) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond86) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond86) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond86) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond86) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond86) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond86) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond86) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond86) CFA_SP SP+0
        CFI (cfiCond86) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond87 Using cfiCommon0
        CFI (cfiCond87) NoFunction
        CFI (cfiCond87) Conditional ??CrossCallReturnLabel_49, ??CrossCallReturnLabel_38
        CFI (cfiCond87) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond87) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond87) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond87) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond87) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond87) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond87) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond87) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond87) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond87) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond87) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond87) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond87) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond87) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond87) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond87) CFA_SP SP+0
        CFI (cfiCond87) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond88 Using cfiCommon0
        CFI (cfiCond88) NoFunction
        CFI (cfiCond88) Conditional ??CrossCallReturnLabel_49, ??CrossCallReturnLabel_39
        CFI (cfiCond88) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond88) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond88) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond88) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond88) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond88) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond88) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond88) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond88) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond88) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond88) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond88) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond88) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond88) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond88) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond88) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond88) CFA_SP SP+0
        CFI (cfiCond88) CFA_XSP16 add(XSP16, 55)
        CFI Block cfiCond89 Using cfiCommon0
        CFI (cfiCond89) NoFunction
        CFI (cfiCond89) Conditional ??CrossCallReturnLabel_49, ??CrossCallReturnLabel_40
        CFI (cfiCond89) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond89) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond89) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond89) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond89) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond89) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond89) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond89) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond89) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond89) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond89) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond89) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond89) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond89) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond89) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond89) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond89) CFA_SP SP+0
        CFI (cfiCond89) CFA_XSP16 add(XSP16, 55)
        CFI Block cfiCond90 Using cfiCommon0
        CFI (cfiCond90) NoFunction
        CFI (cfiCond90) Conditional ??CrossCallReturnLabel_49, ??CrossCallReturnLabel_41
        CFI (cfiCond90) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond90) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond90) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond90) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond90) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond90) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond90) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond90) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond90) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond90) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond90) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond90) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond90) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond90) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond90) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond90) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond90) CFA_SP SP+0
        CFI (cfiCond90) CFA_XSP16 add(XSP16, 55)
        CFI Block cfiCond91 Using cfiCommon0
        CFI (cfiCond91) NoFunction
        CFI (cfiCond91) Conditional ??CrossCallReturnLabel_49, ??CrossCallReturnLabel_42
        CFI (cfiCond91) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond91) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond91) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond91) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond91) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond91) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond91) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond91) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond91) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond91) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond91) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond91) CFA_SP SP+0
        CFI (cfiCond91) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker92 Using cfiCommon1
        CFI (cfiPicker92) NoFunction
        CFI (cfiPicker92) Picker
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        RET
        CFI EndBlock cfiCond74
        CFI EndBlock cfiCond75
        CFI EndBlock cfiCond76
        CFI EndBlock cfiCond77
        CFI EndBlock cfiCond78
        CFI EndBlock cfiCond79
        CFI EndBlock cfiCond80
        CFI EndBlock cfiCond81
        CFI EndBlock cfiCond82
        CFI EndBlock cfiCond83
        CFI EndBlock cfiCond84
        CFI EndBlock cfiCond85
        CFI EndBlock cfiCond86
        CFI EndBlock cfiCond87
        CFI EndBlock cfiCond88
        CFI EndBlock cfiCond89
        CFI EndBlock cfiCond90
        CFI EndBlock cfiCond91
        CFI EndBlock cfiPicker92

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiCond93 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_6
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond94 Using cfiCommon0
        CFI (cfiCond94) NoFunction
        CFI (cfiCond94) Conditional ??CrossCallReturnLabel_7
        CFI (cfiCond94) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond94) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond94) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond94) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond94) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond94) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond94) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond94) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond94) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond94) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond94) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond94) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond94) CFA_SP SP+0
        CFI (cfiCond94) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond95 Using cfiCommon0
        CFI (cfiCond95) NoFunction
        CFI (cfiCond95) Conditional ??CrossCallReturnLabel_8
        CFI (cfiCond95) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond95) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond95) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond95) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond95) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond95) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond95) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond95) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond95) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond95) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond95) CFA_SP SP+0
        CFI (cfiCond95) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond96 Using cfiCommon0
        CFI (cfiCond96) NoFunction
        CFI (cfiCond96) Conditional ??CrossCallReturnLabel_9
        CFI (cfiCond96) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond96) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond96) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond96) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond96) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond96) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond96) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond96) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond96) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond96) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond96) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond96) CFA_SP SP+0
        CFI (cfiCond96) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker97 Using cfiCommon1
        CFI (cfiPicker97) NoFunction
        CFI (cfiPicker97) Picker
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        RET
        CFI EndBlock cfiCond93
        CFI EndBlock cfiCond94
        CFI EndBlock cfiCond95
        CFI EndBlock cfiCond96
        CFI EndBlock cfiPicker97
//  623 
//  624 /*********************************************************************
//  625  * @fn      osal_msg_push
//  626  *
//  627  * @brief
//  628  *
//  629  *    This function pushes an OSAL message to the head of an OSAL
//  630  *    queue.
//  631  *
//  632  * @param   osal_msg_q_t *q_ptr - OSAL queue
//  633  * @param   void *msg_ptr  - OSAL message
//  634  *
//  635  * @return  none
//  636  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  637 void osal_msg_push( osal_msg_q_t *q_ptr, void *msg_ptr )
osal_msg_push:
        CFI Block cfiBlock98 Using cfiCommon0
        CFI Function osal_msg_push
        CODE
//  638 {
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  639   halIntState_t intState;
//  640 
//  641   // Hold off interrupts
//  642   HAL_ENTER_CRITICAL_SECTION(intState);
        MOV     A,0xa8
        MOV     R6,A
        CLR     0xa8.7
//  643 
//  644   // Push message to head of queue
//  645   OSAL_MSG_NEXT( msg_ptr ) = *q_ptr;
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_21:
        MOV     A,R4
        ADD     A,#-0x5
        MOV     DPL,A
        MOV     A,R5
        LCALL   ??Subroutine27_0 & 0xFFFF
??CrossCallReturnLabel_53:
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  646   *q_ptr = msg_ptr;
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
//  647 
//  648   // Re-enable interrupts
//  649   HAL_EXIT_CRITICAL_SECTION(intState);
        MOV     A,R6
        MOV     C,0xE0 /* A   */.7
        LJMP    ?Subroutine4 & 0xFFFF
        CFI EndBlock cfiBlock98
        REQUIRE _A_IEN0
//  650 }
//  651 
//  652 /*********************************************************************
//  653  * @fn      osal_msg_extract
//  654  *
//  655  * @brief
//  656  *
//  657  *    This function extracts and removes an OSAL message from the
//  658  *    middle of an OSAL queue.
//  659  *
//  660  * @param   osal_msg_q_t *q_ptr - OSAL queue
//  661  * @param   void *msg_ptr  - OSAL message to be extracted
//  662  * @param   void *prev_ptr  - OSAL message before msg_ptr in queue
//  663  *
//  664  * @return  none
//  665  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  666 void osal_msg_extract( osal_msg_q_t *q_ptr, void *msg_ptr, void *prev_ptr )
osal_msg_extract:
        CFI Block cfiBlock99 Using cfiCommon0
        CFI Function osal_msg_extract
        CODE
//  667 {
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 0
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine13 & 0xFFFF
//  668   halIntState_t intState;
//  669 
//  670   // Hold off interrupts
//  671   HAL_ENTER_CRITICAL_SECTION(intState);
??CrossCallReturnLabel_22:
        MOV     C,0xa8.7
        CLR     A
        RLC     A
        MOV     ?V0 + 2,A
        CLR     0xa8.7
//  672 
//  673   if ( msg_ptr == *q_ptr )
        MOV     A,R4
        ADD     A,#-0x5
        MOV     R6,A
        MOV     A,R5
        ADDC    A,#-0x1
        MOV     R7,A
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_9:
        MOV     A,R4
        XRL     A,?V0 + 0
        JNZ     ??osal_msg_extract_0
        MOV     A,R5
        XRL     A,?V0 + 1
??osal_msg_extract_0:
        MOV     DPL,R6
        MOV     DPH,R7
        JNZ     ??osal_msg_extract_1
//  674   {
//  675     // remove from first
//  676     *q_ptr = OSAL_MSG_NEXT( msg_ptr );
        LCALL   ?Subroutine13 & 0xFFFF
//  677   }
??CrossCallReturnLabel_23:
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        SJMP    ??osal_msg_extract_2
//  678   else
//  679   {
//  680     // remove from middle
//  681     OSAL_MSG_NEXT( prev_ptr ) = OSAL_MSG_NEXT( msg_ptr );
??osal_msg_extract_1:
        LCALL   ??Subroutine25_0 & 0xFFFF
//  682   }
??CrossCallReturnLabel_42:
        MOV     A,R0
        ADD     A,#-0x5
        MOV     DPL,A
        MOV     A,R1
        LCALL   ??Subroutine27_0 & 0xFFFF
??CrossCallReturnLabel_54:
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
??osal_msg_extract_2:
        MOVX    @DPTR,A
//  683   OSAL_MSG_NEXT( msg_ptr ) = NULL;
        MOV     DPL,R6
        MOV     DPH,R7
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  684   OSAL_MSG_ID( msg_ptr ) = TASK_NO_TASK;
        MOV     A,R4
        ADD     A,#-0x1
        MOV     DPL,A
        MOV     A,R5
        LCALL   ??Subroutine27_0 & 0xFFFF
??CrossCallReturnLabel_55:
        MOV     A,#-0x1
        MOVX    @DPTR,A
//  685 
//  686   // Re-enable interrupts
//  687   HAL_EXIT_CRITICAL_SECTION(intState);
        MOV     A,?V0 + 2
        MOV     C,0xE0 /* A   */.0
        MOV     0xa8.7,C
//  688 }
        LJMP    ?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock99
        REQUIRE _A_IEN0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine18:
        CFI Block cfiCond100 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_57
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond101 Using cfiCommon0
        CFI (cfiCond101) NoFunction
        CFI (cfiCond101) Conditional ??CrossCallReturnLabel_58
        CFI (cfiCond101) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond101) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond101) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond101) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond101) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond101) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond101) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond101) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond101) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond101) CFA_SP SP+0
        CFI (cfiCond101) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond102 Using cfiCommon0
        CFI (cfiCond102) NoFunction
        CFI (cfiCond102) Conditional ??CrossCallReturnLabel_59
        CFI (cfiCond102) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond102) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond102) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond102) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond102) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond102) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond102) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond102) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond102) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond102) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond102) CFA_SP SP+0
        CFI (cfiCond102) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker103 Using cfiCommon1
        CFI (cfiPicker103) NoFunction
        CFI (cfiPicker103) Picker
        MOV     A,R2
        ADD     A,#-0x1
        CFI EndBlock cfiCond100
        CFI EndBlock cfiCond101
        CFI EndBlock cfiCond102
        CFI EndBlock cfiPicker103
        REQUIRE ??Subroutine26_0
        ; // Fall through to label ??Subroutine26_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine26_0:
        CFI Block cfiCond104 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_56
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond105 Using cfiCommon0
        CFI (cfiCond105) NoFunction
        CFI (cfiCond105) Conditional ??CrossCallReturnLabel_57
        CFI (cfiCond105) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond105) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond105) CFA_SP SP+-5
        CFI Block cfiCond106 Using cfiCommon0
        CFI (cfiCond106) NoFunction
        CFI (cfiCond106) Conditional ??CrossCallReturnLabel_58
        CFI (cfiCond106) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond106) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond106) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond106) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond106) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond106) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond106) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond106) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond106) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond106) CFA_SP SP+0
        CFI (cfiCond106) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond107 Using cfiCommon0
        CFI (cfiCond107) NoFunction
        CFI (cfiCond107) Conditional ??CrossCallReturnLabel_59
        CFI (cfiCond107) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond107) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond107) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond107) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond107) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond107) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond107) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond107) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond107) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond107) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond107) CFA_SP SP+0
        CFI (cfiCond107) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker108 Using cfiCommon1
        CFI (cfiPicker108) NoFunction
        CFI (cfiPicker108) Picker
        MOV     DPL,A
        MOV     A,R3
        CFI EndBlock cfiCond104
        CFI EndBlock cfiCond105
        CFI EndBlock cfiCond106
        CFI EndBlock cfiCond107
        CFI EndBlock cfiPicker108
        REQUIRE ??Subroutine27_0
        ; // Fall through to label ??Subroutine27_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine27_0:
        CFI Block cfiCond109 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_50
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond110 Using cfiCommon0
        CFI (cfiCond110) NoFunction
        CFI (cfiCond110) Conditional ??CrossCallReturnLabel_51
        CFI (cfiCond110) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond110) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond110) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond110) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond110) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond110) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond110) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond110) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond110) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond110) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond110) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond110) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond110) CFA_SP SP+0
        CFI (cfiCond110) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond111 Using cfiCommon0
        CFI (cfiCond111) NoFunction
        CFI (cfiCond111) Conditional ??CrossCallReturnLabel_52
        CFI (cfiCond111) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond111) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond111) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond111) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond111) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond111) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond111) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond111) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond111) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond111) CFA_SP SP+0
        CFI (cfiCond111) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond112 Using cfiCommon0
        CFI (cfiCond112) NoFunction
        CFI (cfiCond112) Conditional ??CrossCallReturnLabel_53
        CFI (cfiCond112) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond112) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond112) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond112) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond112) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond112) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond112) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond112) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond112) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond112) CFA_SP SP+0
        CFI (cfiCond112) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond113 Using cfiCommon0
        CFI (cfiCond113) NoFunction
        CFI (cfiCond113) Conditional ??CrossCallReturnLabel_54
        CFI (cfiCond113) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond113) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond113) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond113) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond113) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond113) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond113) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond113) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond113) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond113) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond113) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond113) CFA_SP SP+0
        CFI (cfiCond113) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond114 Using cfiCommon0
        CFI (cfiCond114) NoFunction
        CFI (cfiCond114) Conditional ??CrossCallReturnLabel_55
        CFI (cfiCond114) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond114) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond114) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond114) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond114) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond114) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond114) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond114) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond114) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond114) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond114) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond114) CFA_SP SP+0
        CFI (cfiCond114) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond115 Using cfiCommon0
        CFI (cfiCond115) NoFunction
        CFI (cfiCond115) Conditional ??CrossCallReturnLabel_56
        CFI (cfiCond115) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond115) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond115) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond115) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond115) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond115) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond115) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond115) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond115) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond115) CFA_SP SP+0
        CFI (cfiCond115) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond116 Using cfiCommon0
        CFI (cfiCond116) NoFunction
        CFI (cfiCond116) Conditional ??CrossCallReturnLabel_57
        CFI (cfiCond116) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond116) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond116) CFA_SP SP+-5
        CFI Block cfiCond117 Using cfiCommon0
        CFI (cfiCond117) NoFunction
        CFI (cfiCond117) Conditional ??CrossCallReturnLabel_58
        CFI (cfiCond117) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond117) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond117) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond117) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond117) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond117) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond117) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond117) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond117) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond117) CFA_SP SP+0
        CFI (cfiCond117) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond118 Using cfiCommon0
        CFI (cfiCond118) NoFunction
        CFI (cfiCond118) Conditional ??CrossCallReturnLabel_59
        CFI (cfiCond118) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond118) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond118) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond118) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond118) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond118) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond118) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond118) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond118) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond118) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond118) CFA_SP SP+0
        CFI (cfiCond118) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker119 Using cfiCommon1
        CFI (cfiPicker119) NoFunction
        CFI (cfiPicker119) Picker
        ADDC    A,#-0x1
        MOV     DPH,A
        RET
        CFI EndBlock cfiCond109
        CFI EndBlock cfiCond110
        CFI EndBlock cfiCond111
        CFI EndBlock cfiCond112
        CFI EndBlock cfiCond113
        CFI EndBlock cfiCond114
        CFI EndBlock cfiCond115
        CFI EndBlock cfiCond116
        CFI EndBlock cfiCond117
        CFI EndBlock cfiCond118
        CFI EndBlock cfiPicker119

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
        CFI Block cfiCond120 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_20
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond121 Using cfiCommon0
        CFI (cfiCond121) NoFunction
        CFI (cfiCond121) Conditional ??CrossCallReturnLabel_21
        CFI (cfiCond121) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond121) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond121) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond121) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond121) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond121) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond121) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond121) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond121) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond121) CFA_SP SP+0
        CFI (cfiCond121) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond122 Using cfiCommon0
        CFI (cfiCond122) NoFunction
        CFI (cfiCond122) Conditional ??CrossCallReturnLabel_22
        CFI (cfiCond122) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond122) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond122) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond122) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond122) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond122) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond122) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond122) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond122) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond122) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond122) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond122) CFA_SP SP+0
        CFI (cfiCond122) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond123 Using cfiCommon0
        CFI (cfiCond123) NoFunction
        CFI (cfiCond123) Conditional ??CrossCallReturnLabel_23
        CFI (cfiCond123) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond123) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond123) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond123) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond123) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond123) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond123) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond123) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond123) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond123) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond123) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond123) CFA_SP SP+0
        CFI (cfiCond123) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond124 Using cfiCommon0
        CFI (cfiCond124) NoFunction
        CFI (cfiCond124) Conditional ??CrossCallReturnLabel_24
        CFI (cfiCond124) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond124) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond124) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond124) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond124) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond124) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond124) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond124) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond124) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond124) CFA_SP SP+0
        CFI (cfiCond124) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker125 Using cfiCommon1
        CFI (cfiPicker125) NoFunction
        CFI (cfiPicker125) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        RET
        CFI EndBlock cfiCond120
        CFI EndBlock cfiCond121
        CFI EndBlock cfiCond122
        CFI EndBlock cfiCond123
        CFI EndBlock cfiCond124
        CFI EndBlock cfiPicker125
//  689 
//  690 /*********************************************************************
//  691  * @fn      osal_msg_enqueue_max
//  692  *
//  693  * @brief
//  694  *
//  695  *    This function enqueues an OSAL message into an OSAL queue if
//  696  *    the length of the queue is less than max.
//  697  *
//  698  * @param   osal_msg_q_t *q_ptr - OSAL queue
//  699  * @param   void *msg_ptr  - OSAL message
//  700  * @param   uint8 max - maximum length of queue
//  701  *
//  702  * @return  TRUE if message was enqueued, FALSE otherwise
//  703  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  704 uint8 osal_msg_enqueue_max( osal_msg_q_t *q_ptr, void *msg_ptr, uint8 max )
osal_msg_enqueue_max:
        CFI Block cfiBlock126 Using cfiCommon0
        CFI Function osal_msg_enqueue_max
        CODE
//  705 {
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  706   void *list;
//  707   uint8 ret = FALSE;
        MOV     ?V0 + 0,#0x0
//  708   halIntState_t intState;
//  709 
//  710   // Hold off interrupts
//  711   HAL_ENTER_CRITICAL_SECTION(intState);
        MOV     C,0xa8.7
        CLR     A
        RLC     A
        MOV     R7,A
        CLR     0xa8.7
//  712 
//  713   // If first message in queue
//  714   if ( *q_ptr == NULL )
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ??Subroutine28_0 & 0xFFFF
??CrossCallReturnLabel_62:
        JNZ     ??CrossCallReturnLabel_24
//  715   {
//  716     *q_ptr = msg_ptr;
        MOV     DPL,R2
        MOV     DPH,R3
        SJMP    ??osal_msg_enqueue_max_0
//  717     ret = TRUE;
//  718   }
//  719   else
//  720   {
//  721     // Find end of queue or max
//  722     list = *q_ptr;
//  723     max--;
//  724     while ( (OSAL_MSG_NEXT( list ) != NULL) && (max > 0) )
??osal_msg_enqueue_max_1:
        MOV     A,R6
        JZ      ??osal_msg_enqueue_max_2
//  725     {
//  726       list = OSAL_MSG_NEXT( list );
        MOV     DPL,R0
        MOV     DPH,R1
        LCALL   ?Subroutine13 & 0xFFFF
//  727       max--;
??CrossCallReturnLabel_24:
        DEC     R6
//  728     }
        MOV     A,R0
        ADD     A,#-0x5
        MOV     R0,A
        MOV     A,R1
        ADDC    A,#-0x1
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_44:
        MOV     A,R2
        ORL     A,R3
        JNZ     ??osal_msg_enqueue_max_1
//  729 
//  730     // Add message to end of queue if max not reached
//  731     if ( max != 0 )
        MOV     A,R6
        JZ      ??osal_msg_enqueue_max_2
//  732     {
//  733       OSAL_MSG_NEXT( list ) = msg_ptr;
        MOV     DPL,R0
        MOV     DPH,R1
??osal_msg_enqueue_max_0:
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
//  734       ret = TRUE;
        MOV     ?V0 + 0,#0x1
//  735     }
//  736   }
//  737 
//  738   // Re-enable interrupts
//  739   HAL_EXIT_CRITICAL_SECTION(intState);
??osal_msg_enqueue_max_2:
        MOV     A,R7
        MOV     C,0xE0 /* A   */.0
        MOV     0xa8.7,C
//  740 
//  741   return ret;
        MOV     R1,?V0 + 0
        LJMP    ??Subroutine23_0 & 0xFFFF
        CFI EndBlock cfiBlock126
        REQUIRE _A_IEN0
//  742 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond127 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_64
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 55)
        CFI Block cfiCond128 Using cfiCommon0
        CFI (cfiCond128) NoFunction
        CFI (cfiCond128) Conditional ??CrossCallReturnLabel_65
        CFI (cfiCond128) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond128) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond128) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond128) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond128) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond128) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond128) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond128) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond128) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond128) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond128) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond128) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond128) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond128) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond128) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond128) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond128) CFA_SP SP+0
        CFI (cfiCond128) CFA_XSP16 add(XSP16, 55)
        CFI Block cfiCond129 Using cfiCommon0
        CFI (cfiCond129) NoFunction
        CFI (cfiCond129) Conditional ??CrossCallReturnLabel_66
        CFI (cfiCond129) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond129) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond129) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond129) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond129) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond129) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond129) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond129) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond129) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond129) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond129) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond129) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond129) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond129) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond129) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond129) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond129) CFA_SP SP+0
        CFI (cfiCond129) CFA_XSP16 add(XSP16, 55)
        CFI Block cfiPicker130 Using cfiCommon1
        CFI (cfiPicker130) NoFunction
        CFI (cfiPicker130) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CFI EndBlock cfiCond127
        CFI EndBlock cfiCond128
        CFI EndBlock cfiCond129
        CFI EndBlock cfiPicker130
        REQUIRE ??Subroutine28_0
        ; // Fall through to label ??Subroutine28_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine28_0:
        CFI Block cfiCond131 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_60
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond132 Using cfiCommon0
        CFI (cfiCond132) NoFunction
        CFI (cfiCond132) Conditional ??CrossCallReturnLabel_61
        CFI (cfiCond132) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond132) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond132) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond132) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond132) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond132) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond132) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond132) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond132) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond132) CFA_SP SP+0
        CFI (cfiCond132) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond133 Using cfiCommon0
        CFI (cfiCond133) NoFunction
        CFI (cfiCond133) Conditional ??CrossCallReturnLabel_62
        CFI (cfiCond133) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond133) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond133) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond133) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond133) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond133) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond133) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond133) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond133) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond133) CFA_SP SP+0
        CFI (cfiCond133) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond134 Using cfiCommon0
        CFI (cfiCond134) NoFunction
        CFI (cfiCond134) Conditional ??CrossCallReturnLabel_63
        CFI (cfiCond134) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond134) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond134) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond134) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond134) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond134) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond134) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond134) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond134) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond134) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond134) CFA_SP SP+0
        CFI (cfiCond134) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond135 Using cfiCommon0
        CFI (cfiCond135) NoFunction
        CFI (cfiCond135) Conditional ??CrossCallReturnLabel_64
        CFI (cfiCond135) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond135) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond135) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond135) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond135) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond135) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond135) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond135) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond135) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond135) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond135) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond135) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond135) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond135) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond135) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond135) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond135) CFA_SP SP+0
        CFI (cfiCond135) CFA_XSP16 add(XSP16, 55)
        CFI Block cfiCond136 Using cfiCommon0
        CFI (cfiCond136) NoFunction
        CFI (cfiCond136) Conditional ??CrossCallReturnLabel_65
        CFI (cfiCond136) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond136) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond136) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond136) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond136) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond136) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond136) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond136) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond136) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond136) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond136) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond136) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond136) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond136) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond136) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond136) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond136) CFA_SP SP+0
        CFI (cfiCond136) CFA_XSP16 add(XSP16, 55)
        CFI Block cfiCond137 Using cfiCommon0
        CFI (cfiCond137) NoFunction
        CFI (cfiCond137) Conditional ??CrossCallReturnLabel_66
        CFI (cfiCond137) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond137) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond137) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond137) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond137) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond137) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond137) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond137) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond137) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond137) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond137) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond137) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond137) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond137) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond137) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond137) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond137) CFA_SP SP+0
        CFI (cfiCond137) CFA_XSP16 add(XSP16, 55)
        CFI Block cfiPicker138 Using cfiCommon1
        CFI (cfiPicker138) NoFunction
        CFI (cfiPicker138) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        RET
        CFI EndBlock cfiCond131
        CFI EndBlock cfiCond132
        CFI EndBlock cfiCond133
        CFI EndBlock cfiCond134
        CFI EndBlock cfiCond135
        CFI EndBlock cfiCond136
        CFI EndBlock cfiCond137
        CFI EndBlock cfiPicker138
//  743 
//  744 /*********************************************************************
//  745  * @fn      osal_set_event
//  746  *
//  747  * @brief
//  748  *
//  749  *    This function is called to set the event flags for a task.  The
//  750  *    event passed in is OR'd into the task's event variable.
//  751  *
//  752  * @param   uint8 task_id - receiving tasks ID
//  753  * @param   uint8 event_flag - what event to set
//  754  *
//  755  * @return  SUCCESS, INVALID_TASK
//  756  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  757 uint8 osal_set_event( uint8 task_id, uint16 event_flag )
osal_set_event:
        CFI Block cfiBlock139 Using cfiCommon0
        CFI Function osal_set_event
        CODE
//  758 {
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R5,A
//  759   if ( task_id < tasksCnt )
        MOV     DPTR,#tasksCnt
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,R5
        CLR     C
        SUBB    A,R0
        JNC     ??osal_set_event_0
//  760   {
//  761     halIntState_t   intState;
//  762     HAL_ENTER_CRITICAL_SECTION(intState);    // Hold off interrupts
        MOV     A,0xa8
        MOV     R6,A
        CLR     0xa8.7
//  763     tasksEvents[task_id] |= event_flag;  // Stuff the event bit(s)
        MOV     A,R5
        CLR     C
        RLC     A
        MOV     R0,A
        CLR     A
        RLC     A
        MOV     R1,A
        MOV     DPTR,#tasksEvents
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOV     DPL,R4
        MOV     DPH,A
        MOVX    A,@DPTR
        ORL     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ORL     A,R3
        MOVX    @DPTR,A
//  764     HAL_EXIT_CRITICAL_SECTION(intState);     // Release interrupts
        MOV     A,R6
        MOV     C,0xE0 /* A   */.7
        MOV     0xa8.7,C
//  765   }
//  766    else
//  767     return ( INVALID_TASK );
//  768 
//  769   return ( SUCCESS );
        MOV     R1,#0x0
        SJMP    ??osal_set_event_1
??osal_set_event_0:
        MOV     R1,#0x3
??osal_set_event_1:
        LJMP    ??Subroutine23_0 & 0xFFFF
        CFI EndBlock cfiBlock139
        REQUIRE _A_IEN0
//  770 }
//  771 
//  772 /*********************************************************************
//  773  * @fn      osal_isr_register
//  774  *
//  775  * @brief
//  776  *
//  777  *   This function is called to register a service routine with an
//  778  *   interrupt. When the interrupt occurs, this service routine is called.
//  779  *
//  780  * @param   uint8 interrupt_id - Interrupt number
//  781  * @param   void (*isr_ptr)( uint8* ) - function pointer to ISR
//  782  *
//  783  * @return  SUCCESS, INVALID_INTERRUPT_ID,
//  784  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  785 uint8 osal_isr_register( uint8 interrupt_id, void (*isr_ptr)( uint8* ) )
osal_isr_register:
        CFI Block cfiBlock140 Using cfiCommon0
        CFI Function osal_isr_register
        CODE
//  786 {
        ; Saved register size: 0
        ; Auto size: 0
//  787   // Remove these statements when functionality is complete
//  788   (void)interrupt_id;
//  789   (void)isr_ptr;
//  790   return ( SUCCESS );
        MOV     R1,#0x0
        LJMP    ?BRET
        CFI EndBlock cfiBlock140
//  791 }
//  792 
//  793 /*********************************************************************
//  794  * @fn      osal_int_enable
//  795  *
//  796  * @brief
//  797  *
//  798  *   This function is called to enable an interrupt. Once enabled,
//  799  *   occurrence of the interrupt causes the service routine associated
//  800  *   with that interrupt to be called.
//  801  *
//  802  *   If INTS_ALL is the interrupt_id, interrupts (in general) are enabled.
//  803  *   If a single interrupt is passed in, then interrupts still have
//  804  *   to be enabled with another call to INTS_ALL.
//  805  *
//  806  * @param   uint8 interrupt_id - Interrupt number
//  807  *
//  808  * @return  SUCCESS or INVALID_INTERRUPT_ID
//  809  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  810 uint8 osal_int_enable( uint8 interrupt_id )
osal_int_enable:
        CFI Block cfiBlock141 Using cfiCommon0
        CFI Function osal_int_enable
        CODE
//  811 {
        ; Saved register size: 0
        ; Auto size: 0
        MOV     A,R1
        MOV     R0,A
//  812 
//  813   if ( interrupt_id == INTS_ALL )
        MOV     A,#-0x1
        XRL     A,R0
        JNZ     ??osal_int_enable_0
//  814   {
//  815     HAL_ENABLE_INTERRUPTS();
        SETB    0xa8.7
//  816   }
//  817   else
//  818     return ( INVALID_INTERRUPT_ID );
//  819 
//  820   return ( SUCCESS );
        MOV     R1,#0x0
        SJMP    ??osal_int_enable_1
??osal_int_enable_0:
        MOV     R1,#0x7
??osal_int_enable_1:
        LJMP    ?BRET
        CFI EndBlock cfiBlock141
        REQUIRE _A_IEN0
//  821 }
//  822 
//  823 /*********************************************************************
//  824  * @fn      osal_int_disable
//  825  *
//  826  * @brief
//  827  *
//  828  *   This function is called to disable an interrupt. When a disabled
//  829  *   interrupt occurs, the service routine associated with that
//  830  *   interrupt is not called.
//  831  *
//  832  *   If INTS_ALL is the interrupt_id, interrupts (in general) are disabled.
//  833  *   If a single interrupt is passed in, then just that interrupt is disabled.
//  834  *
//  835  * @param   uint8 interrupt_id - Interrupt number
//  836  *
//  837  * @return  SUCCESS or INVALID_INTERRUPT_ID
//  838  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  839 uint8 osal_int_disable( uint8 interrupt_id )
osal_int_disable:
        CFI Block cfiBlock142 Using cfiCommon0
        CFI Function osal_int_disable
        CODE
//  840 {
        ; Saved register size: 0
        ; Auto size: 0
        MOV     A,R1
        MOV     R0,A
//  841 
//  842   if ( interrupt_id == INTS_ALL )
        MOV     A,#-0x1
        XRL     A,R0
        JNZ     ??osal_int_disable_0
//  843   {
//  844     HAL_DISABLE_INTERRUPTS();
        CLR     0xa8.7
//  845   }
//  846   else
//  847     return ( INVALID_INTERRUPT_ID );
//  848 
//  849   return ( SUCCESS );
        MOV     R1,#0x0
        SJMP    ??osal_int_disable_1
??osal_int_disable_0:
        MOV     R1,#0x7
??osal_int_disable_1:
        LJMP    ?BRET
        CFI EndBlock cfiBlock142
        REQUIRE _A_IEN0
//  850 }
//  851 
//  852 /*********************************************************************
//  853  * @fn      osal_init_system
//  854  *
//  855  * @brief
//  856  *
//  857  *   This function initializes the "task" system by creating the
//  858  *   tasks defined in the task table (OSAL_Tasks.h).
//  859  *
//  860  * @param   void
//  861  *
//  862  * @return  SUCCESS
//  863  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  864 uint8 osal_init_system( void )
osal_init_system:
        CFI Block cfiBlock143 Using cfiCommon0
        CFI Function osal_init_system
        CODE
//  865 {
        FUNCALL osal_init_system, osal_mem_init
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_init_system, osalTimerInit
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_init_system, osal_pwrmgr_init
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_init_system, osalInitTasks
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_init_system, osal_mem_kick
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  866   // Initialize the Memory Allocation System
//  867   osal_mem_init();
        ; Setup parameters for call to function osal_mem_init
        LCALL   ??osal_mem_init?relay
//  868 
//  869   // Initialize the message queue
//  870   osal_qHead = NULL;
        MOV     DPTR,#osal_qHead
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  871 
//  872 #if defined( OSAL_TOTAL_MEM )
//  873   osal_msg_cnt = 0;
//  874 #endif
//  875 
//  876   // Initialize the timers
//  877   osalTimerInit();
        ; Setup parameters for call to function osalTimerInit
        LCALL   ??osalTimerInit?relay
//  878 
//  879   // Initialize the Power Management System
//  880   osal_pwrmgr_init();
        ; Setup parameters for call to function osal_pwrmgr_init
        LCALL   ??osal_pwrmgr_init?relay
//  881 
//  882   // Initialize the system tasks.
//  883   osalInitTasks();
        ; Setup parameters for call to function osalInitTasks
        LCALL   ??osalInitTasks?relay
//  884 
//  885   // Setup efficient search for the first free block of heap.
//  886   osal_mem_kick();
        ; Setup parameters for call to function osal_mem_kick
        LCALL   ??osal_mem_kick?relay
//  887 
//  888   return ( SUCCESS );
        MOV     R1,#0x0
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock143
//  889 }
//  890 
//  891 /*********************************************************************
//  892  * @fn      osal_start_system
//  893  *
//  894  * @brief
//  895  *
//  896  *   This function is the main loop function of the task system.  It
//  897  *   will look through all task events and call the task_event_processor()
//  898  *   function for the task with the event.  If there are no events (for
//  899  *   all tasks), this function puts the processor into Sleep.
//  900  *   This Function doesn't return.
//  901  *
//  902  * @param   void
//  903  *
//  904  * @return  none
//  905  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  906 void osal_start_system( void )
osal_start_system:
        CFI Block cfiBlock144 Using cfiCommon0
        CFI Function osal_start_system
        CODE
//  907 {
        FUNCALL osal_start_system, osalTimeUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_start_system, Hal_ProcessPoll
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  908 #if !defined ( ZBIT ) && !defined ( UBIT )
//  909   for(;;)  // Forever Loop
//  910 #endif
//  911   {
//  912     uint8 idx = 0;
??osal_start_system_0:
        MOV     ?V0 + 0,#0x0
//  913     
//  914     osalTimeUpdate();
        ; Setup parameters for call to function osalTimeUpdate
        LCALL   ??osalTimeUpdate?relay
//  915     
//  916     Hal_ProcessPoll();  // This replaces MT_SerialPoll() and osal_check_timer().
        ; Setup parameters for call to function Hal_ProcessPoll
        LCALL   ??Hal_ProcessPoll?relay
//  917 
//  918     do {
//  919       if (tasksEvents[idx])  // Task is highest priority that is ready.
??osal_start_system_1:
        MOV     A,?V0 + 0
        CLR     C
        RLC     A
        MOV     R0,A
        CLR     A
        RLC     A
        MOV     R1,A
        MOV     DPTR,#tasksEvents
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOV     DPL,R2
        MOV     DPH,A
        LCALL   ??Subroutine28_0 & 0xFFFF
//  920       {
//  921         break;
//  922       }
//  923     } while (++idx < tasksCnt);
??CrossCallReturnLabel_63:
        JNZ     ??osal_start_system_2
        INC     ?V0 + 0
        MOV     DPTR,#tasksCnt
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,?V0 + 0
        CLR     C
        SUBB    A,R0
        JC      ??osal_start_system_1
//  924 
//  925     if (idx < tasksCnt)
??osal_start_system_2:
        MOV     DPTR,#tasksCnt
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,?V0 + 0
        CLR     C
        SUBB    A,R0
        JNC     ??osal_start_system_0
//  926     {
//  927       uint16 events;
//  928       halIntState_t intState;
//  929 
//  930       HAL_ENTER_CRITICAL_SECTION(intState);
        MOV     A,0xa8
        MOV     R4,A
        CLR     0xa8.7
//  931       events = tasksEvents[idx];
        MOV     A,?V0 + 0
        CLR     C
        RLC     A
        MOV     R6,A
        CLR     A
        RLC     A
        MOV     R7,A
        MOV     DPTR,#tasksEvents
        MOVX    A,@DPTR
        ADD     A,R6
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R7
        LCALL   ?Subroutine15 & 0xFFFF
//  932       tasksEvents[idx] = 0;  // Clear the Events for this task.
??CrossCallReturnLabel_45:
        MOV     DPL,R0
        MOV     DPH,R1
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  933       HAL_EXIT_CRITICAL_SECTION(intState);
        MOV     A,R4
        MOV     C,0xE0 /* A   */.7
        MOV     0xa8.7,C
//  934 
//  935       events = (tasksArr[idx])( idx, events );
        ; Setup parameters for indirect call
        MOV     R1,?V0 + 0
        MOV     A,#tasksArr & 0xff
        ADD     A,R6
        MOV     DPL,A
        MOV     A,#(tasksArr >> 8) & 0xff
        ADDC    A,R7
        MOV     DPH,A
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_30:
        LCALL   ?CALL_IND
//  936 
//  937       HAL_ENTER_CRITICAL_SECTION(intState);
        MOV     A,0xa8
        MOV     R1,A
        CLR     0xa8.7
//  938       tasksEvents[idx] |= events;  // Add back unprocessed events to the current task.
        MOV     DPTR,#tasksEvents
        MOVX    A,@DPTR
        ADD     A,R6
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R7
        MOV     DPL,R0
        MOV     DPH,A
        MOVX    A,@DPTR
        ORL     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ORL     A,R3
        MOVX    @DPTR,A
//  939       HAL_EXIT_CRITICAL_SECTION(intState);
        MOV     A,R1
        MOV     C,0xE0 /* A   */.7
        MOV     0xa8.7,C
        LJMP    ??osal_start_system_0 & 0xFFFF
        CFI EndBlock cfiBlock144
        REQUIRE _A_IEN0
//  940     }
//  941 #if defined( POWER_SAVING )
//  942     else  // Complete pass through all task events with no activity?
//  943     {
//  944       osal_pwrmgr_powerconserve();  // Put the processor/system into sleep
//  945     }
//  946 #endif
//  947   }
//  948 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine17:
        CFI Block cfiCond145 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_29
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 55)
        CFI Block cfiCond146 Using cfiCommon0
        CFI (cfiCond146) NoFunction
        CFI (cfiCond146) Conditional ??CrossCallReturnLabel_30
        CFI (cfiCond146) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond146) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond146) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond146) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond146) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond146) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond146) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond146) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond146) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond146) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond146) CFA_SP SP+0
        CFI (cfiCond146) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker147 Using cfiCommon1
        CFI (cfiPicker147) NoFunction
        CFI (cfiPicker147) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        RET
        CFI EndBlock cfiCond145
        CFI EndBlock cfiCond146
        CFI EndBlock cfiPicker147
//  949 
//  950 /*********************************************************************
//  951  * @fn      osal_buffer_uint32
//  952  *
//  953  * @brief
//  954  *
//  955  *   Buffer an uint32 value - LSB first.
//  956  *
//  957  * @param   buf - buffer
//  958  * @param   val - uint32 value
//  959  *
//  960  * @return  pointer to end of destination buffer
//  961  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  962 uint8* osal_buffer_uint32( uint8 *buf, uint32 val )
osal_buffer_uint32:
        CFI Block cfiBlock148 Using cfiCommon0
        CFI Function osal_buffer_uint32
        CODE
//  963 {
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV     A,#0x10
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
//  964   *buf++ = BREAK_UINT32( val, 0 );
        LCALL   ?Subroutine19 & 0xFFFF
//  965   *buf++ = BREAK_UINT32( val, 1 );
//  966   *buf++ = BREAK_UINT32( val, 2 );
??CrossCallReturnLabel_31:
        MOV     ?V0 + 0,?V0 + 4
        MOV     ?V0 + 2,?V0 + 6
        MOV     ?V0 + 3,?V0 + 7
        MOV     A,#0x10
        MOV     R0,#?V0 + 0
        LCALL   ?UL_SHR
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
        INC     DPTR
//  967   *buf++ = BREAK_UINT32( val, 3 );
        MOV     A,#0x18
        CFI EndBlock cfiBlock148
        REQUIRE ?Subroutine3
        ; // Fall through to label ?Subroutine3
//  968 
//  969   return buf;
//  970 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiBlock149 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R0,#?V0 + 4
        LCALL   ?UL_SHR
        MOV     A,?V0 + 4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     R2,DPL
        MOV     R3,DPH
        CFI EndBlock cfiBlock149
        REQUIRE ??Subroutine29_0
        ; // Fall through to label ??Subroutine29_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine29_0:
        CFI Block cfiBlock150 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock150
//  971 
//  972 /*********************************************************************
//  973  * @fn      osal_buffer_uint24
//  974  *
//  975  * @brief
//  976  *
//  977  *   Buffer an uint24 value - LSB first. Note that type uint24 is
//  978  *   typedef to uint32 in comdef.h
//  979  *
//  980  * @param   buf - buffer
//  981  * @param   val - uint24 value
//  982  *
//  983  * @return  pointer to end of destination buffer
//  984  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  985 uint8* osal_buffer_uint24( uint8 *buf, uint24 val )
osal_buffer_uint24:
        CFI Block cfiBlock151 Using cfiCommon0
        CFI Function osal_buffer_uint24
        CODE
//  986 {
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV     A,#0x10
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
//  987   *buf++ = BREAK_UINT32( val, 0 );
        LCALL   ?Subroutine19 & 0xFFFF
//  988   *buf++ = BREAK_UINT32( val, 1 );
//  989   *buf++ = BREAK_UINT32( val, 2 );
??CrossCallReturnLabel_32:
        MOV     A,#0x10
        SJMP    ?Subroutine3
        CFI EndBlock cfiBlock151
//  990 
//  991   return buf;
//  992 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine19:
        CFI Block cfiCond152 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_31
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond153 Using cfiCommon0
        CFI (cfiCond153) NoFunction
        CFI (cfiCond153) Conditional ??CrossCallReturnLabel_32
        CFI (cfiCond153) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond153) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond153) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond153) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond153) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond153) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond153) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond153) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond153) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond153) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond153) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond153) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond153) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond153) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond153) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond153) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond153) CFA_SP SP+0
        CFI (cfiCond153) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker154 Using cfiCommon1
        CFI (cfiPicker154) NoFunction
        CFI (cfiPicker154) Picker
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,?V0 + 4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     ?V0 + 1,?V0 + 5
        MOV     A,?V0 + 1
        MOVX    @DPTR,A
        INC     DPTR
        RET
        CFI EndBlock cfiCond152
        CFI EndBlock cfiCond153
        CFI EndBlock cfiPicker154

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osal_strlen?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    osal_strlen

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osal_memcpy?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    osal_memcpy

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osal_memcmp?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    osal_memcmp

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osal_memset?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    osal_memset

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osal_build_uint16?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    osal_build_uint16

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osal_build_uint32?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    osal_build_uint32

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??_ltoa?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    _ltoa

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osal_rand?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    osal_rand

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osal_msg_allocate?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    osal_msg_allocate

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osal_msg_deallocate?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    osal_msg_deallocate

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osal_msg_send?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    osal_msg_send

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osal_msg_receive?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    osal_msg_receive

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osal_msg_enqueue?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    osal_msg_enqueue

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osal_msg_dequeue?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    osal_msg_dequeue

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osal_msg_push?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    osal_msg_push

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osal_msg_extract?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    osal_msg_extract

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osal_msg_enqueue_max?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    osal_msg_enqueue_max

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osal_set_event?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    osal_set_event

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osal_isr_register?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    osal_isr_register

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osal_int_enable?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    osal_int_enable

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osal_int_disable?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    osal_int_disable

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osal_init_system?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    osal_init_system

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osal_start_system?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    osal_start_system

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osal_buffer_uint32?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    osal_buffer_uint32

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osal_buffer_uint24?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    osal_buffer_uint24

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "">`:
        DB ""
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "">_1`:
        DB ""
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "">_2`:
        DB ""
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
`?<Constant "0">`:
        DB "0"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_2710:
        DD 10000

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_5f5e100:
        DD 100000000

        END
//  993 /*********************************************************************
//  994 *********************************************************************/
// 
// 2 359 bytes in segment BANKED_CODE
//   150 bytes in segment BANK_RELAYS
//     1 byte  in segment SFR_AN
//    40 bytes in segment XDATA_ROM_C
//     2 bytes in segment XDATA_Z
// 
// 2 509 bytes of CODE  memory
//    32 bytes of CONST memory (+ 8 bytes shared)
//     0 bytes of DATA  memory (+ 1 byte  shared)
//     2 bytes of XDATA memory
//
//Errors: none
//Warnings: none
