###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         03/Jul/2018  14:53:10 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Components\stack\nwk\nwk_globals.c                 #
#    Command line       =  -f D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ #
#                          ¸Ä\Projects\zstack\Utilities\SerialApp\CC2530DB\.. #
#                          \..\..\Tools\CC2530DB\f8wRouter.cfg (-DCPU32MHZ    #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRU #
#                          E -DRTR_NWK -DBLINK_LEDS) -f                       #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\Tools\CC2530DB\f8wConfig.cfg (-DSECURE=0       #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Components\stack\nwk\nwk_globals.c -D ZIGBEEPRO    #
#                          -D HAL_UART=TRUE -D SERIAL_APP_PORT=0 -D           #
#                          LCD_SUPPORTED -lC D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼ #
#                          «\WSN_ZigBee_ÐÞ¸Ä\Projects\zstack\Utilities\Serial #
#                          App\CC2530DB\RouterEB-Pro\List\ -lA                #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\Route #
#                          rEB-Pro\List\ --diag_suppress Pe001,Pa010 -o       #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\Route #
#                          rEB-Pro\Obj\ -e --debug --core=plain --dptr=16,1   #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 8 -I  #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\ -I   #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\SO #
#                          URCE\ -I D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_Zig #
#                          Bee_ÐÞ¸Ä\Projects\zstack\Utilities\SerialApp\CC253 #
#                          0DB\..\..\..\ZMAIN\TI2530DB\ -I                    #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\MT\ -I                        #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\HAL\INCLUDE\ -I               #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\ -I       #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\OSAL\MCU\CCSOC\ -I            #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\OSAL\INCLUDE\ -I              #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\STACK\AF\ -I                  #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\STACK\NWK\ -I                 #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\STACK\SEC\ -I                 #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\STACK\SAPI\ -I                #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\STACK\SYS\ -I                 #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\STACK\ZDO\ -I                 #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\ZMAC\F8W\ -I                  #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\ZMAC\ -I                      #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\SERVICES\SADDR\ -I            #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\SERVICES\SDATA\ -I            #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\MAC\INCLUDE\ -I               #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\MAC\HIGH_LEVEL\ -I            #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\ -I       #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CH #
#                          IP\ -Ohz --require_prototypes                      #
#    List file          =  D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\Route #
#                          rEB-Pro\List\nwk_globals.lst                       #
#    Object file        =  D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\Route #
#                          rEB-Pro\Obj\nwk_globals.r51                        #
#                                                                             #
#                                                                             #
###############################################################################

D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\Components\stack\nwk\nwk_globals.c
      1          /**************************************************************************************************
      2            Filename:       nwk_globals.c
      3            Revised:        $Date: 2009-03-24 09:41:39 -0700 (Tue, 24 Mar 2009) $
      4            Revision:       $Revision: 19538 $
      5          
      6            Description:    User definable Network Parameters.
      7          
      8          
      9            Copyright 2004-2009 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, 
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE, 
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com. 
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          #include "ZComdef.h"
     44          #include "OSAL.h"
     45          #include "AddrMgr.h"
     46          #include "AssocList.h"
     47          #include "BindingTable.h"
     48          #include "nwk_util.h"
     49          #include "nwk_globals.h"
     50          #include "APS.h"
     51          #include "ssp.h"
     52          #include "rtg.h"
     53          #include "ZDConfig.h"
     54          #include "ZGlobals.h"
     55          
     56          #if defined ( LCD_SUPPORTED )
     57            #include "OnBoard.h"
     58          #endif
     59          
     60          /* HAL */
     61          #include "hal_lcd.h"
     62          
     63          /*********************************************************************
     64           * MACROS
     65           */
     66          
     67          /*********************************************************************
     68           * CONSTANTS
     69           */
     70          
     71          // Maximums for the data buffer queue
     72          #define NWK_MAX_DATABUFS_WAITING    8     // Waiting to be sent to MAC
     73          #define NWK_MAX_DATABUFS_SCHEDULED  5     // Timed messages to be sent
     74          #define NWK_MAX_DATABUFS_CONFIRMED  5     // Held after MAC confirms
     75          #define NWK_MAX_DATABUFS_TOTAL      12    // Total number of buffers
     76          
     77          // 1-255 (0 -> 256) X RTG_TIMER_INTERVAL
     78          // A known shortcoming is that when a message is enqueued as "hold" for a
     79          // sleeping device, the timer tick may have counted down to 1, so that msg
     80          // will not be held as long as expected. If NWK_INDIRECT_MSG_TIMEOUT is set to 1
     81          // the hold time will vary randomly from 0 - CNT_RTG_TIMER ticks.
     82          // So the hold time will vary within this interval:
     83          // { (NWK_INDIRECT_MSG_TIMEOUT-1)*CNT_RTG_TIMER,
     84          //                                    NWK_INDIRECT_MSG_TIMEOUT*CNT_RTG_TIMER }
     85          #define NWK_INDIRECT_CNT_RTG_TMR    1
     86          // To hold msg for sleeping end devices for 30 secs:
     87          // #define CNT_RTG_TIMER            1
     88          // #define NWK_INDIRECT_MSG_TIMEOUT 30
     89          // To hold msg for sleeping end devices for 30 mins:
     90          // #define CNT_RTG_TIMER            60
     91          // #define NWK_INDIRECT_MSG_TIMEOUT 30
     92          // To hold msg for sleeping end devices for 30 days:
     93          // #define CNT_RTG_TIMER            60
     94          // #define NWK_INDIRECT_MSG_TIMEOUT (30 * 24 * 60)
     95          // Maximum msgs to hold per associated device.
     96          #define NWK_INDIRECT_MSG_MAX_PER    3
     97          // Maximum total msgs to hold for all associated devices.
     98          #define NWK_INDIRECT_MSG_MAX_ALL    \
     99                                      (NWK_MAX_DATABUFS_TOTAL - NWK_INDIRECT_MSG_MAX_PER)
    100          
    101          
    102          /*********************************************************************
    103           * TYPEDEFS
    104           */
    105          
    106          /*********************************************************************
    107           * NWK GLOBAL VARIABLES
    108           */
    109          
    110          // Variables for MAX list size

   \                                 In  segment CODE_C, align 1
    111          CONST uint16 gNWK_MAX_DEVICE_LIST = NWK_MAX_DEVICES;
   \                     gNWK_MAX_DEVICE_LIST:
   \   000000   1500         DW 21
    112          
    113          // Variables for MAX Sleeping End Devices

   \                                 In  segment CODE_C, align 1
    114          CONST uint8 gNWK_MAX_SLEEPING_END_DEVICES = NWK_MAX_DEVICES - NWK_MAX_ROUTERS;
   \                     gNWK_MAX_SLEEPING_END_DEVICES:
   \   000000   0F           DB 15
    115          
    116          // Variables for MAX data buffer levels

   \                                 In  segment CODE_C, align 1
    117          CONST byte gNWK_MAX_DATABUFS_WAITING = NWK_MAX_DATABUFS_WAITING;
   \                     gNWK_MAX_DATABUFS_WAITING:
   \   000000   08           DB 8

   \                                 In  segment CODE_C, align 1
    118          CONST byte gNWK_MAX_DATABUFS_SCHEDULED = NWK_MAX_DATABUFS_SCHEDULED;
   \                     gNWK_MAX_DATABUFS_SCHEDULED:
   \   000000   05           DB 5

   \                                 In  segment CODE_C, align 1
    119          CONST byte gNWK_MAX_DATABUFS_CONFIRMED = NWK_MAX_DATABUFS_CONFIRMED;
   \                     gNWK_MAX_DATABUFS_CONFIRMED:
   \   000000   05           DB 5

   \                                 In  segment CODE_C, align 1
    120          CONST byte gNWK_MAX_DATABUFS_TOTAL = NWK_MAX_DATABUFS_TOTAL;
   \                     gNWK_MAX_DATABUFS_TOTAL:
   \   000000   0C           DB 12
    121          

   \                                 In  segment CODE_C, align 1
    122          CONST byte gNWK_INDIRECT_CNT_RTG_TMR = NWK_INDIRECT_CNT_RTG_TMR;
   \                     gNWK_INDIRECT_CNT_RTG_TMR:
   \   000000   01           DB 1

   \                                 In  segment CODE_C, align 1
    123          CONST byte gNWK_INDIRECT_MSG_MAX_PER = NWK_INDIRECT_MSG_MAX_PER;
   \                     gNWK_INDIRECT_MSG_MAX_PER:
   \   000000   03           DB 3

   \                                 In  segment CODE_C, align 1
    124          CONST byte gNWK_INDIRECT_MSG_MAX_ALL = NWK_INDIRECT_MSG_MAX_ALL;
   \                     gNWK_INDIRECT_MSG_MAX_ALL:
   \   000000   09           DB 9
    125          
    126          // change this if using a different stack profile...
    127          // Cskip array

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    128          uint16 *Cskip;
   \                     Cskip:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    129          
    130          #if ( STACK_PROFILE_ID == ZIGBEEPRO_PROFILE )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    131            byte CskipRtrs[1] = {0};
   \                     CskipRtrs:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    132            byte CskipChldrn[1] = {0};
   \                     CskipChldrn:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    133          #elif ( STACK_PROFILE_ID == HOME_CONTROLS )
    134            byte CskipRtrs[MAX_NODE_DEPTH+1] = {6,6,6,6,6,0};
    135            byte CskipChldrn[MAX_NODE_DEPTH+1] = {20,20,20,20,20,0};
    136          #elif ( STACK_PROFILE_ID == GENERIC_STAR )
    137            byte CskipRtrs[MAX_NODE_DEPTH+1] = {5,5,5,5,5,0};
    138            byte CskipChldrn[MAX_NODE_DEPTH+1] = {5,5,5,5,5,0};
    139          #elif ( STACK_PROFILE_ID == NETWORK_SPECIFIC )
    140            byte CskipRtrs[MAX_NODE_DEPTH+1] = {5,5,5,5,5,0};
    141            byte CskipChldrn[MAX_NODE_DEPTH+1] = {5,5,5,5,5,0};
    142          #endif // STACK_PROFILE_ID
    143          
    144          // Minimum lqi value that is required for association

   \                                 In  segment XDATA_I, align 1, keep-with-next
    145          byte gMIN_TREE_LINK_COST = MIN_LQI_COST_3;
   \                     gMIN_TREE_LINK_COST:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for gMIN_TREE_LINK_COST>`
   \   000001                REQUIRE __INIT_XDATA_I
    146          
    147          // Statically defined Associated Device List

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    148          associated_devices_t AssociatedDevList[NWK_MAX_DEVICES];
   \                     AssociatedDevList:
   \   000000                DS 378
   \   00017A                REQUIRE __INIT_XDATA_Z
    149          

   \                                 In  segment CODE_C, align 1
    150          CONST byte gMAX_RTG_ENTRIES = MAX_RTG_ENTRIES;
   \                     gMAX_RTG_ENTRIES:
   \   000000   28           DB 40

   \                                 In  segment CODE_C, align 1
    151          CONST byte gMAX_RTG_SRC_ENTRIES = MAX_RTG_SRC_ENTRIES;
   \                     gMAX_RTG_SRC_ENTRIES:
   \   000000   0C           DB 12

   \                                 In  segment CODE_C, align 1
    152          CONST byte gMAX_RREQ_ENTRIES = MAX_RREQ_ENTRIES;
   \                     gMAX_RREQ_ENTRIES:
   \   000000   08           DB 8
    153          

   \                                 In  segment CODE_C, align 1
    154          CONST byte gMAX_NEIGHBOR_ENTRIES = MAX_NEIGHBOR_ENTRIES;
   \                     gMAX_NEIGHBOR_ENTRIES:
   \   000000   08           DB 8
    155          
    156           // Table of neighboring nodes (not including child nodes)

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    157          neighborEntry_t neighborTable[MAX_NEIGHBOR_ENTRIES];
   \                     neighborTable:
   \   000000                DS 184
   \   0000B8                REQUIRE __INIT_XDATA_Z
    158          
    159          // Routing table

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    160          rtgEntry_t rtgTable[MAX_RTG_ENTRIES];
   \                     rtgTable:
   \   000000                DS 280
   \   000118                REQUIRE __INIT_XDATA_Z
    161          #if defined ( ZIGBEE_SOURCE_ROUTING )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    162            rtgSrcEntry_t rtgSrcTable[MAX_RTG_SRC_ENTRIES];
   \                     rtgSrcTable:
   \   000000                DS 72
   \   000048                REQUIRE __INIT_XDATA_Z
    163          #endif
    164          
    165          // Table of current RREQ packets in the network

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    166          rtDiscEntry_t rtDiscTable[MAX_RREQ_ENTRIES];
   \                     rtDiscTable:
   \   000000                DS 64
   \   000040                REQUIRE __INIT_XDATA_Z
    167          
    168          // Table of data broadcast packets currently in circulation.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    169          bcastEntry_t bcastTable[MAX_BCAST];
   \                     bcastTable:
   \   000000                DS 72
   \   000048                REQUIRE __INIT_XDATA_Z
    170          
    171          // These 2 arrays are to be used as an array of struct { uint8, uint32 }.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    172          uint8 bcastHoldHandle[MAX_BCAST];
   \                     bcastHoldHandle:
   \   000000                DS 9
   \   000009                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    173          uint32 bcastHoldAckMask[MAX_BCAST];
   \                     bcastHoldAckMask:
   \   000000                DS 36
   \   000024                REQUIRE __INIT_XDATA_Z
    174          

   \                                 In  segment CODE_C, align 1
    175          CONST byte gMAX_BCAST = MAX_BCAST;
   \                     gMAX_BCAST:
   \   000000   09           DB 9
    176          
    177          // For tree addressing, this switch allows the allocation of a 
    178          // router address to an end device when end device address are 
    179          // all used up.  If this option is enabled, address space
    180          // could be limited.

   \                                 In  segment CODE_C, align 1
    181          CONST uint8 gNWK_TREE_ALLOCATE_ROUTERADDR_FOR_ENDDEVICE = FALSE;
   \                     gNWK_TREE_ALLOCATE_ROUTERADDR_FOR_ENDDEVICE:
   \   000000   00           DB 0
    182          
    183          /*********************************************************************
    184           * APS GLOBAL VARIABLES
    185           */
    186          
    187          // The Maximum number of binding records
    188          // This number is defined in BindingTable.h - change it there.

   \                                 In  segment CODE_C, align 1
    189          CONST uint16 gNWK_MAX_BINDING_ENTRIES = NWK_MAX_BINDING_ENTRIES;
   \                     gNWK_MAX_BINDING_ENTRIES:
   \   000000   0400         DW 4
    190          
    191          #if defined ( REFLECTOR )
    192            // The Maximum number of cluster IDs in a binding record
    193            // This number is defined in BindingTable.h - change it there.

   \                                 In  segment CODE_C, align 1
    194            CONST byte gMAX_BINDING_CLUSTER_IDS = MAX_BINDING_CLUSTER_IDS;
   \                     gMAX_BINDING_CLUSTER_IDS:
   \   000000   04           DB 4
    195          

   \                                 In  segment CODE_C, align 1
    196            CONST uint16 gBIND_REC_SIZE = sizeof( BindingEntry_t );
   \                     gBIND_REC_SIZE:
   \   000000   0E00         DW 14
    197          
    198            // Binding Table

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    199            BindingEntry_t BindingTable[NWK_MAX_BINDING_ENTRIES];
   \                     BindingTable:
   \   000000                DS 56
   \   000038                REQUIRE __INIT_XDATA_Z
    200          #endif
    201          
    202          // Maximum number allowed in the groups table.

   \                                 In  segment CODE_C, align 1
    203          CONST uint8 gAPS_MAX_GROUPS = APS_MAX_GROUPS;
   \                     gAPS_MAX_GROUPS:
   \   000000   10           DB 16
    204          
    205          // APS End Device Broadcast Table
    206          #if ( ZG_BUILD_ENDDEVICE_TYPE )
    207            apsEndDeviceBroadcast_t apsEndDeviceBroadcastTable[APS_MAX_ENDDEVICE_BROADCAST_ENTRIES];
    208            uint8 gAPS_MAX_ENDDEVICE_BROADCAST_ENTRIES = APS_MAX_ENDDEVICE_BROADCAST_ENTRIES;
    209          #endif
    210          
    211          /*********************************************************************
    212           * SECURITY GLOBAL VARIABLES
    213           */
    214          
    215          // This is the default pre-configured key,
    216          // change this to make a unique key
    217          // SEC_KEY_LEN is defined in ssp.h.

   \                                 In  segment CODE_C, align 1
    218          CONST byte defaultKey[SEC_KEY_LEN] =
   \                     defaultKey:
   \   000000   00           DB 0
   \   000001   01           DB 1
   \   000002   02           DB 2
   \   000003   03           DB 3
   \   000004   04           DB 4
   \   000005   05           DB 5
   \   000006   06           DB 6
   \   000007   07           DB 7
   \   000008   08           DB 8
   \   000009   09           DB 9
   \   00000A   0A           DB 10
   \   00000B   0B           DB 11
   \   00000C   0C           DB 12
   \   00000D   0D           DB 13
   \   00000E   0E           DB 14
   \   00000F   0F           DB 15
    219          {
    220          #if defined ( APP_TP ) || defined ( APP_TP2 )
    221            // Key for ZigBee Conformance Testing
    222            0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb,
    223            0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa
    224          #else
    225            // Key for In-House Testing
    226            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
    227            0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F
    228          #endif
    229          };
    230          
    231          // This is the default pre-configured Trust Center Link key,
    232          // change this to make a unique key, SEC_KEY_LEN is defined in ssp.h.

   \                                 In  segment CODE_C, align 1
    233          CONST byte defaultTCLinkKey[SEC_KEY_LEN] =
   \                     defaultTCLinkKey:
   \   000000   56           DB 86
   \   000001   77           DB 119
   \   000002   77           DB 119
   \   000003   77           DB 119
   \   000004   77           DB 119
   \   000005   77           DB 119
   \   000006   77           DB 119
   \   000007   77           DB 119
   \   000008   77           DB 119
   \   000009   77           DB 119
   \   00000A   77           DB 119
   \   00000B   77           DB 119
   \   00000C   77           DB 119
   \   00000D   77           DB 119
   \   00000E   77           DB 119
   \   00000F   77           DB 119
    234          {
    235            0x56, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77,
    236            0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77
    237          };
    238          
    239          /*********************************************************************
    240           * STATUS STRINGS
    241           */
    242          #if defined ( LCD_SUPPORTED )

   \                                 In  segment XDATA_ROM_C, align 1
    243            const char PingStr[]         = "Ping Rcvd from";
   \                     PingStr:
   \   000000   50696E67     DB "Ping Rcvd from"
   \            20526376
   \            64206672
   \            6F6D00  

   \                                 In  segment XDATA_ROM_C, align 1
    244            const char AssocCnfStr[]     = "Assoc Cnf";
   \                     AssocCnfStr:
   \   000000   4173736F     DB "Assoc Cnf"
   \            6320436E
   \            6600    

   \                                 In  segment XDATA_ROM_C, align 1
    245            const char SuccessStr[]      = "Success";
   \                     SuccessStr:
   \   000000   53756363     DB "Success"
   \            65737300

   \                                 In  segment XDATA_ROM_C, align 1
    246            const char EndDeviceStr[]    = "EndDevice:";
   \                     EndDeviceStr:
   \   000000   456E6444     DB "EndDevice:"
   \            65766963
   \            653A00  

   \                                 In  segment XDATA_ROM_C, align 1
    247            const char ParentStr[]       = "Parent:";
   \                     ParentStr:
   \   000000   50617265     DB "Parent:"
   \            6E743A00

   \                                 In  segment XDATA_ROM_C, align 1
    248            const char ZigbeeCoordStr[]  = "ZigBee Coord";
   \                     ZigbeeCoordStr:
   \   000000   5A696742     DB "ZigBee Coord"
   \            65652043
   \            6F6F7264
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
    249            const char NetworkIDStr[]    = "Network ID:";
   \                     NetworkIDStr:
   \   000000   4E657477     DB "Network ID:"
   \            6F726B20
   \            49443A00

   \                                 In  segment XDATA_ROM_C, align 1
    250            const char RouterStr[]       = "Router:";
   \                     RouterStr:
   \   000000   526F7574     DB "Router:"
   \            65723A00

   \                                 In  segment XDATA_ROM_C, align 1
    251            const char OrphanRspStr[]    = "Orphan Response";
   \                     OrphanRspStr:
   \   000000   4F727068     DB "Orphan Response"
   \            616E2052
   \            6573706F
   \            6E736500

   \                                 In  segment XDATA_ROM_C, align 1
    252            const char SentStr[]         = "Sent";
   \                     SentStr:
   \   000000   53656E74     DB "Sent"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
    253            const char FailedStr[]       = "Failed";
   \                     FailedStr:
   \   000000   4661696C     DB "Failed"
   \            656400  

   \                                 In  segment XDATA_ROM_C, align 1
    254            const char AssocRspFailStr[] = "Assoc Rsp fail";
   \                     AssocRspFailStr:
   \   000000   4173736F     DB "Assoc Rsp fail"
   \            63205273
   \            70206661
   \            696C00  

   \                                 In  segment XDATA_ROM_C, align 1
    255            const char AssocIndStr[]     = "Assoc Ind";
   \                     AssocIndStr:
   \   000000   4173736F     DB "Assoc Ind"
   \            6320496E
   \            6400    

   \                                 In  segment XDATA_ROM_C, align 1
    256            const char AssocCnfFailStr[] = "Assoc Cnf fail";
   \                     AssocCnfFailStr:
   \   000000   4173736F     DB "Assoc Cnf fail"
   \            6320436E
   \            66206661
   \            696C00  

   \                                 In  segment XDATA_ROM_C, align 1
    257            const char EnergyLevelStr[]  = "Energy Level";
   \                     EnergyLevelStr:
   \   000000   456E6572     DB "Energy Level"
   \            6779204C
   \            6576656C
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
    258            const char ScanFailedStr[]   = "Scan Failed";
   \                     ScanFailedStr:
   \   000000   5363616E     DB "Scan Failed"
   \            20466169
   \            6C656400
    259          #endif
    260          
    261          /*********************************************************************
    262           * @fn       nwk_globals_init()
    263           *
    264           * @brief
    265           *
    266           *   Initialize nwk layer globals.  These are the system defaults and
    267           *   should be changed by the user here.  The default definitions are
    268           *   defined in nwk.h or NLMEDE.h.
    269           *
    270           * @param   none
    271           *
    272           * @return  none
    273           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    274          void nwk_globals_init( void )
   \                     nwk_globals_init:
    275          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    276            AddrMgrInit( NWK_MAX_ADDRESSES );
   \   000004                ; Setup parameters for call to function AddrMgrInit
   \   000004   7A1A         MOV     R2,#0x1a
   \   000006   7B00         MOV     R3,#0x0
   \   000008   12....       LCALL   ??AddrMgrInit?relay
    277            
    278          #if !defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
    279            if ( ZSTACK_ROUTER_BUILD )
    280            {
    281              // Initialize the Cskip Table
    282              Cskip = osal_mem_alloc(sizeof(uint16) *(MAX_NODE_DEPTH+1));
    283              RTG_FillCSkipTable(CskipChldrn, CskipRtrs, MAX_NODE_DEPTH, Cskip);
    284            }
    285          #endif
    286            
    287            // To compile out the Link Status Feature, set NWK_LINK_STATUS_PERIOD
    288            // to 0 (compiler flag).
    289            if ( NWK_LINK_STATUS_PERIOD )
    290            {
    291              NLME_InitLinkStatus();
   \   00000B                ; Setup parameters for call to function NLME_InitLinkStatus
   \   00000B   12....       LCALL   ??NLME_InitLinkStatus?relay
    292            }
    293            
    294          #if defined ( ZIGBEE_FREQ_AGILITY )
    295            NwkFreqAgilityInit();
   \   00000E                ; Setup parameters for call to function NwkFreqAgilityInit
   \   00000E   12....       LCALL   ??NwkFreqAgilityInit?relay
    296          #endif
    297          }
   \   000011                REQUIRE ?Subroutine0
   \   000011                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    298          
    299          /*********************************************************************
    300           * @fn       NIB_init()
    301           *
    302           * @brief
    303           *
    304           *   Initialize attribute values in NIB
    305           *
    306           * @param   none
    307           *
    308           * @return  none
    309           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    310          void NIB_init()
   \                     NIB_init:
    311          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    312            _NIB.SequenceNum = LO_UINT16(osal_rand());
   \   000004                ; Setup parameters for call to function osal_rand
   \   000004   12....       LCALL   ??osal_rand?relay
   \   000007   EA           MOV     A,R2
   \   000008   90....       MOV     DPTR,#_NIB
   \   00000B   F0           MOVX    @DPTR,A
    313          
    314            _NIB.nwkProtocolVersion = ZB_PROT_VERS;
   \   00000C   90....       MOV     DPTR,#_NIB + 17
   \   00000F   7402         MOV     A,#0x2
   \   000011   F0           MOVX    @DPTR,A
    315            _NIB.MaxDepth = MAX_NODE_DEPTH;
   \   000012   90....       MOV     DPTR,#_NIB + 4
   \   000015   7414         MOV     A,#0x14
   \   000017   F0           MOVX    @DPTR,A
    316          
    317          #if ( NWK_MODE == NWK_MODE_MESH )
    318            _NIB.beaconOrder = BEACON_ORDER_NO_BEACONS;
   \   000018   90....       MOV     DPTR,#_NIB + 40
   \   00001B   740F         MOV     A,#0xf
   \   00001D   F0           MOVX    @DPTR,A
    319            _NIB.superFrameOrder = BEACON_ORDER_NO_BEACONS;
   \   00001E   A3           INC     DPTR
   \   00001F   F0           MOVX    @DPTR,A
    320          #endif
    321          
    322            // BROADCAST SETTINGS:
    323            // *******************
    324            //   Broadcast Delivery Time
    325            //     - set to multiples of 100ms 
    326            //     - should be 500ms more than the retry time
    327            //       -  "retry time" = PassiveAckTimeout * (MaxBroadcastRetries + 1)
    328            //   Passive Ack Timeout
    329            //     - set to multiples of 100ms 
    330            _NIB.BroadcastDeliveryTime = zgBcastDeliveryTime;
   \   000020   90....       MOV     DPTR,#zgBcastDeliveryTime
   \   000023   E0           MOVX    A,@DPTR
   \   000024   90....       MOV     DPTR,#_NIB + 7
   \   000027   F0           MOVX    @DPTR,A
    331            _NIB.PassiveAckTimeout     = zgPassiveAckTimeout;
   \   000028   90....       MOV     DPTR,#zgPassiveAckTimeout
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   90....       MOV     DPTR,#_NIB + 1
   \   00002F   F0           MOVX    @DPTR,A
    332            _NIB.MaxBroadcastRetries   = zgMaxBcastRetires;
   \   000030   90....       MOV     DPTR,#zgMaxBcastRetires
   \   000033   E0           MOVX    A,@DPTR
   \   000034   90....       MOV     DPTR,#_NIB + 2
   \   000037   F0           MOVX    @DPTR,A
    333          
    334            _NIB.ReportConstantCost = 0;
   \   000038   90....       MOV     DPTR,#_NIB + 8
   \   00003B   E4           CLR     A
   \   00003C   F0           MOVX    @DPTR,A
    335            _NIB.RouteDiscRetries = 0;
   \   00003D   A3           INC     DPTR
   \   00003E   F0           MOVX    @DPTR,A
    336            _NIB.SecureAllFrames = USE_NWK_SECURITY;
   \   00003F   90....       MOV     DPTR,#_NIB + 11
   \   000042   F0           MOVX    @DPTR,A
    337             
    338            if ( ZG_SECURE_ENABLED )
    339            {
    340              _NIB.SecurityLevel = SECURITY_LEVEL;
    341            }
    342            else
    343            {
    344              _NIB.SecurityLevel = 0;
   \   000043   A3           INC     DPTR
   \   000044   F0           MOVX    @DPTR,A
    345            }
    346             
    347          #if defined ( ZIGBEEPRO )
    348            _NIB.SymLink = FALSE;
   \   000045   A3           INC     DPTR
   \   000046   F0           MOVX    @DPTR,A
    349          #else
    350            _NIB.SymLink = TRUE;
    351          #endif  
    352            
    353            _NIB.CapabilityInfo = ZDO_Config_Node_Descriptor.CapabilityFlags;
   \   000047   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   90....       MOV     DPTR,#_NIB + 14
   \   00004E   F0           MOVX    @DPTR,A
    354          
    355            _NIB.TransactionPersistenceTime = zgIndirectMsgTimeout;
   \   00004F   90....       MOV     DPTR,#zgIndirectMsgTimeout
   \   000052   E0           MOVX    A,@DPTR
   \   000053   90....       MOV     DPTR,#_NIB + 15
   \   000056   F0           MOVX    @DPTR,A
   \   000057   A3           INC     DPTR
   \   000058   E4           CLR     A
   \   000059   F0           MOVX    @DPTR,A
    356          
    357            _NIB.RouteDiscoveryTime = 5;
   \   00005A   90....       MOV     DPTR,#_NIB + 18
   \   00005D   7405         MOV     A,#0x5
   \   00005F   F0           MOVX    @DPTR,A
    358            _NIB.RouteExpiryTime = zgRouteExpiryTime;
   \   000060   90....       MOV     DPTR,#zgRouteExpiryTime
   \   000063   E0           MOVX    A,@DPTR
   \   000064   90....       MOV     DPTR,#_NIB + 19
   \   000067   12....       LCALL   ?Subroutine1 & 0xFFFF
    359          
    360            _NIB.nwkDevAddress = INVALID_NODE_ADDR;
    361            _NIB.nwkLogicalChannel = 0;
   \                     ??CrossCallReturnLabel_0:
   \   00006A   A3           INC     DPTR
   \   00006B   E4           CLR     A
   \   00006C   12....       LCALL   ?Subroutine1 & 0xFFFF
    362            _NIB.nwkCoordAddress = INVALID_NODE_ADDR;
    363            osal_memset( _NIB.nwkCoordExtAddress, 0, Z_EXTADDR_LEN );
   \                     ??CrossCallReturnLabel_1:
   \   00006F                ; Setup parameters for call to function osal_memset
   \   00006F   7C08         MOV     R4,#0x8
   \   000071   7D00         MOV     R5,#0x0
   \   000073   7900         MOV     R1,#0x0
   \   000075   7A..         MOV     R2,#(_NIB + 25) & 0xff
   \   000077   7B..         MOV     R3,#((_NIB + 25) >> 8) & 0xff
   \   000079   12....       LCALL   ??osal_memset?relay
    364            _NIB.nwkPanId = INVALID_NODE_ADDR;
   \   00007C   90....       MOV     DPTR,#_NIB + 33
   \   00007F   74FE         MOV     A,#-0x2
   \   000081   F0           MOVX    @DPTR,A
   \   000082   A3           INC     DPTR
   \   000083   04           INC     A
   \   000084   F0           MOVX    @DPTR,A
    365          
    366            osal_cpyExtAddr( _NIB.extendedPANID, zgExtendedPANID );
   \   000085                ; Setup parameters for call to function sAddrExtCpy
   \   000085   7C..         MOV     R4,#zgExtendedPANID & 0xff
   \   000087   7D..         MOV     R5,#(zgExtendedPANID >> 8) & 0xff
   \   000089   7A..         MOV     R2,#(_NIB + 53) & 0xff
   \   00008B   7B..         MOV     R3,#((_NIB + 53) >> 8) & 0xff
   \   00008D   12....       LCALL   ??sAddrExtCpy?relay
    367             
    368            _NIB.nwkKeyLoaded = FALSE;
   \   000090   90....       MOV     DPTR,#_NIB + 61
   \   000093   E4           CLR     A
   \   000094   F0           MOVX    @DPTR,A
    369             
    370          #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
    371            _NIB.nwkAddrAlloc  = NWK_ADDRESSING_STOCHASTIC;
   \   000095   90....       MOV     DPTR,#_NIB + 96
   \   000098   7402         MOV     A,#0x2
   \   00009A   F0           MOVX    @DPTR,A
    372            _NIB.nwkUniqueAddr = FALSE;
   \   00009B   A3           INC     DPTR
   \   00009C   E4           CLR     A
   \   00009D   F0           MOVX    @DPTR,A
    373          #else
    374            _NIB.nwkAddrAlloc  = NWK_ADDRESSING_DISTRIBUTED;
    375            _NIB.nwkUniqueAddr = TRUE;
    376          #endif
    377          
    378            _NIB.nwkLinkStatusPeriod = NWK_LINK_STATUS_PERIOD; 
   \   00009E   A3           INC     DPTR
   \   00009F   740F         MOV     A,#0xf
   \   0000A1   F0           MOVX    @DPTR,A
    379            _NIB.nwkRouterAgeLimit = NWK_ROUTE_AGE_LIMIT;
   \   0000A2   A3           INC     DPTR
   \   0000A3   7403         MOV     A,#0x3
   \   0000A5   F0           MOVX    @DPTR,A
    380            //MTO routing
    381            _NIB.nwkConcentratorDiscoveryTime = zgConcentratorDiscoveryTime;
   \   0000A6   90....       MOV     DPTR,#zgConcentratorDiscoveryTime
   \   0000A9   E0           MOVX    A,@DPTR
   \   0000AA   90....       MOV     DPTR,#_NIB + 102
   \   0000AD   F0           MOVX    @DPTR,A
    382            _NIB.nwkIsConcentrator = 0;
   \   0000AE   90....       MOV     DPTR,#_NIB + 101
   \   0000B1   E4           CLR     A
   \   0000B2   F0           MOVX    @DPTR,A
    383            _NIB.nwkConcentratorRadius = 0x0a;
   \   0000B3   90....       MOV     DPTR,#_NIB + 103
   \   0000B6   740A         MOV     A,#0xa
   \   0000B8   F0           MOVX    @DPTR,A
    384            _NIB.nwkMaxSourceRoute = 0x0c;
   \   0000B9   A3           INC     DPTR
   \   0000BA   740C         MOV     A,#0xc
   \   0000BC   F0           MOVX    @DPTR,A
    385          
    386          #if defined ( ZIGBEE_MULTICAST )
    387            _NIB.nwkUseMultiCast = TRUE;
   \   0000BD   90....       MOV     DPTR,#_NIB + 100
   \   0000C0   7401         MOV     A,#0x1
   \   0000C2   F0           MOVX    @DPTR,A
    388          #else
    389            _NIB.nwkUseMultiCast = FALSE;
    390          #endif  
    391            _NIB.nwkManagerAddr = 0x0000;
   \   0000C3   90....       MOV     DPTR,#_NIB + 105
   \   0000C6   E4           CLR     A
   \   0000C7   F0           MOVX    @DPTR,A
   \   0000C8   A3           INC     DPTR
   \   0000C9   F0           MOVX    @DPTR,A
    392            _NIB.nwkUpdateId = 0;
   \   0000CA   90....       MOV     DPTR,#_NIB + 109
   \   0000CD   F0           MOVX    @DPTR,A
    393            _NIB.nwkTotalTransmissions = 0;
   \   0000CE   90....       MOV     DPTR,#_NIB + 107
   \   0000D1   F0           MOVX    @DPTR,A
   \   0000D2   A3           INC     DPTR
   \   0000D3   F0           MOVX    @DPTR,A
    394          
    395            if ( ZSTACK_ROUTER_BUILD )
    396            {
    397          #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
    398              NLME_InitStochasticAddressing();
   \   0000D4                ; Setup parameters for call to function NLME_InitStochasticAddressing
   \   0000D4   12....       LCALL   ??NLME_InitStochasticAddressing?relay
    399          #else
    400              NLME_InitTreeAddressing();
    401          #endif
    402            }
    403          }
   \   0000D7   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   74FE         MOV     A,#-0x2
   \   000004   F0           MOVX    @DPTR,A
   \   000005   A3           INC     DPTR
   \   000006   04           INC     A
   \   000007   F0           MOVX    @DPTR,A
   \   000008   22           RET
    404          
    405          /*********************************************************************
    406           * @fn       nwk_Status()
    407           *
    408           * @brief
    409           *
    410           *   Status report.
    411           *
    412           * @param   statusCode
    413           * @param   statusValue
    414           *
    415           * @return  none
    416           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    417          void nwk_Status( uint16 statusCode, uint16 statusValue )
   \                     nwk_Status:
    418          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8C..         MOV     ?V0 + 4,R4
   \   000007   8D..         MOV     ?V0 + 5,R5
    419          #if defined ( LCD_SUPPORTED )
    420            switch ( statusCode )
   \   000009   8C..         MOV     ?V0 + 0,R4
   \   00000B   8D..         MOV     ?V0 + 1,R5
   \   00000D   75..00       MOV     ?V0 + 2,#0x0
   \   000010   75..00       MOV     ?V0 + 3,#0x0
   \   000013   8A..         MOV     ?V0 + 6,R2
   \   000015   8B..         MOV     ?V0 + 7,R3
   \   000017   78..         MOV     R0,#?V0 + 6
   \   000019   12....       LCALL   ?US_SWITCH_SPARSE
   \                     `?<Jumptable for nwk_Status>_0`:
   \   00001C   0000         DW        0
   \   00001E   0800         DW        8
   \   000020   0200         DW        2
   \   000022   ....         DW        ??nwk_Status_0
   \   000024   0400         DW        4
   \   000026   ....         DW        ??nwk_Status_1
   \   000028   0500         DW        5
   \   00002A   ....         DW        ??nwk_Status_2
   \   00002C   0600         DW        6
   \   00002E   ....         DW        ??nwk_Status_3
   \   000030   0700         DW        7
   \   000032   ....         DW        ??nwk_Status_4
   \   000034   0110         DW        4097
   \   000036   ....         DW        ??nwk_Status_5
   \   000038   0310         DW        4099
   \   00003A   ....         DW        ??nwk_Status_6
   \   00003C   0410         DW        4100
   \   00003E   ....         DW        ??nwk_Status_7
   \   000040   ....         DW        ??nwk_Status_8
    421            {
    422              case NWK_STATUS_COORD_ADDR:
    423                if ( ZSTACK_ROUTER_BUILD )
    424                {
    425                  HalLcdWriteString( (char*)ZigbeeCoordStr, HAL_LCD_LINE_1 );
   \                     ??nwk_Status_2:
   \   000042                ; Setup parameters for call to function HalLcdWriteString
   \   000042   7901         MOV     R1,#0x1
   \   000044   7A..         MOV     R2,#ZigbeeCoordStr & 0xff
   \   000046   7B..         MOV     R3,#(ZigbeeCoordStr >> 8) & 0xff
   \   000048   12....       LCALL   ??HalLcdWriteString?relay
    426                  HalLcdWriteStringValue( (char*)NetworkIDStr, statusValue, 16, HAL_LCD_LINE_2 );
   \   00004B                ; Setup parameters for call to function HalLcdWriteStringValue
   \   00004B   75..02       MOV     ?V0 + 0,#0x2
   \   00004E   78..         MOV     R0,#?V0 + 0
   \   000050   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000053   7910         MOV     R1,#0x10
   \   000055   AC..         MOV     R4,?V0 + 4
   \   000057   AD..         MOV     R5,?V0 + 5
   \   000059   7A..         MOV     R2,#NetworkIDStr & 0xff
   \   00005B   7B..         MOV     R3,#(NetworkIDStr >> 8) & 0xff
   \   00005D   12....       LCALL   ??HalLcdWriteStringValue?relay
   \   000060   7401         MOV     A,#0x1
   \   000062   12....       LCALL   ?DEALLOC_XSTACK8
    427                  BuzzerControl( BUZZER_BLIP );
   \   000065                ; Setup parameters for call to function BuzzerControl
   \   000065   7902         MOV     R1,#0x2
   \   000067   12....       LCALL   ??BuzzerControl?relay
    428                }
    429                break;
   \   00006A   807A         SJMP    ??nwk_Status_8
    430          
    431              case NWK_STATUS_ROUTER_ADDR:
    432                if ( ZSTACK_ROUTER_BUILD )
    433                {
    434                  HalLcdWriteStringValue( (char*)RouterStr, statusValue, 16, HAL_LCD_LINE_1 );
   \                     ??nwk_Status_3:
   \   00006C                ; Setup parameters for call to function HalLcdWriteStringValue
   \   00006C   75..01       MOV     ?V0 + 0,#0x1
   \   00006F   78..         MOV     R0,#?V0 + 0
   \   000071   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000074   7910         MOV     R1,#0x10
   \   000076   7A..         MOV     R2,#RouterStr & 0xff
   \   000078   7B..         MOV     R3,#(RouterStr >> 8) & 0xff
   \                     ??nwk_Status_9:
   \   00007A   12....       LCALL   ??HalLcdWriteStringValue?relay
   \                     ??nwk_Status_10:
   \   00007D   7401         MOV     A,#0x1
   \   00007F   12....       LCALL   ?DEALLOC_XSTACK8
    435                }
    436                break;
   \   000082   8062         SJMP    ??nwk_Status_8
    437          
    438              case NWK_STATUS_ORPHAN_RSP:
    439                if ( ZSTACK_ROUTER_BUILD )
    440                {
    441                  if ( statusValue == ZSuccess )
   \                     ??nwk_Status_4:
   \   000084   7A..         MOV     R2,#OrphanRspStr & 0xff
   \   000086   7B..         MOV     R3,#(OrphanRspStr >> 8) & 0xff
   \   000088   EC           MOV     A,R4
   \   000089   45..         ORL     A,?V0 + 5
   \   00008B   7006         JNZ     ??nwk_Status_11
    442                    HalLcdWriteScreen( (char*)OrphanRspStr, (char*)SentStr );
   \   00008D                ; Setup parameters for call to function HalLcdWriteScreen
   \   00008D   7C..         MOV     R4,#SentStr & 0xff
   \   00008F   7D..         MOV     R5,#(SentStr >> 8) & 0xff
   \   000091   8050         SJMP    ??nwk_Status_12
    443                  else
    444                    HalLcdWriteScreen( (char*)OrphanRspStr, (char*)FailedStr );
   \                     ??nwk_Status_11:
   \   000093                ; Setup parameters for call to function HalLcdWriteScreen
   \   000093   7C..         MOV     R4,#FailedStr & 0xff
   \   000095   7D..         MOV     R5,#(FailedStr >> 8) & 0xff
   \   000097   804A         SJMP    ??nwk_Status_12
    445                }
    446                break;
    447          
    448              case NWK_ERROR_ASSOC_RSP:
    449                if ( ZSTACK_ROUTER_BUILD )
    450                {
    451                  HalLcdWriteString( (char*)AssocRspFailStr, HAL_LCD_LINE_1 );
   \                     ??nwk_Status_5:
   \   000099                ; Setup parameters for call to function HalLcdWriteString
   \   000099   7901         MOV     R1,#0x1
   \   00009B   7A..         MOV     R2,#AssocRspFailStr & 0xff
   \   00009D   7B..         MOV     R3,#(AssocRspFailStr >> 8) & 0xff
   \                     ??nwk_Status_13:
   \   00009F   12....       LCALL   ??HalLcdWriteString?relay
    452                  HalLcdWriteValue( (uint32)(statusValue), 16, HAL_LCD_LINE_2 );
   \   0000A2                ; Setup parameters for call to function HalLcdWriteValue
   \   0000A2   75..02       MOV     ?V0 + 4,#0x2
   \   0000A5   78..         MOV     R0,#?V0 + 4
   \   0000A7   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000AA   7910         MOV     R1,#0x10
   \   0000AC   AA..         MOV     R2,?V0 + 0
   \   0000AE   AB..         MOV     R3,?V0 + 1
   \   0000B0   AC..         MOV     R4,?V0 + 2
   \   0000B2   AD..         MOV     R5,?V0 + 3
   \   0000B4   12....       LCALL   ??HalLcdWriteValue?relay
   \   0000B7   80C4         SJMP    ??nwk_Status_10
    453                }
    454                break;
    455                
    456              case NWK_STATUS_ED_ADDR:
    457                if ( ZSTACK_END_DEVICE_BUILD )
    458                {
    459                  HalLcdWriteStringValue( (char*)EndDeviceStr, statusValue, 16, HAL_LCD_LINE_1 );
    460                }
    461                break;
    462          
    463              case NWK_STATUS_PARENT_ADDR:
    464                      HalLcdWriteStringValue( (char*)ParentStr, statusValue, 16, HAL_LCD_LINE_2 );
   \                     ??nwk_Status_1:
   \   0000B9                ; Setup parameters for call to function HalLcdWriteStringValue
   \   0000B9   75..02       MOV     ?V0 + 0,#0x2
   \   0000BC   78..         MOV     R0,#?V0 + 0
   \   0000BE   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000C1   7910         MOV     R1,#0x10
   \   0000C3   7A..         MOV     R2,#ParentStr & 0xff
   \   0000C5   7B..         MOV     R3,#(ParentStr >> 8) & 0xff
   \   0000C7   80B1         SJMP    ??nwk_Status_9
    465                break;
    466          
    467              case NWK_STATUS_ASSOC_CNF:
    468                HalLcdWriteScreen( (char*)AssocCnfStr, (char*)SuccessStr );
   \                     ??nwk_Status_0:
   \   0000C9                ; Setup parameters for call to function HalLcdWriteScreen
   \   0000C9   7C..         MOV     R4,#SuccessStr & 0xff
   \   0000CB   7D..         MOV     R5,#(SuccessStr >> 8) & 0xff
   \   0000CD   7A..         MOV     R2,#AssocCnfStr & 0xff
   \   0000CF   7B..         MOV     R3,#(AssocCnfStr >> 8) & 0xff
   \   0000D1   8010         SJMP    ??nwk_Status_12
    469                break;
    470          
    471              case NWK_ERROR_ASSOC_CNF_DENIED:
    472                HalLcdWriteString((char*)AssocCnfFailStr, HAL_LCD_LINE_1 );
   \                     ??nwk_Status_6:
   \   0000D3                ; Setup parameters for call to function HalLcdWriteString
   \   0000D3   7901         MOV     R1,#0x1
   \   0000D5   7A..         MOV     R2,#AssocCnfFailStr & 0xff
   \   0000D7   7B..         MOV     R3,#(AssocCnfFailStr >> 8) & 0xff
   \   0000D9   80C4         SJMP    ??nwk_Status_13
    473                HalLcdWriteValue( (uint32)(statusValue), 16, HAL_LCD_LINE_2 );
    474                break;
    475          
    476              case NWK_ERROR_ENERGY_SCAN_FAILED:
    477                HalLcdWriteScreen( (char*)EnergyLevelStr, (char*)ScanFailedStr );
   \                     ??nwk_Status_7:
   \   0000DB                ; Setup parameters for call to function HalLcdWriteScreen
   \   0000DB   7C..         MOV     R4,#ScanFailedStr & 0xff
   \   0000DD   7D..         MOV     R5,#(ScanFailedStr >> 8) & 0xff
   \   0000DF   7A..         MOV     R2,#EnergyLevelStr & 0xff
   \   0000E1   7B..         MOV     R3,#(EnergyLevelStr >> 8) & 0xff
   \                     ??nwk_Status_12:
   \   0000E3   12....       LCALL   ??HalLcdWriteScreen?relay
    478                break;
    479            }
    480          #endif
    481          }
   \                     ??nwk_Status_8:
   \   0000E6   7F08         MOV     R7,#0x8
   \   0000E8   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for gMIN_TREE_LINK_COST>`:
   \   000000   06           DB 6

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??nwk_globals_init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    nwk_globals_init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??NIB_init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    NIB_init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??nwk_Status?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    nwk_Status
    482          
    483          /*********************************************************************
    484          *********************************************************************/

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     NIB_init                           2      0      0
       -> osal_rand                     4      0      0
       -> osal_memset                   4      0      0
       -> sAddrExtCpy                   4      0      0
       -> NLME_InitStochasticAddressing
                                        4      0      0
     nwk_Status                         0      0     17
       -> HalLcdWriteString             0      0     32
       -> HalLcdWriteStringValue        0      0     34
       -> BuzzerControl                 0      0     32
       -> HalLcdWriteStringValue        0      0     34
       -> HalLcdWriteScreen             0      0     32
       -> HalLcdWriteScreen             0      0     32
       -> HalLcdWriteString             0      0     32
       -> HalLcdWriteValue              0      0     34
       -> HalLcdWriteStringValue        0      0     34
       -> HalLcdWriteScreen             0      0     32
       -> HalLcdWriteString             0      0     32
       -> HalLcdWriteValue              0      0     34
       -> HalLcdWriteScreen             0      0     32
     nwk_globals_init                   2      0      0
       -> AddrMgrInit                   4      0      0
       -> NLME_InitLinkStatus           4      0      0
       -> NwkFreqAgilityInit            4      0      0


   Segment part sizes:

     Function/Label                         Bytes
     --------------                         -----
     gNWK_MAX_DEVICE_LIST                      2
     gNWK_MAX_SLEEPING_END_DEVICES             1
     gNWK_MAX_DATABUFS_WAITING                 1
     gNWK_MAX_DATABUFS_SCHEDULED               1
     gNWK_MAX_DATABUFS_CONFIRMED               1
     gNWK_MAX_DATABUFS_TOTAL                   1
     gNWK_INDIRECT_CNT_RTG_TMR                 1
     gNWK_INDIRECT_MSG_MAX_PER                 1
     gNWK_INDIRECT_MSG_MAX_ALL                 1
     Cskip                                     2
     CskipRtrs                                 1
     CskipChldrn                               1
     gMIN_TREE_LINK_COST                       1
     AssociatedDevList                       378
     gMAX_RTG_ENTRIES                          1
     gMAX_RTG_SRC_ENTRIES                      1
     gMAX_RREQ_ENTRIES                         1
     gMAX_NEIGHBOR_ENTRIES                     1
     neighborTable                           184
     rtgTable                                280
     rtgSrcTable                              72
     rtDiscTable                              64
     bcastTable                               72
     bcastHoldHandle                           9
     bcastHoldAckMask                         36
     gMAX_BCAST                                1
     gNWK_TREE_ALLOCATE_ROUTERADDR_FOR_ENDDEVICE
                                               1
     gNWK_MAX_BINDING_ENTRIES                  2
     gMAX_BINDING_CLUSTER_IDS                  1
     gBIND_REC_SIZE                            2
     BindingTable                             56
     gAPS_MAX_GROUPS                           1
     defaultKey                               16
     defaultTCLinkKey                         16
     PingStr                                  15
     AssocCnfStr                              10
     SuccessStr                                8
     EndDeviceStr                             11
     ParentStr                                 8
     ZigbeeCoordStr                           13
     NetworkIDStr                             12
     RouterStr                                 8
     OrphanRspStr                             16
     SentStr                                   5
     FailedStr                                 7
     AssocRspFailStr                          15
     AssocIndStr                              10
     AssocCnfFailStr                          15
     EnergyLevelStr                           13
     ScanFailedStr                            12
     nwk_globals_init                         17
     ?Subroutine0                              7
     NIB_init                                218
     ?Subroutine1                              9
     nwk_Status                              235
     ?<Initializer for gMIN_TREE_LINK_COST>    1
     ??nwk_globals_init?relay                  6
     ??NIB_init?relay                          6
     ??nwk_Status?relay                        6

 
   486 bytes in segment BANKED_CODE
    18 bytes in segment BANK_RELAYS
    54 bytes in segment CODE_C
     1 byte  in segment XDATA_I
     1 byte  in segment XDATA_ID
   178 bytes in segment XDATA_ROM_C
 1 155 bytes in segment XDATA_Z
 
   559 bytes of CODE  memory
   178 bytes of CONST memory
 1 156 bytes of XDATA memory

Errors: none
Warnings: none
