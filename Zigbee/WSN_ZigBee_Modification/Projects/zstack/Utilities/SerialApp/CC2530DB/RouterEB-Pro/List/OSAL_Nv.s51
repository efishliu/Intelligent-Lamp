///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.3.10338/W32 for 8051        03/Jul/2018  14:52:45 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Components\osal\mcu\cc2530\OSAL_Nv.c             /
//    Command line       =  -f D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_Ð /
//                          Þ¸Ä\Projects\zstack\Utilities\SerialApp\CC2530DB\ /
//                          ..\..\..\Tools\CC2530DB\f8wRouter.cfg             /
//                          (-DCPU32MHZ -DROOT=__near_func                    /
//                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE -DRTR_NWK        /
//                          -DBLINK_LEDS) -f D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼ /
//                          «\WSN_ZigBee_ÐÞ¸Ä\Projects\zstack\Utilities\Seria /
//                          lApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.c /
//                          fg (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR  /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          "-DCONST=const __code" -DGENERIC=__generic        /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµ /
//                          Ï°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\Components\osal\mcu\cc253 /
//                          0\OSAL_Nv.c -D ZIGBEEPRO -D HAL_UART=TRUE -D      /
//                          SERIAL_APP_PORT=0 -D LCD_SUPPORTED -lC            /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\Rou /
//                          terEB-Pro\List\ -lA D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ /
//                          ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\Projects\zstack\Utilities\Se /
//                          rialApp\CC2530DB\RouterEB-Pro\List\               /
//                          --diag_suppress Pe001,Pa010 -o                    /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\Rou /
//                          terEB-Pro\Obj\ -e --debug --core=plain            /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 8 -I D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµ /
//                          Ï°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\Projects\zstack\Utilities /
//                          \SerialApp\CC2530DB\ -I                           /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          SOURCE\ -I D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ /
//                          ZigBee_ÐÞ¸Ä\Projects\zstack\Utilities\SerialApp\C /
//                          C2530DB\..\..\..\ZMAIN\TI2530DB\ -I               /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\MT\ -I                     /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\HAL\INCLUDE\ -I            /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\ -I    /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\ -I         /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\OSAL\INCLUDE\ -I           /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\STACK\AF\ -I               /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\STACK\NWK\ -I              /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\STACK\SEC\ -I              /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\STACK\SAPI\ -I             /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\STACK\SYS\ -I              /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\STACK\ZDO\ -I              /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\ZMAC\F8W\ -I               /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\ZMAC\ -I                   /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\SERVICES\SADDR\ -I         /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\SERVICES\SDATA\ -I         /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\MAC\INCLUDE\ -I            /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\ -I         /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\ -I    /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE /
//                          _CHIP\ -Ohz --require_prototypes                  /
//    List file          =  D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\Rou /
//                          terEB-Pro\List\OSAL_Nv.s51                        /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME OSAL_Nv

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK8_X_TWO
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?S_SHL
        EXTERN ?US_SHR
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_Z

        FUNCTION ??calcChkF?relay,0203H
        FUNCTION ??compactPage?relay,0203H
        FUNCTION ??erasePage?relay,0203H
        FUNCTION ??findItem?relay,0203H
        FUNCTION ??initItem?relay,0203H
        FUNCTION ??initNV?relay,0203H
        FUNCTION ??initPage?relay,0203H
        PUBLIC ??osal_nv_init?relay
        FUNCTION ??osal_nv_init?relay,0203H
        PUBLIC ??osal_nv_item_init?relay
        FUNCTION ??osal_nv_item_init?relay,0203H
        PUBLIC ??osal_nv_item_len?relay
        FUNCTION ??osal_nv_item_len?relay,0203H
        PUBLIC ??osal_nv_read?relay
        FUNCTION ??osal_nv_read?relay,0203H
        PUBLIC ??osal_nv_write?relay
        FUNCTION ??osal_nv_write?relay,0203H
        FUNCTION ??setItem?relay,0203H
        FUNCTION ??setPageUse?relay,0203H
        FUNCTION ??writeBuf?relay,0203H
        FUNCTION ??writeItem?relay,0203H
        FUNCTION ??writeWord?relay,0203H
        FUNCTION ??writeWordH?relay,0203H
        FUNCTION ??xferBuf?relay,0203H
        PUBLIC _nvBuf
        PUBLIC _nvIEEE
        FUNCTION calcChkF,021203H
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 21, STACK
        FUNCTION compactPage,021203H
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 28, STACK
        FUNCTION erasePage,021203H
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        FUNCTION findItem,021203H
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 12, STACK
        FUNCTION initItem,021203H
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 19, STACK
        FUNCTION initNV,021203H
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 22, STACK
        FUNCTION initPage,021203H
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 28, STACK
        PUBLIC osal_nv_init
        FUNCTION osal_nv_init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC osal_nv_item_init
        FUNCTION osal_nv_item_init,021203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC osal_nv_item_len
        FUNCTION osal_nv_item_len,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        PUBLIC osal_nv_read
        FUNCTION osal_nv_read,021203H
        ARGFRAME XSTACK, 4, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC osal_nv_write
        FUNCTION osal_nv_write,021203H
        ARGFRAME XSTACK, 4, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 35, STACK
        FUNCTION setItem,021203H
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 24, STACK
        FUNCTION setPageUse,021203H
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 17, STACK
        FUNCTION writeBuf,021203H
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 22, STACK
        FUNCTION writeItem,021203H
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 29, STACK
        FUNCTION writeWord,021203H
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 16, STACK
        FUNCTION writeWordH,021203H
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 13, STACK
        FUNCTION xferBuf,021203H
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 23, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
HalFlashRead        SYMBOL "HalFlashRead"
HalAdcCheckVdd      SYMBOL "HalAdcCheckVdd"
HalFlashErase       SYMBOL "HalFlashErase"
HalFlashWrite       SYMBOL "HalFlashWrite"
??HalAdcCheckVdd?relay SYMBOL "?relay", HalAdcCheckVdd
??HalFlashErase?relay SYMBOL "?relay", HalFlashErase
??HalFlashRead?relay SYMBOL "?relay", HalFlashRead
??HalFlashWrite?relay SYMBOL "?relay", HalFlashWrite
osal_nv_init        SYMBOL "osal_nv_init"
??osal_nv_init?relay SYMBOL "?relay", osal_nv_init
osal_nv_item_init   SYMBOL "osal_nv_item_init"
??osal_nv_item_init?relay SYMBOL "?relay", osal_nv_item_init
osal_nv_item_len    SYMBOL "osal_nv_item_len"
??osal_nv_item_len?relay SYMBOL "?relay", osal_nv_item_len
osal_nv_read        SYMBOL "osal_nv_read"
??osal_nv_read?relay SYMBOL "?relay", osal_nv_read
osal_nv_write       SYMBOL "osal_nv_write"
??osal_nv_write?relay SYMBOL "?relay", osal_nv_write

        EXTERN HalFlashRead
        FUNCTION HalFlashRead,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalAdcCheckVdd
        FUNCTION HalAdcCheckVdd,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalFlashErase
        FUNCTION HalFlashErase,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalFlashWrite
        FUNCTION HalFlashWrite,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??HalAdcCheckVdd?relay
        FUNCTION ??HalAdcCheckVdd?relay,00H
        EXTERN ??HalFlashErase?relay
        FUNCTION ??HalFlashErase?relay,00H
        EXTERN ??HalFlashRead?relay
        FUNCTION ??HalFlashRead?relay,00H
        EXTERN ??HalFlashWrite?relay
        FUNCTION ??HalFlashWrite?relay,00H

// D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\Components\osal\mcu\cc2530\OSAL_Nv.c
//    1 /**************************************************************************************************
//    2   Filename:       OSAL_Nv.c
//    3   Revised:        $Date: 2008-08-06 17:17:11 -0700 (Wed, 06 Aug 2008) $
//    4   Revision:       $Revision: 17715 $
//    5 
//    6   Description:    This module contains the OSAL non-volatile memory functions.
//    7 
//    8 
//    9   Copyright 2006-2009 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License").  You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product.  Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 
//   40 /**************************************************************************************************
//   41   Notes:
//   42     - A trick buried deep in initPage() requires that the MSB of the NV Item Id is to
//   43       be reserved for use by this module.
//   44 **************************************************************************************************/
//   45 
//   46 /*********************************************************************
//   47  * INCLUDES
//   48  */
//   49 
//   50 #include "hal_adc.h"
//   51 #include "hal_flash.h"
//   52 #include "hal_types.h"
//   53 #include "ZComdef.h"
//   54 #include "OSAL_Nv.h"
//   55 
//   56 /*********************************************************************
//   57  * CONSTANTS
//   58  */
//   59 
//   60 #define OSAL_NV_PAGE_SIZE       HAL_FLASH_PAGE_SIZE
//   61 #define OSAL_NV_PAGES_USED      HAL_NV_PAGE_CNT
//   62 #define OSAL_NV_PAGE_BEG        HAL_NV_PAGE_BEG
//   63 #define OSAL_NV_PAGE_END       (OSAL_NV_PAGE_BEG + OSAL_NV_PAGES_USED - 1)
//   64 
//   65 #define OSAL_NV_ACTIVE          0x00
//   66 #define OSAL_NV_ERASED          0xFF
//   67 #define OSAL_NV_ERASED_ID       0xFFFF
//   68 #define OSAL_NV_ZEROED_ID       0x0000
//   69 // Reserve MSB of Id to signal a search for the "old" source copy (new write interrupted/failed.)
//   70 #define OSAL_NV_SOURCE_ID       0x8000
//   71 
//   72 #define OSAL_NV_PAGE_FREE       HAL_FLASH_PAGE_SIZE
//   73 
//   74 // In case pages 0-1 are ever used, define a null page value.
//   75 #define OSAL_NV_PAGE_NULL       0
//   76 
//   77 // In case item Id 0 is ever used, define a null item value.
//   78 #define OSAL_NV_ITEM_NULL       0
//   79 
//   80 #define OSAL_NV_WORD_SIZE       HAL_FLASH_WORD_SIZE
//   81 
//   82 #define OSAL_NV_PAGE_HDR_OFFSET 0
//   83 
//   84 /*********************************************************************
//   85  * MACROS
//   86  */
//   87 
//   88 #define  OSAL_NV_CHECK_BUS_VOLTAGE  (HalAdcCheckVdd( HAL_ADC_VDD_LIMIT_4 ))
//   89 
//   90 #define OSAL_NV_DATA_SIZE( LEN )  \ 
//   91    ((((LEN) + OSAL_NV_WORD_SIZE - 1) / OSAL_NV_WORD_SIZE) * OSAL_NV_WORD_SIZE)
//   92 
//   93 #define OSAL_NV_ITEM_SIZE( LEN )  \ 
//   94   (((((LEN) + OSAL_NV_WORD_SIZE - 1) / OSAL_NV_WORD_SIZE) * OSAL_NV_WORD_SIZE) + OSAL_NV_HDR_SIZE)
//   95 
//   96 /*********************************************************************
//   97  * TYPEDEFS
//   98  */
//   99 
//  100 typedef struct
//  101 {
//  102   uint16 id;
//  103   uint16 len;   // Enforce Flash-WORD size on len.
//  104   uint16 chk;   // Byte-wise checksum of the 'len' data bytes of the item.
//  105   uint16 stat;  // Item status.
//  106 } osalNvHdr_t;
//  107 // Struct member offsets.
//  108 #define OSAL_NV_HDR_ID    0
//  109 #define OSAL_NV_HDR_LEN   2
//  110 #define OSAL_NV_HDR_CHK   4
//  111 #define OSAL_NV_HDR_STAT  6
//  112 
//  113 #define OSAL_NV_HDR_ITEM  2  // Length of any item of a header struct.
//  114 #define OSAL_NV_HDR_SIZE  8
//  115 #define OSAL_NV_HDR_HALF (OSAL_NV_HDR_SIZE / 2)
//  116 
//  117 typedef struct
//  118 {
//  119   uint16 active;
//  120   uint16 inUse;
//  121   uint16 xfer;
//  122   uint16 spare;
//  123 } osalNvPgHdr_t;
//  124 // Struct member offsets.
//  125 #define OSAL_NV_PG_ACTIVE 0
//  126 #define OSAL_NV_PG_INUSE  2
//  127 #define OSAL_NV_PG_XFER   4
//  128 #define OSAL_NV_PG_SPARE  6
//  129 
//  130 #define OSAL_NV_PAGE_HDR_SIZE  8
//  131 #define OSAL_NV_PAGE_HDR_HALF (OSAL_NV_PAGE_HDR_SIZE / 2)
//  132 
//  133 typedef enum
//  134 {
//  135   eNvXfer,
//  136   eNvZero
//  137 } eNvHdrEnum;
//  138 
//  139 typedef enum
//  140 {
//  141   ePgActive,
//  142   ePgInUse,
//  143   ePgXfer,
//  144   ePgSpare
//  145 } ePgHdrEnum;
//  146 
//  147 /*********************************************************************
//  148  * EXTERNAL FUNCTIONS
//  149  */
//  150 
//  151 extern bool HalAdcCheckVdd(uint8 limit);
//  152 
//  153 /*********************************************************************
//  154  * GLOBAL VARIABLES
//  155  */
//  156 
//  157 #ifndef OAD_KEEP_NV_PAGES
//  158 // When NV pages are to remain intact during OAD download,
//  159 // the image itself should not include NV pages.
//  160 #pragma location="ZIGNV_ADDRESS_SPACE"

        RSEG ZIGNV_ADDRESS_SPACE:XDATA:REORDER:NOROOT(0)
        DATA8
//  161 __no_init uint8 _nvBuf[OSAL_NV_PAGES_USED * OSAL_NV_PAGE_SIZE];
_nvBuf:
        DS 12288
//  162 #pragma required=_nvBuf
//  163 #pragma location="IEEE_ADDRESS_SPACE"

        RSEG IEEE_ADDRESS_SPACE:XDATA:REORDER:NOROOT(0)
        DATA8
//  164 __no_init uint8 _nvIEEE[Z_EXTADDR_LEN];
_nvIEEE:
        DS 8
        REQUIRE _nvBuf
//  165 #pragma required=_nvIEEE
//  166 #endif // OAD_KEEP_NV_PAGES
//  167 
//  168 /*********************************************************************
//  169  * LOCAL VARIABLES
//  170  */
//  171 
//  172 // Offset into the page of the first available erased space.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  173 static uint16 pgOff[OSAL_NV_PAGES_USED];
pgOff:
        DS 12
        REQUIRE __INIT_XDATA_Z
        REQUIRE _nvIEEE
//  174 
//  175 // Count of the bytes lost for the zeroed-out items.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  176 static uint16 pgLost[OSAL_NV_PAGES_USED];
pgLost:
        DS 12
        REQUIRE __INIT_XDATA_Z
//  177 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  178 static uint8 pgRes;  // Page reserved for item compacting transfer.
pgRes:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  179 
//  180 // Saving ~100 code bytes to move a uint8* parameter/return value from findItem() to a global.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  181 static uint8 findPg;
findPg:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  182 
//  183 /* Immediately before the voltage critical operations of a page erase or
//  184  * a word write, check bus voltage. If less than min, set global flag & abort.
//  185  * Since this is to be done at the lowest level, many void functions would have to be changed to
//  186  * return a value and code added to check that value before proceeding, resulting in a very
//  187  * expensive code size hit for implementing this properly. Therefore, use this global as follows:
//  188  * at the start of osal_nv_item_init/osal_nv_write, set to FALSE, and at the end, before returning,
//  189  * check the value. Thus, the global is an accumulator of any error that occurred in any of the
//  190  * attempts to modify Flash with a low bus voltage during the complicated sequence of events that
//  191  * may occur on any item init or write. This is much more expedient and code saving than adding
//  192  * return values and checking return values to early out. No matter which method is used, an NV
//  193  * data record may end up mangled due to the low VCC conditions. The strategy is that the headers
//  194  * and checksums will detect and allow recovery from such a condition.
//  195  *
//  196  * One unfortunate side-effect of using the global fail flag vice adding and checking return
//  197  * values, is that when setting an item Id to zero has failed due to the low VCC check,
//  198  * the page lost-bytes counter is still updated. Having an artificially high lost-byte
//  199  * count makes it look like there are more bytes to recover from compacting a page than there may
//  200  * actually be. The easy work-around implemented is it to invoke initNV() from osal_nv_item_init or
//  201  * osal_nv_write anytime that the failF gets set - this will re-walk all of the pages and set the
//  202  * page offset count and page lost bytes count to their actual values.
//  203  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  204 static uint8 failF;
failF:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  205 
//  206 /*********************************************************************
//  207  * LOCAL FUNCTIONS
//  208  */
//  209 
//  210 static uint8  initNV( void );
//  211 
//  212 static void   setPageUse( uint8 pg, uint8 inUse );
//  213 static uint16 initPage( uint8 pg, uint16 id, uint8 findDups );
//  214 static void   erasePage( uint8 pg );
//  215 static void   compactPage( uint8 pg );
//  216 
//  217 static uint16 findItem( uint16 id );
//  218 static uint8  initItem( uint8 flag, uint16 id, uint16 len, void *buf );
//  219 static void   setItem( uint8 pg, uint16 offset, eNvHdrEnum stat );
//  220 
//  221 static uint16 calcChkB( uint16 len, uint8 *buf );
//  222 static uint16 calcChkF( byte pg, uint16 offset, uint16 len );
//  223 
//  224 static void   writeWord( uint8 pg, uint16 offset, uint8 *buf );
//  225 static void   writeWordH( uint8 pg, uint16 offset, uint8 *buf );
//  226 static void   writeWordM( uint8 pg, uint16 offset, uint8 *buf, uint16 cnt );
//  227 static void   writeBuf( uint8 pg, uint16 offset, uint16 len, uint8 *buf );
//  228 static void   xferBuf( uint8 srcPg, uint16 srcOff, uint8 dstPg, uint16 dstOff, uint16 len );
//  229 
//  230 static uint8  writeItem( uint8 pg, uint16 id, uint16 len, void *buf, uint8 flag );
//  231 
//  232 /*********************************************************************
//  233  * @fn      initNV
//  234  *
//  235  * @brief   Initialize the NV flash pages.
//  236  *
//  237  * @param   none
//  238  *
//  239  * @return  TRUE
//  240  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  241 static uint8 initNV( void )
initNV:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function initNV
        CODE
//  242 {
        FUNCALL initNV, HalFlashRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL initNV, setPageUse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL initNV, initPage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL initNV, setPageUse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL initNV, compactPage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL initNV, erasePage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL initNV, initNV
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 8
        MOV     A,#-0x8
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
//  243   osalNvPgHdr_t pgHdr;
//  244   uint8 oldPg = OSAL_NV_PAGE_NULL;
        MOV     R7,#0x0
//  245   uint8 newPg = OSAL_NV_PAGE_NULL;
        MOV     ?V0 + 0,R7
//  246   uint8 findDups = FALSE;
        MOV     ?V0 + 1,R7
//  247   uint8 pg;
//  248 
//  249   pgRes = OSAL_NV_PAGE_NULL;
        MOV     DPTR,#pgRes
        CLR     A
        MOVX    @DPTR,A
//  250 
//  251   for ( pg = OSAL_NV_PAGE_BEG; pg <= OSAL_NV_PAGE_END; pg++ )
        MOV     R6,#0x79
//  252   {
//  253     HalFlashRead(pg, OSAL_NV_PAGE_HDR_OFFSET, (uint8 *)(&pgHdr), OSAL_NV_HDR_SIZE);
??initNV_0:
        ; Setup parameters for call to function HalFlashRead
        MOV     ?V0 + 2,#0x8
        MOV     ?V0 + 3,#0x0
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,#0x0
        MOV     R3,#0x0
        MOV     A,R6
        LCALL   ??Subroutine53_0 & 0xFFFF
??CrossCallReturnLabel_116:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
//  254 
//  255     if ( pgHdr.active == OSAL_NV_ERASED_ID )
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        CPL     A
        JNZ     ??initNV_1
        INC     DPTR
        MOVX    A,@DPTR
        CPL     A
??initNV_1:
        JNZ     ??initNV_2
//  256     {
//  257       if ( pgRes == OSAL_NV_PAGE_NULL )
        MOV     DPTR,#pgRes
        MOVX    A,@DPTR
        JNZ     ??initNV_3
//  258       {
//  259         pgRes = pg;
        MOV     A,R6
        MOVX    @DPTR,A
        SJMP    ??initNV_4
//  260       }
//  261       else
//  262       {
//  263         setPageUse( pg, TRUE );
??initNV_3:
        ; Setup parameters for call to function setPageUse
        MOV     R2,#0x1
        MOV     A,R6
        MOV     R1,A
        LCALL   ??setPageUse?relay
        SJMP    ??initNV_4
//  264       }
//  265     }
//  266     else  // Page is active.
//  267     {
//  268       // If the page is not yet in use, it is the tgt of items from an xfer.
//  269       if ( pgHdr.inUse == OSAL_NV_ERASED_ID )
??initNV_2:
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        CPL     A
        JNZ     ??initNV_5
        INC     DPTR
        MOVX    A,@DPTR
        CPL     A
??initNV_5:
        JNZ     ??initNV_6
//  270       {
//  271         newPg = pg;
        MOV     ?V0 + 0,R6
        SJMP    ??initNV_4
//  272       }
//  273       // An Xfer from this page was in progress.
//  274       else if ( pgHdr.xfer != OSAL_NV_ERASED_ID )
??initNV_6:
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        CPL     A
        JNZ     ??initNV_7
        INC     DPTR
        MOVX    A,@DPTR
        CPL     A
??initNV_7:
        JZ      ??initNV_4
//  275       {
//  276         oldPg = pg;
        MOV     A,R6
        MOV     R7,A
//  277       }
//  278     }
//  279 
//  280     // Calculate page offset and lost bytes - any "old" item triggers an N^2 re-scan from start.
//  281     if ( initPage( pg, OSAL_NV_ITEM_NULL, findDups ) != OSAL_NV_ITEM_NULL )
??initNV_4:
        ; Setup parameters for call to function initPage
        MOV     R4,?V0 + 1
        MOV     R2,#0x0
        MOV     R3,#0x0
        MOV     A,R6
        MOV     R1,A
        LCALL   ??initPage?relay
        MOV     ?V0 + 3,R3
        MOV     A,R2
        ORL     A,?V0 + 3
        JZ      ??initNV_8
//  282     {
//  283       findDups = TRUE;
        MOV     ?V0 + 1,#0x1
//  284       pg = OSAL_NV_PAGE_BEG-1;
        MOV     R6,#0x78
//  285       continue;
//  286     }
//  287   }  // for ( pg = OSAL_NV_PAGE_BEG; pg <= OSAL_NV_PAGE_END; pg++ )
??initNV_8:
        INC     R6
        MOV     A,R6
        CLR     C
        SUBB    A,#0x7f
        JNC     $+5
        LJMP    ??initNV_0 & 0xFFFF
//  288 
//  289   /* First the old page is erased, and then the new page is put into use.
//  290    * So if a transfer was in progress, the new page will always not yet be
//  291    * marked as in use, since that is the last step to ending a transfer.
//  292    */
//  293   if ( newPg != OSAL_NV_PAGE_NULL )
        MOV     A,?V0 + 0
        JZ      ??initNV_9
//  294   {
//  295     /* If there is already a fallow page reserved, keep it and put the newPg in use.
//  296      * An unfinished compaction will finish to the new reserve page and the old page
//  297      * will be erased and reserved.
//  298      */
//  299     if ( pgRes != OSAL_NV_PAGE_NULL )
        MOV     DPTR,#pgRes
        MOVX    A,@DPTR
        JZ      ??initNV_10
//  300     {
//  301       setPageUse( newPg, TRUE );
        ; Setup parameters for call to function setPageUse
        MOV     R2,#0x1
        MOV     R1,?V0 + 0
        LCALL   ??setPageUse?relay
//  302     }
//  303     /* If setting old page to 'xfer' failed or board reset before it was effected, there is no way
//  304      * to know which page was the 'old page' - so just reset all NV pages to start clean.
//  305      */
//  306     else if ( oldPg != OSAL_NV_PAGE_NULL )
//  307     {
//  308       pgRes = newPg;
//  309     }
//  310 
//  311     /* If a page compaction was interrupted and the page being compacted is not
//  312      * yet erased, then there may be items remaining to xfer before erasing.
//  313      */
//  314     if ( oldPg != OSAL_NV_PAGE_NULL )
        MOV     A,R7
        JNZ     ??initNV_11
        SJMP    ??initNV_9
??initNV_10:
        MOV     A,R7
        JZ      ??initNV_12
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
//  315     {
//  316       compactPage( oldPg );
??initNV_11:
        ; Setup parameters for call to function compactPage
        MOV     A,R7
        MOV     R1,A
        LCALL   ??compactPage?relay
//  317     }
//  318   }
//  319 
//  320   /* If no page met the criteria to be the reserve page:
//  321    *  - A compactPage() failed or board reset before doing so.
//  322    *  - Perhaps the user changed which Flash pages are dedicated to NV and downloaded the code
//  323    *    without erasing Flash?
//  324    */
//  325   if ( pgRes == OSAL_NV_PAGE_NULL )
??initNV_9:
        MOV     DPTR,#pgRes
        MOVX    A,@DPTR
        JNZ     ??initNV_13
//  326   {
//  327     for ( pg = OSAL_NV_PAGE_BEG; pg <= OSAL_NV_PAGE_END; pg++ )
??initNV_12:
        MOV     R6,#0x79
//  328     {
//  329       erasePage( pg );
??initNV_14:
        ; Setup parameters for call to function erasePage
        MOV     A,R6
        MOV     R1,A
        LCALL   ??erasePage?relay
//  330     }
        INC     R6
        MOV     A,R6
        CLR     C
        SUBB    A,#0x7f
        JC      ??initNV_14
//  331     initNV();
        ; Setup parameters for call to function initNV
        LCALL   ??initNV?relay
//  332   }
//  333 
//  334   return TRUE;
??initNV_13:
        MOV     R1,#0x1
        MOV     A,#0x8
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock0
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0
//  335 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock1
//  336 
//  337 /*********************************************************************
//  338  * @fn      setPageUse
//  339  *
//  340  * @brief   Set page header active/inUse state according to 'inUse'.
//  341  *
//  342  * @param   pg - Valid NV page to verify and init.
//  343  * @param   inUse - Boolean TRUE if inUse, FALSE if only active.
//  344  *
//  345  * @return  none
//  346  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  347 static void setPageUse( uint8 pg, uint8 inUse )
setPageUse:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function setPageUse
        CODE
//  348 {
        FUNCALL setPageUse, writeWord
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 8
        MOV     A,#-0x8
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 17)
        MOV     A,R2
        MOV     R7,A
//  349   osalNvPgHdr_t pgHdr;
//  350 
//  351   pgHdr.active = OSAL_NV_ZEROED_ID;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  352 
//  353   if ( inUse )
        MOV     A,R7
        JZ      ??setPageUse_0
//  354   {
//  355     pgHdr.inUse = OSAL_NV_ZEROED_ID;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        SJMP    ??setPageUse_1
//  356   }
//  357   else
//  358   {
//  359     pgHdr.inUse = OSAL_NV_ERASED_ID;
??setPageUse_0:
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x1
//  360   }
??setPageUse_1:
        LCALL   ??Subroutine45_0 & 0xFFFF
//  361 
//  362   writeWord( pg, OSAL_NV_PAGE_HDR_OFFSET, (uint8*)(&pgHdr) );
??CrossCallReturnLabel_91:
        MOV     R2,#0x0
        MOV     R3,#0x0
        LCALL   ??writeWord?relay
//  363 }
        MOV     A,#0x8
        CFI EndBlock cfiBlock2
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 17)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock3
        REQUIRE ??Subroutine42_0
        ; // Fall through to label ??Subroutine42_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine42_0:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock4
//  364 
//  365 /*********************************************************************
//  366  * @fn      initPage
//  367  *
//  368  * @brief   Walk the page items; calculate checksums, lost bytes & page offset.
//  369  *
//  370  * @param   pg - Valid NV page to verify and init.
//  371  * @param   id - Valid NV item Id to use function as a "findItem".
//  372  *               If set to NULL then just perform the page initialization.
//  373  *
//  374  * @return  If 'id' is non-NULL and good checksums are found, return the offset
//  375  *          of the data corresponding to item Id; else OSAL_NV_ITEM_NULL.
//  376  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  377 static uint16 initPage( uint8 pg, uint16 id, uint8 findDups )
initPage:
        CFI Block cfiBlock5 Using cfiCommon0
        CFI Function initPage
        CODE
//  378 {
        FUNCALL initPage, HalFlashRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL initPage, calcChkF
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL initPage, findItem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL initPage, setItem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL initPage, setItem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 10
        MOV     A,#-0xa
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 26)
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        MOV     ?V0 + 6,R1
        MOV     ?V0 + 7,R4
//  379   uint16 offset = OSAL_NV_PAGE_HDR_SIZE;
        MOV     ?V0 + 2,#0x8
        MOV     ?V0 + 3,#0x0
//  380   uint16 sz, lost = 0;
        MOV     R6,#0x0
        MOV     R7,#0x0
        SJMP    ??initPage_0
//  381   osalNvHdr_t hdr;
//  382 
//  383   do
//  384   {
//  385     HalFlashRead(pg, offset, (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
//  386 
//  387     if ( hdr.id == OSAL_NV_ERASED_ID )
//  388     {
//  389       break;
//  390     }
//  391     offset += OSAL_NV_HDR_SIZE;
//  392     sz = OSAL_NV_DATA_SIZE( hdr.len );
//  393 
//  394     // A bad 'len' write has blown away the rest of the page.
//  395     if ( (offset + sz) > OSAL_NV_PAGE_FREE )
//  396     {
//  397       lost += (OSAL_NV_PAGE_FREE - offset + OSAL_NV_HDR_SIZE);
//  398       offset = OSAL_NV_PAGE_FREE;
//  399       break;
//  400     }
//  401 
//  402     if ( hdr.id != OSAL_NV_ZEROED_ID )
//  403     {
//  404       /* This trick allows function to do double duty for findItem() without
//  405        * compromising its essential functionality at powerup initialization.
//  406        */
//  407       if ( id != OSAL_NV_ITEM_NULL )
//  408       {
//  409         /* This trick allows asking to find the old/transferred item in case
//  410          * of a successful new item write that gets interrupted before the
//  411          * old item can be zeroed out.
//  412          */
//  413         if ( (id & 0x7fff) == hdr.id )
//  414         {
//  415           if ( (((id & OSAL_NV_SOURCE_ID) == 0) && (hdr.stat == OSAL_NV_ERASED_ID)) ||
//  416                (((id & OSAL_NV_SOURCE_ID) != 0) && (hdr.stat != OSAL_NV_ERASED_ID)) )
//  417           {
//  418             return offset;
//  419           }
//  420         }
//  421       }
//  422       // When invoked from the osal_nv_init(), verify checksums and find & zero any duplicates.
//  423       else
//  424       {
//  425         if ( hdr.chk == calcChkF( pg, offset, hdr.len ) )
//  426         {
//  427           if ( findDups )
//  428           {
//  429             if ( hdr.stat == OSAL_NV_ERASED_ID )
//  430             {
//  431               /* The trick of setting the MSB of the item Id causes the logic
//  432                * immediately above to return a valid page only if the header 'stat'
//  433                * indicates that it was the older item being transferred.
//  434                */
//  435               uint16 off = findItem( (hdr.id | OSAL_NV_SOURCE_ID) );
//  436 
//  437               if ( off != OSAL_NV_ITEM_NULL )
//  438               {
//  439                 setItem( findPg, off, eNvZero );  // Mark old duplicate as invalid.
//  440               }
//  441             }
//  442           }
//  443           // Any "old" item immediately exits and triggers the N^2 exhaustive initialization.
//  444           else if ( hdr.stat != OSAL_NV_ERASED_ID )
//  445           {
//  446             return OSAL_NV_ERASED_ID;
//  447           }
//  448         }
//  449         else
//  450         {
//  451           setItem( pg, offset, eNvZero );  // Mark bad checksum as invalid.
//  452           lost += (OSAL_NV_HDR_SIZE + sz);
//  453         }
//  454       }
//  455     }
//  456     else
//  457     {
//  458       lost += (OSAL_NV_HDR_SIZE + sz);
??initPage_1:
        MOV     A,?V0 + 0
        ADD     A,#0x8
        MOV     R0,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,R6
        ADD     A,R0
        MOV     R6,A
        MOV     A,R7
        ADDC    A,R1
        MOV     R7,A
//  459     }
//  460     offset += sz;
??initPage_2:
        MOV     A,?V0 + 2
        ADD     A,?V0 + 0
        MOV     ?V0 + 2,A
        MOV     A,?V0 + 3
        ADDC    A,?V0 + 1
        MOV     ?V0 + 3,A
//  461 
//  462   } while ( TRUE );
??initPage_0:
        ; Setup parameters for call to function HalFlashRead
        MOV     ?V0 + 0,#0x8
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 28)
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        MOV     R1,?V0 + 6
        LCALL   ??Subroutine54_0 & 0xFFFF
??CrossCallReturnLabel_120:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 26)
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        CPL     A
        JNZ     ??initPage_3
        INC     DPTR
        MOVX    A,@DPTR
        CPL     A
??initPage_3:
        JZ      ??initPage_4
        MOV     A,?V0 + 2
        ADD     A,#0x8
        MOV     ?V0 + 2,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     ?V0 + 3,A
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_37:
        LCALL   ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_86:
        MOV     ?V0 + 0,A
        MOV     A,R1
        MOV     ?V0 + 1,A
        MOV     A,?V0 + 2
        ADD     A,?V0 + 0
        MOV     R0,A
        MOV     A,?V0 + 3
        ADDC    A,?V0 + 1
        LCALL   ??Subroutine43_0 & 0xFFFF
??CrossCallReturnLabel_81:
        JC      ??initPage_5
        MOV     A,R6
        ADD     A,#0x8
        MOV     R0,A
        MOV     A,R7
        ADDC    A,#0x8
        MOV     R1,A
        MOV     A,R0
        CLR     C
        SUBB    A,?V0 + 2
        MOV     R6,A
        MOV     A,R1
        SUBB    A,?V0 + 3
        MOV     R7,A
        MOV     ?V0 + 2,#0x0
        MOV     ?V0 + 3,#0x8
//  463 
//  464   pgOff[pg - OSAL_NV_PAGE_BEG] = offset;
??initPage_4:
        MOV     A,?V0 + 6
        LCALL   ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_57:
        MOV     A,?V0 + 2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 3
        LCALL   ?Subroutine8 & 0xFFFF
//  465   pgLost[pg - OSAL_NV_PAGE_BEG] = lost;
??CrossCallReturnLabel_9:
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        MOVX    @DPTR,A
//  466 
//  467   return OSAL_NV_ITEM_NULL;
        MOV     R2,#0x0
        MOV     R3,#0x0
??initPage_6:
        MOV     A,#0xa
        LJMP    ?Subroutine2 & 0xFFFF
??initPage_5:
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_11:
        JNZ     $+5
        LJMP    ??initPage_1 & 0xFFFF
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_12:
        JZ      ??initPage_7
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        INC     DPTR
        MOVX    A,@DPTR
        ANL     A,#0x7f
        MOV     R1,A
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??initPage_8
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??initPage_8:
        JZ      $+5
        LJMP    ??initPage_2 & 0xFFFF
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_44:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        INC     DPTR
        MOVX    A,@DPTR
        ANL     A,#0x80
        JNZ     ??initPage_9
        MOV     A,#-0x1
        XRL     A,R2
        JNZ     ??initPage_10
        MOV     A,#-0x1
        XRL     A,R3
??initPage_10:
        JZ      $+5
        LJMP    ??initPage_2 & 0xFFFF
        SJMP    ??initPage_11
??initPage_9:
        MOV     A,#-0x1
        XRL     A,R2
        JNZ     ??initPage_12
        MOV     A,#-0x1
        XRL     A,R3
??initPage_12:
        JNZ     $+5
        LJMP    ??initPage_2 & 0xFFFF
??initPage_11:
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        SJMP    ??initPage_6
??initPage_7:
        ; Setup parameters for call to function calcChkF
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        MOV     R1,?V0 + 6
        LCALL   ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_59:
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??initPage_13
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??initPage_13:
        JNZ     ??initPage_14
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine49_0 & 0xFFFF
??CrossCallReturnLabel_98:
        MOV     A,?V0 + 7
        JZ      ??initPage_15
        MOV     A,#-0x1
        XRL     A,R0
        JNZ     ??initPage_16
        MOV     A,#-0x1
        XRL     A,R1
??initPage_16:
        JZ      $+5
        LJMP    ??initPage_2 & 0xFFFF
        ; Setup parameters for call to function findItem
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ORL     A,#0x80
        MOV     R3,A
        LCALL   ??findItem?relay
        MOV     A,R2
        ORL     A,R3
        JNZ     $+5
        LJMP    ??initPage_2 & 0xFFFF
        ; Setup parameters for call to function setItem
        MOV     R4,#0x1
        MOV     DPTR,#findPg
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??setItem?relay
        LJMP    ??initPage_2 & 0xFFFF
??initPage_15:
        MOV     A,#-0x1
        XRL     A,R0
        JNZ     ??initPage_17
        MOV     A,#-0x1
        XRL     A,R1
??initPage_17:
        JNZ     $+5
        LJMP    ??initPage_2 & 0xFFFF
        MOV     R2,#-0x1
        MOV     R3,#-0x1
        LJMP    ??initPage_6 & 0xFFFF
??initPage_14:
        ; Setup parameters for call to function setItem
        MOV     R4,#0x1
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        MOV     R1,?V0 + 6
        LCALL   ??setItem?relay
        LJMP    ??initPage_1 & 0xFFFF
        CFI EndBlock cfiBlock5
//  468 }
//  469 
//  470 /*********************************************************************
//  471  * @fn      erasePage
//  472  *
//  473  * @brief   Erases a page in Flash.
//  474  *
//  475  * @param   pg - Valid NV page to erase.
//  476  *
//  477  * @return  none
//  478  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  479 static void erasePage( uint8 pg )
erasePage:
        CFI Block cfiBlock6 Using cfiCommon0
        CFI Function erasePage
        CODE
//  480 {
        FUNCALL erasePage, HalAdcCheckVdd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL erasePage, HalFlashErase
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  481   if ( !OSAL_NV_CHECK_BUS_VOLTAGE )
        ; Setup parameters for call to function HalAdcCheckVdd
        MOV     R1,#0x4
        LCALL   ??HalAdcCheckVdd?relay
        MOV     A,R1
        JNZ     ??erasePage_0
//  482   {
//  483     failF = TRUE;
        MOV     DPTR,#failF
        MOV     A,#0x1
        SJMP    ??erasePage_1
//  484     return;
//  485   }
//  486 
//  487   HalFlashErase(pg);
??erasePage_0:
        ; Setup parameters for call to function HalFlashErase
        MOV     A,R6
        MOV     R1,A
        LCALL   ??HalFlashErase?relay
//  488 
//  489   pgOff[pg - OSAL_NV_PAGE_BEG] = OSAL_NV_PAGE_HDR_SIZE;
        MOV     A,R6
        LCALL   ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_58:
        MOV     A,#0x8
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        LCALL   ?Subroutine8 & 0xFFFF
//  490   pgLost[pg - OSAL_NV_PAGE_BEG] = 0;
??CrossCallReturnLabel_10:
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
??erasePage_1:
        MOVX    @DPTR,A
//  491 }
        LJMP    ??Subroutine42_0 & 0xFFFF
        CFI EndBlock cfiBlock6

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine29:
        CFI Block cfiCond7 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_57
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 26)
        CFI Block cfiCond8 Using cfiCommon0
        CFI (cfiCond8) NoFunction
        CFI (cfiCond8) Conditional ??CrossCallReturnLabel_58
        CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond8) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond8) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond8) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond8) CFA_SP SP+0
        CFI (cfiCond8) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker9 Using cfiCommon1
        CFI (cfiPicker9) NoFunction
        CFI (cfiPicker9) Picker
        LCALL   ?Subroutine39 & 0xFFFF
??CrossCallReturnLabel_78:
        RET
        CFI EndBlock cfiCond7
        CFI EndBlock cfiCond8
        CFI EndBlock cfiPicker9

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiCond10 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_9
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 26)
        CFI Block cfiCond11 Using cfiCommon0
        CFI (cfiCond11) NoFunction
        CFI (cfiCond11) Conditional ??CrossCallReturnLabel_10
        CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond11) CFA_SP SP+0
        CFI (cfiCond11) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker12 Using cfiCommon1
        CFI (cfiPicker12) NoFunction
        CFI (cfiPicker12) Picker
        MOVX    @DPTR,A
        LCALL   ?Subroutine40 & 0xFFFF
??CrossCallReturnLabel_80:
        RET
        CFI EndBlock cfiCond10
        CFI EndBlock cfiCond11
        CFI EndBlock cfiPicker12

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine40:
        CFI Block cfiCond13 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_80, ??CrossCallReturnLabel_9
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 26)
        CFI Block cfiCond14 Using cfiCommon0
        CFI (cfiCond14) NoFunction
        CFI (cfiCond14) Conditional ??CrossCallReturnLabel_80, ??CrossCallReturnLabel_10
        CFI (cfiCond14) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond14) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond14) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond14) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond14) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond14) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond14) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond14) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond14) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond14) CFA_SP SP+0
        CFI (cfiCond14) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond15 Using cfiCommon0
        CFI (cfiCond15) NoFunction
        CFI (cfiCond15) Conditional ??CrossCallReturnLabel_79
        CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond15) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond15) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond15) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond15) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond15) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond15) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond15) CFA_SP SP+0
        CFI (cfiCond15) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiPicker16 Using cfiCommon1
        CFI (cfiPicker16) NoFunction
        CFI (cfiPicker16) Picker
        MOV     A,#(pgLost + 14) & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#((pgLost - 242) >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        RET
        CFI EndBlock cfiCond13
        CFI EndBlock cfiCond14
        CFI EndBlock cfiCond15
        CFI EndBlock cfiPicker16
//  492 
//  493 /*********************************************************************
//  494  * @fn      compactPage
//  495  *
//  496  * @brief   Compacts the page specified.
//  497  *
//  498  * @param   srcPg - Valid NV page to erase.
//  499  *
//  500  * @return  none
//  501  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  502 static void compactPage( uint8 srcPg )
compactPage:
        CFI Block cfiBlock17 Using cfiCommon0
        CFI Function compactPage
        CODE
//  503 {
        FUNCALL compactPage, writeWordH
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL compactPage, calcChkF
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL compactPage, setItem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL compactPage, writeBuf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL compactPage, xferBuf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL compactPage, setItem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL compactPage, HalFlashRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL compactPage, erasePage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL compactPage, setPageUse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 10
        MOV     A,#-0xa
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 24)
        MOV     A,R1
        MOV     R6,A
//  504   uint16 dstOff = pgOff[pgRes-OSAL_NV_PAGE_BEG];
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_16:
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
//  505   uint16 srcOff = OSAL_NV_ZEROED_ID;
        LCALL   ?Subroutine6 & 0xFFFF
//  506   osalNvHdr_t hdr;
//  507 
//  508   // Mark page as being in process of compaction.
//  509   writeWordH( srcPg, OSAL_NV_PG_XFER, (uint8*)(&srcOff) );
??CrossCallReturnLabel_89:
        MOV     R2,#0x4
        MOV     R3,A
        MOV     A,R6
        MOV     R1,A
        LCALL   ??writeWordH?relay
//  510 
//  511   srcOff = OSAL_NV_PAGE_HDR_SIZE;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x8
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        LJMP    ??compactPage_0 & 0xFFFF
//  512 
//  513   do
//  514   {
//  515     uint16 sz;
//  516     HalFlashRead(srcPg, srcOff, (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
//  517 
//  518     if ( hdr.id == OSAL_NV_ERASED_ID )
//  519     {
//  520       break;
//  521     }
//  522 
//  523     srcOff += OSAL_NV_HDR_SIZE;
//  524 
//  525     if ( (srcOff + hdr.len) > OSAL_NV_PAGE_FREE )
//  526     {
//  527       break;
//  528     }
//  529 
//  530     sz = OSAL_NV_DATA_SIZE( hdr.len );
??compactPage_1:
        LCALL   ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_87:
        MOV     ?V0 + 2,A
        MOV     A,R1
        MOV     ?V0 + 3,A
//  531 
//  532     if ( hdr.id != OSAL_NV_ZEROED_ID )
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_13:
        JZ      ??CrossCallReturnLabel_29
//  533     {
//  534       if ( hdr.chk == calcChkF( srcPg, srcOff, hdr.len ) )
        ; Setup parameters for call to function calcChkF
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_41:
        MOV     R1,A
        LCALL   ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_60:
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??compactPage_2
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??compactPage_2:
        JNZ     ??compactPage_3
//  535       {
//  536         setItem( srcPg, srcOff, eNvXfer );
        ; Setup parameters for call to function setItem
        MOV     R4,#0x0
        LCALL   ?Subroutine16 & 0xFFFF
//  537         writeBuf( pgRes, dstOff, OSAL_NV_HDR_SIZE, (byte *)(&hdr) );
??CrossCallReturnLabel_28:
        ; Setup parameters for call to function writeBuf
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 4,DPL
        MOV     ?V0 + 5,DPH
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 26)
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     DPTR,#pgRes
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??writeBuf?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 24)
//  538         dstOff += OSAL_NV_HDR_SIZE;
        LCALL   ?Subroutine27 & 0xFFFF
//  539         xferBuf( srcPg, srcOff, pgRes, dstOff, sz );
??CrossCallReturnLabel_53:
        ; Setup parameters for call to function xferBuf
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 26)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 28)
        MOV     DPTR,#pgRes
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_42:
        MOV     R1,A
        LCALL   ??xferBuf?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 24)
//  540         dstOff += sz;
        MOV     A,?V0 + 0
        ADD     A,?V0 + 2
        MOV     ?V0 + 0,A
        MOV     A,?V0 + 1
        ADDC    A,?V0 + 3
        MOV     ?V0 + 1,A
//  541       }
//  542 
//  543       setItem( srcPg, srcOff, eNvZero );  // Mark old location as invalid.
??compactPage_3:
        ; Setup parameters for call to function setItem
        MOV     R4,#0x1
        LCALL   ?Subroutine16 & 0xFFFF
//  544     }
//  545 
//  546     srcOff += sz;
??CrossCallReturnLabel_29:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        ADD     A,?V0 + 2
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,?V0 + 3
??compactPage_0:
        MOVX    @DPTR,A
//  547 
//  548   } while ( TRUE );
        ; Setup parameters for call to function HalFlashRead
        MOV     ?V0 + 2,#0x8
        MOV     ?V0 + 3,#0x0
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 26)
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_43:
        LCALL   ??Subroutine53_0 & 0xFFFF
??CrossCallReturnLabel_117:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 24)
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        CPL     A
        JNZ     ??compactPage_4
        INC     DPTR
        MOVX    A,@DPTR
        CPL     A
??compactPage_4:
        JZ      ??compactPage_5
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        ADD     A,#0x8
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOVX    @DPTR,A
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_38:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        ADD     A,R4
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R5
        LCALL   ??Subroutine43_0 & 0xFFFF
??CrossCallReturnLabel_82:
        JNC     $+5
        LJMP    ??compactPage_1 & 0xFFFF
//  549 
//  550   pgOff[pgRes-OSAL_NV_PAGE_BEG] = dstOff;
??compactPage_5:
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_17:
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 1
        MOVX    @DPTR,A
//  551 
//  552   /* In order to recover from a page compaction that is interrupted,
//  553    * the logic in osal_nv_init() depends upon the following order:
//  554    * 1. Compacted page is erased.
//  555    * 2. State of the target of compaction is changed ePgActive to ePgInUse.
//  556    */
//  557   erasePage( srcPg );
        ; Setup parameters for call to function erasePage
        MOV     A,R6
        MOV     R1,A
        LCALL   ??erasePage?relay
//  558 
//  559   // Mark the reserve page as being in use.
//  560   setPageUse( pgRes, TRUE );
        ; Setup parameters for call to function setPageUse
        MOV     R2,#0x1
        MOV     DPTR,#pgRes
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??setPageUse?relay
//  561 
//  562   // Set the reserve page to be the newly erased page.
//  563   pgRes = srcPg;
        MOV     A,R6
        MOV     DPTR,#pgRes
        MOVX    @DPTR,A
//  564 }
        MOV     A,#0xa
        LJMP    ?Subroutine3 & 0xFFFF
        CFI EndBlock cfiBlock17

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine31:
        CFI Block cfiCond18 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_83
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond19 Using cfiCommon0
        CFI (cfiCond19) NoFunction
        CFI (cfiCond19) Conditional ??CrossCallReturnLabel_84
        CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond19) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond19) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond19) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond19) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond19) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond19) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond19) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond19) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond19) CFA_SP SP+0
        CFI (cfiCond19) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker20 Using cfiCommon1
        CFI (cfiPicker20) NoFunction
        CFI (cfiPicker20) Picker
        ADDC    A,R3
        CFI EndBlock cfiCond18
        CFI EndBlock cfiCond19
        CFI EndBlock cfiPicker20
        REQUIRE ??Subroutine43_0
        ; // Fall through to label ??Subroutine43_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine43_0:
        CFI Block cfiCond21 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_81
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 26)
        CFI Block cfiCond22 Using cfiCommon0
        CFI (cfiCond22) NoFunction
        CFI (cfiCond22) Conditional ??CrossCallReturnLabel_82
        CFI (cfiCond22) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond22) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond22) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond22) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond22) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond22) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond22) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond22) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond22) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond22) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond22) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond22) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond22) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond22) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond22) CFA_SP SP+0
        CFI (cfiCond22) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond23 Using cfiCommon0
        CFI (cfiCond23) NoFunction
        CFI (cfiCond23) Conditional ??CrossCallReturnLabel_83
        CFI (cfiCond23) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond23) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond23) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond23) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond23) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond23) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond23) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond23) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond23) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond23) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond23) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond23) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond23) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond23) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond23) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond23) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond23) CFA_SP SP+0
        CFI (cfiCond23) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond24 Using cfiCommon0
        CFI (cfiCond24) NoFunction
        CFI (cfiCond24) Conditional ??CrossCallReturnLabel_84
        CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond24) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond24) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond24) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond24) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond24) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond24) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond24) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond24) CFA_SP SP+0
        CFI (cfiCond24) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker25 Using cfiCommon1
        CFI (cfiPicker25) NoFunction
        CFI (cfiPicker25) Picker
        MOV     R1,A
        CLR     C
        MOV     A,R0
        SUBB    A,#0x1
        MOV     A,R1
        SUBB    A,#0x8
        RET
        CFI EndBlock cfiCond21
        CFI EndBlock cfiCond22
        CFI EndBlock cfiCond23
        CFI EndBlock cfiCond24
        CFI EndBlock cfiPicker25

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine30:
        CFI Block cfiCond26 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_59
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 26)
        CFI Block cfiCond27 Using cfiCommon0
        CFI (cfiCond27) NoFunction
        CFI (cfiCond27) Conditional ??CrossCallReturnLabel_60
        CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond27) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond27) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond27) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond27) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond27) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond27) CFA_SP SP+0
        CFI (cfiCond27) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiPicker28 Using cfiCommon1
        CFI (cfiPicker28) NoFunction
        CFI (cfiPicker28) Picker
        LCALL   ??calcChkF?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     R0,?V0 + 4
        MOV     R1,?V0 + 5
        MOV     A,#0x6
        RET
        CFI EndBlock cfiCond26
        CFI EndBlock cfiCond27
        CFI EndBlock cfiPicker28

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine26:
        CFI Block cfiCond29 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_86
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 26)
        CFI Block cfiCond30 Using cfiCommon0
        CFI (cfiCond30) NoFunction
        CFI (cfiCond30) Conditional ??CrossCallReturnLabel_87
        CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond30) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond30) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond30) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond30) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond30) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond30) CFA_SP SP+0
        CFI (cfiCond30) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond31 Using cfiCommon0
        CFI (cfiCond31) NoFunction
        CFI (cfiCond31) Conditional ??CrossCallReturnLabel_88
        CFI (cfiCond31) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond31) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond31) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond31) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond31) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond31) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond31) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond31) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond31) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond31) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond31) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond31) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond31) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond31) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond31) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond31) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond31) CFA_SP SP+0
        CFI (cfiCond31) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker32 Using cfiCommon1
        CFI (cfiPicker32) NoFunction
        CFI (cfiPicker32) Picker
        MOV     A,R4
        ADD     A,#0x3
        MOV     R0,A
        MOV     A,R5
        CFI EndBlock cfiCond29
        CFI EndBlock cfiCond30
        CFI EndBlock cfiCond31
        CFI EndBlock cfiPicker32
        REQUIRE ??Subroutine44_0
        ; // Fall through to label ??Subroutine44_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine44_0:
        CFI Block cfiCond33 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_85
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond34 Using cfiCommon0
        CFI (cfiCond34) NoFunction
        CFI (cfiCond34) Conditional ??CrossCallReturnLabel_86
        CFI (cfiCond34) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond34) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond34) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond34) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond34) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond34) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond34) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond34) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond34) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond34) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond34) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond34) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond34) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond34) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond34) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond34) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond34) CFA_SP SP+0
        CFI (cfiCond34) CFA_XSP16 add(XSP16, 26)
        CFI Block cfiCond35 Using cfiCommon0
        CFI (cfiCond35) NoFunction
        CFI (cfiCond35) Conditional ??CrossCallReturnLabel_87
        CFI (cfiCond35) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond35) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond35) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond35) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond35) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond35) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond35) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond35) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond35) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond35) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond35) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond35) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond35) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond35) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond35) CFA_SP SP+0
        CFI (cfiCond35) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond36 Using cfiCommon0
        CFI (cfiCond36) NoFunction
        CFI (cfiCond36) Conditional ??CrossCallReturnLabel_88
        CFI (cfiCond36) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond36) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond36) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond36) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond36) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond36) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond36) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond36) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond36) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond36) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond36) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond36) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond36) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond36) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond36) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond36) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond36) CFA_SP SP+0
        CFI (cfiCond36) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker37 Using cfiCommon1
        CFI (cfiPicker37) NoFunction
        CFI (cfiPicker37) Picker
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,R0
        ANL     A,#0xfc
        RET
        CFI EndBlock cfiCond33
        CFI EndBlock cfiCond34
        CFI EndBlock cfiCond35
        CFI EndBlock cfiCond36
        CFI EndBlock cfiPicker37

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine21:
        CFI Block cfiCond38 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_41
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond39 Using cfiCommon0
        CFI (cfiCond39) NoFunction
        CFI (cfiCond39) Conditional ??CrossCallReturnLabel_42
        CFI (cfiCond39) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond39) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond39) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond39) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond39) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond39) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond39) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond39) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond39) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond39) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond39) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond39) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond39) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond39) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond39) CFA_SP SP+0
        CFI (cfiCond39) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond40 Using cfiCommon0
        CFI (cfiCond40) NoFunction
        CFI (cfiCond40) Conditional ??CrossCallReturnLabel_43
        CFI (cfiCond40) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond40) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond40) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond40) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond40) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond40) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond40) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond40) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond40) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond40) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond40) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond40) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond40) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond40) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond40) CFA_SP SP+0
        CFI (cfiCond40) CFA_XSP16 add(XSP16, 26)
        CFI Block cfiPicker41 Using cfiCommon1
        CFI (cfiPicker41) NoFunction
        CFI (cfiPicker41) Picker
        LCALL   ?Subroutine37 & 0xFFFF
??CrossCallReturnLabel_73:
        MOV     A,R6
        RET
        CFI EndBlock cfiCond38
        CFI EndBlock cfiCond39
        CFI EndBlock cfiCond40
        CFI EndBlock cfiPicker41

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine16:
        CFI Block cfiCond42 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_28
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond43 Using cfiCommon0
        CFI (cfiCond43) NoFunction
        CFI (cfiCond43) Conditional ??CrossCallReturnLabel_29
        CFI (cfiCond43) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond43) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond43) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond43) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond43) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond43) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond43) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond43) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond43) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond43) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond43) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond43) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond43) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond43) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond43) CFA_SP SP+0
        CFI (cfiCond43) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiPicker44 Using cfiCommon1
        CFI (cfiPicker44) NoFunction
        CFI (cfiPicker44) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine37 & 0xFFFF
??CrossCallReturnLabel_71:
        MOV     A,R6
        MOV     R1,A
        LCALL   ??setItem?relay
        RET
        CFI EndBlock cfiCond42
        CFI EndBlock cfiCond43
        CFI EndBlock cfiPicker44

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
        CFI Block cfiCond45 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_16
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond46 Using cfiCommon0
        CFI (cfiCond46) NoFunction
        CFI (cfiCond46) Conditional ??CrossCallReturnLabel_17
        CFI (cfiCond46) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond46) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond46) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond46) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond46) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond46) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond46) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond46) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond46) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond46) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond46) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond46) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond46) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond46) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond46) CFA_SP SP+0
        CFI (cfiCond46) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiPicker47 Using cfiCommon1
        CFI (cfiPicker47) NoFunction
        CFI (cfiPicker47) Picker
        MOV     DPTR,#pgRes
        MOVX    A,@DPTR
        LCALL   ?Subroutine39 & 0xFFFF
??CrossCallReturnLabel_77:
        RET
        CFI EndBlock cfiCond45
        CFI EndBlock cfiCond46
        CFI EndBlock cfiPicker47

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine39:
        CFI Block cfiCond48 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_78, ??CrossCallReturnLabel_57
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 26)
        CFI Block cfiCond49 Using cfiCommon0
        CFI (cfiCond49) NoFunction
        CFI (cfiCond49) Conditional ??CrossCallReturnLabel_78, ??CrossCallReturnLabel_58
        CFI (cfiCond49) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond49) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond49) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond49) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond49) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond49) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond49) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond49) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond49) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond49) CFA_SP SP+0
        CFI (cfiCond49) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond50 Using cfiCommon0
        CFI (cfiCond50) NoFunction
        CFI (cfiCond50) Conditional ??CrossCallReturnLabel_77, ??CrossCallReturnLabel_16
        CFI (cfiCond50) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond50) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond50) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond50) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond50) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond50) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond50) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond50) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond50) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond50) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond50) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond50) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond50) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond50) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond50) CFA_SP SP+0
        CFI (cfiCond50) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond51 Using cfiCommon0
        CFI (cfiCond51) NoFunction
        CFI (cfiCond51) Conditional ??CrossCallReturnLabel_77, ??CrossCallReturnLabel_17
        CFI (cfiCond51) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond51) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond51) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond51) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond51) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond51) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond51) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond51) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond51) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond51) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond51) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond51) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond51) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond51) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond51) CFA_SP SP+0
        CFI (cfiCond51) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiPicker52 Using cfiCommon1
        CFI (cfiPicker52) NoFunction
        CFI (cfiPicker52) Picker
        CLR     C
        RLC     A
        MOV     R0,A
        CLR     A
        RLC     A
        MOV     R1,A
        MOV     A,#(pgOff + 14) & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#((pgOff - 242) >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        RET
        CFI EndBlock cfiCond48
        CFI EndBlock cfiCond49
        CFI EndBlock cfiCond50
        CFI EndBlock cfiCond51
        CFI EndBlock cfiPicker52

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond53 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_89
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond54 Using cfiCommon0
        CFI (cfiCond54) NoFunction
        CFI (cfiCond54) Conditional ??CrossCallReturnLabel_90
        CFI (cfiCond54) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond54) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond54) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond54) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond54) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond54) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond54) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond54) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond54) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond54) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond54) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond54) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond54) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond54) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond54) CFA_SP SP+0
        CFI (cfiCond54) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiPicker55 Using cfiCommon1
        CFI (cfiPicker55) NoFunction
        CFI (cfiPicker55) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        CFI EndBlock cfiCond53
        CFI EndBlock cfiCond54
        CFI EndBlock cfiPicker55
        REQUIRE ??Subroutine45_0
        ; // Fall through to label ??Subroutine45_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine45_0:
        CFI Block cfiCond56 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_91
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond57 Using cfiCommon0
        CFI (cfiCond57) NoFunction
        CFI (cfiCond57) Conditional ??CrossCallReturnLabel_89
        CFI (cfiCond57) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond57) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond57) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond57) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond57) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond57) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond57) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond57) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond57) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond57) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond57) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond57) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond57) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond57) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond57) CFA_SP SP+0
        CFI (cfiCond57) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond58 Using cfiCommon0
        CFI (cfiCond58) NoFunction
        CFI (cfiCond58) Conditional ??CrossCallReturnLabel_90
        CFI (cfiCond58) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond58) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond58) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond58) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond58) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond58) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond58) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond58) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond58) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond58) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond58) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond58) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond58) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond58) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond58) CFA_SP SP+0
        CFI (cfiCond58) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiPicker59 Using cfiCommon1
        CFI (cfiPicker59) NoFunction
        CFI (cfiPicker59) Picker
        MOVX    @DPTR,A
        INC     DPTR
        CFI EndBlock cfiCond56
        CFI EndBlock cfiCond57
        CFI EndBlock cfiCond58
        CFI EndBlock cfiPicker59
        REQUIRE ??Subroutine46_0
        ; // Fall through to label ??Subroutine46_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine46_0:
        CFI Block cfiCond60 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_92
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond61 Using cfiCommon0
        CFI (cfiCond61) NoFunction
        CFI (cfiCond61) Conditional ??CrossCallReturnLabel_91
        CFI (cfiCond61) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond61) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond61) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond61) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond61) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond61) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond61) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond61) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond61) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond61) CFA_SP SP+0
        CFI (cfiCond61) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond62 Using cfiCommon0
        CFI (cfiCond62) NoFunction
        CFI (cfiCond62) Conditional ??CrossCallReturnLabel_89
        CFI (cfiCond62) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond62) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond62) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond62) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond62) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond62) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond62) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond62) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond62) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond62) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond62) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond62) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond62) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond62) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond62) CFA_SP SP+0
        CFI (cfiCond62) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond63 Using cfiCommon0
        CFI (cfiCond63) NoFunction
        CFI (cfiCond63) Conditional ??CrossCallReturnLabel_90
        CFI (cfiCond63) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond63) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond63) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond63) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond63) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond63) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond63) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond63) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond63) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond63) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond63) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond63) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond63) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond63) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond63) CFA_SP SP+0
        CFI (cfiCond63) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiPicker64 Using cfiCommon1
        CFI (cfiPicker64) NoFunction
        CFI (cfiPicker64) Picker
        MOVX    @DPTR,A
        ; Setup parameters for call to function writeWordH
        ; Setup parameters for call to function writeWord
        ; Setup parameters for call to function writeWord
        ; Setup parameters for call to function writeWord
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        RET
        CFI EndBlock cfiCond60
        CFI EndBlock cfiCond61
        CFI EndBlock cfiCond62
        CFI EndBlock cfiCond63
        CFI EndBlock cfiPicker64
//  565 
//  566 /*********************************************************************
//  567  * @fn      findItem
//  568  *
//  569  * @brief   Find an item Id in NV and return the page and offset to its data.
//  570  *
//  571  * @param   id - Valid NV item Id.
//  572  *
//  573  * @return  Offset of data corresponding to item Id, if found;
//  574  *          otherwise OSAL_NV_ITEM_NULL.
//  575  *
//  576  *          The page containing the item, if found;
//  577  *          otherwise no valid assignment made - left equal to item Id.
//  578  *
//  579  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  580 static uint16 findItem( uint16 id )
findItem:
        CFI Block cfiBlock65 Using cfiCommon0
        CFI Function findItem
        CODE
//  581 {
        FUNCALL findItem, initPage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        SJMP    ??findItem_0
//  582   uint16 off;
//  583   uint8 pg;
//  584 
//  585   for ( pg = OSAL_NV_PAGE_BEG; pg <= OSAL_NV_PAGE_END; pg++ )
//  586   {
//  587     if ( (off = initPage( pg, id, FALSE )) != OSAL_NV_ITEM_NULL )
//  588     {
//  589       findPg = pg;
//  590       return off;
//  591     }
//  592   }
//  593 
//  594   // Now attempt to find the item as the "old" item of a failed/interrupted NV write.
//  595   if ( (id & OSAL_NV_SOURCE_ID) == 0 )
//  596   {
//  597     return findItem( id | OSAL_NV_SOURCE_ID );
??findItem_1:
        MOV     A,#-0x80
        ORL     A,R7
??findItem_0:
        MOV     R7,A
//  598   }
        MOV     ?V0 + 0,#0x79
??findItem_2:
        ; Setup parameters for call to function initPage
        MOV     R4,#0x0
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     R1,?V0 + 0
        LCALL   ??initPage?relay
        MOV     ?V0 + 3,R3
        MOV     R1,?V0 + 3
        MOV     A,R2
        ORL     A,R1
        JZ      ??findItem_3
        MOV     A,?V0 + 0
        MOV     DPTR,#findPg
        MOVX    @DPTR,A
        SJMP    ??findItem_4
??findItem_3:
        INC     ?V0 + 0
        MOV     A,?V0 + 0
        CLR     C
        SUBB    A,#0x7f
        JC      ??findItem_2
        MOV     A,R7
        ANL     A,#0x80
        JZ      ??findItem_1
//  599   else
//  600   {
//  601     findPg = OSAL_NV_PAGE_NULL;
        MOV     DPTR,#findPg
        CLR     A
        MOVX    @DPTR,A
//  602     return OSAL_NV_ITEM_NULL;
        MOV     R2,A
        MOV     R3,A
//  603   }
??findItem_4:
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock65
//  604 }
//  605 
//  606 /*********************************************************************
//  607  * @fn      initItem
//  608  *
//  609  * @brief   An NV item is created and initialized with the data passed to the function, if any.
//  610  *
//  611  * @param   id  - Valid NV item Id.
//  612  * @param   len - Item data length.
//  613  * @param  *buf - Pointer to item initalization data. Set to NULL if none.
//  614  *
//  615  * @return  TRUE if item write and read back checksums ok; FALSE otherwise.
//  616  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  617 static uint8 initItem( uint8 flag, uint16 id, uint16 len, void *buf )
initItem:
        CFI Block cfiBlock66 Using cfiCommon0
        CFI Function initItem
        CODE
//  618 {
        FUNCALL initItem, writeItem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL initItem, compactPage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV     ?V0 + 0,R1
        MOV     ?V0 + 6,R2
        MOV     ?V0 + 7,R3
//  619   uint16 sz = OSAL_NV_ITEM_SIZE( len );
        LCALL   ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_88:
        ADD     A,#0x8
        MOV     R2,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R3,A
//  620   uint8 rtrn = FALSE;
        MOV     ?V0 + 1,#0x0
//  621   uint8 cnt = OSAL_NV_PAGES_USED;
        MOV     ?V0 + 4,#0x6
//  622   uint8 pg = pgRes+1;  // Set to 1 after the reserve page to even wear across all available pages.
        MOV     DPTR,#pgRes
        MOVX    A,@DPTR
        INC     A
        MOV     R7,A
//  623   uint8 idx;
//  624 
//  625   do {
//  626     if (pg >= OSAL_NV_PAGE_BEG+OSAL_NV_PAGES_USED)
??initItem_0:
        MOV     A,R7
        CLR     C
        SUBB    A,#0x7f
        JC      ??initItem_1
//  627     {
//  628       pg = OSAL_NV_PAGE_BEG;
        MOV     R7,#0x79
//  629     }
//  630     if ( pg != pgRes )
??initItem_1:
        MOV     DPTR,#pgRes
        MOVX    A,@DPTR
        XRL     A,R7
        JZ      ??initItem_2
//  631     {
//  632       idx = pg - OSAL_NV_PAGE_BEG;
        MOV     A,#-0x79
        ADD     A,R7
        MOV     R6,A
//  633       if ( (pgOff[idx] - pgLost[idx] + sz) <= OSAL_NV_PAGE_FREE )
        CLR     C
        RLC     A
        MOV     R0,A
        CLR     A
        RLC     A
        MOV     R1,A
        MOV     A,#pgOff & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(pgOff >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        LCALL   ?Subroutine18 & 0xFFFF
//  634       {
//  635         break;
//  636       }
//  637     }
??CrossCallReturnLabel_32:
        MOV     A,#pgLost & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(pgLost >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        LCALL   ??Subroutine49_0 & 0xFFFF
??CrossCallReturnLabel_99:
        MOV     A,?V0 + 2
        CLR     C
        SUBB    A,R0
        MOV     R0,A
        MOV     A,?V0 + 3
        SUBB    A,R1
        MOV     R1,A
        MOV     A,R0
        ADD     A,R2
        MOV     R0,A
        MOV     A,R1
        LCALL   ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_83:
        JC      ??initItem_3
//  638     pg++;
??initItem_2:
        INC     R7
//  639   } while (--cnt);
        DEC     ?V0 + 4
        MOV     A,?V0 + 4
        JNZ     ??initItem_0
        SJMP    ??initItem_4
//  640 
//  641   if (cnt)
??initItem_3:
        MOV     A,?V0 + 4
        JZ      ??initItem_4
//  642   {
//  643     // Item fits if an old page is compacted.
//  644     if ( (pgOff[idx] + sz) > OSAL_NV_PAGE_FREE )
        MOV     A,?V0 + 2
        ADD     A,R2
        MOV     R0,A
        MOV     A,?V0 + 3
        LCALL   ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_84:
        JC      ??initItem_5
//  645     {
//  646       pg = pgRes;
        MOV     DPTR,#pgRes
        MOVX    A,@DPTR
        MOV     R7,A
//  647     }
//  648 
//  649     // New item is the first one written to the reserved page, then the old page is compacted.
//  650     rtrn = writeItem( pg, id, len, buf, flag );
??initItem_5:
        ; Setup parameters for call to function writeItem
        MOV     A,?V0 + 0
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 1
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 17)
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?PUSH_XSTACK8_X_TWO
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     R2,?V0 + 6
        MOV     R3,?V0 + 7
        MOV     A,R7
        MOV     R1,A
        LCALL   ??writeItem?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     A,R1
        MOV     ?V0 + 1,A
//  651 
//  652     if ( pg == pgRes )
        MOV     DPTR,#pgRes
        MOVX    A,@DPTR
        XRL     A,R7
        JNZ     ??initItem_4
//  653     {
//  654       if ( flag )
        MOV     A,#0x79
        ADD     A,R6
        MOV     R1,A
        MOV     A,?V0 + 0
        JZ      ??initItem_6
//  655       {
//  656         compactPage( OSAL_NV_PAGE_BEG+idx );
        ; Setup parameters for call to function compactPage
        LCALL   ??compactPage?relay
        SJMP    ??initItem_4
//  657       }
//  658       else
//  659       {
//  660         *(uint8 *)buf = OSAL_NV_PAGE_BEG+idx;
??initItem_6:
        MOV     A,#0x10
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine14 & 0xFFFF
//  661       }
//  662     }
//  663   }
??CrossCallReturnLabel_23:
        MOV     A,R1
        MOVX    @DPTR,A
//  664 
//  665   return rtrn;
??initItem_4:
        MOV     R1,?V0 + 1
        LJMP    ??Subroutine50_0 & 0xFFFF
        CFI EndBlock cfiBlock66
//  666 }
//  667 
//  668 /*********************************************************************
//  669  * @fn      setItem
//  670  *
//  671  * @brief   Set an item Id or status to mark its state.
//  672  *
//  673  * @param   pg - Valid NV page.
//  674  * @param   offset - Valid offset into the page of the item data - the header
//  675  *                   offset is calculated from this.
//  676  * @param   stat - Valid enum value for the item status.
//  677  *
//  678  * @return  none
//  679  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  680 static void setItem( uint8 pg, uint16 offset, eNvHdrEnum stat )
setItem:
        CFI Block cfiBlock67 Using cfiCommon0
        CFI Function setItem
        CODE
//  681 {
        FUNCALL setItem, HalFlashRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL setItem, writeWord
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL setItem, writeWord
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 8
        MOV     A,#-0x8
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     ?V0 + 2,R1
        MOV     ?V0 + 3,R4
//  682   osalNvHdr_t hdr;
//  683 
//  684   offset -= OSAL_NV_HDR_SIZE;
        MOV     A,R2
        ADD     A,#-0x8
        MOV     ?V0 + 0,A
        MOV     A,R3
        ADDC    A,#-0x1
        MOV     ?V0 + 1,A
//  685   HalFlashRead(pg, offset, (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
        ; Setup parameters for call to function HalFlashRead
        MOV     ?V0 + 4,#0x8
        MOV     ?V0 + 5,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 24)
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??Subroutine54_0 & 0xFFFF
??CrossCallReturnLabel_121:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
//  686 
//  687   if ( stat == eNvXfer )
        MOV     A,?V0 + 3
        JNZ     ??setItem_0
//  688   {
//  689     hdr.stat = OSAL_NV_ACTIVE;
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  690     writeWord( pg, offset+OSAL_NV_HDR_CHK, (uint8*)(&(hdr.chk)) );
        ; Setup parameters for call to function writeWord
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,?V0 + 0
        ADD     A,#0x4
        MOV     R2,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     R3,A
        MOV     R1,?V0 + 2
        LCALL   ??writeWord?relay
        SJMP    ??setItem_1
//  691 }
//  692   else // if ( stat == eNvZero )
//  693   {
//  694     uint16 sz = ((hdr.len + (OSAL_NV_WORD_SIZE-1)) / OSAL_NV_WORD_SIZE) * OSAL_NV_WORD_SIZE +
//  695                                                                           OSAL_NV_HDR_SIZE;
??setItem_0:
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_21:
        MOV     R6,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R7,A
//  696     hdr.id = 0;
        LCALL   ?Subroutine6 & 0xFFFF
//  697     writeWord( pg, offset, (uint8 *)(&hdr) );
??CrossCallReturnLabel_90:
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     R1,?V0 + 2
        LCALL   ??writeWord?relay
//  698     pgLost[pg-OSAL_NV_PAGE_BEG] += sz;
        MOV     A,?V0 + 2
        CLR     C
        RLC     A
        MOV     R0,A
        CLR     A
        RLC     A
        MOV     R1,A
        LCALL   ?Subroutine40 & 0xFFFF
//  699   }
??CrossCallReturnLabel_79:
        MOVX    A,@DPTR
        ADD     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R7
        MOVX    @DPTR,A
//  700 }
??setItem_1:
        MOV     A,#0x8
        LJMP    ?Subroutine3 & 0xFFFF
        CFI EndBlock cfiBlock67
//  701 
//  702 /*********************************************************************
//  703  * @fn      calcChkB
//  704  *
//  705  * @brief   Calculates the data checksum over the 'buf' parameter.
//  706  *
//  707  * @param   pg - A valid NV Flash page.
//  708  * @param   offset - A valid offset into the page.
//  709  * @param   len - Byte count of the data to be checksummed.
//  710  *
//  711  * @return  Calculated checksum of the data bytes.
//  712  */
//  713 static uint16 calcChkB( uint16 len, uint8 *buf )
//  714 {
//  715   uint8 fill = len % OSAL_NV_WORD_SIZE;
//  716   uint16 chk;
//  717 
//  718   if ( !buf )
//  719   {
//  720     chk = len * OSAL_NV_ERASED;
//  721   }
//  722   else
//  723   {
//  724     chk = 0;
//  725     while ( len-- )
//  726     {
//  727       chk += *buf++;
//  728     }
//  729   }
//  730 
//  731   // calcChkF() will calculate over OSAL_NV_WORD_SIZE alignment.
//  732   if ( fill )
//  733   {
//  734     chk += (OSAL_NV_WORD_SIZE - fill) * OSAL_NV_ERASED;
//  735   }
//  736 
//  737   return chk;
//  738 }
//  739 
//  740 /*********************************************************************
//  741  * @fn      calcChkF
//  742  *
//  743  * @brief   Calculates the data checksum by reading the data bytes from NV.
//  744  *
//  745  * @param   pg - A valid NV Flash page.
//  746  * @param   offset - A valid offset into the page.
//  747  * @param   len - Byte count of the data to be checksummed.
//  748  *
//  749  * @return  Calculated checksum of the data bytes.
//  750  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  751 static uint16 calcChkF( byte pg, uint16 offset, uint16 len )
calcChkF:
        CFI Block cfiBlock68 Using cfiCommon0
        CFI Function calcChkF
        CODE
//  752 {
        FUNCALL calcChkF, HalFlashRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xf
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 4
        MOV     A,#-0x4
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     ?V0 + 6,R1
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
//  753   uint16 chk = 0;
        MOV     ?V0 + 2,#0x0
        MOV     ?V0 + 3,#0x0
//  754 
//  755   len = (len + (OSAL_NV_WORD_SIZE-1)) / OSAL_NV_WORD_SIZE;
        MOV     A,R6
        ADD     A,#0x3
        MOV     ?V0 + 4,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     ?V0 + 5,A
        MOV     A,#0x2
        MOV     R0,#?V0 + 4
        LCALL   ?US_SHR
        MOV     R6,?V0 + 4
        MOV     R7,?V0 + 5
//  756 
//  757   while ( len-- )
??calcChkF_0:
        LCALL   ?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_65:
        JZ      ??calcChkF_1
//  758   {
//  759     uint8 cnt, tmp[OSAL_NV_WORD_SIZE];
//  760 
//  761     HalFlashRead(pg, offset, tmp, OSAL_NV_WORD_SIZE);
        ; Setup parameters for call to function HalFlashRead
        MOV     ?V0 + 4,#0x4
        MOV     ?V0 + 5,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 21)
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     R1,?V0 + 6
        LCALL   ??Subroutine54_0 & 0xFFFF
??CrossCallReturnLabel_122:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
//  762     offset += OSAL_NV_WORD_SIZE;
        LCALL   ?Subroutine41 & 0xFFFF
//  763 
//  764     for ( cnt = 0; cnt < OSAL_NV_WORD_SIZE; cnt++ )
??CrossCallReturnLabel_96:
        MOV     R0,#0x0
//  765     {
//  766       chk += tmp[cnt];
??calcChkF_2:
        MOV     ?V0 + 4,R0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,DPL
        ADD     A,?V0 + 4
        MOV     DPL,A
        MOV     A,DPH
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     A,?V0 + 2
        ADD     A,R2
        MOV     ?V0 + 2,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     ?V0 + 3,A
//  767     }
        INC     R0
        MOV     A,R0
        CLR     C
        SUBB    A,#0x4
        JNC     ??calcChkF_0
        SJMP    ??calcChkF_2
//  768   }
//  769 
//  770   return chk;
??calcChkF_1:
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        MOV     A,#0x4
        CFI EndBlock cfiBlock68
        REQUIRE ?Subroutine4
        ; // Fall through to label ?Subroutine4
//  771 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiBlock69 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Valid
        MOV     R7,#0x7
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock69
//  772 
//  773 /*********************************************************************
//  774  * @fn      writeWord
//  775  *
//  776  * @brief   Writes a Flash-WORD to NV.
//  777  *
//  778  * @param   pg - A valid NV Flash page.
//  779  * @param   offset - A valid offset into the page.
//  780  * @param   buf - Pointer to source buffer.
//  781  *
//  782  * @return  none
//  783  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  784 static void writeWord( uint8 pg, uint16 offset, uint8 *buf )
writeWord:
        CFI Block cfiBlock70 Using cfiCommon0
        CFI Function writeWord
        CODE
//  785 {
        FUNCALL writeWord, HalAdcCheckVdd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL writeWord, HalFlashWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     ?V0 + 2,R1
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
//  786   offset = (offset >> 2) + ((uint16)pg << 9);
//  787 
//  788   if ( OSAL_NV_CHECK_BUS_VOLTAGE )
        ; Setup parameters for call to function HalAdcCheckVdd
        MOV     R1,#0x4
        LCALL   ??HalAdcCheckVdd?relay
        MOV     A,R1
        JZ      ??writeWord_0
//  789   {
//  790     HalFlashWrite(offset, buf, 1);
        ; Setup parameters for call to function HalFlashWrite
        MOV     ?V0 + 4,#0x1
        MOV     ?V0 + 5,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     A,#0x2
        MOV     R0,#?V0 + 0
        LCALL   ?US_SHR
        MOV     ?V0 + 4,?V0 + 2
        MOV     A,#0x9
        MOV     R0,#?V0 + 4
        LCALL   ?S_SHL
        MOV     A,?V0 + 0
        ADD     A,#0x0
        MOV     R2,A
        MOV     A,?V0 + 1
        LCALL   ?Subroutine36 & 0xFFFF
//  791   }
??CrossCallReturnLabel_69:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
        SJMP    ??writeWord_1
//  792   else
//  793   {
//  794     failF = TRUE;
??writeWord_0:
        MOV     DPTR,#failF
        MOV     A,#0x1
        MOVX    @DPTR,A
//  795   }
//  796 }
??writeWord_1:
        SJMP    ??Subroutine47_0
        CFI EndBlock cfiBlock70

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiBlock71 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 24)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock71
        REQUIRE ??Subroutine47_0
        ; // Fall through to label ??Subroutine47_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine47_0:
        CFI Block cfiBlock72 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock72
//  797 
//  798 /*********************************************************************
//  799  * @fn      writeWordM
//  800  *
//  801  * @brief   Writes multiple Flash-WORDs to NV.
//  802  *
//  803  * @param   pg - A valid NV Flash page.
//  804  * @param   offset - A valid offset into the page.
//  805  * @param   buf - Pointer to source buffer.
//  806  * @param   cnt - Number of 4-byte blocks to write.
//  807  *
//  808  * @return  none
//  809  */
//  810 static void writeWordM( uint8 pg, uint16 offset, uint8 *buf, uint16 cnt )
//  811 {
//  812   offset = (offset >> 2) + ((uint16)pg << 9);
//  813 
//  814   if ( OSAL_NV_CHECK_BUS_VOLTAGE )
//  815   {
//  816     HalFlashWrite(offset, buf, cnt);
//  817   }
//  818   else
//  819   {
//  820     failF = TRUE;
//  821   }
//  822 }
//  823 
//  824 /*********************************************************************
//  825  * @fn      writeWordH
//  826  *
//  827  * @brief   Writes the 1st half of a Flash-WORD to NV (filling 2nd half with 0xffff).
//  828  *
//  829  * @param   pg - A valid NV Flash page.
//  830  * @param   offset - A valid offset into the page.
//  831  * @param   buf - Pointer to source buffer.
//  832  *
//  833  * @return  none
//  834  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  835 static void writeWordH( uint8 pg, uint16 offset, uint8 *buf )
writeWordH:
        CFI Block cfiBlock73 Using cfiCommon0
        CFI Function writeWordH
        CODE
//  836 {
        FUNCALL writeWordH, writeWord
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 4
        MOV     A,#-0x4
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 13)
//  837   uint8 tmp[4];
//  838 
//  839   tmp[0] = buf[0];
        MOV     DPL,R4
        MOV     DPH,R5
        MOVX    A,@DPTR
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
//  840   tmp[1] = buf[1];
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  841   tmp[2] = OSAL_NV_ERASED;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x1
        MOVX    @DPTR,A
//  842   tmp[3] = OSAL_NV_ERASED;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x1
        LCALL   ??Subroutine46_0 & 0xFFFF
//  843 
//  844   writeWord( pg, offset, tmp );
??CrossCallReturnLabel_92:
        LCALL   ??writeWord?relay
//  845 }
        MOV     A,#0x4
        LJMP    ?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock73
//  846 
//  847 /*********************************************************************
//  848  * @fn      writeBuf
//  849  *
//  850  * @brief   Writes a data buffer to NV.
//  851  *
//  852  * @param   dstPg - A valid NV Flash page.
//  853  * @param   offset - A valid offset into the page.
//  854  * @param   len  - Byte count of the data to write.
//  855  * @param   buf  - The data to write.
//  856  *
//  857  * @return  TRUE if data buf checksum matches read back checksum, else FALSE.
//  858  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  859 static void writeBuf( uint8 dstPg, uint16 dstOff, uint16 len, uint8 *buf )
writeBuf:
        CFI Block cfiBlock74 Using cfiCommon0
        CFI Function writeBuf
        CODE
//  860 {
        FUNCALL writeBuf, HalFlashRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL writeBuf, writeWord
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL writeBuf, HalAdcCheckVdd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL writeBuf, HalFlashWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL writeBuf, HalFlashRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL writeBuf, writeWord
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 4
        MOV     A,#-0x4
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     ?V0 + 7,R1
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
//  861   uint8 rem = dstOff % OSAL_NV_WORD_SIZE;
        MOV     A,R2
        ANL     A,#0x3
        MOV     ?V0 + 6,A
//  862   uint8 tmp[OSAL_NV_WORD_SIZE];
//  863 
//  864   if ( rem )
        JZ      ??CrossCallReturnLabel_95
//  865   {
//  866     dstOff = (dstOff / OSAL_NV_WORD_SIZE) * OSAL_NV_WORD_SIZE;
        MOV     A,#-0x4
        ANL     A,?V0 + 0
        MOV     ?V0 + 0,A
//  867     HalFlashRead(dstPg, dstOff, tmp, OSAL_NV_WORD_SIZE);
        ; Setup parameters for call to function HalFlashRead
        MOV     ?V0 + 2,#0x4
        MOV     ?V0 + 3,#0x0
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,?V0 + 0
        LCALL   ??Subroutine54_0 & 0xFFFF
??CrossCallReturnLabel_123:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
??writeBuf_0:
        MOV     A,R6
        ORL     A,R7
        JZ      ??writeBuf_1
//  868 
//  869     while ( (rem < OSAL_NV_WORD_SIZE) && len )
//  870     {
//  871       tmp[rem++] = *buf++;
        MOV     A,#0x14
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_18:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     ?V0 + 2,?V0 + 6
        LCALL   ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_61:
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     A,#0x14
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_35:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_0:
        INC     ?V0 + 6
//  872       len--;
        MOV     A,R6
        ADD     A,#-0x1
        DEC     R6
        MOV     A,R7
        ADDC    A,#-0x1
        MOV     R7,A
//  873     }
        MOV     A,?V0 + 6
        CLR     C
        SUBB    A,#0x4
        JC      ??writeBuf_0
//  874 
//  875     writeWord( dstPg, dstOff, tmp );
??writeBuf_1:
        ; Setup parameters for call to function writeWord
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     R1,?V0 + 7
        LCALL   ??Subroutine48_0 & 0xFFFF
//  876     dstOff += OSAL_NV_WORD_SIZE;
//  877   }
//  878 
//  879   rem = len % OSAL_NV_WORD_SIZE;
??CrossCallReturnLabel_95:
        MOV     A,R6
        ANL     A,#0x3
        MOV     ?V0 + 6,A
//  880   len /= OSAL_NV_WORD_SIZE;
        MOV     ?V0 + 2,R6
        MOV     ?V0 + 3,R7
        MOV     A,#0x2
        MOV     R0,#?V0 + 2
        LCALL   ?US_SHR
        MOV     R6,?V0 + 2
        MOV     R7,?V0 + 3
//  881 
//  882   if ( len )
        MOV     A,R6
        ORL     A,R7
        JZ      ??CrossCallReturnLabel_1
//  883   {
//  884     writeWordM( dstPg, dstOff, buf, len );
        ; Setup parameters for call to function HalAdcCheckVdd
        MOV     R1,#0x4
        LCALL   ??HalAdcCheckVdd?relay
        MOV     A,R1
        JZ      ??writeBuf_2
        ; Setup parameters for call to function HalFlashWrite
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     A,#0x16
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_39:
        MOV     ?V0 + 2,?V0 + 0
        MOV     ?V0 + 3,?V0 + 1
        MOV     A,#0x2
        MOV     R0,#?V0 + 2
        LCALL   ?US_SHR
        MOV     ?V0 + 4,?V0 + 7
        MOV     ?V0 + 5,A
        MOV     A,#0x9
        MOV     R0,#?V0 + 4
        LCALL   ?S_SHL
        MOV     A,?V0 + 2
        ADD     A,#0x0
        MOV     R2,A
        MOV     A,?V0 + 3
        LCALL   ?Subroutine36 & 0xFFFF
??CrossCallReturnLabel_70:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
        SJMP    ??writeBuf_3
??writeBuf_2:
        MOV     DPTR,#failF
        MOV     A,#0x1
        MOVX    @DPTR,A
//  885     dstOff += OSAL_NV_WORD_SIZE * len;
??writeBuf_3:
        MOV     ?V0 + 2,R6
        MOV     ?V0 + 3,R7
        MOV     A,#0x2
        MOV     R0,#?V0 + 2
        LCALL   ?S_SHL
        MOV     R0,?V0 + 2
        MOV     R1,?V0 + 3
        MOV     A,?V0 + 0
        ADD     A,R0
        MOV     ?V0 + 0,A
        MOV     A,?V0 + 1
        ADDC    A,R1
        MOV     ?V0 + 1,A
//  886     buf += OSAL_NV_WORD_SIZE * len;
        MOV     A,#0x14
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOV     R1,A
        MOV     A,#0x14
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine7 & 0xFFFF
//  887   }
//  888 
//  889   if ( rem )
??CrossCallReturnLabel_1:
        MOV     A,?V0 + 6
        JZ      ??writeBuf_4
//  890   {
//  891     uint8 idx = 0;
        MOV     R6,#0x0
//  892     HalFlashRead(dstPg, dstOff, tmp, OSAL_NV_WORD_SIZE);
        ; Setup parameters for call to function HalFlashRead
        MOV     ?V0 + 2,#0x4
        MOV     ?V0 + 3,R6
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     R1,?V0 + 7
        LCALL   ??Subroutine54_0 & 0xFFFF
??CrossCallReturnLabel_124:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
        SJMP    ??writeBuf_5
//  893     while ( rem-- )
//  894     {
//  895       tmp[idx++] = *buf++;
??writeBuf_6:
        MOV     A,#0x14
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine12 & 0xFFFF
//  896     }
??CrossCallReturnLabel_19:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     ?V0 + 2,R6
        LCALL   ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_62:
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     A,#0x14
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_36:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_2:
        INC     R6
??writeBuf_5:
        MOV     R7,?V0 + 6
        MOV     A,#-0x1
        ADD     A,R7
        MOV     ?V0 + 6,A
        INC     A
        JNZ     ??writeBuf_6
//  897     writeWord( dstPg, dstOff, tmp );
        ; Setup parameters for call to function writeWord
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     R1,?V0 + 7
        LCALL   ??writeWord?relay
//  898   }
//  899 }
??writeBuf_4:
        MOV     A,#0x4
        LJMP    ?Subroutine2 & 0xFFFF
        CFI EndBlock cfiBlock74

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine36:
        CFI Block cfiCond75 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_69
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond76 Using cfiCommon0
        CFI (cfiCond76) NoFunction
        CFI (cfiCond76) Conditional ??CrossCallReturnLabel_70
        CFI (cfiCond76) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond76) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond76) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond76) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond76) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond76) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond76) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond76) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond76) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond76) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond76) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond76) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond76) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond76) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond76) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond76) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond76) CFA_SP SP+0
        CFI (cfiCond76) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiPicker77 Using cfiCommon1
        CFI (cfiPicker77) NoFunction
        CFI (cfiPicker77) Picker
        ADDC    A,?V0 + 5
        MOV     R3,A
        LCALL   ??HalFlashWrite?relay
        MOV     A,#0x2
        RET
        CFI EndBlock cfiCond75
        CFI EndBlock cfiCond76
        CFI EndBlock cfiPicker77

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine32:
        CFI Block cfiCond78 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_61
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+-1
        CFI CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond79 Using cfiCommon0
        CFI (cfiCond79) NoFunction
        CFI (cfiCond79) Conditional ??CrossCallReturnLabel_62
        CFI (cfiCond79) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond79) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond79) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond79) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond79) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond79) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond79) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond79) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond79) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond79) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond79) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond79) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond79) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond79) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond79) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond79) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond79) CFA_SP SP+-1
        CFI (cfiCond79) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiPicker80 Using cfiCommon1
        CFI (cfiPicker80) NoFunction
        CFI (cfiPicker80) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,DPL
        ADD     A,?V0 + 2
        MOV     DPL,A
        MOV     A,DPH
        ADDC    A,#0x0
        MOV     DPH,A
        RET
        CFI EndBlock cfiCond78
        CFI EndBlock cfiCond79
        CFI EndBlock cfiPicker80

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine20:
        CFI Block cfiCond81 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_37
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 26)
        CFI Block cfiCond82 Using cfiCommon0
        CFI (cfiCond82) NoFunction
        CFI (cfiCond82) Conditional ??CrossCallReturnLabel_38
        CFI (cfiCond82) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond82) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond82) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond82) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond82) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond82) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond82) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond82) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond82) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond82) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond82) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond82) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond82) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond82) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond82) CFA_SP SP+0
        CFI (cfiCond82) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond83 Using cfiCommon0
        CFI (cfiCond83) NoFunction
        CFI (cfiCond83) Conditional ??CrossCallReturnLabel_39
        CFI (cfiCond83) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond83) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond83) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond83) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond83) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond83) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond83) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond83) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond83) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond83) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond83) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond83) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond83) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond83) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond83) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond83) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond83) CFA_SP SP+0
        CFI (cfiCond83) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond84 Using cfiCommon0
        CFI (cfiCond84) NoFunction
        CFI (cfiCond84) Conditional ??CrossCallReturnLabel_40
        CFI (cfiCond84) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond84) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond84) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond84) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond84) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond84) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond84) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond84) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond84) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond84) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond84) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond84) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond84) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond84) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond84) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond84) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond84) CFA_SP SP+0
        CFI (cfiCond84) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiPicker85 Using cfiCommon1
        CFI (cfiPicker85) NoFunction
        CFI (cfiPicker85) Picker
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        RET
        CFI EndBlock cfiCond81
        CFI EndBlock cfiCond82
        CFI EndBlock cfiCond83
        CFI EndBlock cfiCond84
        CFI EndBlock cfiPicker85

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine19:
        CFI Block cfiCond86 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_35
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond87 Using cfiCommon0
        CFI (cfiCond87) NoFunction
        CFI (cfiCond87) Conditional ??CrossCallReturnLabel_36
        CFI (cfiCond87) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond87) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond87) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond87) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond87) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond87) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond87) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond87) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond87) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond87) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond87) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond87) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond87) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond87) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond87) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond87) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond87) CFA_SP SP+0
        CFI (cfiCond87) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiPicker88 Using cfiCommon1
        CFI (cfiPicker88) NoFunction
        CFI (cfiPicker88) Picker
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,#0x14
        RET
        CFI EndBlock cfiCond86
        CFI EndBlock cfiCond87
        CFI EndBlock cfiPicker88
//  900 
//  901 /*********************************************************************
//  902  * @fn      xferBuf
//  903  *
//  904  * @brief   Xfers an NV buffer from one location to another, enforcing OSAL_NV_WORD_SIZE writes.
//  905  *
//  906  * @return  none
//  907  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  908 static void xferBuf( uint8 srcPg, uint16 srcOff, uint8 dstPg, uint16 dstOff, uint16 len )
xferBuf:
        CFI Block cfiBlock89 Using cfiCommon0
        CFI Function xferBuf
        CODE
//  909 {
        FUNCALL xferBuf, HalFlashRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL xferBuf, HalFlashRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL xferBuf, writeWord
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL xferBuf, HalFlashRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL xferBuf, writeWord
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL xferBuf, HalFlashRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL xferBuf, HalFlashRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL xferBuf, writeWord
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 5
        MOV     A,#-0x5
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 21)
        MOV     A,R1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
        MOV     ?V0 + 6,R2
        MOV     ?V0 + 7,R3
        MOV     ?V0 + 3,R4
        MOV     A,#0x15
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        MOV     A,#0x17
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
//  910   uint8 rem = dstOff % OSAL_NV_WORD_SIZE;
        MOV     A,?V0 + 0
        ANL     A,#0x3
        MOV     ?V0 + 2,A
//  911   uint8 tmp[OSAL_NV_WORD_SIZE];
//  912 
//  913   if ( rem )
        JZ      ??CrossCallReturnLabel_93
//  914   {
//  915     dstOff -= rem;
        MOV     ?V0 + 4,A
        CLR     C
        MOV     A,?V0 + 0
        SUBB    A,?V0 + 4
        MOV     ?V0 + 0,A
        MOV     A,?V0 + 1
        SUBB    A,#0x0
        MOV     ?V0 + 1,A
//  916     HalFlashRead(dstPg, dstOff, tmp, OSAL_NV_WORD_SIZE);
        ; Setup parameters for call to function HalFlashRead
        MOV     ?V0 + 4,#0x4
        MOV     ?V0 + 5,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 23)
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     R1,?V0 + 3
        LCALL   ??Subroutine54_0 & 0xFFFF
??CrossCallReturnLabel_125:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 21)
??xferBuf_0:
        MOV     A,R6
        ORL     A,R7
        JZ      ??xferBuf_1
//  917 
//  918     while ( (rem < OSAL_NV_WORD_SIZE) && len )
//  919     {
//  920       HalFlashRead(srcPg, srcOff, tmp+rem, 1);
        ; Setup parameters for call to function HalFlashRead
        MOV     ?V0 + 4,#0x1
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 23)
        MOV     ?V0 + 4,?V0 + 2
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_55:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine52_0 & 0xFFFF
??CrossCallReturnLabel_113:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 21)
//  921       srcOff++;
        LCALL   ?Subroutine35 & 0xFFFF
//  922       rem++;
??CrossCallReturnLabel_67:
        INC     ?V0 + 2
//  923       len--;
        MOV     A,R6
        ADD     A,#-0x1
        DEC     R6
        MOV     A,R7
        ADDC    A,#-0x1
        MOV     R7,A
//  924     }
        MOV     A,?V0 + 2
        CLR     C
        SUBB    A,#0x4
        JC      ??xferBuf_0
//  925 
//  926     writeWord( dstPg, dstOff, tmp );
??xferBuf_1:
        ; Setup parameters for call to function writeWord
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine25 & 0xFFFF
//  927     dstOff += OSAL_NV_WORD_SIZE;
//  928   }
//  929 
//  930   rem = len % OSAL_NV_WORD_SIZE;
??CrossCallReturnLabel_93:
        MOV     A,R6
        ANL     A,#0x3
        MOV     ?V0 + 2,A
//  931   len /= OSAL_NV_WORD_SIZE;
        MOV     ?V0 + 4,R6
        MOV     ?V0 + 5,R7
        MOV     A,#0x2
        MOV     R0,#?V0 + 4
        LCALL   ?US_SHR
        MOV     R6,?V0 + 4
        MOV     R7,?V0 + 5
        SJMP    ??CrossCallReturnLabel_94
//  932 
//  933   while ( len-- )
//  934   {
//  935     HalFlashRead(srcPg, srcOff, tmp, OSAL_NV_WORD_SIZE);
??xferBuf_2:
        ; Setup parameters for call to function HalFlashRead
        MOV     ?V0 + 4,#0x4
        MOV     ?V0 + 5,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 23)
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,?V0 + 6
        MOV     R3,?V0 + 7
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine52_0 & 0xFFFF
??CrossCallReturnLabel_114:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 21)
//  936     srcOff += OSAL_NV_WORD_SIZE;
        MOV     A,?V0 + 6
        ADD     A,#0x4
        MOV     ?V0 + 6,A
        MOV     A,?V0 + 7
        ADDC    A,#0x0
        MOV     ?V0 + 7,A
//  937     writeWord( dstPg, dstOff, tmp );
        ; Setup parameters for call to function writeWord
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine25 & 0xFFFF
//  938     dstOff += OSAL_NV_WORD_SIZE;
//  939   }
??CrossCallReturnLabel_94:
        LCALL   ?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_66:
        JNZ     ??xferBuf_2
//  940 
//  941   if ( rem )
        MOV     A,?V0 + 2
        JZ      ??xferBuf_3
//  942   {
//  943     uint8 idx = 0;
        MOV     R6,#0x0
//  944     HalFlashRead(dstPg, dstOff, tmp, OSAL_NV_WORD_SIZE);
        ; Setup parameters for call to function HalFlashRead
        MOV     ?V0 + 4,#0x4
        MOV     ?V0 + 5,R6
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 23)
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     R1,?V0 + 3
        LCALL   ??Subroutine54_0 & 0xFFFF
??CrossCallReturnLabel_126:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 21)
        SJMP    ??xferBuf_4
//  945     while ( rem-- )
//  946     {
//  947       HalFlashRead(srcPg, srcOff, tmp+idx, 1);
??xferBuf_5:
        ; Setup parameters for call to function HalFlashRead
        MOV     ?V0 + 4,#0x1
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 23)
        MOV     ?V0 + 4,R6
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_56:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine52_0 & 0xFFFF
??CrossCallReturnLabel_115:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 21)
//  948       srcOff++;
        LCALL   ?Subroutine35 & 0xFFFF
//  949       idx++;
??CrossCallReturnLabel_68:
        INC     R6
//  950     }
??xferBuf_4:
        MOV     R7,?V0 + 2
        MOV     A,#-0x1
        ADD     A,R7
        MOV     ?V0 + 2,A
        INC     A
        JNZ     ??xferBuf_5
//  951     writeWord( dstPg, dstOff, tmp );
        ; Setup parameters for call to function writeWord
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     R1,?V0 + 3
        LCALL   ??writeWord?relay
//  952   }
//  953 }
??xferBuf_3:
        MOV     A,#0x5
        LJMP    ?Subroutine2 & 0xFFFF
        CFI EndBlock cfiBlock89

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine35:
        CFI Block cfiCond90 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_67
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond91 Using cfiCommon0
        CFI (cfiCond91) NoFunction
        CFI (cfiCond91) Conditional ??CrossCallReturnLabel_68
        CFI (cfiCond91) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond91) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond91) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond91) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond91) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond91) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond91) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond91) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond91) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond91) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond91) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond91) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond91) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond91) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond91) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond91) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond91) CFA_SP SP+0
        CFI (cfiCond91) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiPicker92 Using cfiCommon1
        CFI (cfiPicker92) NoFunction
        CFI (cfiPicker92) Picker
        MOV     A,?V0 + 6
        ADD     A,#0x1
        MOV     ?V0 + 6,A
        MOV     A,?V0 + 7
        ADDC    A,#0x0
        MOV     ?V0 + 7,A
        RET
        CFI EndBlock cfiCond90
        CFI EndBlock cfiCond91
        CFI EndBlock cfiPicker92

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine34:
        CFI Block cfiCond93 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_65
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond94 Using cfiCommon0
        CFI (cfiCond94) NoFunction
        CFI (cfiCond94) Conditional ??CrossCallReturnLabel_66
        CFI (cfiCond94) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond94) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond94) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond94) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond94) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond94) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond94) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond94) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond94) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond94) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond94) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond94) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond94) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond94) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond94) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond94) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond94) CFA_SP SP+0
        CFI (cfiCond94) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiPicker95 Using cfiCommon1
        CFI (cfiPicker95) NoFunction
        CFI (cfiPicker95) Picker
        MOV     A,R6
        MOV     R0,A
        MOV     A,R7
        MOV     R1,A
        MOV     A,R0
        ADD     A,#-0x1
        DEC     R6
        MOV     A,R1
        ADDC    A,#-0x1
        MOV     R7,A
        MOV     A,R0
        ORL     A,R1
        RET
        CFI EndBlock cfiCond93
        CFI EndBlock cfiCond94
        CFI EndBlock cfiPicker95

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine28:
        CFI Block cfiCond96 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_55
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond97 Using cfiCommon0
        CFI (cfiCond97) NoFunction
        CFI (cfiCond97) Conditional ??CrossCallReturnLabel_56
        CFI (cfiCond97) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond97) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond97) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond97) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond97) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond97) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond97) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond97) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond97) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond97) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond97) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond97) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond97) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond97) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond97) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond97) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond97) CFA_SP SP+0
        CFI (cfiCond97) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiPicker98 Using cfiCommon1
        CFI (cfiPicker98) NoFunction
        CFI (cfiPicker98) Picker
        MOV     A,DPL
        ADD     A,?V0 + 4
        MOV     R4,A
        MOV     A,DPH
        ADDC    A,#0x0
        MOV     R5,A
        MOV     R2,?V0 + 6
        MOV     R3,?V0 + 7
        MOV     A,#0x2
        RET
        CFI EndBlock cfiCond96
        CFI EndBlock cfiCond97
        CFI EndBlock cfiPicker98

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine25:
        CFI Block cfiCond99 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_93
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond100 Using cfiCommon0
        CFI (cfiCond100) NoFunction
        CFI (cfiCond100) Conditional ??CrossCallReturnLabel_94
        CFI (cfiCond100) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond100) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond100) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond100) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond100) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond100) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond100) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond100) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond100) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond100) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond100) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond100) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond100) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond100) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond100) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond100) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond100) CFA_SP SP+0
        CFI (cfiCond100) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiPicker101 Using cfiCommon1
        CFI (cfiPicker101) NoFunction
        CFI (cfiPicker101) Picker
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     R1,?V0 + 3
        CFI EndBlock cfiCond99
        CFI EndBlock cfiCond100
        CFI EndBlock cfiPicker101
        REQUIRE ??Subroutine48_0
        ; // Fall through to label ??Subroutine48_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine48_0:
        CFI Block cfiCond102 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_95
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond103 Using cfiCommon0
        CFI (cfiCond103) NoFunction
        CFI (cfiCond103) Conditional ??CrossCallReturnLabel_93
        CFI (cfiCond103) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond103) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond103) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond103) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond103) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond103) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond103) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond103) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond103) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond103) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond103) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond103) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond103) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond103) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond103) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond103) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond103) CFA_SP SP+0
        CFI (cfiCond103) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond104 Using cfiCommon0
        CFI (cfiCond104) NoFunction
        CFI (cfiCond104) Conditional ??CrossCallReturnLabel_94
        CFI (cfiCond104) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond104) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond104) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond104) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond104) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond104) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond104) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond104) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond104) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond104) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond104) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond104) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond104) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond104) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond104) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond104) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond104) CFA_SP SP+0
        CFI (cfiCond104) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiPicker105 Using cfiCommon1
        CFI (cfiPicker105) NoFunction
        CFI (cfiPicker105) Picker
        LCALL   ??writeWord?relay
        LCALL   ?Subroutine41 & 0xFFFF
??CrossCallReturnLabel_97:
        RET
        CFI EndBlock cfiCond102
        CFI EndBlock cfiCond103
        CFI EndBlock cfiCond104
        CFI EndBlock cfiPicker105

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine41:
        CFI Block cfiCond106 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_96
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond107 Using cfiCommon0
        CFI (cfiCond107) NoFunction
        CFI (cfiCond107) Conditional ??CrossCallReturnLabel_97, ??CrossCallReturnLabel_93
        CFI (cfiCond107) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond107) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond107) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond107) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond107) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond107) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond107) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond107) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond107) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond107) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond107) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond107) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond107) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond107) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond107) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond107) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond107) CFA_SP SP+0
        CFI (cfiCond107) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond108 Using cfiCommon0
        CFI (cfiCond108) NoFunction
        CFI (cfiCond108) Conditional ??CrossCallReturnLabel_97, ??CrossCallReturnLabel_94
        CFI (cfiCond108) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond108) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond108) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond108) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond108) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond108) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond108) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond108) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond108) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond108) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond108) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond108) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond108) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond108) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond108) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond108) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond108) CFA_SP SP+0
        CFI (cfiCond108) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond109 Using cfiCommon0
        CFI (cfiCond109) NoFunction
        CFI (cfiCond109) Conditional ??CrossCallReturnLabel_97, ??CrossCallReturnLabel_95
        CFI (cfiCond109) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond109) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond109) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond109) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond109) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond109) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond109) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond109) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond109) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond109) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond109) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond109) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond109) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond109) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond109) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond109) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond109) CFA_SP SP+0
        CFI (cfiCond109) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiPicker110 Using cfiCommon1
        CFI (cfiPicker110) NoFunction
        CFI (cfiPicker110) Picker
        MOV     A,?V0 + 0
        ADD     A,#0x4
        MOV     ?V0 + 0,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
        RET
        CFI EndBlock cfiCond106
        CFI EndBlock cfiCond107
        CFI EndBlock cfiCond108
        CFI EndBlock cfiCond109
        CFI EndBlock cfiPicker110
//  954 
//  955 /*********************************************************************
//  956  * @fn      writeItem
//  957  *
//  958  * @brief   Writes an item header/data combo to the specified NV page.
//  959  *
//  960  * @param   pg - Valid NV Flash page.
//  961  * @param   id - Valid NV item Id.
//  962  * @param   len  - Byte count of the data to write.
//  963  * @param   buf  - The data to write. If NULL, no data/checksum write.
//  964  * @param   flag - TRUE if the checksum should be written, FALSE otherwise.
//  965  *
//  966  * @return  TRUE if header/data to write matches header/data read back, else FALSE.
//  967  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  968 static uint8 writeItem( uint8 pg, uint16 id, uint16 len, void *buf, uint8 flag )
writeItem:
        CFI Block cfiBlock111 Using cfiCommon0
        CFI Function writeItem
        CODE
//  969 {
        FUNCALL writeItem, setPageUse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL writeItem, writeWord
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL writeItem, HalFlashRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL writeItem, writeBuf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL writeItem, calcChkF
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL writeItem, writeWordH
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL writeItem, HalFlashRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xf
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 12
        MOV     A,#-0xc
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 27)
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        MOV     A,R1
        MOV     R6,A
        MOV     ?V0 + 2,R4
        MOV     ?V0 + 3,R5
        MOV     A,#0x1d
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 6,A
//  970   uint16 offset = pgOff[pg-OSAL_NV_PAGE_BEG];
        MOV     A,R6
        CLR     C
        RLC     A
        MOV     R0,A
        CLR     A
        RLC     A
        MOV     R1,A
        MOV     A,#(pgOff + 14) & 0xff
        ADD     A,R0
        MOV     R0,A
        MOV     A,#((pgOff - 242) >> 8) & 0xff
        ADDC    A,R1
        MOV     R1,A
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_3:
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_20:
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
//  971   uint8 rtrn = FALSE;
        MOV     R7,#0x0
//  972   osalNvHdr_t hdr;
//  973 
//  974   if ( pg == pgRes )
        MOV     DPTR,#pgRes
        MOVX    A,@DPTR
        XRL     A,R6
        JNZ     ??writeItem_0
//  975   {
//  976     /* Mark reserve page as being active, in process of receiving items.
//  977      * Invoking function must effect a page compaction.
//  978      */
//  979     setPageUse( pg, FALSE );
        ; Setup parameters for call to function setPageUse
        MOV     R2,#0x0
        MOV     A,R6
        MOV     R1,A
        LCALL   ??setPageUse?relay
//  980   }
//  981 
//  982   hdr.id = id;
??writeItem_0:
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_107:
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine7 & 0xFFFF
//  983   hdr.len = len;
??CrossCallReturnLabel_4:
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 3
        MOVX    @DPTR,A
//  984 
//  985   writeWord( pg, offset, (uint8 *)&hdr );
        ; Setup parameters for call to function writeWord
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     A,R6
        MOV     R1,A
        LCALL   ??writeWord?relay
//  986   HalFlashRead(pg, offset, (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
        ; Setup parameters for call to function HalFlashRead
        MOV     ?V0 + 4,#0x8
        MOV     ?V0 + 5,R7
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 29)
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     A,R6
        LCALL   ??Subroutine53_0 & 0xFFFF
??CrossCallReturnLabel_118:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 27)
//  987 
//  988   if ( (hdr.id == id) && (hdr.len == len) )
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine49_0 & 0xFFFF
??CrossCallReturnLabel_100:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??writeItem_1
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??writeItem_1:
        JZ      $+5
        LJMP    ??writeItem_2 & 0xFFFF
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,?V0 + 2
        JNZ     ??writeItem_3
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,?V0 + 3
??writeItem_3:
        JZ      $+5
        LJMP    ??writeItem_2 & 0xFFFF
//  989   {
//  990     if ( flag )
        MOV     A,?V0 + 6
        JNZ     $+5
        LJMP    ??writeItem_4 & 0xFFFF
//  991     {
//  992       uint16 chk = calcChkB( len, buf );
        MOV     A,#0x1b
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine49_0 & 0xFFFF
??CrossCallReturnLabel_101:
        MOV     DPL,R0
        MOV     DPH,R1
        MOV     R0,?V0 + 2
        MOV     R1,?V0 + 3
        MOV     A,R0
        ANL     A,#0x3
        MOV     ?V0 + 4,A
        MOV     A,DPL
        ORL     A,DPH
        JNZ     ??writeItem_5
        MOV     A,R0
        MOV     B,#-0x1
        MUL     AB
        MOV     R0,A
        MOV     R2,B
        MOV     B,#-0x1
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        SJMP    ??writeItem_6
??writeItem_5:
        MOV     R2,#0x0
        MOV     R3,#0x0
        SJMP    ??writeItem_7
??writeItem_8:
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     A,R2
        ADD     A,R4
        MOV     R2,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R3,A
        INC     DPTR
??writeItem_7:
        MOV     A,R0
        MOV     R4,A
        MOV     A,R1
        MOV     R5,A
        MOV     A,R4
        ADD     A,#-0x1
        DEC     R0
        MOV     A,R5
        ADDC    A,#-0x1
        MOV     R1,A
        MOV     A,R4
        ORL     A,R5
        JNZ     ??writeItem_8
??writeItem_6:
        MOV     A,?V0 + 4
        JZ      ??writeItem_9
        MOV     A,#0x4
        CLR     C
        SUBB    A,?V0 + 4
        MOV     R0,A
        SUBB    A,0xE0 /* A   */
        MOV     R1,A
        MOV     A,R0
        MOV     B,#-0x1
        MUL     AB
        MOV     R0,A
        MOV     R4,B
        MOV     B,#-0x1
        MOV     A,R1
        MUL     AB
        ADD     A,R4
        MOV     R1,A
        MOV     A,R2
        ADD     A,R0
        MOV     R2,A
        MOV     A,R3
        ADDC    A,R1
        MOV     R3,A
??writeItem_9:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  993 
//  994       offset += OSAL_NV_HDR_SIZE;
        LCALL   ?Subroutine27 & 0xFFFF
//  995       if ( buf != NULL )
??CrossCallReturnLabel_54:
        MOV     A,#0x1b
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_14:
        JZ      ??writeItem_10
//  996       {
//  997         writeBuf( pg, offset, len, buf );
        ; Setup parameters for call to function writeBuf
        MOV     A,#0x1b
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?PUSH_XSTACK8_X_TWO
        CFI CFA_XSP16 add(XSP16, 29)
        MOV     R4,?V0 + 2
        MOV     R5,?V0 + 3
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     A,R6
        MOV     R1,A
        LCALL   ??writeBuf?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 27)
//  998       }
//  999 
// 1000       if ( chk == calcChkF( pg, offset, len ) )
??writeItem_10:
        ; Setup parameters for call to function calcChkF
        MOV     R4,?V0 + 2
        MOV     R5,?V0 + 3
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     A,R6
        MOV     R1,A
        LCALL   ??calcChkF?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     R0,?V0 + 2
        MOV     R1,?V0 + 3
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??writeItem_11
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??writeItem_11:
        JNZ     ??writeItem_2
// 1001       {
// 1002         writeWordH(pg, (offset-OSAL_NV_WORD_SIZE), (uint8 *)&chk);
        ; Setup parameters for call to function writeWordH
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,?V0 + 0
        ADD     A,#-0x4
        MOV     R2,A
        MOV     A,?V0 + 1
        ADDC    A,#-0x1
        MOV     R3,A
        MOV     A,R6
        MOV     R1,A
        LCALL   ??writeWordH?relay
// 1003         HalFlashRead(pg, (offset-OSAL_NV_HDR_SIZE), (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
        ; Setup parameters for call to function HalFlashRead
        MOV     ?V0 + 2,#0x8
        MOV     ?V0 + 3,R7
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 29)
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,?V0 + 0
        ADD     A,#-0x8
        MOV     R2,A
        MOV     A,?V0 + 1
        ADDC    A,#-0x1
        MOV     R3,A
        MOV     A,R6
        LCALL   ??Subroutine53_0 & 0xFFFF
??CrossCallReturnLabel_119:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 27)
// 1004 
// 1005         if ( chk == hdr.chk )
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_108:
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??writeItem_12
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??writeItem_12:
        JNZ     ??writeItem_2
// 1006         {
// 1007           rtrn = pg;
??writeItem_4:
        MOV     A,R6
        MOV     R7,A
// 1008         }
// 1009       }
// 1010     }
// 1011     else
// 1012     {
// 1013       rtrn = pg;
// 1014     }
// 1015   }
// 1016 
// 1017   len = OSAL_NV_ITEM_SIZE( hdr.len );
// 1018   pgOff[pg-OSAL_NV_PAGE_BEG] += len;
??writeItem_2:
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_22:
        MOV     R0,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R2
        MOVX    A,@DPTR
        ADD     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOVX    @DPTR,A
// 1019 
// 1020   return rtrn;
        MOV     A,R7
        MOV     R1,A
        MOV     A,#0xc
        LJMP    ?Subroutine4 & 0xFFFF
        CFI EndBlock cfiBlock111
// 1021 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine27:
        CFI Block cfiCond112 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_53
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond113 Using cfiCommon0
        CFI (cfiCond113) NoFunction
        CFI (cfiCond113) Conditional ??CrossCallReturnLabel_54
        CFI (cfiCond113) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond113) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond113) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond113) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond113) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond113) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond113) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond113) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond113) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond113) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond113) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond113) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond113) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond113) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond113) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond113) CFA_SP SP+0
        CFI (cfiCond113) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiPicker114 Using cfiCommon1
        CFI (cfiPicker114) NoFunction
        CFI (cfiPicker114) Picker
        MOV     A,?V0 + 0
        ADD     A,#0x8
        MOV     ?V0 + 0,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
        RET
        CFI EndBlock cfiCond112
        CFI EndBlock cfiCond113
        CFI EndBlock cfiPicker114

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
        CFI Block cfiCond115 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_21
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond116 Using cfiCommon0
        CFI (cfiCond116) NoFunction
        CFI (cfiCond116) Conditional ??CrossCallReturnLabel_22
        CFI (cfiCond116) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond116) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond116) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond116) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond116) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond116) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond116) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond116) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond116) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond116) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond116) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond116) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond116) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond116) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond116) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond116) CFA_SP SP+0
        CFI (cfiCond116) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiPicker117 Using cfiCommon1
        CFI (cfiPicker117) NoFunction
        CFI (cfiPicker117) Picker
        MOVX    A,@DPTR
        ADD     A,#0x3
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,R0
        ANL     A,#0xfc
        ADD     A,#0x8
        RET
        CFI EndBlock cfiCond115
        CFI EndBlock cfiCond116
        CFI EndBlock cfiPicker117

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
        CFI Block cfiCond118 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_18
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond119 Using cfiCommon0
        CFI (cfiCond119) NoFunction
        CFI (cfiCond119) Conditional ??CrossCallReturnLabel_19
        CFI (cfiCond119) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond119) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond119) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond119) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond119) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond119) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond119) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond119) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond119) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond119) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond119) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond119) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond119) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond119) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond119) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond119) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond119) CFA_SP SP+0
        CFI (cfiCond119) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond120 Using cfiCommon0
        CFI (cfiCond120) NoFunction
        CFI (cfiCond120) Conditional ??CrossCallReturnLabel_20
        CFI (cfiCond120) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond120) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond120) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond120) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond120) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond120) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond120) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond120) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond120) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond120) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond120) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond120) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond120) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond120) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond120) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond120) CFA_SP SP+0
        CFI (cfiCond120) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiPicker121 Using cfiCommon1
        CFI (cfiPicker121) NoFunction
        CFI (cfiPicker121) Picker
        LCALL   ?Subroutine38 & 0xFFFF
??CrossCallReturnLabel_75:
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond118
        CFI EndBlock cfiCond119
        CFI EndBlock cfiCond120
        CFI EndBlock cfiPicker121

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
        CFI Block cfiCond122 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_107
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond123 Using cfiCommon0
        CFI (cfiCond123) NoFunction
        CFI (cfiCond123) Conditional ??CrossCallReturnLabel_108
        CFI (cfiCond123) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond123) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond123) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond123) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond123) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond123) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond123) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond123) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond123) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond123) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond123) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond123) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond123) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond123) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond123) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond123) CFA_SP SP+0
        CFI (cfiCond123) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiPicker124 Using cfiCommon1
        CFI (cfiPicker124) NoFunction
        CFI (cfiPicker124) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CFI EndBlock cfiCond122
        CFI EndBlock cfiCond123
        CFI EndBlock cfiPicker124
        REQUIRE ??Subroutine49_0
        ; // Fall through to label ??Subroutine49_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine49_0:
        CFI Block cfiCond125 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_98
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 26)
        CFI Block cfiCond126 Using cfiCommon0
        CFI (cfiCond126) NoFunction
        CFI (cfiCond126) Conditional ??CrossCallReturnLabel_99
        CFI (cfiCond126) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond126) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond126) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond126) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond126) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond126) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond126) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond126) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond126) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond126) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond126) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond126) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond126) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond126) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond126) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond126) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond126) CFA_SP SP+0
        CFI (cfiCond126) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond127 Using cfiCommon0
        CFI (cfiCond127) NoFunction
        CFI (cfiCond127) Conditional ??CrossCallReturnLabel_100
        CFI (cfiCond127) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond127) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond127) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond127) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond127) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond127) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond127) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond127) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond127) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond127) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond127) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond127) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond127) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond127) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond127) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond127) CFA_SP SP+0
        CFI (cfiCond127) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond128 Using cfiCommon0
        CFI (cfiCond128) NoFunction
        CFI (cfiCond128) Conditional ??CrossCallReturnLabel_101
        CFI (cfiCond128) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond128) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond128) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond128) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond128) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond128) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond128) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond128) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond128) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond128) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond128) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond128) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond128) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond128) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond128) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond128) CFA_SP SP+0
        CFI (cfiCond128) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond129 Using cfiCommon0
        CFI (cfiCond129) NoFunction
        CFI (cfiCond129) Conditional ??CrossCallReturnLabel_102
        CFI (cfiCond129) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond129) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond129) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond129) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond129) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond129) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond129) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond129) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond129) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond129) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond129) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond129) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond129) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond129) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond129) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond129) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond129) CFA_SP SP+0
        CFI (cfiCond129) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond130 Using cfiCommon0
        CFI (cfiCond130) NoFunction
        CFI (cfiCond130) Conditional ??CrossCallReturnLabel_103
        CFI (cfiCond130) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond130) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond130) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond130) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond130) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond130) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond130) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond130) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond130) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond130) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond130) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond130) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond130) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond130) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond130) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond130) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond130) CFA_SP SP+-2
        CFI (cfiCond130) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond131 Using cfiCommon0
        CFI (cfiCond131) NoFunction
        CFI (cfiCond131) Conditional ??CrossCallReturnLabel_104
        CFI (cfiCond131) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond131) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond131) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond131) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond131) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond131) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond131) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond131) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond131) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond131) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond131) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond131) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond131) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond131) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond131) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond131) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond131) CFA_SP SP+0
        CFI (cfiCond131) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond132 Using cfiCommon0
        CFI (cfiCond132) NoFunction
        CFI (cfiCond132) Conditional ??CrossCallReturnLabel_105
        CFI (cfiCond132) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond132) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond132) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond132) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond132) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond132) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond132) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond132) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond132) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond132) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond132) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond132) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond132) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond132) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond132) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond132) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond132) CFA_SP SP+-2
        CFI (cfiCond132) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond133 Using cfiCommon0
        CFI (cfiCond133) NoFunction
        CFI (cfiCond133) Conditional ??CrossCallReturnLabel_106
        CFI (cfiCond133) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond133) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond133) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond133) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond133) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond133) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond133) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond133) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond133) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond133) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond133) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond133) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond133) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond133) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond133) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond133) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond133) CFA_SP SP+0
        CFI (cfiCond133) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond134 Using cfiCommon0
        CFI (cfiCond134) NoFunction
        CFI (cfiCond134) Conditional ??CrossCallReturnLabel_107
        CFI (cfiCond134) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond134) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond134) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond134) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond134) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond134) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond134) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond134) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond134) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond134) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond134) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond134) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond134) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond134) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond134) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond134) CFA_SP SP+0
        CFI (cfiCond134) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond135 Using cfiCommon0
        CFI (cfiCond135) NoFunction
        CFI (cfiCond135) Conditional ??CrossCallReturnLabel_108
        CFI (cfiCond135) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond135) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond135) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond135) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond135) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond135) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond135) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond135) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond135) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond135) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond135) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond135) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond135) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond135) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond135) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond135) CFA_SP SP+0
        CFI (cfiCond135) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiPicker136 Using cfiCommon1
        CFI (cfiPicker136) NoFunction
        CFI (cfiPicker136) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        RET
        CFI EndBlock cfiCond125
        CFI EndBlock cfiCond126
        CFI EndBlock cfiCond127
        CFI EndBlock cfiCond128
        CFI EndBlock cfiCond129
        CFI EndBlock cfiCond130
        CFI EndBlock cfiCond131
        CFI EndBlock cfiCond132
        CFI EndBlock cfiCond133
        CFI EndBlock cfiCond134
        CFI EndBlock cfiCond135
        CFI EndBlock cfiPicker136

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
        CFI Block cfiCond137 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_11
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 26)
        CFI Block cfiCond138 Using cfiCommon0
        CFI (cfiCond138) NoFunction
        CFI (cfiCond138) Conditional ??CrossCallReturnLabel_12
        CFI (cfiCond138) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond138) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond138) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond138) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond138) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond138) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond138) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond138) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond138) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond138) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond138) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond138) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond138) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond138) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond138) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond138) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond138) CFA_SP SP+0
        CFI (cfiCond138) CFA_XSP16 add(XSP16, 26)
        CFI Block cfiCond139 Using cfiCommon0
        CFI (cfiCond139) NoFunction
        CFI (cfiCond139) Conditional ??CrossCallReturnLabel_13
        CFI (cfiCond139) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond139) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond139) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond139) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond139) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond139) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond139) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond139) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond139) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond139) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond139) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond139) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond139) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond139) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond139) CFA_SP SP+0
        CFI (cfiCond139) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond140 Using cfiCommon0
        CFI (cfiCond140) NoFunction
        CFI (cfiCond140) Conditional ??CrossCallReturnLabel_14
        CFI (cfiCond140) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond140) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond140) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond140) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond140) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond140) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond140) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond140) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond140) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond140) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond140) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond140) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond140) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond140) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond140) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond140) CFA_SP SP+0
        CFI (cfiCond140) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond141 Using cfiCommon0
        CFI (cfiCond141) NoFunction
        CFI (cfiCond141) Conditional ??CrossCallReturnLabel_15
        CFI (cfiCond141) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond141) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond141) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond141) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond141) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond141) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond141) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond141) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond141) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond141) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond141) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond141) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond141) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond141) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond141) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond141) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond141) CFA_SP SP+0
        CFI (cfiCond141) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiPicker142 Using cfiCommon1
        CFI (cfiPicker142) NoFunction
        CFI (cfiPicker142) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        RET
        CFI EndBlock cfiCond137
        CFI EndBlock cfiCond138
        CFI EndBlock cfiCond139
        CFI EndBlock cfiCond140
        CFI EndBlock cfiCond141
        CFI EndBlock cfiPicker142

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond143 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond144 Using cfiCommon0
        CFI (cfiCond144) NoFunction
        CFI (cfiCond144) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond144) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond144) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond144) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond144) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond144) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond144) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond144) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond144) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond144) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond144) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond144) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond144) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond144) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond144) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond144) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond144) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond144) CFA_SP SP+0
        CFI (cfiCond144) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond145 Using cfiCommon0
        CFI (cfiCond145) NoFunction
        CFI (cfiCond145) Conditional ??CrossCallReturnLabel_2
        CFI (cfiCond145) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond145) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond145) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond145) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond145) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond145) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond145) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond145) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond145) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond145) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond145) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond145) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond145) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond145) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond145) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond145) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond145) CFA_SP SP+0
        CFI (cfiCond145) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond146 Using cfiCommon0
        CFI (cfiCond146) NoFunction
        CFI (cfiCond146) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond146) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond146) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond146) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond146) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond146) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond146) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond146) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond146) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond146) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond146) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond146) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond146) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond146) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond146) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond146) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond146) CFA_SP SP+0
        CFI (cfiCond146) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond147 Using cfiCommon0
        CFI (cfiCond147) NoFunction
        CFI (cfiCond147) Conditional ??CrossCallReturnLabel_4
        CFI (cfiCond147) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond147) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond147) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond147) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond147) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond147) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond147) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond147) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond147) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond147) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond147) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond147) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond147) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond147) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond147) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond147) CFA_SP SP+0
        CFI (cfiCond147) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond148 Using cfiCommon0
        CFI (cfiCond148) NoFunction
        CFI (cfiCond148) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond148) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond148) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond148) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond148) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond148) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond148) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond148) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond148) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond148) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond148) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond148) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond148) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond148) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond148) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond148) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond148) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond148) CFA_SP SP+0
        CFI (cfiCond148) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond149 Using cfiCommon0
        CFI (cfiCond149) NoFunction
        CFI (cfiCond149) Conditional ??CrossCallReturnLabel_6
        CFI (cfiCond149) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond149) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond149) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond149) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond149) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond149) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond149) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond149) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond149) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond149) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond149) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond149) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond149) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond149) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond149) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond149) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond149) CFA_SP SP+0
        CFI (cfiCond149) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond150 Using cfiCommon0
        CFI (cfiCond150) NoFunction
        CFI (cfiCond150) Conditional ??CrossCallReturnLabel_7
        CFI (cfiCond150) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond150) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond150) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond150) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond150) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond150) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond150) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond150) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond150) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond150) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond150) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond150) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond150) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond150) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond150) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond150) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond150) CFA_SP SP+0
        CFI (cfiCond150) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond151 Using cfiCommon0
        CFI (cfiCond151) NoFunction
        CFI (cfiCond151) Conditional ??CrossCallReturnLabel_8
        CFI (cfiCond151) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond151) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond151) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond151) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond151) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond151) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond151) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond151) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond151) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond151) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond151) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond151) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond151) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond151) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond151) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond151) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond151) CFA_SP SP+0
        CFI (cfiCond151) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiPicker152 Using cfiCommon1
        CFI (cfiPicker152) NoFunction
        CFI (cfiPicker152) Picker
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond143
        CFI EndBlock cfiCond144
        CFI EndBlock cfiCond145
        CFI EndBlock cfiCond146
        CFI EndBlock cfiCond147
        CFI EndBlock cfiCond148
        CFI EndBlock cfiCond149
        CFI EndBlock cfiCond150
        CFI EndBlock cfiCond151
        CFI EndBlock cfiPicker152
// 1022 
// 1023 /*********************************************************************
// 1024  * @fn      osal_nv_init
// 1025  *
// 1026  * @brief   Initialize NV service.
// 1027  *
// 1028  * @param   p - Not used.
// 1029  *
// 1030  * @return  none
// 1031  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1032 void osal_nv_init( void *p )
osal_nv_init:
        CFI Block cfiBlock153 Using cfiCommon0
        CFI Function osal_nv_init
        CODE
// 1033 {
        FUNCALL osal_nv_init, initNV
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1034   (void)p;  // Suppress Lint warning.
// 1035   (void)initNV();  // Always returns TRUE after pages have been erased.
        ; Setup parameters for call to function initNV
        LCALL   ??initNV?relay
// 1036 }
        POP     DPH
        CFI DPH0 SameValue
        CFI CFA_SP SP+-4
        POP     DPL
        CFI DPL0 SameValue
        CFI CFA_SP SP+-3
        LJMP    ?BRET
        CFI EndBlock cfiBlock153
// 1037 
// 1038 /*********************************************************************
// 1039  * @fn      osal_nv_item_init
// 1040  *
// 1041  * @brief   If the NV item does not already exist, it is created and
// 1042  *          initialized with the data passed to the function, if any.
// 1043  *          This function must be called before calling osal_nv_read() or
// 1044  *          osal_nv_write().
// 1045  *
// 1046  * @param   id  - Valid NV item Id.
// 1047  * @param   len - Item length.
// 1048  * @param  *buf - Pointer to item initalization data. Set to NULL if none.
// 1049  *
// 1050  * @return  NV_ITEM_UNINIT - Id did not exist and was created successfully.
// 1051  *          ZSUCCESS       - Id already existed, no action taken.
// 1052  *          NV_OPER_FAILED - Failure to find or create Id.
// 1053  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1054 uint8 osal_nv_item_init( uint16 id, uint16 len, void *buf )
osal_nv_item_init:
        CFI Block cfiBlock154 Using cfiCommon0
        CFI Function osal_nv_item_init
        CODE
// 1055 {
        FUNCALL osal_nv_item_init, findItem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_nv_item_init, initItem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_nv_item_init, initNV
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0 + 0,R4
        MOV     ?V0 + 1,R5
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine18 & 0xFFFF
// 1056   /* Global fail flag for fail due to low bus voltage has less impact on code
// 1057    * size than passing back a return value all the way from the lowest level.
// 1058    */
// 1059   failF = FALSE;
??CrossCallReturnLabel_33:
        MOV     DPTR,#failF
        CLR     A
        MOVX    @DPTR,A
// 1060 
// 1061   if ( (findItem( id ) != OSAL_NV_ITEM_NULL) )
        ; Setup parameters for call to function findItem
        LCALL   ??findItem?relay
        MOV     ?V0 + 5,R3
        MOV     A,R2
        ORL     A,?V0 + 5
        JZ      ??osal_nv_item_init_0
// 1062   {
// 1063     return ZSUCCESS;
        MOV     R1,#0x0
        SJMP    ??osal_nv_item_init_1
// 1064   }
// 1065   else if ( initItem( TRUE, id, len, buf ) )
??osal_nv_item_init_0:
        ; Setup parameters for call to function initItem
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     R1,#0x1
        LCALL   ??initItem?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     A,R1
        JZ      ??osal_nv_item_init_2
// 1066   {
// 1067     if ( failF )
        MOV     DPTR,#failF
        MOVX    A,@DPTR
        JZ      ??osal_nv_item_init_3
// 1068     {
// 1069       (void)initNV();  // See comment at the declaration of failF.
        ; Setup parameters for call to function initNV
        LCALL   ??initNV?relay
// 1070       return NV_OPER_FAILED;
        SJMP    ??osal_nv_item_init_2
// 1071     }
// 1072     else
// 1073     {
// 1074       return NV_ITEM_UNINIT;
??osal_nv_item_init_3:
        MOV     R1,#0x9
        SJMP    ??osal_nv_item_init_1
// 1075     }
// 1076   }
// 1077   else
// 1078   {
// 1079     return NV_OPER_FAILED;
??osal_nv_item_init_2:
        MOV     R1,#0xa
// 1080   }
??osal_nv_item_init_1:
        LJMP    ??Subroutine47_0 & 0xFFFF
        CFI EndBlock cfiBlock154
// 1081 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine18:
        CFI Block cfiCond155 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_32
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond156 Using cfiCommon0
        CFI (cfiCond156) NoFunction
        CFI (cfiCond156) Conditional ??CrossCallReturnLabel_33
        CFI (cfiCond156) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond156) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond156) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond156) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond156) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond156) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond156) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond156) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond156) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond156) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond156) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond156) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond156) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond156) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond156) CFA_SP SP+0
        CFI (cfiCond156) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond157 Using cfiCommon0
        CFI (cfiCond157) NoFunction
        CFI (cfiCond157) Conditional ??CrossCallReturnLabel_34
        CFI (cfiCond157) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond157) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond157) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond157) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond157) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond157) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond157) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond157) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond157) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond157) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond157) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond157) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond157) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond157) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond157) CFA_SP SP+0
        CFI (cfiCond157) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker158 Using cfiCommon1
        CFI (cfiPicker158) NoFunction
        CFI (cfiPicker158) Picker
        MOVX    A,@DPTR
        MOV     ?V0 + 2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 3,A
        RET
        CFI EndBlock cfiCond155
        CFI EndBlock cfiCond156
        CFI EndBlock cfiCond157
        CFI EndBlock cfiPicker158
// 1082 
// 1083 /*********************************************************************
// 1084  * @fn      osal_nv_item_len
// 1085  *
// 1086  * @brief   Get the data length of the item stored in NV memory.
// 1087  *
// 1088  * @param   id  - Valid NV item Id.
// 1089  *
// 1090  * @return  Item length, if found; zero otherwise.
// 1091  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1092 uint16 osal_nv_item_len( uint16 id )
osal_nv_item_len:
        CFI Block cfiBlock159 Using cfiCommon0
        CFI Function osal_nv_item_len
        CODE
// 1093 {
        FUNCALL osal_nv_item_len, findItem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_nv_item_len, HalFlashRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 8
        MOV     A,#-0x8
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 18)
// 1094   uint16 offset = findItem( id );
        ; Setup parameters for call to function findItem
        LCALL   ??findItem?relay
// 1095 
// 1096   if ( offset == OSAL_NV_ITEM_NULL )
        MOV     A,R2
        ORL     A,R3
        JNZ     ??osal_nv_item_len_0
// 1097   {
// 1098     return 0;
        MOV     R2,#0x0
        MOV     R3,#0x0
        SJMP    ??CrossCallReturnLabel_45
// 1099   }
// 1100   else
// 1101   {
// 1102     osalNvHdr_t hdr;
// 1103     HalFlashRead(findPg, (offset - OSAL_NV_HDR_SIZE), (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
??osal_nv_item_len_0:
        ; Setup parameters for call to function HalFlashRead
        MOV     ?V0 + 0,#0x8
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,R2
        ADD     A,#-0x8
        MOV     R2,A
        MOV     A,R3
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_109:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 18)
// 1104     return hdr.len;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine22 & 0xFFFF
// 1105   }
??CrossCallReturnLabel_45:
        MOV     A,#0x8
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock159
// 1106 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine22:
        CFI Block cfiCond160 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_44
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 26)
        CFI Block cfiCond161 Using cfiCommon0
        CFI (cfiCond161) NoFunction
        CFI (cfiCond161) Conditional ??CrossCallReturnLabel_45
        CFI (cfiCond161) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond161) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond161) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond161) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond161) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond161) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond161) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond161) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond161) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond161) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond161) CFA_SP SP+0
        CFI (cfiCond161) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond162 Using cfiCommon0
        CFI (cfiCond162) NoFunction
        CFI (cfiCond162) Conditional ??CrossCallReturnLabel_46
        CFI (cfiCond162) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond162) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond162) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond162) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond162) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond162) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond162) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond162) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond162) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond162) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond162) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond162) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond162) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond162) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond162) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond162) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond162) CFA_SP SP+0
        CFI (cfiCond162) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond163 Using cfiCommon0
        CFI (cfiCond163) NoFunction
        CFI (cfiCond163) Conditional ??CrossCallReturnLabel_47
        CFI (cfiCond163) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond163) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond163) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond163) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond163) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond163) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond163) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond163) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond163) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond163) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond163) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond163) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond163) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond163) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond163) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond163) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond163) CFA_SP SP+0
        CFI (cfiCond163) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond164 Using cfiCommon0
        CFI (cfiCond164) NoFunction
        CFI (cfiCond164) Conditional ??CrossCallReturnLabel_48
        CFI (cfiCond164) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond164) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond164) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond164) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond164) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond164) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond164) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond164) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond164) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond164) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond164) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond164) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond164) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond164) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond164) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond164) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond164) CFA_SP SP+0
        CFI (cfiCond164) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiPicker165 Using cfiCommon1
        CFI (cfiPicker165) NoFunction
        CFI (cfiPicker165) Picker
        LCALL   ?Subroutine37 & 0xFFFF
??CrossCallReturnLabel_74:
        RET
        CFI EndBlock cfiCond160
        CFI EndBlock cfiCond161
        CFI EndBlock cfiCond162
        CFI EndBlock cfiCond163
        CFI EndBlock cfiCond164
        CFI EndBlock cfiPicker165

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine37:
        CFI Block cfiCond166 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_73, ??CrossCallReturnLabel_41
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond167 Using cfiCommon0
        CFI (cfiCond167) NoFunction
        CFI (cfiCond167) Conditional ??CrossCallReturnLabel_73, ??CrossCallReturnLabel_42
        CFI (cfiCond167) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond167) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond167) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond167) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond167) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond167) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond167) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond167) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond167) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond167) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond167) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond167) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond167) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond167) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond167) CFA_SP SP+0
        CFI (cfiCond167) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond168 Using cfiCommon0
        CFI (cfiCond168) NoFunction
        CFI (cfiCond168) Conditional ??CrossCallReturnLabel_73, ??CrossCallReturnLabel_43
        CFI (cfiCond168) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond168) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond168) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond168) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond168) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond168) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond168) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond168) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond168) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond168) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond168) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond168) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond168) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond168) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond168) CFA_SP SP+0
        CFI (cfiCond168) CFA_XSP16 add(XSP16, 26)
        CFI Block cfiCond169 Using cfiCommon0
        CFI (cfiCond169) NoFunction
        CFI (cfiCond169) Conditional ??CrossCallReturnLabel_71, ??CrossCallReturnLabel_28
        CFI (cfiCond169) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond169) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond169) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond169) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond169) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond169) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond169) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond169) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond169) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond169) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond169) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond169) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond169) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond169) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond169) CFA_SP SP+0
        CFI (cfiCond169) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond170 Using cfiCommon0
        CFI (cfiCond170) NoFunction
        CFI (cfiCond170) Conditional ??CrossCallReturnLabel_71, ??CrossCallReturnLabel_29
        CFI (cfiCond170) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond170) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond170) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond170) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond170) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond170) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond170) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond170) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond170) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond170) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond170) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond170) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond170) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond170) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond170) CFA_SP SP+0
        CFI (cfiCond170) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond171 Using cfiCommon0
        CFI (cfiCond171) NoFunction
        CFI (cfiCond171) Conditional ??CrossCallReturnLabel_74, ??CrossCallReturnLabel_44
        CFI (cfiCond171) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond171) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond171) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond171) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond171) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond171) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond171) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond171) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond171) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond171) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond171) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond171) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond171) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond171) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond171) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond171) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond171) CFA_SP SP+0
        CFI (cfiCond171) CFA_XSP16 add(XSP16, 26)
        CFI Block cfiCond172 Using cfiCommon0
        CFI (cfiCond172) NoFunction
        CFI (cfiCond172) Conditional ??CrossCallReturnLabel_74, ??CrossCallReturnLabel_45
        CFI (cfiCond172) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond172) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond172) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond172) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond172) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond172) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond172) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond172) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond172) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond172) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond172) CFA_SP SP+0
        CFI (cfiCond172) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond173 Using cfiCommon0
        CFI (cfiCond173) NoFunction
        CFI (cfiCond173) Conditional ??CrossCallReturnLabel_74, ??CrossCallReturnLabel_46
        CFI (cfiCond173) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond173) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond173) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond173) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond173) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond173) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond173) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond173) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond173) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond173) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond173) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond173) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond173) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond173) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond173) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond173) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond173) CFA_SP SP+0
        CFI (cfiCond173) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond174 Using cfiCommon0
        CFI (cfiCond174) NoFunction
        CFI (cfiCond174) Conditional ??CrossCallReturnLabel_74, ??CrossCallReturnLabel_47
        CFI (cfiCond174) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond174) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond174) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond174) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond174) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond174) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond174) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond174) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond174) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond174) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond174) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond174) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond174) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond174) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond174) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond174) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond174) CFA_SP SP+0
        CFI (cfiCond174) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond175 Using cfiCommon0
        CFI (cfiCond175) NoFunction
        CFI (cfiCond175) Conditional ??CrossCallReturnLabel_74, ??CrossCallReturnLabel_48
        CFI (cfiCond175) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond175) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond175) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond175) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond175) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond175) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond175) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond175) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond175) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond175) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond175) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond175) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond175) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond175) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond175) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond175) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond175) CFA_SP SP+0
        CFI (cfiCond175) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond176 Using cfiCommon0
        CFI (cfiCond176) NoFunction
        CFI (cfiCond176) Conditional ??CrossCallReturnLabel_72, ??CrossCallReturnLabel_30
        CFI (cfiCond176) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond176) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond176) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond176) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond176) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond176) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond176) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond176) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond176) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond176) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond176) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond176) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond176) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond176) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond176) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond176) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond176) CFA_SP SP+0
        CFI (cfiCond176) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond177 Using cfiCommon0
        CFI (cfiCond177) NoFunction
        CFI (cfiCond177) Conditional ??CrossCallReturnLabel_72, ??CrossCallReturnLabel_31
        CFI (cfiCond177) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond177) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond177) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond177) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond177) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond177) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond177) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond177) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond177) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond177) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond177) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond177) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond177) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond177) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond177) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond177) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond177) CFA_SP SP+0
        CFI (cfiCond177) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiPicker178 Using cfiCommon1
        CFI (cfiPicker178) NoFunction
        CFI (cfiPicker178) Picker
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        RET
        CFI EndBlock cfiCond166
        CFI EndBlock cfiCond167
        CFI EndBlock cfiCond168
        CFI EndBlock cfiCond169
        CFI EndBlock cfiCond170
        CFI EndBlock cfiCond171
        CFI EndBlock cfiCond172
        CFI EndBlock cfiCond173
        CFI EndBlock cfiCond174
        CFI EndBlock cfiCond175
        CFI EndBlock cfiCond176
        CFI EndBlock cfiCond177
        CFI EndBlock cfiPicker178
// 1107 
// 1108 /*********************************************************************
// 1109  * @fn      osal_nv_write
// 1110  *
// 1111  * @brief   Write a data item to NV. Function can write an entire item to NV or
// 1112  *          an element of an item by indexing into the item with an offset.
// 1113  *
// 1114  * @param   id  - Valid NV item Id.
// 1115  * @param   ndx - Index offset into item
// 1116  * @param   len - Length of data to write.
// 1117  * @param  *buf - Data to write.
// 1118  *
// 1119  * @return  ZSUCCESS if successful, NV_ITEM_UNINIT if item did not
// 1120  *          exist in NV and offset is non-zero, NV_OPER_FAILED if failure.
// 1121  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1122 uint8 osal_nv_write( uint16 id, uint16 ndx, uint16 len, void *buf )
osal_nv_write:
        CFI Block cfiBlock179 Using cfiCommon0
        CFI Function osal_nv_write
        CODE
// 1123 {
        FUNCALL osal_nv_write, findItem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_nv_write, HalFlashRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_nv_write, HalFlashRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_nv_write, initItem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_nv_write, setItem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_nv_write, xferBuf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_nv_write, writeBuf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_nv_write, xferBuf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_nv_write, calcChkF
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_nv_write, writeWordH
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_nv_write, HalFlashRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_nv_write, setItem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_nv_write, compactPage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_nv_write, initNV
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 15
        MOV     A,#-0xf
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 31)
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        MOV     ?V0 + 2,R4
        MOV     ?V0 + 3,R5
// 1124   uint8 rtrn = ZSUCCESS;
        MOV     ?V0 + 1,#0x0
// 1125 
// 1126   /* Global fail flag for fail due to low bus voltage has less impact on code
// 1127    * size than passing back a return value all the way from the lowest level.
// 1128    */
// 1129   failF = FALSE;
        MOV     DPTR,#failF
        CLR     A
        MOVX    @DPTR,A
// 1130 
// 1131   if ( len != 0 )
        MOV     A,#0x1f
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_15:
        JNZ     $+5
        LJMP    ??osal_nv_write_0 & 0xFFFF
// 1132   {
// 1133     osalNvHdr_t hdr;
// 1134     uint16 origOff, srcOff;
// 1135     uint16 cnt;
// 1136     uint8 *ptr;
// 1137 
// 1138     origOff = srcOff = findItem( id );
        ; Setup parameters for call to function findItem
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_46:
        LCALL   ??findItem?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     R0,?V0 + 4
        MOV     R1,?V0 + 5
        MOV     A,R0
        MOV     R6,A
        MOV     A,R1
        MOV     R7,A
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine7 & 0xFFFF
// 1139     if ( srcOff == OSAL_NV_ITEM_NULL )
??CrossCallReturnLabel_5:
        MOV     A,R6
        ORL     A,R7
        JNZ     ??osal_nv_write_1
// 1140     {
// 1141       return NV_ITEM_UNINIT;
        MOV     R1,#0x9
        LJMP    ??osal_nv_write_2 & 0xFFFF
// 1142     }
// 1143 
// 1144     HalFlashRead(findPg, (srcOff - OSAL_NV_HDR_SIZE), (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
??osal_nv_write_1:
        ; Setup parameters for call to function HalFlashRead
        MOV     ?V0 + 4,#0x8
        MOV     ?V0 + 5,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 33)
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,R6
        ADD     A,#-0x8
        MOV     R2,A
        MOV     A,R7
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_110:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 31)
// 1145     if ( hdr.len < (ndx + len) )
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        PUSH    DPL
        CFI CFA_SP SP+-1
        PUSH    DPH
        CFI CFA_SP SP+-2
        MOV     A,#0x1f
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_49:
        POP     DPH
        CFI CFA_SP SP+-1
        POP     DPL
        CFI CFA_SP SP+0
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,R0
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,R1
        JNC     ??osal_nv_write_3
// 1146     {
// 1147       return NV_OPER_FAILED;
        MOV     R1,#0xa
        LJMP    ??osal_nv_write_2 & 0xFFFF
// 1148     }
// 1149 
// 1150     srcOff += ndx;
??osal_nv_write_3:
        LCALL   ?Subroutine33 & 0xFFFF
// 1151     ptr = buf;
??CrossCallReturnLabel_63:
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 7,A
// 1152     cnt = len;
        MOV     A,#0x1f
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine49_0 & 0xFFFF
??CrossCallReturnLabel_102:
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine7 & 0xFFFF
// 1153     while ( cnt )
// 1154     {
// 1155       uint8 tmp;
// 1156       HalFlashRead(findPg, srcOff++, &tmp, 1);
??CrossCallReturnLabel_6:
        ; Setup parameters for call to function HalFlashRead
        MOV     ?V0 + 4,#0x1
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 33)
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        LCALL   ??Subroutine51_0 & 0xFFFF
??CrossCallReturnLabel_111:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 31)
        MOV     A,R6
        ADD     A,#0x1
        INC     R6
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
// 1157       if ( tmp != *ptr++ )
        MOV     R0,?V0 + 6
        MOV     R1,?V0 + 7
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        MOV     ?V0 + 6,DPL
        MOV     ?V0 + 7,DPH
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        XRL     A,R2
        JNZ     ??osal_nv_write_4
// 1158       {
// 1159         break;
// 1160       }
// 1161       cnt--;
// 1162     }
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ADD     A,#-0x1
        MOVX    @DPTR,A
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#-0x1
        MOVX    @DPTR,A
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JNZ     ??CrossCallReturnLabel_6
        LJMP    ??osal_nv_write_5 & 0xFFFF
// 1163 
// 1164     if ( cnt != 0 )  // If the buffer to write is different in one or more bytes.
// 1165     {
// 1166       uint8 comPg, dstPg = initItem( FALSE, id, hdr.len, &comPg );
??osal_nv_write_4:
        ; Setup parameters for call to function initItem
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 4,DPL
        MOV     ?V0 + 5,DPH
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 33)
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_40:
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_47:
        MOV     R1,#0x0
        LCALL   ??initItem?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 31)
        MOV     A,R1
        MOV     ?V0 + 0,A
// 1167 
// 1168       if ( dstPg != OSAL_NV_PAGE_NULL )
        JNZ     $+5
        LJMP    ??osal_nv_write_6 & 0xFFFF
// 1169       {
// 1170         uint16 tmp = OSAL_NV_DATA_SIZE( hdr.len );
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ADD     A,#0x3
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        LCALL   ??Subroutine44_0 & 0xFFFF
??CrossCallReturnLabel_85:
        MOV     R0,A
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine7 & 0xFFFF
// 1171         uint16 dstOff = pgOff[dstPg-OSAL_NV_PAGE_BEG] - tmp;
??CrossCallReturnLabel_7:
        MOV     A,?V0 + 0
        CLR     C
        RLC     A
        MOV     R0,A
        CLR     A
        RLC     A
        MOV     R1,A
        MOV     A,#(pgOff + 14) & 0xff
        ADD     A,R0
        MOV     R0,A
        MOV     A,#((pgOff - 242) >> 8) & 0xff
        ADDC    A,R1
        MOV     R1,A
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_8:
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_24:
        PUSH    DPL
        CFI CFA_SP SP+-1
        PUSH    DPH
        CFI CFA_SP SP+-2
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine49_0 & 0xFFFF
??CrossCallReturnLabel_103:
        POP     DPH
        CFI CFA_SP SP+-1
        POP     DPL
        CFI CFA_SP SP+0
        LCALL   ?Subroutine24 & 0xFFFF
// 1172         uint8 srcPg = findPg;
??CrossCallReturnLabel_51:
        MOV     DPTR,#findPg
        MOVX    A,@DPTR
        MOV     ?V0 + 6,A
// 1173         srcOff = origOff;
// 1174 
// 1175         setItem( srcPg, srcOff, eNvXfer );
        ; Setup parameters for call to function setItem
        MOV     R4,#0x0
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine17 & 0xFFFF
// 1176 
// 1177         xferBuf( srcPg, srcOff, dstPg, dstOff, ndx );
??CrossCallReturnLabel_30:
        ; Setup parameters for call to function xferBuf
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 33)
        MOV     ?V0 + 4,R6
        MOV     ?V0 + 5,R7
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 35)
        MOV     R4,?V0 + 0
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_48:
        MOV     R1,?V0 + 6
        LCALL   ??xferBuf?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 31)
// 1178         srcOff += ndx;
// 1179         dstOff += ndx;
        LCALL   ?Subroutine33 & 0xFFFF
// 1180 
// 1181         writeBuf( dstPg, dstOff, len, buf );
??CrossCallReturnLabel_64:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?PUSH_XSTACK8_X_TWO
        CFI CFA_XSP16 add(XSP16, 33)
        MOV     A,#0x21
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_26:
        LCALL   ??writeBuf?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 31)
// 1182         srcOff += len;
// 1183         dstOff += len;
// 1184 
// 1185         xferBuf( srcPg, srcOff, dstPg, dstOff, (hdr.len-ndx-len) );
        ; Setup parameters for call to function xferBuf
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,?V0 + 2
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,?V0 + 3
        MOV     R3,A
        MOV     A,#0x1f
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine49_0 & 0xFFFF
??CrossCallReturnLabel_104:
        MOV     A,R2
        CLR     C
        SUBB    A,R0
        MOV     ?V0 + 4,A
        MOV     A,R3
        SUBB    A,R1
        MOV     ?V0 + 5,A
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 33)
        MOV     A,#0x21
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ADD     A,R6
        MOV     ?V0 + 4,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R7
        MOV     ?V0 + 5,A
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 35)
        MOV     R4,?V0 + 0
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_50:
        MOV     A,#0x23
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOV     R3,A
        MOV     R1,?V0 + 6
        LCALL   ??xferBuf?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 31)
// 1186 
// 1187         // Calculate and write the new checksum.
// 1188         dstOff = pgOff[dstPg-OSAL_NV_PAGE_BEG] - tmp;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_25:
        PUSH    DPL
        CFI CFA_SP SP+-1
        PUSH    DPH
        CFI CFA_SP SP+-2
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine49_0 & 0xFFFF
??CrossCallReturnLabel_105:
        POP     DPH
        CFI CFA_SP SP+-1
        POP     DPL
        CFI CFA_SP SP+0
        LCALL   ?Subroutine24 & 0xFFFF
// 1189         tmp = calcChkF( dstPg, dstOff, hdr.len );
??CrossCallReturnLabel_52:
        ; Setup parameters for call to function calcChkF
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_27:
        LCALL   ??calcChkF?relay
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
// 1190         dstOff -= OSAL_NV_HDR_SIZE;
        MOV     A,R6
        ADD     A,#-0x8
        MOV     R6,A
        MOV     A,R7
        ADDC    A,#-0x1
        MOV     R7,A
// 1191         writeWordH( dstPg, (dstOff+OSAL_NV_HDR_CHK), (uint8 *)&tmp );
        ; Setup parameters for call to function writeWordH
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,R6
        ADD     A,#0x4
        MOV     R2,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R3,A
        MOV     R1,?V0 + 0
        LCALL   ??writeWordH?relay
// 1192         HalFlashRead(dstPg, dstOff, (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
        ; Setup parameters for call to function HalFlashRead
        MOV     ?V0 + 2,#0x8
        MOV     ?V0 + 3,#0x0
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 33)
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     R1,?V0 + 0
        LCALL   ??Subroutine54_0 & 0xFFFF
??CrossCallReturnLabel_127:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 31)
// 1193 
// 1194         if ( tmp == hdr.chk )
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine49_0 & 0xFFFF
??CrossCallReturnLabel_106:
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??osal_nv_write_7
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??osal_nv_write_7:
        JNZ     ??osal_nv_write_8
// 1195         {
// 1196           setItem( srcPg, origOff, eNvZero );
        ; Setup parameters for call to function setItem
        MOV     R4,#0x1
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine17 & 0xFFFF
// 1197         }
??CrossCallReturnLabel_31:
        SJMP    ??osal_nv_write_9
// 1198         else
// 1199         {
// 1200           rtrn = NV_OPER_FAILED;
??osal_nv_write_8:
        MOV     ?V0 + 1,#0xa
// 1201         }
// 1202 
// 1203         if ( dstPg == pgRes )
??osal_nv_write_9:
        MOV     DPTR,#pgRes
        MOVX    A,@DPTR
        XRL     A,?V0 + 0
        JNZ     ??osal_nv_write_5
// 1204         {
// 1205           compactPage( comPg );
        ; Setup parameters for call to function compactPage
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??compactPage?relay
        SJMP    ??osal_nv_write_5
// 1206         }
// 1207       }
// 1208       else
// 1209       {
// 1210         rtrn = NV_OPER_FAILED;
??osal_nv_write_6:
        MOV     ?V0 + 1,#0xa
// 1211       }
// 1212     }
// 1213   }
// 1214 
// 1215   if ( failF )
??osal_nv_write_5:
        MOV     DPTR,#failF
        MOVX    A,@DPTR
        JZ      ??osal_nv_write_0
// 1216   {
// 1217     (void)initNV();  // See comment at the declaration of failF.
        ; Setup parameters for call to function initNV
        LCALL   ??initNV?relay
// 1218     rtrn = NV_OPER_FAILED;
        MOV     ?V0 + 1,#0xa
// 1219   }
// 1220 
// 1221   return rtrn;
??osal_nv_write_0:
        MOV     R1,?V0 + 1
??osal_nv_write_2:
        MOV     A,#0xf
        CFI EndBlock cfiBlock179
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2
// 1222 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiBlock180 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 26)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock180
        REQUIRE ??Subroutine50_0
        ; // Fall through to label ??Subroutine50_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine50_0:
        CFI Block cfiBlock181 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock181

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine33:
        CFI Block cfiCond182 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_63
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond183 Using cfiCommon0
        CFI (cfiCond183) NoFunction
        CFI (cfiCond183) Conditional ??CrossCallReturnLabel_64
        CFI (cfiCond183) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond183) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond183) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond183) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond183) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond183) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond183) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond183) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond183) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond183) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond183) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond183) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond183) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond183) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond183) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond183) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond183) CFA_SP SP+0
        CFI (cfiCond183) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiPicker184 Using cfiCommon1
        CFI (cfiPicker184) NoFunction
        CFI (cfiPicker184) Picker
        MOV     A,R6
        ADD     A,?V0 + 2
        MOV     R6,A
        MOV     A,R7
        ADDC    A,?V0 + 3
        MOV     R7,A
        ; Setup parameters for call to function writeBuf
        MOV     A,#0x21
        RET
        CFI EndBlock cfiCond182
        CFI EndBlock cfiCond183
        CFI EndBlock cfiPicker184

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine24:
        CFI Block cfiCond185 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_51
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond186 Using cfiCommon0
        CFI (cfiCond186) NoFunction
        CFI (cfiCond186) Conditional ??CrossCallReturnLabel_52
        CFI (cfiCond186) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond186) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond186) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond186) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond186) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond186) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond186) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond186) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond186) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond186) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond186) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond186) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond186) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond186) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond186) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond186) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond186) CFA_SP SP+0
        CFI (cfiCond186) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiPicker187 Using cfiCommon1
        CFI (cfiPicker187) NoFunction
        CFI (cfiPicker187) Picker
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,R0
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,R1
        MOV     R7,A
        RET
        CFI EndBlock cfiCond185
        CFI EndBlock cfiCond186
        CFI EndBlock cfiPicker187

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine23:
        CFI Block cfiCond188 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_49
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+-2
        CFI CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond189 Using cfiCommon0
        CFI (cfiCond189) NoFunction
        CFI (cfiCond189) Conditional ??CrossCallReturnLabel_50
        CFI (cfiCond189) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond189) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond189) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond189) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond189) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond189) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond189) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond189) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond189) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond189) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond189) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond189) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond189) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond189) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond189) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond189) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond189) CFA_SP SP+0
        CFI (cfiCond189) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiPicker190 Using cfiCommon1
        CFI (cfiPicker190) NoFunction
        CFI (cfiPicker190) Picker
        MOVX    A,@DPTR
        ADD     A,?V0 + 2
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,?V0 + 3
        MOV     R1,A
        RET
        CFI EndBlock cfiCond188
        CFI EndBlock cfiCond189
        CFI EndBlock cfiPicker190

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine17:
        CFI Block cfiCond191 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_30
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond192 Using cfiCommon0
        CFI (cfiCond192) NoFunction
        CFI (cfiCond192) Conditional ??CrossCallReturnLabel_31
        CFI (cfiCond192) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond192) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond192) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond192) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond192) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond192) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond192) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond192) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond192) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond192) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond192) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond192) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond192) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond192) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond192) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond192) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond192) CFA_SP SP+0
        CFI (cfiCond192) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiPicker193 Using cfiCommon1
        CFI (cfiPicker193) NoFunction
        CFI (cfiPicker193) Picker
        LCALL   ?Subroutine37 & 0xFFFF
??CrossCallReturnLabel_72:
        MOV     R1,?V0 + 6
        LCALL   ??setItem?relay
        RET
        CFI EndBlock cfiCond191
        CFI EndBlock cfiCond192
        CFI EndBlock cfiPicker193

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine15:
        CFI Block cfiCond194 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_26
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond195 Using cfiCommon0
        CFI (cfiCond195) NoFunction
        CFI (cfiCond195) Conditional ??CrossCallReturnLabel_27
        CFI (cfiCond195) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond195) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond195) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond195) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond195) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond195) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond195) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond195) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond195) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond195) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond195) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond195) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond195) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond195) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond195) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond195) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond195) CFA_SP SP+0
        CFI (cfiCond195) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiPicker196 Using cfiCommon1
        CFI (cfiPicker196) NoFunction
        CFI (cfiPicker196) Picker
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     R1,?V0 + 0
        RET
        CFI EndBlock cfiCond194
        CFI EndBlock cfiCond195
        CFI EndBlock cfiPicker196

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine14:
        CFI Block cfiCond197 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_23
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond198 Using cfiCommon0
        CFI (cfiCond198) NoFunction
        CFI (cfiCond198) Conditional ??CrossCallReturnLabel_24
        CFI (cfiCond198) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond198) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond198) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond198) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond198) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond198) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond198) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond198) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond198) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond198) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond198) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond198) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond198) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond198) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond198) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond198) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond198) CFA_SP SP+0
        CFI (cfiCond198) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond199 Using cfiCommon0
        CFI (cfiCond199) NoFunction
        CFI (cfiCond199) Conditional ??CrossCallReturnLabel_25
        CFI (cfiCond199) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond199) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond199) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond199) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond199) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond199) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond199) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond199) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond199) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond199) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond199) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond199) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond199) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond199) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond199) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond199) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond199) CFA_SP SP+0
        CFI (cfiCond199) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiPicker200 Using cfiCommon1
        CFI (cfiPicker200) NoFunction
        CFI (cfiPicker200) Picker
        LCALL   ?Subroutine38 & 0xFFFF
??CrossCallReturnLabel_76:
        RET
        CFI EndBlock cfiCond197
        CFI EndBlock cfiCond198
        CFI EndBlock cfiCond199
        CFI EndBlock cfiPicker200

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine38:
        CFI Block cfiCond201 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_75, ??CrossCallReturnLabel_18
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond202 Using cfiCommon0
        CFI (cfiCond202) NoFunction
        CFI (cfiCond202) Conditional ??CrossCallReturnLabel_75, ??CrossCallReturnLabel_19
        CFI (cfiCond202) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond202) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond202) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond202) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond202) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond202) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond202) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond202) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond202) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond202) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond202) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond202) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond202) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond202) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond202) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond202) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond202) CFA_SP SP+0
        CFI (cfiCond202) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond203 Using cfiCommon0
        CFI (cfiCond203) NoFunction
        CFI (cfiCond203) Conditional ??CrossCallReturnLabel_75, ??CrossCallReturnLabel_20
        CFI (cfiCond203) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond203) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond203) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond203) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond203) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond203) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond203) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond203) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond203) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond203) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond203) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond203) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond203) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond203) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond203) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond203) CFA_SP SP+0
        CFI (cfiCond203) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond204 Using cfiCommon0
        CFI (cfiCond204) NoFunction
        CFI (cfiCond204) Conditional ??CrossCallReturnLabel_76, ??CrossCallReturnLabel_23
        CFI (cfiCond204) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond204) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond204) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond204) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond204) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond204) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond204) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond204) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond204) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond204) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond204) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond204) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond204) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond204) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond204) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond204) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond204) CFA_SP SP+0
        CFI (cfiCond204) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond205 Using cfiCommon0
        CFI (cfiCond205) NoFunction
        CFI (cfiCond205) Conditional ??CrossCallReturnLabel_76, ??CrossCallReturnLabel_24
        CFI (cfiCond205) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond205) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond205) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond205) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond205) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond205) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond205) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond205) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond205) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond205) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond205) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond205) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond205) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond205) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond205) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond205) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond205) CFA_SP SP+0
        CFI (cfiCond205) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond206 Using cfiCommon0
        CFI (cfiCond206) NoFunction
        CFI (cfiCond206) Conditional ??CrossCallReturnLabel_76, ??CrossCallReturnLabel_25
        CFI (cfiCond206) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond206) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond206) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond206) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond206) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond206) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond206) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond206) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond206) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond206) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond206) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond206) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond206) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond206) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond206) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond206) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond206) CFA_SP SP+0
        CFI (cfiCond206) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiPicker207 Using cfiCommon1
        CFI (cfiPicker207) NoFunction
        CFI (cfiPicker207) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        RET
        CFI EndBlock cfiCond201
        CFI EndBlock cfiCond202
        CFI EndBlock cfiCond203
        CFI EndBlock cfiCond204
        CFI EndBlock cfiCond205
        CFI EndBlock cfiCond206
        CFI EndBlock cfiPicker207

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond208 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_109
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond209 Using cfiCommon0
        CFI (cfiCond209) NoFunction
        CFI (cfiCond209) Conditional ??CrossCallReturnLabel_110
        CFI (cfiCond209) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond209) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond209) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond209) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond209) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond209) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond209) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond209) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond209) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond209) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond209) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond209) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond209) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond209) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond209) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond209) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond209) CFA_SP SP+0
        CFI (cfiCond209) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiPicker210 Using cfiCommon1
        CFI (cfiPicker210) NoFunction
        CFI (cfiPicker210) Picker
        ADDC    A,#-0x1
        CFI EndBlock cfiCond208
        CFI EndBlock cfiCond209
        CFI EndBlock cfiPicker210
        REQUIRE ??Subroutine51_0
        ; // Fall through to label ??Subroutine51_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine51_0:
        CFI Block cfiCond211 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_111
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond212 Using cfiCommon0
        CFI (cfiCond212) NoFunction
        CFI (cfiCond212) Conditional ??CrossCallReturnLabel_112
        CFI (cfiCond212) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond212) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond212) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond212) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond212) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond212) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond212) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond212) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond212) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond212) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond212) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond212) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond212) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond212) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond212) CFA_SP SP+0
        CFI (cfiCond212) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond213 Using cfiCommon0
        CFI (cfiCond213) NoFunction
        CFI (cfiCond213) Conditional ??CrossCallReturnLabel_109
        CFI (cfiCond213) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond213) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond213) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond213) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond213) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond213) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond213) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond213) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond213) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond213) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond213) CFA_SP SP+0
        CFI (cfiCond213) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond214 Using cfiCommon0
        CFI (cfiCond214) NoFunction
        CFI (cfiCond214) Conditional ??CrossCallReturnLabel_110
        CFI (cfiCond214) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond214) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond214) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond214) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond214) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond214) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond214) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond214) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond214) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond214) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond214) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond214) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond214) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond214) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond214) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond214) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond214) CFA_SP SP+0
        CFI (cfiCond214) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiPicker215 Using cfiCommon1
        CFI (cfiPicker215) NoFunction
        CFI (cfiPicker215) Picker
        MOV     R3,A
        MOV     DPTR,#findPg
        CFI EndBlock cfiCond211
        CFI EndBlock cfiCond212
        CFI EndBlock cfiCond213
        CFI EndBlock cfiCond214
        CFI EndBlock cfiPicker215
        REQUIRE ??Subroutine52_0
        ; // Fall through to label ??Subroutine52_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine52_0:
        CFI Block cfiCond216 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_113
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond217 Using cfiCommon0
        CFI (cfiCond217) NoFunction
        CFI (cfiCond217) Conditional ??CrossCallReturnLabel_114
        CFI (cfiCond217) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond217) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond217) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond217) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond217) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond217) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond217) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond217) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond217) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond217) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond217) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond217) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond217) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond217) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond217) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond217) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond217) CFA_SP SP+0
        CFI (cfiCond217) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond218 Using cfiCommon0
        CFI (cfiCond218) NoFunction
        CFI (cfiCond218) Conditional ??CrossCallReturnLabel_115
        CFI (cfiCond218) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond218) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond218) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond218) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond218) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond218) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond218) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond218) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond218) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond218) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond218) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond218) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond218) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond218) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond218) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond218) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond218) CFA_SP SP+0
        CFI (cfiCond218) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond219 Using cfiCommon0
        CFI (cfiCond219) NoFunction
        CFI (cfiCond219) Conditional ??CrossCallReturnLabel_111
        CFI (cfiCond219) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond219) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond219) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond219) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond219) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond219) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond219) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond219) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond219) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond219) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond219) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond219) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond219) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond219) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond219) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond219) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond219) CFA_SP SP+0
        CFI (cfiCond219) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond220 Using cfiCommon0
        CFI (cfiCond220) NoFunction
        CFI (cfiCond220) Conditional ??CrossCallReturnLabel_112
        CFI (cfiCond220) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond220) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond220) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond220) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond220) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond220) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond220) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond220) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond220) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond220) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond220) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond220) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond220) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond220) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond220) CFA_SP SP+0
        CFI (cfiCond220) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond221 Using cfiCommon0
        CFI (cfiCond221) NoFunction
        CFI (cfiCond221) Conditional ??CrossCallReturnLabel_109
        CFI (cfiCond221) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond221) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond221) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond221) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond221) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond221) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond221) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond221) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond221) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond221) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond221) CFA_SP SP+0
        CFI (cfiCond221) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond222 Using cfiCommon0
        CFI (cfiCond222) NoFunction
        CFI (cfiCond222) Conditional ??CrossCallReturnLabel_110
        CFI (cfiCond222) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond222) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond222) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond222) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond222) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond222) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond222) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond222) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond222) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond222) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond222) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond222) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond222) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond222) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond222) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond222) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond222) CFA_SP SP+0
        CFI (cfiCond222) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiPicker223 Using cfiCommon1
        CFI (cfiPicker223) NoFunction
        CFI (cfiPicker223) Picker
        MOVX    A,@DPTR
        CFI EndBlock cfiCond216
        CFI EndBlock cfiCond217
        CFI EndBlock cfiCond218
        CFI EndBlock cfiCond219
        CFI EndBlock cfiCond220
        CFI EndBlock cfiCond221
        CFI EndBlock cfiCond222
        CFI EndBlock cfiPicker223
        REQUIRE ??Subroutine53_0
        ; // Fall through to label ??Subroutine53_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine53_0:
        CFI Block cfiCond224 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_116
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond225 Using cfiCommon0
        CFI (cfiCond225) NoFunction
        CFI (cfiCond225) Conditional ??CrossCallReturnLabel_117
        CFI (cfiCond225) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond225) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond225) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond225) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond225) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond225) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond225) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond225) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond225) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond225) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond225) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond225) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond225) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond225) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond225) CFA_SP SP+0
        CFI (cfiCond225) CFA_XSP16 add(XSP16, 26)
        CFI Block cfiCond226 Using cfiCommon0
        CFI (cfiCond226) NoFunction
        CFI (cfiCond226) Conditional ??CrossCallReturnLabel_118
        CFI (cfiCond226) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond226) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond226) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond226) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond226) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond226) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond226) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond226) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond226) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond226) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond226) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond226) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond226) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond226) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond226) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond226) CFA_SP SP+0
        CFI (cfiCond226) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond227 Using cfiCommon0
        CFI (cfiCond227) NoFunction
        CFI (cfiCond227) Conditional ??CrossCallReturnLabel_119
        CFI (cfiCond227) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond227) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond227) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond227) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond227) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond227) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond227) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond227) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond227) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond227) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond227) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond227) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond227) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond227) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond227) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond227) CFA_SP SP+0
        CFI (cfiCond227) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond228 Using cfiCommon0
        CFI (cfiCond228) NoFunction
        CFI (cfiCond228) Conditional ??CrossCallReturnLabel_113
        CFI (cfiCond228) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond228) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond228) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond228) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond228) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond228) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond228) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond228) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond228) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond228) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond228) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond228) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond228) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond228) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond228) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond228) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond228) CFA_SP SP+0
        CFI (cfiCond228) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond229 Using cfiCommon0
        CFI (cfiCond229) NoFunction
        CFI (cfiCond229) Conditional ??CrossCallReturnLabel_114
        CFI (cfiCond229) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond229) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond229) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond229) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond229) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond229) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond229) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond229) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond229) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond229) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond229) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond229) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond229) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond229) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond229) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond229) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond229) CFA_SP SP+0
        CFI (cfiCond229) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond230 Using cfiCommon0
        CFI (cfiCond230) NoFunction
        CFI (cfiCond230) Conditional ??CrossCallReturnLabel_115
        CFI (cfiCond230) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond230) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond230) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond230) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond230) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond230) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond230) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond230) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond230) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond230) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond230) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond230) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond230) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond230) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond230) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond230) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond230) CFA_SP SP+0
        CFI (cfiCond230) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond231 Using cfiCommon0
        CFI (cfiCond231) NoFunction
        CFI (cfiCond231) Conditional ??CrossCallReturnLabel_111
        CFI (cfiCond231) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond231) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond231) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond231) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond231) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond231) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond231) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond231) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond231) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond231) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond231) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond231) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond231) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond231) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond231) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond231) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond231) CFA_SP SP+0
        CFI (cfiCond231) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond232 Using cfiCommon0
        CFI (cfiCond232) NoFunction
        CFI (cfiCond232) Conditional ??CrossCallReturnLabel_112
        CFI (cfiCond232) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond232) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond232) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond232) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond232) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond232) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond232) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond232) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond232) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond232) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond232) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond232) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond232) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond232) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond232) CFA_SP SP+0
        CFI (cfiCond232) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond233 Using cfiCommon0
        CFI (cfiCond233) NoFunction
        CFI (cfiCond233) Conditional ??CrossCallReturnLabel_109
        CFI (cfiCond233) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond233) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond233) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond233) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond233) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond233) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond233) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond233) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond233) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond233) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond233) CFA_SP SP+0
        CFI (cfiCond233) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond234 Using cfiCommon0
        CFI (cfiCond234) NoFunction
        CFI (cfiCond234) Conditional ??CrossCallReturnLabel_110
        CFI (cfiCond234) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond234) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond234) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond234) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond234) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond234) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond234) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond234) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond234) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond234) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond234) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond234) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond234) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond234) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond234) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond234) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond234) CFA_SP SP+0
        CFI (cfiCond234) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiPicker235 Using cfiCommon1
        CFI (cfiPicker235) NoFunction
        CFI (cfiPicker235) Picker
        MOV     R1,A
        CFI EndBlock cfiCond224
        CFI EndBlock cfiCond225
        CFI EndBlock cfiCond226
        CFI EndBlock cfiCond227
        CFI EndBlock cfiCond228
        CFI EndBlock cfiCond229
        CFI EndBlock cfiCond230
        CFI EndBlock cfiCond231
        CFI EndBlock cfiCond232
        CFI EndBlock cfiCond233
        CFI EndBlock cfiCond234
        CFI EndBlock cfiPicker235
        REQUIRE ??Subroutine54_0
        ; // Fall through to label ??Subroutine54_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine54_0:
        CFI Block cfiCond236 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_120
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond237 Using cfiCommon0
        CFI (cfiCond237) NoFunction
        CFI (cfiCond237) Conditional ??CrossCallReturnLabel_121
        CFI (cfiCond237) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond237) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond237) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond237) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond237) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond237) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond237) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond237) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond237) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond237) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond237) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond237) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond237) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond237) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond237) CFA_SP SP+0
        CFI (cfiCond237) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond238 Using cfiCommon0
        CFI (cfiCond238) NoFunction
        CFI (cfiCond238) Conditional ??CrossCallReturnLabel_122
        CFI (cfiCond238) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond238) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond238) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond238) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond238) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond238) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond238) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond238) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond238) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond238) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond238) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond238) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond238) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond238) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond238) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond238) CFA_SP SP+0
        CFI (cfiCond238) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond239 Using cfiCommon0
        CFI (cfiCond239) NoFunction
        CFI (cfiCond239) Conditional ??CrossCallReturnLabel_123
        CFI (cfiCond239) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond239) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond239) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond239) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond239) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond239) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond239) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond239) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond239) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond239) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond239) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond239) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond239) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond239) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond239) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond239) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond239) CFA_SP SP+0
        CFI (cfiCond239) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond240 Using cfiCommon0
        CFI (cfiCond240) NoFunction
        CFI (cfiCond240) Conditional ??CrossCallReturnLabel_124
        CFI (cfiCond240) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond240) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond240) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond240) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond240) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond240) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond240) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond240) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond240) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond240) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond240) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond240) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond240) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond240) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond240) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond240) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond240) CFA_SP SP+0
        CFI (cfiCond240) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond241 Using cfiCommon0
        CFI (cfiCond241) NoFunction
        CFI (cfiCond241) Conditional ??CrossCallReturnLabel_125
        CFI (cfiCond241) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond241) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond241) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond241) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond241) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond241) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond241) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond241) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond241) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond241) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond241) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond241) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond241) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond241) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond241) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond241) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond241) CFA_SP SP+0
        CFI (cfiCond241) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond242 Using cfiCommon0
        CFI (cfiCond242) NoFunction
        CFI (cfiCond242) Conditional ??CrossCallReturnLabel_126
        CFI (cfiCond242) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond242) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond242) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond242) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond242) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond242) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond242) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond242) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond242) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond242) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond242) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond242) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond242) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond242) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond242) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond242) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond242) CFA_SP SP+0
        CFI (cfiCond242) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond243 Using cfiCommon0
        CFI (cfiCond243) NoFunction
        CFI (cfiCond243) Conditional ??CrossCallReturnLabel_127
        CFI (cfiCond243) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond243) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond243) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond243) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond243) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond243) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond243) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond243) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond243) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond243) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond243) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond243) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond243) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond243) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond243) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond243) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond243) CFA_SP SP+0
        CFI (cfiCond243) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond244 Using cfiCommon0
        CFI (cfiCond244) NoFunction
        CFI (cfiCond244) Conditional ??CrossCallReturnLabel_116
        CFI (cfiCond244) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond244) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond244) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond244) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond244) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond244) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond244) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond244) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond244) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond244) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond244) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond244) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond244) CFA_SP SP+0
        CFI (cfiCond244) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond245 Using cfiCommon0
        CFI (cfiCond245) NoFunction
        CFI (cfiCond245) Conditional ??CrossCallReturnLabel_117
        CFI (cfiCond245) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond245) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond245) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond245) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond245) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond245) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond245) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond245) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond245) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond245) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond245) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond245) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond245) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond245) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond245) CFA_SP SP+0
        CFI (cfiCond245) CFA_XSP16 add(XSP16, 26)
        CFI Block cfiCond246 Using cfiCommon0
        CFI (cfiCond246) NoFunction
        CFI (cfiCond246) Conditional ??CrossCallReturnLabel_118
        CFI (cfiCond246) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond246) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond246) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond246) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond246) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond246) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond246) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond246) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond246) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond246) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond246) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond246) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond246) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond246) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond246) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond246) CFA_SP SP+0
        CFI (cfiCond246) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond247 Using cfiCommon0
        CFI (cfiCond247) NoFunction
        CFI (cfiCond247) Conditional ??CrossCallReturnLabel_119
        CFI (cfiCond247) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond247) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond247) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond247) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond247) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond247) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond247) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond247) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond247) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond247) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond247) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond247) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond247) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond247) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond247) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond247) CFA_SP SP+0
        CFI (cfiCond247) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond248 Using cfiCommon0
        CFI (cfiCond248) NoFunction
        CFI (cfiCond248) Conditional ??CrossCallReturnLabel_113
        CFI (cfiCond248) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond248) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond248) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond248) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond248) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond248) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond248) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond248) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond248) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond248) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond248) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond248) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond248) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond248) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond248) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond248) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond248) CFA_SP SP+0
        CFI (cfiCond248) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond249 Using cfiCommon0
        CFI (cfiCond249) NoFunction
        CFI (cfiCond249) Conditional ??CrossCallReturnLabel_114
        CFI (cfiCond249) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond249) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond249) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond249) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond249) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond249) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond249) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond249) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond249) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond249) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond249) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond249) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond249) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond249) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond249) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond249) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond249) CFA_SP SP+0
        CFI (cfiCond249) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond250 Using cfiCommon0
        CFI (cfiCond250) NoFunction
        CFI (cfiCond250) Conditional ??CrossCallReturnLabel_115
        CFI (cfiCond250) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond250) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond250) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond250) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond250) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond250) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond250) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond250) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond250) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond250) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond250) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond250) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond250) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond250) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond250) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond250) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond250) CFA_SP SP+0
        CFI (cfiCond250) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond251 Using cfiCommon0
        CFI (cfiCond251) NoFunction
        CFI (cfiCond251) Conditional ??CrossCallReturnLabel_111
        CFI (cfiCond251) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond251) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond251) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond251) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond251) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond251) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond251) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond251) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond251) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond251) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond251) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond251) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond251) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond251) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond251) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond251) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond251) CFA_SP SP+0
        CFI (cfiCond251) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond252 Using cfiCommon0
        CFI (cfiCond252) NoFunction
        CFI (cfiCond252) Conditional ??CrossCallReturnLabel_112
        CFI (cfiCond252) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond252) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond252) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond252) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond252) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond252) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond252) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond252) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond252) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond252) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond252) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond252) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond252) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond252) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond252) CFA_SP SP+0
        CFI (cfiCond252) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond253 Using cfiCommon0
        CFI (cfiCond253) NoFunction
        CFI (cfiCond253) Conditional ??CrossCallReturnLabel_109
        CFI (cfiCond253) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond253) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond253) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond253) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond253) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond253) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond253) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond253) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond253) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond253) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond253) CFA_SP SP+0
        CFI (cfiCond253) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond254 Using cfiCommon0
        CFI (cfiCond254) NoFunction
        CFI (cfiCond254) Conditional ??CrossCallReturnLabel_110
        CFI (cfiCond254) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond254) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond254) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond254) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond254) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond254) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond254) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond254) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond254) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond254) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond254) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond254) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond254) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond254) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond254) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond254) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond254) CFA_SP SP+0
        CFI (cfiCond254) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiPicker255 Using cfiCommon1
        CFI (cfiPicker255) NoFunction
        CFI (cfiPicker255) Picker
        LCALL   ??HalFlashRead?relay
        MOV     A,#0x2
        RET
        CFI EndBlock cfiCond236
        CFI EndBlock cfiCond237
        CFI EndBlock cfiCond238
        CFI EndBlock cfiCond239
        CFI EndBlock cfiCond240
        CFI EndBlock cfiCond241
        CFI EndBlock cfiCond242
        CFI EndBlock cfiCond243
        CFI EndBlock cfiCond244
        CFI EndBlock cfiCond245
        CFI EndBlock cfiCond246
        CFI EndBlock cfiCond247
        CFI EndBlock cfiCond248
        CFI EndBlock cfiCond249
        CFI EndBlock cfiCond250
        CFI EndBlock cfiCond251
        CFI EndBlock cfiCond252
        CFI EndBlock cfiCond253
        CFI EndBlock cfiCond254
        CFI EndBlock cfiPicker255
// 1223 
// 1224 /*********************************************************************
// 1225  * @fn      osal_nv_read
// 1226  *
// 1227  * @brief   Read data from NV. This function can be used to read an entire item from NV or
// 1228  *          an element of an item by indexing into the item with an offset.
// 1229  *          Read data is copied into *buf.
// 1230  *
// 1231  * @param   id  - Valid NV item Id.
// 1232  * @param   ndx - Index offset into item
// 1233  * @param   len - Length of data to read.
// 1234  * @param  *buf - Data is read into this buffer.
// 1235  *
// 1236  * @return  ZSUCCESS if NV data was copied to the parameter 'buf'.
// 1237  *          Otherwise, NV_OPER_FAILED for failure.
// 1238  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1239 uint8 osal_nv_read( uint16 id, uint16 ndx, uint16 len, void *buf )
osal_nv_read:
        CFI Block cfiBlock256 Using cfiCommon0
        CFI Function osal_nv_read
        CODE
// 1240 {
        FUNCALL osal_nv_read, findItem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_nv_read, HalFlashRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     ?V0 + 0,R4
        MOV     ?V0 + 1,R5
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_34:
        MOV     A,#0x10
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
// 1241   uint16 offset;
// 1242 
// 1243   offset = findItem( id );
        ; Setup parameters for call to function findItem
        LCALL   ??findItem?relay
// 1244   if ( offset == OSAL_NV_ITEM_NULL )
        MOV     A,R2
        ORL     A,R3
        JNZ     ??osal_nv_read_0
// 1245   {
// 1246     return NV_OPER_FAILED;
        MOV     R1,#0xa
        SJMP    ??osal_nv_read_1
// 1247   }
// 1248 
// 1249   HalFlashRead(findPg, offset+ndx, buf, len);
??osal_nv_read_0:
        ; Setup parameters for call to function HalFlashRead
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     A,R2
        ADD     A,?V0 + 0
        MOV     R2,A
        MOV     A,R3
        ADDC    A,?V0 + 1
        LCALL   ??Subroutine51_0 & 0xFFFF
??CrossCallReturnLabel_112:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
// 1250 
// 1251   return ZSUCCESS;
        MOV     R1,#0x0
??osal_nv_read_1:
        LJMP    ??Subroutine47_0 & 0xFFFF
        CFI EndBlock cfiBlock256
// 1252 }

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??initNV?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    initNV

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??setPageUse?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    setPageUse

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??initPage?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    initPage

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??erasePage?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    erasePage

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??compactPage?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    compactPage

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??findItem?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    findItem

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??initItem?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    initItem

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??setItem?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    setItem

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??calcChkF?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    calcChkF

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??writeWord?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    writeWord

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??writeWordH?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    writeWordH

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??writeBuf?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    writeBuf

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??xferBuf?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    xferBuf

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??writeItem?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    writeItem

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osal_nv_init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    osal_nv_init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osal_nv_item_init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    osal_nv_item_init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osal_nv_item_len?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    osal_nv_item_len

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osal_nv_write?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    osal_nv_write

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osal_nv_read?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    osal_nv_read

        END
// 1253 
// 1254 /*********************************************************************
// 1255 *********************************************************************/
// 
//  4 421 bytes in segment BANKED_CODE
//    114 bytes in segment BANK_RELAYS
//      8 bytes in segment IEEE_ADDRESS_SPACE
//     27 bytes in segment XDATA_Z
// 12 288 bytes in segment ZIGNV_ADDRESS_SPACE
// 
//  4 535 bytes of CODE  memory
// 12 323 bytes of XDATA memory
//
//Errors: none
//Warnings: none
