///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.3.10338/W32 for 8051        03/Jul/2018  14:53:10 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Components\stack\nwk\nwk_globals.c               /
//    Command line       =  -f D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_Ð /
//                          Þ¸Ä\Projects\zstack\Utilities\SerialApp\CC2530DB\ /
//                          ..\..\..\Tools\CC2530DB\f8wRouter.cfg             /
//                          (-DCPU32MHZ -DROOT=__near_func                    /
//                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE -DRTR_NWK        /
//                          -DBLINK_LEDS) -f D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼ /
//                          «\WSN_ZigBee_ÐÞ¸Ä\Projects\zstack\Utilities\Seria /
//                          lApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.c /
//                          fg (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR  /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          "-DCONST=const __code" -DGENERIC=__generic        /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµ /
//                          Ï°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\Components\stack\nwk\nwk_ /
//                          globals.c -D ZIGBEEPRO -D HAL_UART=TRUE -D        /
//                          SERIAL_APP_PORT=0 -D LCD_SUPPORTED -lC            /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\Rou /
//                          terEB-Pro\List\ -lA D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ /
//                          ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\Projects\zstack\Utilities\Se /
//                          rialApp\CC2530DB\RouterEB-Pro\List\               /
//                          --diag_suppress Pe001,Pa010 -o                    /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\Rou /
//                          terEB-Pro\Obj\ -e --debug --core=plain            /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 8 -I D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµ /
//                          Ï°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\Projects\zstack\Utilities /
//                          \SerialApp\CC2530DB\ -I                           /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          SOURCE\ -I D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ /
//                          ZigBee_ÐÞ¸Ä\Projects\zstack\Utilities\SerialApp\C /
//                          C2530DB\..\..\..\ZMAIN\TI2530DB\ -I               /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\MT\ -I                     /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\HAL\INCLUDE\ -I            /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\ -I    /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\ -I         /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\OSAL\INCLUDE\ -I           /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\STACK\AF\ -I               /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\STACK\NWK\ -I              /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\STACK\SEC\ -I              /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\STACK\SAPI\ -I             /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\STACK\SYS\ -I              /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\STACK\ZDO\ -I              /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\ZMAC\F8W\ -I               /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\ZMAC\ -I                   /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\SERVICES\SADDR\ -I         /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\SERVICES\SDATA\ -I         /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\MAC\INCLUDE\ -I            /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\ -I         /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\ -I    /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE /
//                          _CHIP\ -Ohz --require_prototypes                  /
//    List file          =  D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\Rou /
//                          terEB-Pro\List\nwk_globals.s51                    /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME nwk_globals

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?US_SWITCH_SPARSE
        EXTERN ?V0
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC ??NIB_init?relay
        FUNCTION ??NIB_init?relay,0203H
        PUBLIC ??nwk_Status?relay
        FUNCTION ??nwk_Status?relay,0203H
        PUBLIC ??nwk_globals_init?relay
        FUNCTION ??nwk_globals_init?relay,0203H
        PUBLIC AssocCnfFailStr
        PUBLIC AssocCnfStr
        PUBLIC AssocIndStr
        PUBLIC AssocRspFailStr
        PUBLIC AssociatedDevList
        PUBLIC BindingTable
        PUBLIC Cskip
        PUBLIC CskipChldrn
        PUBLIC CskipRtrs
        PUBLIC EndDeviceStr
        PUBLIC EnergyLevelStr
        PUBLIC FailedStr
        PUBLIC NIB_init
        FUNCTION NIB_init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC NetworkIDStr
        PUBLIC OrphanRspStr
        PUBLIC ParentStr
        PUBLIC PingStr
        PUBLIC RouterStr
        PUBLIC ScanFailedStr
        PUBLIC SentStr
        PUBLIC SuccessStr
        PUBLIC ZigbeeCoordStr
        PUBLIC bcastHoldAckMask
        PUBLIC bcastHoldHandle
        PUBLIC bcastTable
        PUBLIC defaultKey
        PUBLIC defaultTCLinkKey
        PUBLIC gAPS_MAX_GROUPS
        PUBLIC gBIND_REC_SIZE
        PUBLIC gMAX_BCAST
        PUBLIC gMAX_BINDING_CLUSTER_IDS
        PUBLIC gMAX_NEIGHBOR_ENTRIES
        PUBLIC gMAX_RREQ_ENTRIES
        PUBLIC gMAX_RTG_ENTRIES
        PUBLIC gMAX_RTG_SRC_ENTRIES
        PUBLIC gMIN_TREE_LINK_COST
        PUBLIC gNWK_INDIRECT_CNT_RTG_TMR
        PUBLIC gNWK_INDIRECT_MSG_MAX_ALL
        PUBLIC gNWK_INDIRECT_MSG_MAX_PER
        PUBLIC gNWK_MAX_BINDING_ENTRIES
        PUBLIC gNWK_MAX_DATABUFS_CONFIRMED
        PUBLIC gNWK_MAX_DATABUFS_SCHEDULED
        PUBLIC gNWK_MAX_DATABUFS_TOTAL
        PUBLIC gNWK_MAX_DATABUFS_WAITING
        PUBLIC gNWK_MAX_DEVICE_LIST
        PUBLIC gNWK_MAX_SLEEPING_END_DEVICES
        PUBLIC gNWK_TREE_ALLOCATE_ROUTERADDR_FOR_ENDDEVICE
        PUBLIC neighborTable
        PUBLIC nwk_Status
        FUNCTION nwk_Status,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        PUBLIC nwk_globals_init
        FUNCTION nwk_globals_init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC rtDiscTable
        PUBLIC rtgSrcTable
        PUBLIC rtgTable
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
AddrMgrInit         SYMBOL "AddrMgrInit"
NLME_InitLinkStatus SYMBOL "NLME_InitLinkStatus"
NwkFreqAgilityInit  SYMBOL "NwkFreqAgilityInit"
osal_rand           SYMBOL "osal_rand"
osal_memset         SYMBOL "osal_memset"
sAddrExtCpy         SYMBOL "sAddrExtCpy"
NLME_InitStochasticAddressing SYMBOL "NLME_InitStochasticAddressing"
HalLcdWriteString   SYMBOL "HalLcdWriteString"
HalLcdWriteStringValue SYMBOL "HalLcdWriteStringValue"
BuzzerControl       SYMBOL "BuzzerControl"
HalLcdWriteScreen   SYMBOL "HalLcdWriteScreen"
HalLcdWriteValue    SYMBOL "HalLcdWriteValue"
??AddrMgrInit?relay SYMBOL "?relay", AddrMgrInit
??BuzzerControl?relay SYMBOL "?relay", BuzzerControl
??HalLcdWriteScreen?relay SYMBOL "?relay", HalLcdWriteScreen
??HalLcdWriteString?relay SYMBOL "?relay", HalLcdWriteString
??HalLcdWriteStringValue?relay SYMBOL "?relay", HalLcdWriteStringValue
??HalLcdWriteValue?relay SYMBOL "?relay", HalLcdWriteValue
??NLME_InitLinkStatus?relay SYMBOL "?relay", NLME_InitLinkStatus
??NLME_InitStochasticAddressing?relay SYMBOL "?relay", NLME_InitStochasticAddressing
??NwkFreqAgilityInit?relay SYMBOL "?relay", NwkFreqAgilityInit
??osal_memset?relay SYMBOL "?relay", osal_memset
??osal_rand?relay   SYMBOL "?relay", osal_rand
??sAddrExtCpy?relay SYMBOL "?relay", sAddrExtCpy
NIB_init            SYMBOL "NIB_init"
??NIB_init?relay    SYMBOL "?relay", NIB_init
nwk_Status          SYMBOL "nwk_Status"
??nwk_Status?relay  SYMBOL "?relay", nwk_Status
nwk_globals_init    SYMBOL "nwk_globals_init"
??nwk_globals_init?relay SYMBOL "?relay", nwk_globals_init

        EXTERN AddrMgrInit
        FUNCTION AddrMgrInit,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_InitLinkStatus
        FUNCTION NLME_InitLinkStatus,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NwkFreqAgilityInit
        FUNCTION NwkFreqAgilityInit,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_rand
        FUNCTION osal_rand,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN sAddrExtCpy
        FUNCTION sAddrExtCpy,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_InitStochasticAddressing
        FUNCTION NLME_InitStochasticAddressing,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLcdWriteString
        FUNCTION HalLcdWriteString,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLcdWriteStringValue
        FUNCTION HalLcdWriteStringValue,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN BuzzerControl
        FUNCTION BuzzerControl,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLcdWriteScreen
        FUNCTION HalLcdWriteScreen,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLcdWriteValue
        FUNCTION HalLcdWriteValue,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??AddrMgrInit?relay
        FUNCTION ??AddrMgrInit?relay,00H
        EXTERN ??BuzzerControl?relay
        FUNCTION ??BuzzerControl?relay,00H
        EXTERN ??HalLcdWriteScreen?relay
        FUNCTION ??HalLcdWriteScreen?relay,00H
        EXTERN ??HalLcdWriteString?relay
        FUNCTION ??HalLcdWriteString?relay,00H
        EXTERN ??HalLcdWriteStringValue?relay
        FUNCTION ??HalLcdWriteStringValue?relay,00H
        EXTERN ??HalLcdWriteValue?relay
        FUNCTION ??HalLcdWriteValue?relay,00H
        EXTERN ??NLME_InitLinkStatus?relay
        FUNCTION ??NLME_InitLinkStatus?relay,00H
        EXTERN ??NLME_InitStochasticAddressing?relay
        FUNCTION ??NLME_InitStochasticAddressing?relay,00H
        EXTERN ??NwkFreqAgilityInit?relay
        FUNCTION ??NwkFreqAgilityInit?relay,00H
        EXTERN ??osal_memset?relay
        FUNCTION ??osal_memset?relay,00H
        EXTERN ??osal_rand?relay
        FUNCTION ??osal_rand?relay,00H
        EXTERN ??sAddrExtCpy?relay
        FUNCTION ??sAddrExtCpy?relay,00H
        EXTERN ZDO_Config_Node_Descriptor
        EXTERN _NIB
        EXTERN zgBcastDeliveryTime
        EXTERN zgConcentratorDiscoveryTime
        EXTERN zgExtendedPANID
        EXTERN zgIndirectMsgTimeout
        EXTERN zgMaxBcastRetires
        EXTERN zgPassiveAckTimeout
        EXTERN zgRouteExpiryTime

// D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\Components\stack\nwk\nwk_globals.c
//    1 /**************************************************************************************************
//    2   Filename:       nwk_globals.c
//    3   Revised:        $Date: 2009-03-24 09:41:39 -0700 (Tue, 24 Mar 2009) $
//    4   Revision:       $Revision: 19538 $
//    5 
//    6   Description:    User definable Network Parameters.
//    7 
//    8 
//    9   Copyright 2004-2009 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License").  You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product.  Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, 
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE, 
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com. 
//   38 **************************************************************************************************/
//   39 
//   40 /*********************************************************************
//   41  * INCLUDES
//   42  */
//   43 #include "ZComdef.h"
//   44 #include "OSAL.h"
//   45 #include "AddrMgr.h"
//   46 #include "AssocList.h"
//   47 #include "BindingTable.h"
//   48 #include "nwk_util.h"
//   49 #include "nwk_globals.h"
//   50 #include "APS.h"
//   51 #include "ssp.h"
//   52 #include "rtg.h"
//   53 #include "ZDConfig.h"
//   54 #include "ZGlobals.h"
//   55 
//   56 #if defined ( LCD_SUPPORTED )
//   57   #include "OnBoard.h"
//   58 #endif
//   59 
//   60 /* HAL */
//   61 #include "hal_lcd.h"
//   62 
//   63 /*********************************************************************
//   64  * MACROS
//   65  */
//   66 
//   67 /*********************************************************************
//   68  * CONSTANTS
//   69  */
//   70 
//   71 // Maximums for the data buffer queue
//   72 #define NWK_MAX_DATABUFS_WAITING    8     // Waiting to be sent to MAC
//   73 #define NWK_MAX_DATABUFS_SCHEDULED  5     // Timed messages to be sent
//   74 #define NWK_MAX_DATABUFS_CONFIRMED  5     // Held after MAC confirms
//   75 #define NWK_MAX_DATABUFS_TOTAL      12    // Total number of buffers
//   76 
//   77 // 1-255 (0 -> 256) X RTG_TIMER_INTERVAL
//   78 // A known shortcoming is that when a message is enqueued as "hold" for a
//   79 // sleeping device, the timer tick may have counted down to 1, so that msg
//   80 // will not be held as long as expected. If NWK_INDIRECT_MSG_TIMEOUT is set to 1
//   81 // the hold time will vary randomly from 0 - CNT_RTG_TIMER ticks.
//   82 // So the hold time will vary within this interval:
//   83 // { (NWK_INDIRECT_MSG_TIMEOUT-1)*CNT_RTG_TIMER,
//   84 //                                    NWK_INDIRECT_MSG_TIMEOUT*CNT_RTG_TIMER }
//   85 #define NWK_INDIRECT_CNT_RTG_TMR    1
//   86 // To hold msg for sleeping end devices for 30 secs:
//   87 // #define CNT_RTG_TIMER            1
//   88 // #define NWK_INDIRECT_MSG_TIMEOUT 30
//   89 // To hold msg for sleeping end devices for 30 mins:
//   90 // #define CNT_RTG_TIMER            60
//   91 // #define NWK_INDIRECT_MSG_TIMEOUT 30
//   92 // To hold msg for sleeping end devices for 30 days:
//   93 // #define CNT_RTG_TIMER            60
//   94 // #define NWK_INDIRECT_MSG_TIMEOUT (30 * 24 * 60)
//   95 // Maximum msgs to hold per associated device.
//   96 #define NWK_INDIRECT_MSG_MAX_PER    3
//   97 // Maximum total msgs to hold for all associated devices.
//   98 #define NWK_INDIRECT_MSG_MAX_ALL    \ 
//   99                             (NWK_MAX_DATABUFS_TOTAL - NWK_INDIRECT_MSG_MAX_PER)
//  100 
//  101 
//  102 /*********************************************************************
//  103  * TYPEDEFS
//  104  */
//  105 
//  106 /*********************************************************************
//  107  * NWK GLOBAL VARIABLES
//  108  */
//  109 
//  110 // Variables for MAX list size

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA16
//  111 CONST uint16 gNWK_MAX_DEVICE_LIST = NWK_MAX_DEVICES;
gNWK_MAX_DEVICE_LIST:
        DW 21
//  112 
//  113 // Variables for MAX Sleeping End Devices

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA8
//  114 CONST uint8 gNWK_MAX_SLEEPING_END_DEVICES = NWK_MAX_DEVICES - NWK_MAX_ROUTERS;
gNWK_MAX_SLEEPING_END_DEVICES:
        DB 15
//  115 
//  116 // Variables for MAX data buffer levels

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA8
//  117 CONST byte gNWK_MAX_DATABUFS_WAITING = NWK_MAX_DATABUFS_WAITING;
gNWK_MAX_DATABUFS_WAITING:
        DB 8

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA8
//  118 CONST byte gNWK_MAX_DATABUFS_SCHEDULED = NWK_MAX_DATABUFS_SCHEDULED;
gNWK_MAX_DATABUFS_SCHEDULED:
        DB 5

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA8
//  119 CONST byte gNWK_MAX_DATABUFS_CONFIRMED = NWK_MAX_DATABUFS_CONFIRMED;
gNWK_MAX_DATABUFS_CONFIRMED:
        DB 5

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA8
//  120 CONST byte gNWK_MAX_DATABUFS_TOTAL = NWK_MAX_DATABUFS_TOTAL;
gNWK_MAX_DATABUFS_TOTAL:
        DB 12
//  121 

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA8
//  122 CONST byte gNWK_INDIRECT_CNT_RTG_TMR = NWK_INDIRECT_CNT_RTG_TMR;
gNWK_INDIRECT_CNT_RTG_TMR:
        DB 1

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA8
//  123 CONST byte gNWK_INDIRECT_MSG_MAX_PER = NWK_INDIRECT_MSG_MAX_PER;
gNWK_INDIRECT_MSG_MAX_PER:
        DB 3

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA8
//  124 CONST byte gNWK_INDIRECT_MSG_MAX_ALL = NWK_INDIRECT_MSG_MAX_ALL;
gNWK_INDIRECT_MSG_MAX_ALL:
        DB 9
//  125 
//  126 // change this if using a different stack profile...
//  127 // Cskip array

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  128 uint16 *Cskip;
Cskip:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  129 
//  130 #if ( STACK_PROFILE_ID == ZIGBEEPRO_PROFILE )

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  131   byte CskipRtrs[1] = {0};
CskipRtrs:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  132   byte CskipChldrn[1] = {0};
CskipChldrn:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  133 #elif ( STACK_PROFILE_ID == HOME_CONTROLS )
//  134   byte CskipRtrs[MAX_NODE_DEPTH+1] = {6,6,6,6,6,0};
//  135   byte CskipChldrn[MAX_NODE_DEPTH+1] = {20,20,20,20,20,0};
//  136 #elif ( STACK_PROFILE_ID == GENERIC_STAR )
//  137   byte CskipRtrs[MAX_NODE_DEPTH+1] = {5,5,5,5,5,0};
//  138   byte CskipChldrn[MAX_NODE_DEPTH+1] = {5,5,5,5,5,0};
//  139 #elif ( STACK_PROFILE_ID == NETWORK_SPECIFIC )
//  140   byte CskipRtrs[MAX_NODE_DEPTH+1] = {5,5,5,5,5,0};
//  141   byte CskipChldrn[MAX_NODE_DEPTH+1] = {5,5,5,5,5,0};
//  142 #endif // STACK_PROFILE_ID
//  143 
//  144 // Minimum lqi value that is required for association

        RSEG XDATA_I:XDATA:NOROOT(0)
//  145 byte gMIN_TREE_LINK_COST = MIN_LQI_COST_3;
gMIN_TREE_LINK_COST:
        DATA8
        DS 1
        REQUIRE `?<Initializer for gMIN_TREE_LINK_COST>`
        REQUIRE __INIT_XDATA_I
//  146 
//  147 // Statically defined Associated Device List

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  148 associated_devices_t AssociatedDevList[NWK_MAX_DEVICES];
AssociatedDevList:
        DS 378
        REQUIRE __INIT_XDATA_Z
//  149 

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA8
//  150 CONST byte gMAX_RTG_ENTRIES = MAX_RTG_ENTRIES;
gMAX_RTG_ENTRIES:
        DB 40

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA8
//  151 CONST byte gMAX_RTG_SRC_ENTRIES = MAX_RTG_SRC_ENTRIES;
gMAX_RTG_SRC_ENTRIES:
        DB 12

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA8
//  152 CONST byte gMAX_RREQ_ENTRIES = MAX_RREQ_ENTRIES;
gMAX_RREQ_ENTRIES:
        DB 8
//  153 

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA8
//  154 CONST byte gMAX_NEIGHBOR_ENTRIES = MAX_NEIGHBOR_ENTRIES;
gMAX_NEIGHBOR_ENTRIES:
        DB 8
//  155 
//  156  // Table of neighboring nodes (not including child nodes)

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  157 neighborEntry_t neighborTable[MAX_NEIGHBOR_ENTRIES];
neighborTable:
        DS 184
        REQUIRE __INIT_XDATA_Z
//  158 
//  159 // Routing table

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  160 rtgEntry_t rtgTable[MAX_RTG_ENTRIES];
rtgTable:
        DS 280
        REQUIRE __INIT_XDATA_Z
//  161 #if defined ( ZIGBEE_SOURCE_ROUTING )

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  162   rtgSrcEntry_t rtgSrcTable[MAX_RTG_SRC_ENTRIES];
rtgSrcTable:
        DS 72
        REQUIRE __INIT_XDATA_Z
//  163 #endif
//  164 
//  165 // Table of current RREQ packets in the network

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  166 rtDiscEntry_t rtDiscTable[MAX_RREQ_ENTRIES];
rtDiscTable:
        DS 64
        REQUIRE __INIT_XDATA_Z
//  167 
//  168 // Table of data broadcast packets currently in circulation.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  169 bcastEntry_t bcastTable[MAX_BCAST];
bcastTable:
        DS 72
        REQUIRE __INIT_XDATA_Z
//  170 
//  171 // These 2 arrays are to be used as an array of struct { uint8, uint32 }.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  172 uint8 bcastHoldHandle[MAX_BCAST];
bcastHoldHandle:
        DS 9
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  173 uint32 bcastHoldAckMask[MAX_BCAST];
bcastHoldAckMask:
        DS 36
        REQUIRE __INIT_XDATA_Z
//  174 

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA8
//  175 CONST byte gMAX_BCAST = MAX_BCAST;
gMAX_BCAST:
        DB 9
//  176 
//  177 // For tree addressing, this switch allows the allocation of a 
//  178 // router address to an end device when end device address are 
//  179 // all used up.  If this option is enabled, address space
//  180 // could be limited.

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA8
//  181 CONST uint8 gNWK_TREE_ALLOCATE_ROUTERADDR_FOR_ENDDEVICE = FALSE;
gNWK_TREE_ALLOCATE_ROUTERADDR_FOR_ENDDEVICE:
        DB 0
//  182 
//  183 /*********************************************************************
//  184  * APS GLOBAL VARIABLES
//  185  */
//  186 
//  187 // The Maximum number of binding records
//  188 // This number is defined in BindingTable.h - change it there.

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA16
//  189 CONST uint16 gNWK_MAX_BINDING_ENTRIES = NWK_MAX_BINDING_ENTRIES;
gNWK_MAX_BINDING_ENTRIES:
        DW 4
//  190 
//  191 #if defined ( REFLECTOR )
//  192   // The Maximum number of cluster IDs in a binding record
//  193   // This number is defined in BindingTable.h - change it there.

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA8
//  194   CONST byte gMAX_BINDING_CLUSTER_IDS = MAX_BINDING_CLUSTER_IDS;
gMAX_BINDING_CLUSTER_IDS:
        DB 4
//  195 

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA16
//  196   CONST uint16 gBIND_REC_SIZE = sizeof( BindingEntry_t );
gBIND_REC_SIZE:
        DW 14
//  197 
//  198   // Binding Table

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  199   BindingEntry_t BindingTable[NWK_MAX_BINDING_ENTRIES];
BindingTable:
        DS 56
        REQUIRE __INIT_XDATA_Z
//  200 #endif
//  201 
//  202 // Maximum number allowed in the groups table.

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA8
//  203 CONST uint8 gAPS_MAX_GROUPS = APS_MAX_GROUPS;
gAPS_MAX_GROUPS:
        DB 16
//  204 
//  205 // APS End Device Broadcast Table
//  206 #if ( ZG_BUILD_ENDDEVICE_TYPE )
//  207   apsEndDeviceBroadcast_t apsEndDeviceBroadcastTable[APS_MAX_ENDDEVICE_BROADCAST_ENTRIES];
//  208   uint8 gAPS_MAX_ENDDEVICE_BROADCAST_ENTRIES = APS_MAX_ENDDEVICE_BROADCAST_ENTRIES;
//  209 #endif
//  210 
//  211 /*********************************************************************
//  212  * SECURITY GLOBAL VARIABLES
//  213  */
//  214 
//  215 // This is the default pre-configured key,
//  216 // change this to make a unique key
//  217 // SEC_KEY_LEN is defined in ssp.h.

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA8
//  218 CONST byte defaultKey[SEC_KEY_LEN] =
defaultKey:
        DB 0
        DB 1
        DB 2
        DB 3
        DB 4
        DB 5
        DB 6
        DB 7
        DB 8
        DB 9
        DB 10
        DB 11
        DB 12
        DB 13
        DB 14
        DB 15
//  219 {
//  220 #if defined ( APP_TP ) || defined ( APP_TP2 )
//  221   // Key for ZigBee Conformance Testing
//  222   0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb,
//  223   0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa
//  224 #else
//  225   // Key for In-House Testing
//  226   0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
//  227   0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F
//  228 #endif
//  229 };
//  230 
//  231 // This is the default pre-configured Trust Center Link key,
//  232 // change this to make a unique key, SEC_KEY_LEN is defined in ssp.h.

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA8
//  233 CONST byte defaultTCLinkKey[SEC_KEY_LEN] =
defaultTCLinkKey:
        DB 86
        DB 119
        DB 119
        DB 119
        DB 119
        DB 119
        DB 119
        DB 119
        DB 119
        DB 119
        DB 119
        DB 119
        DB 119
        DB 119
        DB 119
        DB 119
//  234 {
//  235   0x56, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77,
//  236   0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77
//  237 };
//  238 
//  239 /*********************************************************************
//  240  * STATUS STRINGS
//  241  */
//  242 #if defined ( LCD_SUPPORTED )

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  243   const char PingStr[]         = "Ping Rcvd from";
PingStr:
        DB "Ping Rcvd from"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  244   const char AssocCnfStr[]     = "Assoc Cnf";
AssocCnfStr:
        DB "Assoc Cnf"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  245   const char SuccessStr[]      = "Success";
SuccessStr:
        DB "Success"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  246   const char EndDeviceStr[]    = "EndDevice:";
EndDeviceStr:
        DB "EndDevice:"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  247   const char ParentStr[]       = "Parent:";
ParentStr:
        DB "Parent:"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  248   const char ZigbeeCoordStr[]  = "ZigBee Coord";
ZigbeeCoordStr:
        DB "ZigBee Coord"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  249   const char NetworkIDStr[]    = "Network ID:";
NetworkIDStr:
        DB "Network ID:"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  250   const char RouterStr[]       = "Router:";
RouterStr:
        DB "Router:"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  251   const char OrphanRspStr[]    = "Orphan Response";
OrphanRspStr:
        DB "Orphan Response"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  252   const char SentStr[]         = "Sent";
SentStr:
        DB "Sent"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  253   const char FailedStr[]       = "Failed";
FailedStr:
        DB "Failed"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  254   const char AssocRspFailStr[] = "Assoc Rsp fail";
AssocRspFailStr:
        DB "Assoc Rsp fail"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  255   const char AssocIndStr[]     = "Assoc Ind";
AssocIndStr:
        DB "Assoc Ind"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  256   const char AssocCnfFailStr[] = "Assoc Cnf fail";
AssocCnfFailStr:
        DB "Assoc Cnf fail"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  257   const char EnergyLevelStr[]  = "Energy Level";
EnergyLevelStr:
        DB "Energy Level"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  258   const char ScanFailedStr[]   = "Scan Failed";
ScanFailedStr:
        DB "Scan Failed"
//  259 #endif
//  260 
//  261 /*********************************************************************
//  262  * @fn       nwk_globals_init()
//  263  *
//  264  * @brief
//  265  *
//  266  *   Initialize nwk layer globals.  These are the system defaults and
//  267  *   should be changed by the user here.  The default definitions are
//  268  *   defined in nwk.h or NLMEDE.h.
//  269  *
//  270  * @param   none
//  271  *
//  272  * @return  none
//  273  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  274 void nwk_globals_init( void )
nwk_globals_init:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function nwk_globals_init
        CODE
//  275 {
        FUNCALL nwk_globals_init, AddrMgrInit
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL nwk_globals_init, NLME_InitLinkStatus
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL nwk_globals_init, NwkFreqAgilityInit
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  276   AddrMgrInit( NWK_MAX_ADDRESSES );
        ; Setup parameters for call to function AddrMgrInit
        MOV     R2,#0x1a
        MOV     R3,#0x0
        LCALL   ??AddrMgrInit?relay
//  277   
//  278 #if !defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
//  279   if ( ZSTACK_ROUTER_BUILD )
//  280   {
//  281     // Initialize the Cskip Table
//  282     Cskip = osal_mem_alloc(sizeof(uint16) *(MAX_NODE_DEPTH+1));
//  283     RTG_FillCSkipTable(CskipChldrn, CskipRtrs, MAX_NODE_DEPTH, Cskip);
//  284   }
//  285 #endif
//  286   
//  287   // To compile out the Link Status Feature, set NWK_LINK_STATUS_PERIOD
//  288   // to 0 (compiler flag).
//  289   if ( NWK_LINK_STATUS_PERIOD )
//  290   {
//  291     NLME_InitLinkStatus();
        ; Setup parameters for call to function NLME_InitLinkStatus
        LCALL   ??NLME_InitLinkStatus?relay
//  292   }
//  293   
//  294 #if defined ( ZIGBEE_FREQ_AGILITY )
//  295   NwkFreqAgilityInit();
        ; Setup parameters for call to function NwkFreqAgilityInit
        LCALL   ??NwkFreqAgilityInit?relay
        CFI EndBlock cfiBlock0
//  296 #endif
//  297 }
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP     DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP    ?BRET
        CFI EndBlock cfiBlock1
//  298 
//  299 /*********************************************************************
//  300  * @fn       NIB_init()
//  301  *
//  302  * @brief
//  303  *
//  304  *   Initialize attribute values in NIB
//  305  *
//  306  * @param   none
//  307  *
//  308  * @return  none
//  309  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  310 void NIB_init()
NIB_init:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function NIB_init
        CODE
//  311 {
        FUNCALL NIB_init, osal_rand
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL NIB_init, osal_memset
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL NIB_init, sAddrExtCpy
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL NIB_init, NLME_InitStochasticAddressing
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  312   _NIB.SequenceNum = LO_UINT16(osal_rand());
        ; Setup parameters for call to function osal_rand
        LCALL   ??osal_rand?relay
        MOV     A,R2
        MOV     DPTR,#_NIB
        MOVX    @DPTR,A
//  313 
//  314   _NIB.nwkProtocolVersion = ZB_PROT_VERS;
        MOV     DPTR,#_NIB + 17
        MOV     A,#0x2
        MOVX    @DPTR,A
//  315   _NIB.MaxDepth = MAX_NODE_DEPTH;
        MOV     DPTR,#_NIB + 4
        MOV     A,#0x14
        MOVX    @DPTR,A
//  316 
//  317 #if ( NWK_MODE == NWK_MODE_MESH )
//  318   _NIB.beaconOrder = BEACON_ORDER_NO_BEACONS;
        MOV     DPTR,#_NIB + 40
        MOV     A,#0xf
        MOVX    @DPTR,A
//  319   _NIB.superFrameOrder = BEACON_ORDER_NO_BEACONS;
        INC     DPTR
        MOVX    @DPTR,A
//  320 #endif
//  321 
//  322   // BROADCAST SETTINGS:
//  323   // *******************
//  324   //   Broadcast Delivery Time
//  325   //     - set to multiples of 100ms 
//  326   //     - should be 500ms more than the retry time
//  327   //       -  "retry time" = PassiveAckTimeout * (MaxBroadcastRetries + 1)
//  328   //   Passive Ack Timeout
//  329   //     - set to multiples of 100ms 
//  330   _NIB.BroadcastDeliveryTime = zgBcastDeliveryTime;
        MOV     DPTR,#zgBcastDeliveryTime
        MOVX    A,@DPTR
        MOV     DPTR,#_NIB + 7
        MOVX    @DPTR,A
//  331   _NIB.PassiveAckTimeout     = zgPassiveAckTimeout;
        MOV     DPTR,#zgPassiveAckTimeout
        MOVX    A,@DPTR
        MOV     DPTR,#_NIB + 1
        MOVX    @DPTR,A
//  332   _NIB.MaxBroadcastRetries   = zgMaxBcastRetires;
        MOV     DPTR,#zgMaxBcastRetires
        MOVX    A,@DPTR
        MOV     DPTR,#_NIB + 2
        MOVX    @DPTR,A
//  333 
//  334   _NIB.ReportConstantCost = 0;
        MOV     DPTR,#_NIB + 8
        CLR     A
        MOVX    @DPTR,A
//  335   _NIB.RouteDiscRetries = 0;
        INC     DPTR
        MOVX    @DPTR,A
//  336   _NIB.SecureAllFrames = USE_NWK_SECURITY;
        MOV     DPTR,#_NIB + 11
        MOVX    @DPTR,A
//  337    
//  338   if ( ZG_SECURE_ENABLED )
//  339   {
//  340     _NIB.SecurityLevel = SECURITY_LEVEL;
//  341   }
//  342   else
//  343   {
//  344     _NIB.SecurityLevel = 0;
        INC     DPTR
        MOVX    @DPTR,A
//  345   }
//  346    
//  347 #if defined ( ZIGBEEPRO )
//  348   _NIB.SymLink = FALSE;
        INC     DPTR
        MOVX    @DPTR,A
//  349 #else
//  350   _NIB.SymLink = TRUE;
//  351 #endif  
//  352   
//  353   _NIB.CapabilityInfo = ZDO_Config_Node_Descriptor.CapabilityFlags;
        MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
        MOVX    A,@DPTR
        MOV     DPTR,#_NIB + 14
        MOVX    @DPTR,A
//  354 
//  355   _NIB.TransactionPersistenceTime = zgIndirectMsgTimeout;
        MOV     DPTR,#zgIndirectMsgTimeout
        MOVX    A,@DPTR
        MOV     DPTR,#_NIB + 15
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  356 
//  357   _NIB.RouteDiscoveryTime = 5;
        MOV     DPTR,#_NIB + 18
        MOV     A,#0x5
        MOVX    @DPTR,A
//  358   _NIB.RouteExpiryTime = zgRouteExpiryTime;
        MOV     DPTR,#zgRouteExpiryTime
        MOVX    A,@DPTR
        MOV     DPTR,#_NIB + 19
        LCALL   ?Subroutine1 & 0xFFFF
//  359 
//  360   _NIB.nwkDevAddress = INVALID_NODE_ADDR;
//  361   _NIB.nwkLogicalChannel = 0;
??CrossCallReturnLabel_0:
        INC     DPTR
        CLR     A
        LCALL   ?Subroutine1 & 0xFFFF
//  362   _NIB.nwkCoordAddress = INVALID_NODE_ADDR;
//  363   osal_memset( _NIB.nwkCoordExtAddress, 0, Z_EXTADDR_LEN );
??CrossCallReturnLabel_1:
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     R2,#(_NIB + 25) & 0xff
        MOV     R3,#((_NIB + 25) >> 8) & 0xff
        LCALL   ??osal_memset?relay
//  364   _NIB.nwkPanId = INVALID_NODE_ADDR;
        MOV     DPTR,#_NIB + 33
        MOV     A,#-0x2
        MOVX    @DPTR,A
        INC     DPTR
        INC     A
        MOVX    @DPTR,A
//  365 
//  366   osal_cpyExtAddr( _NIB.extendedPANID, zgExtendedPANID );
        ; Setup parameters for call to function sAddrExtCpy
        MOV     R4,#zgExtendedPANID & 0xff
        MOV     R5,#(zgExtendedPANID >> 8) & 0xff
        MOV     R2,#(_NIB + 53) & 0xff
        MOV     R3,#((_NIB + 53) >> 8) & 0xff
        LCALL   ??sAddrExtCpy?relay
//  367    
//  368   _NIB.nwkKeyLoaded = FALSE;
        MOV     DPTR,#_NIB + 61
        CLR     A
        MOVX    @DPTR,A
//  369    
//  370 #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
//  371   _NIB.nwkAddrAlloc  = NWK_ADDRESSING_STOCHASTIC;
        MOV     DPTR,#_NIB + 96
        MOV     A,#0x2
        MOVX    @DPTR,A
//  372   _NIB.nwkUniqueAddr = FALSE;
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  373 #else
//  374   _NIB.nwkAddrAlloc  = NWK_ADDRESSING_DISTRIBUTED;
//  375   _NIB.nwkUniqueAddr = TRUE;
//  376 #endif
//  377 
//  378   _NIB.nwkLinkStatusPeriod = NWK_LINK_STATUS_PERIOD; 
        INC     DPTR
        MOV     A,#0xf
        MOVX    @DPTR,A
//  379   _NIB.nwkRouterAgeLimit = NWK_ROUTE_AGE_LIMIT;
        INC     DPTR
        MOV     A,#0x3
        MOVX    @DPTR,A
//  380   //MTO routing
//  381   _NIB.nwkConcentratorDiscoveryTime = zgConcentratorDiscoveryTime;
        MOV     DPTR,#zgConcentratorDiscoveryTime
        MOVX    A,@DPTR
        MOV     DPTR,#_NIB + 102
        MOVX    @DPTR,A
//  382   _NIB.nwkIsConcentrator = 0;
        MOV     DPTR,#_NIB + 101
        CLR     A
        MOVX    @DPTR,A
//  383   _NIB.nwkConcentratorRadius = 0x0a;
        MOV     DPTR,#_NIB + 103
        MOV     A,#0xa
        MOVX    @DPTR,A
//  384   _NIB.nwkMaxSourceRoute = 0x0c;
        INC     DPTR
        MOV     A,#0xc
        MOVX    @DPTR,A
//  385 
//  386 #if defined ( ZIGBEE_MULTICAST )
//  387   _NIB.nwkUseMultiCast = TRUE;
        MOV     DPTR,#_NIB + 100
        MOV     A,#0x1
        MOVX    @DPTR,A
//  388 #else
//  389   _NIB.nwkUseMultiCast = FALSE;
//  390 #endif  
//  391   _NIB.nwkManagerAddr = 0x0000;
        MOV     DPTR,#_NIB + 105
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  392   _NIB.nwkUpdateId = 0;
        MOV     DPTR,#_NIB + 109
        MOVX    @DPTR,A
//  393   _NIB.nwkTotalTransmissions = 0;
        MOV     DPTR,#_NIB + 107
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  394 
//  395   if ( ZSTACK_ROUTER_BUILD )
//  396   {
//  397 #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
//  398     NLME_InitStochasticAddressing();
        ; Setup parameters for call to function NLME_InitStochasticAddressing
        LCALL   ??NLME_InitStochasticAddressing?relay
//  399 #else
//  400     NLME_InitTreeAddressing();
//  401 #endif
//  402   }
//  403 }
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock2

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiCond3 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond4 Using cfiCommon0
        CFI (cfiCond4) NoFunction
        CFI (cfiCond4) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond4) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond4) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond4) CFA_SP SP+-5
        CFI Block cfiPicker5 Using cfiCommon1
        CFI (cfiPicker5) NoFunction
        CFI (cfiPicker5) Picker
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#-0x2
        MOVX    @DPTR,A
        INC     DPTR
        INC     A
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond3
        CFI EndBlock cfiCond4
        CFI EndBlock cfiPicker5
//  404 
//  405 /*********************************************************************
//  406  * @fn       nwk_Status()
//  407  *
//  408  * @brief
//  409  *
//  410  *   Status report.
//  411  *
//  412  * @param   statusCode
//  413  * @param   statusValue
//  414  *
//  415  * @return  none
//  416  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  417 void nwk_Status( uint16 statusCode, uint16 statusValue )
nwk_Status:
        CFI Block cfiBlock6 Using cfiCommon0
        CFI Function nwk_Status
        CODE
//  418 {
        FUNCALL nwk_Status, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL nwk_Status, HalLcdWriteStringValue
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL nwk_Status, BuzzerControl
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL nwk_Status, HalLcdWriteStringValue
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL nwk_Status, HalLcdWriteScreen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL nwk_Status, HalLcdWriteScreen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL nwk_Status, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL nwk_Status, HalLcdWriteValue
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL nwk_Status, HalLcdWriteStringValue
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL nwk_Status, HalLcdWriteScreen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL nwk_Status, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL nwk_Status, HalLcdWriteValue
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL nwk_Status, HalLcdWriteScreen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV     ?V0 + 4,R4
        MOV     ?V0 + 5,R5
//  419 #if defined ( LCD_SUPPORTED )
//  420   switch ( statusCode )
        MOV     ?V0 + 0,R4
        MOV     ?V0 + 1,R5
        MOV     ?V0 + 2,#0x0
        MOV     ?V0 + 3,#0x0
        MOV     ?V0 + 6,R2
        MOV     ?V0 + 7,R3
        MOV     R0,#?V0 + 6
        LCALL   ?US_SWITCH_SPARSE
`?<Jumptable for nwk_Status>_0`:
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        0
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        8
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        2
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??nwk_Status_0
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        4
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??nwk_Status_1
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        5
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??nwk_Status_2
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        6
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??nwk_Status_3
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        7
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??nwk_Status_4
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        4097
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??nwk_Status_5
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        4099
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??nwk_Status_6
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        4100
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??nwk_Status_7
        DATA
        DATA16
        DATA
        DATA16
        DW        ??nwk_Status_8
        CODE
//  421   {
//  422     case NWK_STATUS_COORD_ADDR:
//  423       if ( ZSTACK_ROUTER_BUILD )
//  424       {
//  425         HalLcdWriteString( (char*)ZigbeeCoordStr, HAL_LCD_LINE_1 );
??nwk_Status_2:
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x1
        MOV     R2,#ZigbeeCoordStr & 0xff
        MOV     R3,#(ZigbeeCoordStr >> 8) & 0xff
        LCALL   ??HalLcdWriteString?relay
//  426         HalLcdWriteStringValue( (char*)NetworkIDStr, statusValue, 16, HAL_LCD_LINE_2 );
        ; Setup parameters for call to function HalLcdWriteStringValue
        MOV     ?V0 + 0,#0x2
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 17)
        MOV     R1,#0x10
        MOV     R4,?V0 + 4
        MOV     R5,?V0 + 5
        MOV     R2,#NetworkIDStr & 0xff
        MOV     R3,#(NetworkIDStr >> 8) & 0xff
        LCALL   ??HalLcdWriteStringValue?relay
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
//  427         BuzzerControl( BUZZER_BLIP );
        ; Setup parameters for call to function BuzzerControl
        MOV     R1,#0x2
        LCALL   ??BuzzerControl?relay
//  428       }
//  429       break;
        SJMP    ??nwk_Status_8
//  430 
//  431     case NWK_STATUS_ROUTER_ADDR:
//  432       if ( ZSTACK_ROUTER_BUILD )
//  433       {
//  434         HalLcdWriteStringValue( (char*)RouterStr, statusValue, 16, HAL_LCD_LINE_1 );
??nwk_Status_3:
        ; Setup parameters for call to function HalLcdWriteStringValue
        MOV     ?V0 + 0,#0x1
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 17)
        MOV     R1,#0x10
        MOV     R2,#RouterStr & 0xff
        MOV     R3,#(RouterStr >> 8) & 0xff
??nwk_Status_9:
        LCALL   ??HalLcdWriteStringValue?relay
??nwk_Status_10:
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
//  435       }
//  436       break;
        SJMP    ??nwk_Status_8
//  437 
//  438     case NWK_STATUS_ORPHAN_RSP:
//  439       if ( ZSTACK_ROUTER_BUILD )
//  440       {
//  441         if ( statusValue == ZSuccess )
??nwk_Status_4:
        MOV     R2,#OrphanRspStr & 0xff
        MOV     R3,#(OrphanRspStr >> 8) & 0xff
        MOV     A,R4
        ORL     A,?V0 + 5
        JNZ     ??nwk_Status_11
//  442           HalLcdWriteScreen( (char*)OrphanRspStr, (char*)SentStr );
        ; Setup parameters for call to function HalLcdWriteScreen
        MOV     R4,#SentStr & 0xff
        MOV     R5,#(SentStr >> 8) & 0xff
        SJMP    ??nwk_Status_12
//  443         else
//  444           HalLcdWriteScreen( (char*)OrphanRspStr, (char*)FailedStr );
??nwk_Status_11:
        ; Setup parameters for call to function HalLcdWriteScreen
        MOV     R4,#FailedStr & 0xff
        MOV     R5,#(FailedStr >> 8) & 0xff
        SJMP    ??nwk_Status_12
//  445       }
//  446       break;
//  447 
//  448     case NWK_ERROR_ASSOC_RSP:
//  449       if ( ZSTACK_ROUTER_BUILD )
//  450       {
//  451         HalLcdWriteString( (char*)AssocRspFailStr, HAL_LCD_LINE_1 );
??nwk_Status_5:
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x1
        MOV     R2,#AssocRspFailStr & 0xff
        MOV     R3,#(AssocRspFailStr >> 8) & 0xff
??nwk_Status_13:
        LCALL   ??HalLcdWriteString?relay
//  452         HalLcdWriteValue( (uint32)(statusValue), 16, HAL_LCD_LINE_2 );
        ; Setup parameters for call to function HalLcdWriteValue
        MOV     ?V0 + 4,#0x2
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 17)
        MOV     R1,#0x10
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     R4,?V0 + 2
        MOV     R5,?V0 + 3
        LCALL   ??HalLcdWriteValue?relay
        SJMP    ??nwk_Status_10
        CFI CFA_XSP16 add(XSP16, 16)
//  453       }
//  454       break;
//  455       
//  456     case NWK_STATUS_ED_ADDR:
//  457       if ( ZSTACK_END_DEVICE_BUILD )
//  458       {
//  459         HalLcdWriteStringValue( (char*)EndDeviceStr, statusValue, 16, HAL_LCD_LINE_1 );
//  460       }
//  461       break;
//  462 
//  463     case NWK_STATUS_PARENT_ADDR:
//  464             HalLcdWriteStringValue( (char*)ParentStr, statusValue, 16, HAL_LCD_LINE_2 );
??nwk_Status_1:
        ; Setup parameters for call to function HalLcdWriteStringValue
        MOV     ?V0 + 0,#0x2
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 17)
        MOV     R1,#0x10
        MOV     R2,#ParentStr & 0xff
        MOV     R3,#(ParentStr >> 8) & 0xff
        SJMP    ??nwk_Status_9
        CFI CFA_XSP16 add(XSP16, 16)
//  465       break;
//  466 
//  467     case NWK_STATUS_ASSOC_CNF:
//  468       HalLcdWriteScreen( (char*)AssocCnfStr, (char*)SuccessStr );
??nwk_Status_0:
        ; Setup parameters for call to function HalLcdWriteScreen
        MOV     R4,#SuccessStr & 0xff
        MOV     R5,#(SuccessStr >> 8) & 0xff
        MOV     R2,#AssocCnfStr & 0xff
        MOV     R3,#(AssocCnfStr >> 8) & 0xff
        SJMP    ??nwk_Status_12
//  469       break;
//  470 
//  471     case NWK_ERROR_ASSOC_CNF_DENIED:
//  472       HalLcdWriteString((char*)AssocCnfFailStr, HAL_LCD_LINE_1 );
??nwk_Status_6:
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x1
        MOV     R2,#AssocCnfFailStr & 0xff
        MOV     R3,#(AssocCnfFailStr >> 8) & 0xff
        SJMP    ??nwk_Status_13
//  473       HalLcdWriteValue( (uint32)(statusValue), 16, HAL_LCD_LINE_2 );
//  474       break;
//  475 
//  476     case NWK_ERROR_ENERGY_SCAN_FAILED:
//  477       HalLcdWriteScreen( (char*)EnergyLevelStr, (char*)ScanFailedStr );
??nwk_Status_7:
        ; Setup parameters for call to function HalLcdWriteScreen
        MOV     R4,#ScanFailedStr & 0xff
        MOV     R5,#(ScanFailedStr >> 8) & 0xff
        MOV     R2,#EnergyLevelStr & 0xff
        MOV     R3,#(EnergyLevelStr >> 8) & 0xff
??nwk_Status_12:
        LCALL   ??HalLcdWriteScreen?relay
//  478       break;
//  479   }
//  480 #endif
//  481 }
??nwk_Status_8:
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock6

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for gMIN_TREE_LINK_COST>`:
        DATA8
        DB 6

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??nwk_globals_init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    nwk_globals_init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??NIB_init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    NIB_init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??nwk_Status?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    nwk_Status

        END
//  482 
//  483 /*********************************************************************
//  484 *********************************************************************/
// 
//   486 bytes in segment BANKED_CODE
//    18 bytes in segment BANK_RELAYS
//    54 bytes in segment CODE_C
//     1 byte  in segment XDATA_I
//     1 byte  in segment XDATA_ID
//   178 bytes in segment XDATA_ROM_C
// 1 155 bytes in segment XDATA_Z
// 
//   559 bytes of CODE  memory
//   178 bytes of CONST memory
// 1 156 bytes of XDATA memory
//
//Errors: none
//Warnings: none
