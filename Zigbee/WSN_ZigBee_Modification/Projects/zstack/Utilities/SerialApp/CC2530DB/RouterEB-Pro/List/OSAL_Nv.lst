###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         03/Jul/2018  14:52:45 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Components\osal\mcu\cc2530\OSAL_Nv.c               #
#    Command line       =  -f D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ #
#                          ¸Ä\Projects\zstack\Utilities\SerialApp\CC2530DB\.. #
#                          \..\..\Tools\CC2530DB\f8wRouter.cfg (-DCPU32MHZ    #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRU #
#                          E -DRTR_NWK -DBLINK_LEDS) -f                       #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\Tools\CC2530DB\f8wConfig.cfg (-DSECURE=0       #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Components\osal\mcu\cc2530\OSAL_Nv.c -D ZIGBEEPRO  #
#                          -D HAL_UART=TRUE -D SERIAL_APP_PORT=0 -D           #
#                          LCD_SUPPORTED -lC D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼ #
#                          «\WSN_ZigBee_ÐÞ¸Ä\Projects\zstack\Utilities\Serial #
#                          App\CC2530DB\RouterEB-Pro\List\ -lA                #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\Route #
#                          rEB-Pro\List\ --diag_suppress Pe001,Pa010 -o       #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\Route #
#                          rEB-Pro\Obj\ -e --debug --core=plain --dptr=16,1   #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 8 -I  #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\ -I   #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\SO #
#                          URCE\ -I D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_Zig #
#                          Bee_ÐÞ¸Ä\Projects\zstack\Utilities\SerialApp\CC253 #
#                          0DB\..\..\..\ZMAIN\TI2530DB\ -I                    #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\MT\ -I                        #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\HAL\INCLUDE\ -I               #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\ -I       #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\OSAL\MCU\CCSOC\ -I            #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\OSAL\INCLUDE\ -I              #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\STACK\AF\ -I                  #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\STACK\NWK\ -I                 #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\STACK\SEC\ -I                 #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\STACK\SAPI\ -I                #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\STACK\SYS\ -I                 #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\STACK\ZDO\ -I                 #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\ZMAC\F8W\ -I                  #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\ZMAC\ -I                      #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\SERVICES\SADDR\ -I            #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\SERVICES\SDATA\ -I            #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\MAC\INCLUDE\ -I               #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\MAC\HIGH_LEVEL\ -I            #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\ -I       #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CH #
#                          IP\ -Ohz --require_prototypes                      #
#    List file          =  D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\Route #
#                          rEB-Pro\List\OSAL_Nv.lst                           #
#    Object file        =  D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\Route #
#                          rEB-Pro\Obj\OSAL_Nv.r51                            #
#                                                                             #
#                                                                             #
###############################################################################

D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\Components\osal\mcu\cc2530\OSAL_Nv.c
      1          /**************************************************************************************************
      2            Filename:       OSAL_Nv.c
      3            Revised:        $Date: 2008-08-06 17:17:11 -0700 (Wed, 06 Aug 2008) $
      4            Revision:       $Revision: 17715 $
      5          
      6            Description:    This module contains the OSAL non-volatile memory functions.
      7          
      8          
      9            Copyright 2006-2009 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /**************************************************************************************************
     41            Notes:
     42              - A trick buried deep in initPage() requires that the MSB of the NV Item Id is to
     43                be reserved for use by this module.
     44          **************************************************************************************************/
     45          
     46          /*********************************************************************
     47           * INCLUDES
     48           */
     49          
     50          #include "hal_adc.h"
     51          #include "hal_flash.h"
     52          #include "hal_types.h"
     53          #include "ZComdef.h"
     54          #include "OSAL_Nv.h"
     55          
     56          /*********************************************************************
     57           * CONSTANTS
     58           */
     59          
     60          #define OSAL_NV_PAGE_SIZE       HAL_FLASH_PAGE_SIZE
     61          #define OSAL_NV_PAGES_USED      HAL_NV_PAGE_CNT
     62          #define OSAL_NV_PAGE_BEG        HAL_NV_PAGE_BEG
     63          #define OSAL_NV_PAGE_END       (OSAL_NV_PAGE_BEG + OSAL_NV_PAGES_USED - 1)
     64          
     65          #define OSAL_NV_ACTIVE          0x00
     66          #define OSAL_NV_ERASED          0xFF
     67          #define OSAL_NV_ERASED_ID       0xFFFF
     68          #define OSAL_NV_ZEROED_ID       0x0000
     69          // Reserve MSB of Id to signal a search for the "old" source copy (new write interrupted/failed.)
     70          #define OSAL_NV_SOURCE_ID       0x8000
     71          
     72          #define OSAL_NV_PAGE_FREE       HAL_FLASH_PAGE_SIZE
     73          
     74          // In case pages 0-1 are ever used, define a null page value.
     75          #define OSAL_NV_PAGE_NULL       0
     76          
     77          // In case item Id 0 is ever used, define a null item value.
     78          #define OSAL_NV_ITEM_NULL       0
     79          
     80          #define OSAL_NV_WORD_SIZE       HAL_FLASH_WORD_SIZE
     81          
     82          #define OSAL_NV_PAGE_HDR_OFFSET 0
     83          
     84          /*********************************************************************
     85           * MACROS
     86           */
     87          
     88          #define  OSAL_NV_CHECK_BUS_VOLTAGE  (HalAdcCheckVdd( HAL_ADC_VDD_LIMIT_4 ))
     89          
     90          #define OSAL_NV_DATA_SIZE( LEN )  \
     91             ((((LEN) + OSAL_NV_WORD_SIZE - 1) / OSAL_NV_WORD_SIZE) * OSAL_NV_WORD_SIZE)
     92          
     93          #define OSAL_NV_ITEM_SIZE( LEN )  \
     94            (((((LEN) + OSAL_NV_WORD_SIZE - 1) / OSAL_NV_WORD_SIZE) * OSAL_NV_WORD_SIZE) + OSAL_NV_HDR_SIZE)
     95          
     96          /*********************************************************************
     97           * TYPEDEFS
     98           */
     99          
    100          typedef struct
    101          {
    102            uint16 id;
    103            uint16 len;   // Enforce Flash-WORD size on len.
    104            uint16 chk;   // Byte-wise checksum of the 'len' data bytes of the item.
    105            uint16 stat;  // Item status.
    106          } osalNvHdr_t;
    107          // Struct member offsets.
    108          #define OSAL_NV_HDR_ID    0
    109          #define OSAL_NV_HDR_LEN   2
    110          #define OSAL_NV_HDR_CHK   4
    111          #define OSAL_NV_HDR_STAT  6
    112          
    113          #define OSAL_NV_HDR_ITEM  2  // Length of any item of a header struct.
    114          #define OSAL_NV_HDR_SIZE  8
    115          #define OSAL_NV_HDR_HALF (OSAL_NV_HDR_SIZE / 2)
    116          
    117          typedef struct
    118          {
    119            uint16 active;
    120            uint16 inUse;
    121            uint16 xfer;
    122            uint16 spare;
    123          } osalNvPgHdr_t;
    124          // Struct member offsets.
    125          #define OSAL_NV_PG_ACTIVE 0
    126          #define OSAL_NV_PG_INUSE  2
    127          #define OSAL_NV_PG_XFER   4
    128          #define OSAL_NV_PG_SPARE  6
    129          
    130          #define OSAL_NV_PAGE_HDR_SIZE  8
    131          #define OSAL_NV_PAGE_HDR_HALF (OSAL_NV_PAGE_HDR_SIZE / 2)
    132          
    133          typedef enum
    134          {
    135            eNvXfer,
    136            eNvZero
    137          } eNvHdrEnum;
    138          
    139          typedef enum
    140          {
    141            ePgActive,
    142            ePgInUse,
    143            ePgXfer,
    144            ePgSpare
    145          } ePgHdrEnum;
    146          
    147          /*********************************************************************
    148           * EXTERNAL FUNCTIONS
    149           */
    150          
    151          extern bool HalAdcCheckVdd(uint8 limit);
    152          
    153          /*********************************************************************
    154           * GLOBAL VARIABLES
    155           */
    156          
    157          #ifndef OAD_KEEP_NV_PAGES
    158          // When NV pages are to remain intact during OAD download,
    159          // the image itself should not include NV pages.
    160          #pragma location="ZIGNV_ADDRESS_SPACE"

   \                                 In  segment ZIGNV_ADDRESS_SPACE, align 1
    161          __no_init uint8 _nvBuf[OSAL_NV_PAGES_USED * OSAL_NV_PAGE_SIZE];
   \                     _nvBuf:
   \   000000                DS 12288
    162          #pragma required=_nvBuf
    163          #pragma location="IEEE_ADDRESS_SPACE"

   \                                 In  segment IEEE_ADDRESS_SPACE, align 1
    164          __no_init uint8 _nvIEEE[Z_EXTADDR_LEN];
   \                     _nvIEEE:
   \   000000                DS 8
   \   000008                REQUIRE _nvBuf
    165          #pragma required=_nvIEEE
    166          #endif // OAD_KEEP_NV_PAGES
    167          
    168          /*********************************************************************
    169           * LOCAL VARIABLES
    170           */
    171          
    172          // Offset into the page of the first available erased space.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    173          static uint16 pgOff[OSAL_NV_PAGES_USED];
   \                     pgOff:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
   \   00000C                REQUIRE _nvIEEE
    174          
    175          // Count of the bytes lost for the zeroed-out items.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    176          static uint16 pgLost[OSAL_NV_PAGES_USED];
   \                     pgLost:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    177          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    178          static uint8 pgRes;  // Page reserved for item compacting transfer.
   \                     pgRes:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    179          
    180          // Saving ~100 code bytes to move a uint8* parameter/return value from findItem() to a global.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    181          static uint8 findPg;
   \                     findPg:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    182          
    183          /* Immediately before the voltage critical operations of a page erase or
    184           * a word write, check bus voltage. If less than min, set global flag & abort.
    185           * Since this is to be done at the lowest level, many void functions would have to be changed to
    186           * return a value and code added to check that value before proceeding, resulting in a very
    187           * expensive code size hit for implementing this properly. Therefore, use this global as follows:
    188           * at the start of osal_nv_item_init/osal_nv_write, set to FALSE, and at the end, before returning,
    189           * check the value. Thus, the global is an accumulator of any error that occurred in any of the
    190           * attempts to modify Flash with a low bus voltage during the complicated sequence of events that
    191           * may occur on any item init or write. This is much more expedient and code saving than adding
    192           * return values and checking return values to early out. No matter which method is used, an NV
    193           * data record may end up mangled due to the low VCC conditions. The strategy is that the headers
    194           * and checksums will detect and allow recovery from such a condition.
    195           *
    196           * One unfortunate side-effect of using the global fail flag vice adding and checking return
    197           * values, is that when setting an item Id to zero has failed due to the low VCC check,
    198           * the page lost-bytes counter is still updated. Having an artificially high lost-byte
    199           * count makes it look like there are more bytes to recover from compacting a page than there may
    200           * actually be. The easy work-around implemented is it to invoke initNV() from osal_nv_item_init or
    201           * osal_nv_write anytime that the failF gets set - this will re-walk all of the pages and set the
    202           * page offset count and page lost bytes count to their actual values.
    203           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    204          static uint8 failF;
   \                     failF:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    205          
    206          /*********************************************************************
    207           * LOCAL FUNCTIONS
    208           */
    209          
    210          static uint8  initNV( void );
    211          
    212          static void   setPageUse( uint8 pg, uint8 inUse );
    213          static uint16 initPage( uint8 pg, uint16 id, uint8 findDups );
    214          static void   erasePage( uint8 pg );
    215          static void   compactPage( uint8 pg );
    216          
    217          static uint16 findItem( uint16 id );
    218          static uint8  initItem( uint8 flag, uint16 id, uint16 len, void *buf );
    219          static void   setItem( uint8 pg, uint16 offset, eNvHdrEnum stat );
    220          
    221          static uint16 calcChkB( uint16 len, uint8 *buf );
    222          static uint16 calcChkF( byte pg, uint16 offset, uint16 len );
    223          
    224          static void   writeWord( uint8 pg, uint16 offset, uint8 *buf );
    225          static void   writeWordH( uint8 pg, uint16 offset, uint8 *buf );
    226          static void   writeWordM( uint8 pg, uint16 offset, uint8 *buf, uint16 cnt );
    227          static void   writeBuf( uint8 pg, uint16 offset, uint16 len, uint8 *buf );
    228          static void   xferBuf( uint8 srcPg, uint16 srcOff, uint8 dstPg, uint16 dstOff, uint16 len );
    229          
    230          static uint8  writeItem( uint8 pg, uint16 id, uint16 len, void *buf, uint8 flag );
    231          
    232          /*********************************************************************
    233           * @fn      initNV
    234           *
    235           * @brief   Initialize the NV flash pages.
    236           *
    237           * @param   none
    238           *
    239           * @return  TRUE
    240           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    241          static uint8 initNV( void )
   \                     initNV:
    242          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    243            osalNvPgHdr_t pgHdr;
    244            uint8 oldPg = OSAL_NV_PAGE_NULL;
   \   00000A   7F00         MOV     R7,#0x0
    245            uint8 newPg = OSAL_NV_PAGE_NULL;
   \   00000C   8F..         MOV     ?V0 + 0,R7
    246            uint8 findDups = FALSE;
   \   00000E   8F..         MOV     ?V0 + 1,R7
    247            uint8 pg;
    248          
    249            pgRes = OSAL_NV_PAGE_NULL;
   \   000010   90....       MOV     DPTR,#pgRes
   \   000013   E4           CLR     A
   \   000014   F0           MOVX    @DPTR,A
    250          
    251            for ( pg = OSAL_NV_PAGE_BEG; pg <= OSAL_NV_PAGE_END; pg++ )
   \   000015   7E79         MOV     R6,#0x79
    252            {
    253              HalFlashRead(pg, OSAL_NV_PAGE_HDR_OFFSET, (uint8 *)(&pgHdr), OSAL_NV_HDR_SIZE);
   \                     ??initNV_0:
   \   000017                ; Setup parameters for call to function HalFlashRead
   \   000017   75..08       MOV     ?V0 + 2,#0x8
   \   00001A   75..00       MOV     ?V0 + 3,#0x0
   \   00001D   78..         MOV     R0,#?V0 + 2
   \   00001F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000022   7402         MOV     A,#0x2
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   AC82         MOV     R4,DPL
   \   000029   AD83         MOV     R5,DPH
   \   00002B   7A00         MOV     R2,#0x0
   \   00002D   7B00         MOV     R3,#0x0
   \   00002F   EE           MOV     A,R6
   \   000030   12....       LCALL   ??Subroutine53_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_116:
   \   000033   12....       LCALL   ?DEALLOC_XSTACK8
    254          
    255              if ( pgHdr.active == OSAL_NV_ERASED_ID )
   \   000036   85..82       MOV     DPL,?XSP + 0
   \   000039   85..83       MOV     DPH,?XSP + 1
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   F4           CPL     A
   \   00003E   7003         JNZ     ??initNV_1
   \   000040   A3           INC     DPTR
   \   000041   E0           MOVX    A,@DPTR
   \   000042   F4           CPL     A
   \                     ??initNV_1:
   \   000043   7013         JNZ     ??initNV_2
    256              {
    257                if ( pgRes == OSAL_NV_PAGE_NULL )
   \   000045   90....       MOV     DPTR,#pgRes
   \   000048   E0           MOVX    A,@DPTR
   \   000049   7004         JNZ     ??initNV_3
    258                {
    259                  pgRes = pg;
   \   00004B   EE           MOV     A,R6
   \   00004C   F0           MOVX    @DPTR,A
   \   00004D   802B         SJMP    ??initNV_4
    260                }
    261                else
    262                {
    263                  setPageUse( pg, TRUE );
   \                     ??initNV_3:
   \   00004F                ; Setup parameters for call to function setPageUse
   \   00004F   7A01         MOV     R2,#0x1
   \   000051   EE           MOV     A,R6
   \   000052   F9           MOV     R1,A
   \   000053   12....       LCALL   ??setPageUse?relay
   \   000056   8022         SJMP    ??initNV_4
    264                }
    265              }
    266              else  // Page is active.
    267              {
    268                // If the page is not yet in use, it is the tgt of items from an xfer.
    269                if ( pgHdr.inUse == OSAL_NV_ERASED_ID )
   \                     ??initNV_2:
   \   000058   7402         MOV     A,#0x2
   \   00005A   12....       LCALL   ?XSTACK_DISP0_8
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   F4           CPL     A
   \   00005F   7003         JNZ     ??initNV_5
   \   000061   A3           INC     DPTR
   \   000062   E0           MOVX    A,@DPTR
   \   000063   F4           CPL     A
   \                     ??initNV_5:
   \   000064   7004         JNZ     ??initNV_6
    270                {
    271                  newPg = pg;
   \   000066   8E..         MOV     ?V0 + 0,R6
   \   000068   8010         SJMP    ??initNV_4
    272                }
    273                // An Xfer from this page was in progress.
    274                else if ( pgHdr.xfer != OSAL_NV_ERASED_ID )
   \                     ??initNV_6:
   \   00006A   7404         MOV     A,#0x4
   \   00006C   12....       LCALL   ?XSTACK_DISP0_8
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   F4           CPL     A
   \   000071   7003         JNZ     ??initNV_7
   \   000073   A3           INC     DPTR
   \   000074   E0           MOVX    A,@DPTR
   \   000075   F4           CPL     A
   \                     ??initNV_7:
   \   000076   6002         JZ      ??initNV_4
    275                {
    276                  oldPg = pg;
   \   000078   EE           MOV     A,R6
   \   000079   FF           MOV     R7,A
    277                }
    278              }
    279          
    280              // Calculate page offset and lost bytes - any "old" item triggers an N^2 re-scan from start.
    281              if ( initPage( pg, OSAL_NV_ITEM_NULL, findDups ) != OSAL_NV_ITEM_NULL )
   \                     ??initNV_4:
   \   00007A                ; Setup parameters for call to function initPage
   \   00007A   AC..         MOV     R4,?V0 + 1
   \   00007C   7A00         MOV     R2,#0x0
   \   00007E   7B00         MOV     R3,#0x0
   \   000080   EE           MOV     A,R6
   \   000081   F9           MOV     R1,A
   \   000082   12....       LCALL   ??initPage?relay
   \   000085   8B..         MOV     ?V0 + 3,R3
   \   000087   EA           MOV     A,R2
   \   000088   45..         ORL     A,?V0 + 3
   \   00008A   6005         JZ      ??initNV_8
    282              {
    283                findDups = TRUE;
   \   00008C   75..01       MOV     ?V0 + 1,#0x1
    284                pg = OSAL_NV_PAGE_BEG-1;
   \   00008F   7E78         MOV     R6,#0x78
    285                continue;
    286              }
    287            }  // for ( pg = OSAL_NV_PAGE_BEG; pg <= OSAL_NV_PAGE_END; pg++ )
   \                     ??initNV_8:
   \   000091   0E           INC     R6
   \   000092   EE           MOV     A,R6
   \   000093   C3           CLR     C
   \   000094   947F         SUBB    A,#0x7f
   \   000096   5003         JNC     $+5
   \   000098   02....       LJMP    ??initNV_0 & 0xFFFF
    288          
    289            /* First the old page is erased, and then the new page is put into use.
    290             * So if a transfer was in progress, the new page will always not yet be
    291             * marked as in use, since that is the last step to ending a transfer.
    292             */
    293            if ( newPg != OSAL_NV_PAGE_NULL )
   \   00009B   E5..         MOV     A,?V0 + 0
   \   00009D   601D         JZ      ??initNV_9
    294            {
    295              /* If there is already a fallow page reserved, keep it and put the newPg in use.
    296               * An unfinished compaction will finish to the new reserve page and the old page
    297               * will be erased and reserved.
    298               */
    299              if ( pgRes != OSAL_NV_PAGE_NULL )
   \   00009F   90....       MOV     DPTR,#pgRes
   \   0000A2   E0           MOVX    A,@DPTR
   \   0000A3   600C         JZ      ??initNV_10
    300              {
    301                setPageUse( newPg, TRUE );
   \   0000A5                ; Setup parameters for call to function setPageUse
   \   0000A5   7A01         MOV     R2,#0x1
   \   0000A7   A9..         MOV     R1,?V0 + 0
   \   0000A9   12....       LCALL   ??setPageUse?relay
    302              }
    303              /* If setting old page to 'xfer' failed or board reset before it was effected, there is no way
    304               * to know which page was the 'old page' - so just reset all NV pages to start clean.
    305               */
    306              else if ( oldPg != OSAL_NV_PAGE_NULL )
    307              {
    308                pgRes = newPg;
    309              }
    310          
    311              /* If a page compaction was interrupted and the page being compacted is not
    312               * yet erased, then there may be items remaining to xfer before erasing.
    313               */
    314              if ( oldPg != OSAL_NV_PAGE_NULL )
   \   0000AC   EF           MOV     A,R7
   \   0000AD   7008         JNZ     ??initNV_11
   \   0000AF   800B         SJMP    ??initNV_9
   \                     ??initNV_10:
   \   0000B1   EF           MOV     A,R7
   \   0000B2   600E         JZ      ??initNV_12
   \   0000B4   E5..         MOV     A,?V0 + 0
   \   0000B6   F0           MOVX    @DPTR,A
    315              {
    316                compactPage( oldPg );
   \                     ??initNV_11:
   \   0000B7                ; Setup parameters for call to function compactPage
   \   0000B7   EF           MOV     A,R7
   \   0000B8   F9           MOV     R1,A
   \   0000B9   12....       LCALL   ??compactPage?relay
    317              }
    318            }
    319          
    320            /* If no page met the criteria to be the reserve page:
    321             *  - A compactPage() failed or board reset before doing so.
    322             *  - Perhaps the user changed which Flash pages are dedicated to NV and downloaded the code
    323             *    without erasing Flash?
    324             */
    325            if ( pgRes == OSAL_NV_PAGE_NULL )
   \                     ??initNV_9:
   \   0000BC   90....       MOV     DPTR,#pgRes
   \   0000BF   E0           MOVX    A,@DPTR
   \   0000C0   7011         JNZ     ??initNV_13
    326            {
    327              for ( pg = OSAL_NV_PAGE_BEG; pg <= OSAL_NV_PAGE_END; pg++ )
   \                     ??initNV_12:
   \   0000C2   7E79         MOV     R6,#0x79
    328              {
    329                erasePage( pg );
   \                     ??initNV_14:
   \   0000C4                ; Setup parameters for call to function erasePage
   \   0000C4   EE           MOV     A,R6
   \   0000C5   F9           MOV     R1,A
   \   0000C6   12....       LCALL   ??erasePage?relay
    330              }
   \   0000C9   0E           INC     R6
   \   0000CA   EE           MOV     A,R6
   \   0000CB   C3           CLR     C
   \   0000CC   947F         SUBB    A,#0x7f
   \   0000CE   40F4         JC      ??initNV_14
    331              initNV();
   \   0000D0                ; Setup parameters for call to function initNV
   \   0000D0   12....       LCALL   ??initNV?relay
    332            }
    333          
    334            return TRUE;
   \                     ??initNV_13:
   \   0000D3   7901         MOV     R1,#0x1
   \   0000D5   7408         MOV     A,#0x8
   \   0000D7   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000DA                REQUIRE ?Subroutine0
   \   0000DA                ; // Fall through to label ?Subroutine0
    335          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine53_0:
   \   000000   F9           MOV     R1,A
   \   000001                REQUIRE ??Subroutine54_0
   \   000001                ; // Fall through to label ??Subroutine54_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine54_0:
   \   000000   12....       LCALL   ??HalFlashRead?relay
   \   000003   7402         MOV     A,#0x2
   \   000005   22           RET
    336          
    337          /*********************************************************************
    338           * @fn      setPageUse
    339           *
    340           * @brief   Set page header active/inUse state according to 'inUse'.
    341           *
    342           * @param   pg - Valid NV page to verify and init.
    343           * @param   inUse - Boolean TRUE if inUse, FALSE if only active.
    344           *
    345           * @return  none
    346           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    347          static void setPageUse( uint8 pg, uint8 inUse )
   \                     setPageUse:
    348          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FF           MOV     R7,A
    349            osalNvPgHdr_t pgHdr;
    350          
    351            pgHdr.active = OSAL_NV_ZEROED_ID;
   \   00000C   85..82       MOV     DPL,?XSP + 0
   \   00000F   85..83       MOV     DPH,?XSP + 1
   \   000012   E4           CLR     A
   \   000013   F0           MOVX    @DPTR,A
   \   000014   A3           INC     DPTR
   \   000015   F0           MOVX    @DPTR,A
    352          
    353            if ( inUse )
   \   000016   EF           MOV     A,R7
   \   000017   6008         JZ      ??setPageUse_0
    354            {
    355              pgHdr.inUse = OSAL_NV_ZEROED_ID;
   \   000019   7402         MOV     A,#0x2
   \   00001B   12....       LCALL   ?XSTACK_DISP0_8
   \   00001E   E4           CLR     A
   \   00001F   8007         SJMP    ??setPageUse_1
    356            }
    357            else
    358            {
    359              pgHdr.inUse = OSAL_NV_ERASED_ID;
   \                     ??setPageUse_0:
   \   000021   7402         MOV     A,#0x2
   \   000023   12....       LCALL   ?XSTACK_DISP0_8
   \   000026   74FF         MOV     A,#-0x1
    360            }
   \                     ??setPageUse_1:
   \   000028   12....       LCALL   ??Subroutine45_0 & 0xFFFF
    361          
    362            writeWord( pg, OSAL_NV_PAGE_HDR_OFFSET, (uint8*)(&pgHdr) );
   \                     ??CrossCallReturnLabel_91:
   \   00002B   7A00         MOV     R2,#0x0
   \   00002D   7B00         MOV     R3,#0x0
   \   00002F   12....       LCALL   ??writeWord?relay
    363          }
   \   000032   7408         MOV     A,#0x8
   \   000034                REQUIRE ?Subroutine1
   \   000034                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine42_0
   \   000003                ; // Fall through to label ??Subroutine42_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine42_0:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine45_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine46_0
   \   000002                ; // Fall through to label ??Subroutine46_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine46_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function writeWordH
   \   000001                ; Setup parameters for call to function writeWord
   \   000001                ; Setup parameters for call to function writeWord
   \   000001                ; Setup parameters for call to function writeWord
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   AC82         MOV     R4,DPL
   \   000009   AD83         MOV     R5,DPH
   \   00000B   22           RET
    364          
    365          /*********************************************************************
    366           * @fn      initPage
    367           *
    368           * @brief   Walk the page items; calculate checksums, lost bytes & page offset.
    369           *
    370           * @param   pg - Valid NV page to verify and init.
    371           * @param   id - Valid NV item Id to use function as a "findItem".
    372           *               If set to NULL then just perform the page initialization.
    373           *
    374           * @return  If 'id' is non-NULL and good checksums are found, return the offset
    375           *          of the data corresponding to item Id; else OSAL_NV_ITEM_NULL.
    376           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    377          static uint16 initPage( uint8 pg, uint16 id, uint8 findDups )
   \                     initPage:
    378          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   EA           MOV     A,R2
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   EB           MOV     A,R3
   \   000014   F0           MOVX    @DPTR,A
   \   000015   89..         MOV     ?V0 + 6,R1
   \   000017   8C..         MOV     ?V0 + 7,R4
    379            uint16 offset = OSAL_NV_PAGE_HDR_SIZE;
   \   000019   75..08       MOV     ?V0 + 2,#0x8
   \   00001C   75..00       MOV     ?V0 + 3,#0x0
    380            uint16 sz, lost = 0;
   \   00001F   7E00         MOV     R6,#0x0
   \   000021   7F00         MOV     R7,#0x0
   \   000023   801C         SJMP    ??initPage_0
    381            osalNvHdr_t hdr;
    382          
    383            do
    384            {
    385              HalFlashRead(pg, offset, (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
    386          
    387              if ( hdr.id == OSAL_NV_ERASED_ID )
    388              {
    389                break;
    390              }
    391              offset += OSAL_NV_HDR_SIZE;
    392              sz = OSAL_NV_DATA_SIZE( hdr.len );
    393          
    394              // A bad 'len' write has blown away the rest of the page.
    395              if ( (offset + sz) > OSAL_NV_PAGE_FREE )
    396              {
    397                lost += (OSAL_NV_PAGE_FREE - offset + OSAL_NV_HDR_SIZE);
    398                offset = OSAL_NV_PAGE_FREE;
    399                break;
    400              }
    401          
    402              if ( hdr.id != OSAL_NV_ZEROED_ID )
    403              {
    404                /* This trick allows function to do double duty for findItem() without
    405                 * compromising its essential functionality at powerup initialization.
    406                 */
    407                if ( id != OSAL_NV_ITEM_NULL )
    408                {
    409                  /* This trick allows asking to find the old/transferred item in case
    410                   * of a successful new item write that gets interrupted before the
    411                   * old item can be zeroed out.
    412                   */
    413                  if ( (id & 0x7fff) == hdr.id )
    414                  {
    415                    if ( (((id & OSAL_NV_SOURCE_ID) == 0) && (hdr.stat == OSAL_NV_ERASED_ID)) ||
    416                         (((id & OSAL_NV_SOURCE_ID) != 0) && (hdr.stat != OSAL_NV_ERASED_ID)) )
    417                    {
    418                      return offset;
    419                    }
    420                  }
    421                }
    422                // When invoked from the osal_nv_init(), verify checksums and find & zero any duplicates.
    423                else
    424                {
    425                  if ( hdr.chk == calcChkF( pg, offset, hdr.len ) )
    426                  {
    427                    if ( findDups )
    428                    {
    429                      if ( hdr.stat == OSAL_NV_ERASED_ID )
    430                      {
    431                        /* The trick of setting the MSB of the item Id causes the logic
    432                         * immediately above to return a valid page only if the header 'stat'
    433                         * indicates that it was the older item being transferred.
    434                         */
    435                        uint16 off = findItem( (hdr.id | OSAL_NV_SOURCE_ID) );
    436          
    437                        if ( off != OSAL_NV_ITEM_NULL )
    438                        {
    439                          setItem( findPg, off, eNvZero );  // Mark old duplicate as invalid.
    440                        }
    441                      }
    442                    }
    443                    // Any "old" item immediately exits and triggers the N^2 exhaustive initialization.
    444                    else if ( hdr.stat != OSAL_NV_ERASED_ID )
    445                    {
    446                      return OSAL_NV_ERASED_ID;
    447                    }
    448                  }
    449                  else
    450                  {
    451                    setItem( pg, offset, eNvZero );  // Mark bad checksum as invalid.
    452                    lost += (OSAL_NV_HDR_SIZE + sz);
    453                  }
    454                }
    455              }
    456              else
    457              {
    458                lost += (OSAL_NV_HDR_SIZE + sz);
   \                     ??initPage_1:
   \   000025   E5..         MOV     A,?V0 + 0
   \   000027   2408         ADD     A,#0x8
   \   000029   F8           MOV     R0,A
   \   00002A   E5..         MOV     A,?V0 + 1
   \   00002C   3400         ADDC    A,#0x0
   \   00002E   F9           MOV     R1,A
   \   00002F   EE           MOV     A,R6
   \   000030   28           ADD     A,R0
   \   000031   FE           MOV     R6,A
   \   000032   EF           MOV     A,R7
   \   000033   39           ADDC    A,R1
   \   000034   FF           MOV     R7,A
    459              }
    460              offset += sz;
   \                     ??initPage_2:
   \   000035   E5..         MOV     A,?V0 + 2
   \   000037   25..         ADD     A,?V0 + 0
   \   000039   F5..         MOV     ?V0 + 2,A
   \   00003B   E5..         MOV     A,?V0 + 3
   \   00003D   35..         ADDC    A,?V0 + 1
   \   00003F   F5..         MOV     ?V0 + 3,A
    461          
    462            } while ( TRUE );
   \                     ??initPage_0:
   \   000041                ; Setup parameters for call to function HalFlashRead
   \   000041   75..08       MOV     ?V0 + 0,#0x8
   \   000044   75..00       MOV     ?V0 + 1,#0x0
   \   000047   78..         MOV     R0,#?V0 + 0
   \   000049   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004C   7404         MOV     A,#0x4
   \   00004E   12....       LCALL   ?XSTACK_DISP0_8
   \   000051   AC82         MOV     R4,DPL
   \   000053   AD83         MOV     R5,DPH
   \   000055   AA..         MOV     R2,?V0 + 2
   \   000057   AB..         MOV     R3,?V0 + 3
   \   000059   A9..         MOV     R1,?V0 + 6
   \   00005B   12....       LCALL   ??Subroutine54_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_120:
   \   00005E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000061   7402         MOV     A,#0x2
   \   000063   12....       LCALL   ?XSTACK_DISP0_8
   \   000066   E0           MOVX    A,@DPTR
   \   000067   F4           CPL     A
   \   000068   7003         JNZ     ??initPage_3
   \   00006A   A3           INC     DPTR
   \   00006B   E0           MOVX    A,@DPTR
   \   00006C   F4           CPL     A
   \                     ??initPage_3:
   \   00006D   6041         JZ      ??initPage_4
   \   00006F   E5..         MOV     A,?V0 + 2
   \   000071   2408         ADD     A,#0x8
   \   000073   F5..         MOV     ?V0 + 2,A
   \   000075   E5..         MOV     A,?V0 + 3
   \   000077   3400         ADDC    A,#0x0
   \   000079   F5..         MOV     ?V0 + 3,A
   \   00007B   7404         MOV     A,#0x4
   \   00007D   12....       LCALL   ?XSTACK_DISP0_8
   \   000080   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   000083   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   000086   F5..         MOV     ?V0 + 0,A
   \   000088   E9           MOV     A,R1
   \   000089   F5..         MOV     ?V0 + 1,A
   \   00008B   E5..         MOV     A,?V0 + 2
   \   00008D   25..         ADD     A,?V0 + 0
   \   00008F   F8           MOV     R0,A
   \   000090   E5..         MOV     A,?V0 + 3
   \   000092   35..         ADDC    A,?V0 + 1
   \   000094   12....       LCALL   ??Subroutine43_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   000097   4033         JC      ??initPage_5
   \   000099   EE           MOV     A,R6
   \   00009A   2408         ADD     A,#0x8
   \   00009C   F8           MOV     R0,A
   \   00009D   EF           MOV     A,R7
   \   00009E   3408         ADDC    A,#0x8
   \   0000A0   F9           MOV     R1,A
   \   0000A1   E8           MOV     A,R0
   \   0000A2   C3           CLR     C
   \   0000A3   95..         SUBB    A,?V0 + 2
   \   0000A5   FE           MOV     R6,A
   \   0000A6   E9           MOV     A,R1
   \   0000A7   95..         SUBB    A,?V0 + 3
   \   0000A9   FF           MOV     R7,A
   \   0000AA   75..00       MOV     ?V0 + 2,#0x0
   \   0000AD   75..08       MOV     ?V0 + 3,#0x8
    463          
    464            pgOff[pg - OSAL_NV_PAGE_BEG] = offset;
   \                     ??initPage_4:
   \   0000B0   E5..         MOV     A,?V0 + 6
   \   0000B2   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   0000B5   E5..         MOV     A,?V0 + 2
   \   0000B7   F0           MOVX    @DPTR,A
   \   0000B8   A3           INC     DPTR
   \   0000B9   E5..         MOV     A,?V0 + 3
   \   0000BB   12....       LCALL   ?Subroutine8 & 0xFFFF
    465            pgLost[pg - OSAL_NV_PAGE_BEG] = lost;
   \                     ??CrossCallReturnLabel_9:
   \   0000BE   EE           MOV     A,R6
   \   0000BF   F0           MOVX    @DPTR,A
   \   0000C0   A3           INC     DPTR
   \   0000C1   EF           MOV     A,R7
   \   0000C2   F0           MOVX    @DPTR,A
    466          
    467            return OSAL_NV_ITEM_NULL;
   \   0000C3   7A00         MOV     R2,#0x0
   \   0000C5   7B00         MOV     R3,#0x0
   \                     ??initPage_6:
   \   0000C7   740A         MOV     A,#0xa
   \   0000C9   02....       LJMP    ?Subroutine2 & 0xFFFF
   \                     ??initPage_5:
   \   0000CC   7402         MOV     A,#0x2
   \   0000CE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D1   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   0000D4   7003         JNZ     $+5
   \   0000D6   02....       LJMP    ??initPage_1 & 0xFFFF
   \   0000D9   85..82       MOV     DPL,?XSP + 0
   \   0000DC   85..83       MOV     DPH,?XSP + 1
   \   0000DF   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   0000E2   6052         JZ      ??initPage_7
   \   0000E4   85..82       MOV     DPL,?XSP + 0
   \   0000E7   85..83       MOV     DPH,?XSP + 1
   \   0000EA   A3           INC     DPTR
   \   0000EB   E0           MOVX    A,@DPTR
   \   0000EC   547F         ANL     A,#0x7f
   \   0000EE   F9           MOV     R1,A
   \   0000EF   7402         MOV     A,#0x2
   \   0000F1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F4   E0           MOVX    A,@DPTR
   \   0000F5   68           XRL     A,R0
   \   0000F6   7003         JNZ     ??initPage_8
   \   0000F8   A3           INC     DPTR
   \   0000F9   E0           MOVX    A,@DPTR
   \   0000FA   69           XRL     A,R1
   \                     ??initPage_8:
   \   0000FB   6003         JZ      $+5
   \   0000FD   02....       LJMP    ??initPage_2 & 0xFFFF
   \   000100   7408         MOV     A,#0x8
   \   000102   12....       LCALL   ?XSTACK_DISP0_8
   \   000105   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   000108   85..82       MOV     DPL,?XSP + 0
   \   00010B   85..83       MOV     DPH,?XSP + 1
   \   00010E   A3           INC     DPTR
   \   00010F   E0           MOVX    A,@DPTR
   \   000110   5480         ANL     A,#0x80
   \   000112   700F         JNZ     ??initPage_9
   \   000114   74FF         MOV     A,#-0x1
   \   000116   6A           XRL     A,R2
   \   000117   7003         JNZ     ??initPage_10
   \   000119   74FF         MOV     A,#-0x1
   \   00011B   6B           XRL     A,R3
   \                     ??initPage_10:
   \   00011C   6003         JZ      $+5
   \   00011E   02....       LJMP    ??initPage_2 & 0xFFFF
   \   000121   800D         SJMP    ??initPage_11
   \                     ??initPage_9:
   \   000123   74FF         MOV     A,#-0x1
   \   000125   6A           XRL     A,R2
   \   000126   7003         JNZ     ??initPage_12
   \   000128   74FF         MOV     A,#-0x1
   \   00012A   6B           XRL     A,R3
   \                     ??initPage_12:
   \   00012B   7003         JNZ     $+5
   \   00012D   02....       LJMP    ??initPage_2 & 0xFFFF
   \                     ??initPage_11:
   \   000130   AA..         MOV     R2,?V0 + 2
   \   000132   AB..         MOV     R3,?V0 + 3
   \   000134   8091         SJMP    ??initPage_6
   \                     ??initPage_7:
   \   000136                ; Setup parameters for call to function calcChkF
   \   000136   AA..         MOV     R2,?V0 + 2
   \   000138   AB..         MOV     R3,?V0 + 3
   \   00013A   A9..         MOV     R1,?V0 + 6
   \   00013C   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   00013F   12....       LCALL   ?XSTACK_DISP0_8
   \   000142   E0           MOVX    A,@DPTR
   \   000143   68           XRL     A,R0
   \   000144   7003         JNZ     ??initPage_13
   \   000146   A3           INC     DPTR
   \   000147   E0           MOVX    A,@DPTR
   \   000148   69           XRL     A,R1
   \                     ??initPage_13:
   \   000149   7050         JNZ     ??initPage_14
   \   00014B   7408         MOV     A,#0x8
   \   00014D   12....       LCALL   ?XSTACK_DISP0_8
   \   000150   12....       LCALL   ??Subroutine49_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   000153   E5..         MOV     A,?V0 + 7
   \   000155   6030         JZ      ??initPage_15
   \   000157   74FF         MOV     A,#-0x1
   \   000159   68           XRL     A,R0
   \   00015A   7003         JNZ     ??initPage_16
   \   00015C   74FF         MOV     A,#-0x1
   \   00015E   69           XRL     A,R1
   \                     ??initPage_16:
   \   00015F   6003         JZ      $+5
   \   000161   02....       LJMP    ??initPage_2 & 0xFFFF
   \   000164                ; Setup parameters for call to function findItem
   \   000164   7402         MOV     A,#0x2
   \   000166   12....       LCALL   ?XSTACK_DISP0_8
   \   000169   E0           MOVX    A,@DPTR
   \   00016A   FA           MOV     R2,A
   \   00016B   A3           INC     DPTR
   \   00016C   E0           MOVX    A,@DPTR
   \   00016D   4480         ORL     A,#0x80
   \   00016F   FB           MOV     R3,A
   \   000170   12....       LCALL   ??findItem?relay
   \   000173   EA           MOV     A,R2
   \   000174   4B           ORL     A,R3
   \   000175   7003         JNZ     $+5
   \   000177   02....       LJMP    ??initPage_2 & 0xFFFF
   \   00017A                ; Setup parameters for call to function setItem
   \   00017A   7C01         MOV     R4,#0x1
   \   00017C   90....       MOV     DPTR,#findPg
   \   00017F   E0           MOVX    A,@DPTR
   \   000180   F9           MOV     R1,A
   \   000181   12....       LCALL   ??setItem?relay
   \   000184   02....       LJMP    ??initPage_2 & 0xFFFF
   \                     ??initPage_15:
   \   000187   74FF         MOV     A,#-0x1
   \   000189   68           XRL     A,R0
   \   00018A   7003         JNZ     ??initPage_17
   \   00018C   74FF         MOV     A,#-0x1
   \   00018E   69           XRL     A,R1
   \                     ??initPage_17:
   \   00018F   7003         JNZ     $+5
   \   000191   02....       LJMP    ??initPage_2 & 0xFFFF
   \   000194   7AFF         MOV     R2,#-0x1
   \   000196   7BFF         MOV     R3,#-0x1
   \   000198   02....       LJMP    ??initPage_6 & 0xFFFF
   \                     ??initPage_14:
   \   00019B                ; Setup parameters for call to function setItem
   \   00019B   7C01         MOV     R4,#0x1
   \   00019D   AA..         MOV     R2,?V0 + 2
   \   00019F   AB..         MOV     R3,?V0 + 3
   \   0001A1   A9..         MOV     R1,?V0 + 6
   \   0001A3   12....       LCALL   ??setItem?relay
   \   0001A6   02....       LJMP    ??initPage_1 & 0xFFFF
    468          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   74..         MOV     A,#(pgLost + 14) & 0xff
   \   000002   28           ADD     A,R0
   \   000003   F582         MOV     DPL,A
   \   000005   74..         MOV     A,#((pgLost - 242) >> 8) & 0xff
   \   000007   39           ADDC    A,R1
   \   000008   F583         MOV     DPH,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine43_0:
   \   000000   F9           MOV     R1,A
   \   000001   C3           CLR     C
   \   000002   E8           MOV     A,R0
   \   000003   9401         SUBB    A,#0x1
   \   000005   E9           MOV     A,R1
   \   000006   9408         SUBB    A,#0x8
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   12....       LCALL   ??calcChkF?relay
   \   000003   8A..         MOV     ?V0 + 4,R2
   \   000005   8B..         MOV     ?V0 + 5,R3
   \   000007   A8..         MOV     R0,?V0 + 4
   \   000009   A9..         MOV     R1,?V0 + 5
   \   00000B   7406         MOV     A,#0x6
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   EC           MOV     A,R4
   \   000001   2403         ADD     A,#0x3
   \   000003   F8           MOV     R0,A
   \   000004   ED           MOV     A,R5
   \   000005                REQUIRE ??Subroutine44_0
   \   000005                ; // Fall through to label ??Subroutine44_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine44_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F9           MOV     R1,A
   \   000003   E8           MOV     A,R0
   \   000004   54FC         ANL     A,#0xfc
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   C3           CLR     C
   \   000001   33           RLC     A
   \   000002   F8           MOV     R0,A
   \   000003   E4           CLR     A
   \   000004   33           RLC     A
   \   000005   F9           MOV     R1,A
   \   000006   74..         MOV     A,#(pgOff + 14) & 0xff
   \   000008   28           ADD     A,R0
   \   000009   F582         MOV     DPL,A
   \   00000B   74..         MOV     A,#((pgOff - 242) >> 8) & 0xff
   \   00000D   39           ADDC    A,R1
   \   00000E   F583         MOV     DPH,A
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine49_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   E8           MOV     A,R0
   \   000006   49           ORL     A,R1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine50_0
   \   000003                ; // Fall through to label ??Subroutine50_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine50_0:
   \   000000   7F08         MOV     R7,#0x8
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    469          
    470          /*********************************************************************
    471           * @fn      erasePage
    472           *
    473           * @brief   Erases a page in Flash.
    474           *
    475           * @param   pg - Valid NV page to erase.
    476           *
    477           * @return  none
    478           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    479          static void erasePage( uint8 pg )
   \                     erasePage:
    480          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    481            if ( !OSAL_NV_CHECK_BUS_VOLTAGE )
   \   000007                ; Setup parameters for call to function HalAdcCheckVdd
   \   000007   7904         MOV     R1,#0x4
   \   000009   12....       LCALL   ??HalAdcCheckVdd?relay
   \   00000C   E9           MOV     A,R1
   \   00000D   7007         JNZ     ??erasePage_0
    482            {
    483              failF = TRUE;
   \   00000F   90....       MOV     DPTR,#failF
   \   000012   7401         MOV     A,#0x1
   \   000014   8014         SJMP    ??erasePage_1
    484              return;
    485            }
    486          
    487            HalFlashErase(pg);
   \                     ??erasePage_0:
   \   000016                ; Setup parameters for call to function HalFlashErase
   \   000016   EE           MOV     A,R6
   \   000017   F9           MOV     R1,A
   \   000018   12....       LCALL   ??HalFlashErase?relay
    488          
    489            pgOff[pg - OSAL_NV_PAGE_BEG] = OSAL_NV_PAGE_HDR_SIZE;
   \   00001B   EE           MOV     A,R6
   \   00001C   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   00001F   7408         MOV     A,#0x8
   \   000021   F0           MOVX    @DPTR,A
   \   000022   A3           INC     DPTR
   \   000023   E4           CLR     A
   \   000024   12....       LCALL   ?Subroutine8 & 0xFFFF
    490            pgLost[pg - OSAL_NV_PAGE_BEG] = 0;
   \                     ??CrossCallReturnLabel_10:
   \   000027   E4           CLR     A
   \   000028   F0           MOVX    @DPTR,A
   \   000029   A3           INC     DPTR
   \                     ??erasePage_1:
   \   00002A   F0           MOVX    @DPTR,A
    491          }
   \   00002B   02....       LJMP    ??Subroutine42_0 & 0xFFFF
    492          
    493          /*********************************************************************
    494           * @fn      compactPage
    495           *
    496           * @brief   Compacts the page specified.
    497           *
    498           * @param   srcPg - Valid NV page to erase.
    499           *
    500           * @return  none
    501           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    502          static void compactPage( uint8 srcPg )
   \                     compactPage:
    503          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
    504            uint16 dstOff = pgOff[pgRes-OSAL_NV_PAGE_BEG];
   \   00000C   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   F5..         MOV     ?V0 + 0,A
   \   000012   A3           INC     DPTR
   \   000013   E0           MOVX    A,@DPTR
   \   000014   F5..         MOV     ?V0 + 1,A
    505            uint16 srcOff = OSAL_NV_ZEROED_ID;
   \   000016   12....       LCALL   ?Subroutine6 & 0xFFFF
    506            osalNvHdr_t hdr;
    507          
    508            // Mark page as being in process of compaction.
    509            writeWordH( srcPg, OSAL_NV_PG_XFER, (uint8*)(&srcOff) );
   \                     ??CrossCallReturnLabel_89:
   \   000019   7A04         MOV     R2,#0x4
   \   00001B   FB           MOV     R3,A
   \   00001C   EE           MOV     A,R6
   \   00001D   F9           MOV     R1,A
   \   00001E   12....       LCALL   ??writeWordH?relay
    510          
    511            srcOff = OSAL_NV_PAGE_HDR_SIZE;
   \   000021   85..82       MOV     DPL,?XSP + 0
   \   000024   85..83       MOV     DPH,?XSP + 1
   \   000027   7408         MOV     A,#0x8
   \   000029   F0           MOVX    @DPTR,A
   \   00002A   A3           INC     DPTR
   \   00002B   E4           CLR     A
   \   00002C   02....       LJMP    ??compactPage_0 & 0xFFFF
    512          
    513            do
    514            {
    515              uint16 sz;
    516              HalFlashRead(srcPg, srcOff, (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
    517          
    518              if ( hdr.id == OSAL_NV_ERASED_ID )
    519              {
    520                break;
    521              }
    522          
    523              srcOff += OSAL_NV_HDR_SIZE;
    524          
    525              if ( (srcOff + hdr.len) > OSAL_NV_PAGE_FREE )
    526              {
    527                break;
    528              }
    529          
    530              sz = OSAL_NV_DATA_SIZE( hdr.len );
   \                     ??compactPage_1:
   \   00002F   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   000032   F5..         MOV     ?V0 + 2,A
   \   000034   E9           MOV     A,R1
   \   000035   F5..         MOV     ?V0 + 3,A
    531          
    532              if ( hdr.id != OSAL_NV_ZEROED_ID )
   \   000037   7402         MOV     A,#0x2
   \   000039   12....       LCALL   ?XSTACK_DISP0_8
   \   00003C   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   00003F   6077         JZ      ??CrossCallReturnLabel_29
    533              {
    534                if ( hdr.chk == calcChkF( srcPg, srcOff, hdr.len ) )
   \   000041                ; Setup parameters for call to function calcChkF
   \   000041   85..82       MOV     DPL,?XSP + 0
   \   000044   85..83       MOV     DPH,?XSP + 1
   \   000047   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   00004A   F9           MOV     R1,A
   \   00004B   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   00004E   12....       LCALL   ?XSTACK_DISP0_8
   \   000051   E0           MOVX    A,@DPTR
   \   000052   68           XRL     A,R0
   \   000053   7003         JNZ     ??compactPage_2
   \   000055   A3           INC     DPTR
   \   000056   E0           MOVX    A,@DPTR
   \   000057   69           XRL     A,R1
   \                     ??compactPage_2:
   \   000058   7059         JNZ     ??compactPage_3
    535                {
    536                  setItem( srcPg, srcOff, eNvXfer );
   \   00005A                ; Setup parameters for call to function setItem
   \   00005A   7C00         MOV     R4,#0x0
   \   00005C   12....       LCALL   ?Subroutine16 & 0xFFFF
    537                  writeBuf( pgRes, dstOff, OSAL_NV_HDR_SIZE, (byte *)(&hdr) );
   \                     ??CrossCallReturnLabel_28:
   \   00005F                ; Setup parameters for call to function writeBuf
   \   00005F   7402         MOV     A,#0x2
   \   000061   12....       LCALL   ?XSTACK_DISP0_8
   \   000064   8582..       MOV     ?V0 + 4,DPL
   \   000067   8583..       MOV     ?V0 + 5,DPH
   \   00006A   78..         MOV     R0,#?V0 + 4
   \   00006C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006F   7C08         MOV     R4,#0x8
   \   000071   7D00         MOV     R5,#0x0
   \   000073   AA..         MOV     R2,?V0 + 0
   \   000075   AB..         MOV     R3,?V0 + 1
   \   000077   90....       MOV     DPTR,#pgRes
   \   00007A   E0           MOVX    A,@DPTR
   \   00007B   F9           MOV     R1,A
   \   00007C   12....       LCALL   ??writeBuf?relay
   \   00007F   7402         MOV     A,#0x2
   \   000081   12....       LCALL   ?DEALLOC_XSTACK8
    538                  dstOff += OSAL_NV_HDR_SIZE;
   \   000084   12....       LCALL   ?Subroutine27 & 0xFFFF
    539                  xferBuf( srcPg, srcOff, pgRes, dstOff, sz );
   \                     ??CrossCallReturnLabel_53:
   \   000087                ; Setup parameters for call to function xferBuf
   \   000087   78..         MOV     R0,#?V0 + 2
   \   000089   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00008C   78..         MOV     R0,#?V0 + 0
   \   00008E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000091   90....       MOV     DPTR,#pgRes
   \   000094   E0           MOVX    A,@DPTR
   \   000095   FC           MOV     R4,A
   \   000096   7404         MOV     A,#0x4
   \   000098   12....       LCALL   ?XSTACK_DISP0_8
   \   00009B   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   00009E   F9           MOV     R1,A
   \   00009F   12....       LCALL   ??xferBuf?relay
   \   0000A2   7404         MOV     A,#0x4
   \   0000A4   12....       LCALL   ?DEALLOC_XSTACK8
    540                  dstOff += sz;
   \   0000A7   E5..         MOV     A,?V0 + 0
   \   0000A9   25..         ADD     A,?V0 + 2
   \   0000AB   F5..         MOV     ?V0 + 0,A
   \   0000AD   E5..         MOV     A,?V0 + 1
   \   0000AF   35..         ADDC    A,?V0 + 3
   \   0000B1   F5..         MOV     ?V0 + 1,A
    541                }
    542          
    543                setItem( srcPg, srcOff, eNvZero );  // Mark old location as invalid.
   \                     ??compactPage_3:
   \   0000B3                ; Setup parameters for call to function setItem
   \   0000B3   7C01         MOV     R4,#0x1
   \   0000B5   12....       LCALL   ?Subroutine16 & 0xFFFF
    544              }
    545          
    546              srcOff += sz;
   \                     ??CrossCallReturnLabel_29:
   \   0000B8   85..82       MOV     DPL,?XSP + 0
   \   0000BB   85..83       MOV     DPH,?XSP + 1
   \   0000BE   E0           MOVX    A,@DPTR
   \   0000BF   25..         ADD     A,?V0 + 2
   \   0000C1   F0           MOVX    @DPTR,A
   \   0000C2   A3           INC     DPTR
   \   0000C3   E0           MOVX    A,@DPTR
   \   0000C4   35..         ADDC    A,?V0 + 3
   \                     ??compactPage_0:
   \   0000C6   F0           MOVX    @DPTR,A
    547          
    548            } while ( TRUE );
   \   0000C7                ; Setup parameters for call to function HalFlashRead
   \   0000C7   75..08       MOV     ?V0 + 2,#0x8
   \   0000CA   75..00       MOV     ?V0 + 3,#0x0
   \   0000CD   78..         MOV     R0,#?V0 + 2
   \   0000CF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000D2   7404         MOV     A,#0x4
   \   0000D4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D7   AC82         MOV     R4,DPL
   \   0000D9   AD83         MOV     R5,DPH
   \   0000DB   7402         MOV     A,#0x2
   \   0000DD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E0   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   0000E3   12....       LCALL   ??Subroutine53_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   0000E6   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000E9   7402         MOV     A,#0x2
   \   0000EB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EE   E0           MOVX    A,@DPTR
   \   0000EF   F4           CPL     A
   \   0000F0   7003         JNZ     ??compactPage_4
   \   0000F2   A3           INC     DPTR
   \   0000F3   E0           MOVX    A,@DPTR
   \   0000F4   F4           CPL     A
   \                     ??compactPage_4:
   \   0000F5   602B         JZ      ??compactPage_5
   \   0000F7   85..82       MOV     DPL,?XSP + 0
   \   0000FA   85..83       MOV     DPH,?XSP + 1
   \   0000FD   E0           MOVX    A,@DPTR
   \   0000FE   2408         ADD     A,#0x8
   \   000100   F0           MOVX    @DPTR,A
   \   000101   A3           INC     DPTR
   \   000102   E0           MOVX    A,@DPTR
   \   000103   3400         ADDC    A,#0x0
   \   000105   F0           MOVX    @DPTR,A
   \   000106   7404         MOV     A,#0x4
   \   000108   12....       LCALL   ?XSTACK_DISP0_8
   \   00010B   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   00010E   85..82       MOV     DPL,?XSP + 0
   \   000111   85..83       MOV     DPH,?XSP + 1
   \   000114   E0           MOVX    A,@DPTR
   \   000115   2C           ADD     A,R4
   \   000116   F8           MOV     R0,A
   \   000117   A3           INC     DPTR
   \   000118   E0           MOVX    A,@DPTR
   \   000119   3D           ADDC    A,R5
   \   00011A   12....       LCALL   ??Subroutine43_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   00011D   5003         JNC     $+5
   \   00011F   02....       LJMP    ??compactPage_1 & 0xFFFF
    549          
    550            pgOff[pgRes-OSAL_NV_PAGE_BEG] = dstOff;
   \                     ??compactPage_5:
   \   000122   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   000125   E5..         MOV     A,?V0 + 0
   \   000127   F0           MOVX    @DPTR,A
   \   000128   A3           INC     DPTR
   \   000129   E5..         MOV     A,?V0 + 1
   \   00012B   F0           MOVX    @DPTR,A
    551          
    552            /* In order to recover from a page compaction that is interrupted,
    553             * the logic in osal_nv_init() depends upon the following order:
    554             * 1. Compacted page is erased.
    555             * 2. State of the target of compaction is changed ePgActive to ePgInUse.
    556             */
    557            erasePage( srcPg );
   \   00012C                ; Setup parameters for call to function erasePage
   \   00012C   EE           MOV     A,R6
   \   00012D   F9           MOV     R1,A
   \   00012E   12....       LCALL   ??erasePage?relay
    558          
    559            // Mark the reserve page as being in use.
    560            setPageUse( pgRes, TRUE );
   \   000131                ; Setup parameters for call to function setPageUse
   \   000131   7A01         MOV     R2,#0x1
   \   000133   90....       MOV     DPTR,#pgRes
   \   000136   E0           MOVX    A,@DPTR
   \   000137   F9           MOV     R1,A
   \   000138   12....       LCALL   ??setPageUse?relay
    561          
    562            // Set the reserve page to be the newly erased page.
    563            pgRes = srcPg;
   \   00013B   EE           MOV     A,R6
   \   00013C   90....       MOV     DPTR,#pgRes
   \   00013F   F0           MOVX    @DPTR,A
    564          }
   \   000140   740A         MOV     A,#0xa
   \   000142   02....       LJMP    ?Subroutine3 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   000003   EE           MOV     A,R6
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   000009   EE           MOV     A,R6
   \   00000A   F9           MOV     R1,A
   \   00000B   12....       LCALL   ??setItem?relay
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   90....       MOV     DPTR,#pgRes
   \   000003   E0           MOVX    A,@DPTR
   \   000004   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   E4           CLR     A
   \   000007                REQUIRE ??Subroutine45_0
   \   000007                ; // Fall through to label ??Subroutine45_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine47_0
   \   000003                ; // Fall through to label ??Subroutine47_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine47_0:
   \   000000   7F06         MOV     R7,#0x6
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   E5..         MOV     A,?V0 + 0
   \   000002   2408         ADD     A,#0x8
   \   000004   F5..         MOV     ?V0 + 0,A
   \   000006   E5..         MOV     A,?V0 + 1
   \   000008   3400         ADDC    A,#0x0
   \   00000A   F5..         MOV     ?V0 + 1,A
   \   00000C   22           RET
    565          
    566          /*********************************************************************
    567           * @fn      findItem
    568           *
    569           * @brief   Find an item Id in NV and return the page and offset to its data.
    570           *
    571           * @param   id - Valid NV item Id.
    572           *
    573           * @return  Offset of data corresponding to item Id, if found;
    574           *          otherwise OSAL_NV_ITEM_NULL.
    575           *
    576           *          The page containing the item, if found;
    577           *          otherwise no valid assignment made - left equal to item Id.
    578           *
    579           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    580          static uint16 findItem( uint16 id )
   \                     findItem:
    581          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   8003         SJMP    ??findItem_0
    582            uint16 off;
    583            uint8 pg;
    584          
    585            for ( pg = OSAL_NV_PAGE_BEG; pg <= OSAL_NV_PAGE_END; pg++ )
    586            {
    587              if ( (off = initPage( pg, id, FALSE )) != OSAL_NV_ITEM_NULL )
    588              {
    589                findPg = pg;
    590                return off;
    591              }
    592            }
    593          
    594            // Now attempt to find the item as the "old" item of a failed/interrupted NV write.
    595            if ( (id & OSAL_NV_SOURCE_ID) == 0 )
    596            {
    597              return findItem( id | OSAL_NV_SOURCE_ID );
   \                     ??findItem_1:
   \   00000A   7480         MOV     A,#-0x80
   \   00000C   4F           ORL     A,R7
   \                     ??findItem_0:
   \   00000D   FF           MOV     R7,A
    598            }
   \   00000E   75..79       MOV     ?V0 + 0,#0x79
   \                     ??findItem_2:
   \   000011                ; Setup parameters for call to function initPage
   \   000011   7C00         MOV     R4,#0x0
   \   000013   EE           MOV     A,R6
   \   000014   FA           MOV     R2,A
   \   000015   EF           MOV     A,R7
   \   000016   FB           MOV     R3,A
   \   000017   A9..         MOV     R1,?V0 + 0
   \   000019   12....       LCALL   ??initPage?relay
   \   00001C   8B..         MOV     ?V0 + 3,R3
   \   00001E   A9..         MOV     R1,?V0 + 3
   \   000020   EA           MOV     A,R2
   \   000021   49           ORL     A,R1
   \   000022   6008         JZ      ??findItem_3
   \   000024   E5..         MOV     A,?V0 + 0
   \   000026   90....       MOV     DPTR,#findPg
   \   000029   F0           MOVX    @DPTR,A
   \   00002A   8015         SJMP    ??findItem_4
   \                     ??findItem_3:
   \   00002C   05..         INC     ?V0 + 0
   \   00002E   E5..         MOV     A,?V0 + 0
   \   000030   C3           CLR     C
   \   000031   947F         SUBB    A,#0x7f
   \   000033   40DC         JC      ??findItem_2
   \   000035   EF           MOV     A,R7
   \   000036   5480         ANL     A,#0x80
   \   000038   60D0         JZ      ??findItem_1
    599            else
    600            {
    601              findPg = OSAL_NV_PAGE_NULL;
   \   00003A   90....       MOV     DPTR,#findPg
   \   00003D   E4           CLR     A
   \   00003E   F0           MOVX    @DPTR,A
    602              return OSAL_NV_ITEM_NULL;
   \   00003F   FA           MOV     R2,A
   \   000040   FB           MOV     R3,A
    603            }
   \                     ??findItem_4:
   \   000041   02....       LJMP    ?Subroutine0 & 0xFFFF
    604          }
    605          
    606          /*********************************************************************
    607           * @fn      initItem
    608           *
    609           * @brief   An NV item is created and initialized with the data passed to the function, if any.
    610           *
    611           * @param   id  - Valid NV item Id.
    612           * @param   len - Item data length.
    613           * @param  *buf - Pointer to item initalization data. Set to NULL if none.
    614           *
    615           * @return  TRUE if item write and read back checksums ok; FALSE otherwise.
    616           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   3B           ADDC    A,R3
   \   000001                REQUIRE ??Subroutine43_0
   \   000001                ; // Fall through to label ??Subroutine43_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    617          static uint8 initItem( uint8 flag, uint16 id, uint16 len, void *buf )
   \                     initItem:
    618          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 0,R1
   \   000007   8A..         MOV     ?V0 + 6,R2
   \   000009   8B..         MOV     ?V0 + 7,R3
    619            uint16 sz = OSAL_NV_ITEM_SIZE( len );
   \   00000B   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   00000E   2408         ADD     A,#0x8
   \   000010   FA           MOV     R2,A
   \   000011   E9           MOV     A,R1
   \   000012   3400         ADDC    A,#0x0
   \   000014   FB           MOV     R3,A
    620            uint8 rtrn = FALSE;
   \   000015   75..00       MOV     ?V0 + 1,#0x0
    621            uint8 cnt = OSAL_NV_PAGES_USED;
   \   000018   75..06       MOV     ?V0 + 4,#0x6
    622            uint8 pg = pgRes+1;  // Set to 1 after the reserve page to even wear across all available pages.
   \   00001B   90....       MOV     DPTR,#pgRes
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   04           INC     A
   \   000020   FF           MOV     R7,A
    623            uint8 idx;
    624          
    625            do {
    626              if (pg >= OSAL_NV_PAGE_BEG+OSAL_NV_PAGES_USED)
   \                     ??initItem_0:
   \   000021   EF           MOV     A,R7
   \   000022   C3           CLR     C
   \   000023   947F         SUBB    A,#0x7f
   \   000025   4002         JC      ??initItem_1
    627              {
    628                pg = OSAL_NV_PAGE_BEG;
   \   000027   7F79         MOV     R7,#0x79
    629              }
    630              if ( pg != pgRes )
   \                     ??initItem_1:
   \   000029   90....       MOV     DPTR,#pgRes
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   6F           XRL     A,R7
   \   00002E   6036         JZ      ??initItem_2
    631              {
    632                idx = pg - OSAL_NV_PAGE_BEG;
   \   000030   7487         MOV     A,#-0x79
   \   000032   2F           ADD     A,R7
   \   000033   FE           MOV     R6,A
    633                if ( (pgOff[idx] - pgLost[idx] + sz) <= OSAL_NV_PAGE_FREE )
   \   000034   C3           CLR     C
   \   000035   33           RLC     A
   \   000036   F8           MOV     R0,A
   \   000037   E4           CLR     A
   \   000038   33           RLC     A
   \   000039   F9           MOV     R1,A
   \   00003A   74..         MOV     A,#pgOff & 0xff
   \   00003C   28           ADD     A,R0
   \   00003D   F582         MOV     DPL,A
   \   00003F   74..         MOV     A,#(pgOff >> 8) & 0xff
   \   000041   39           ADDC    A,R1
   \   000042   F583         MOV     DPH,A
   \   000044   12....       LCALL   ?Subroutine18 & 0xFFFF
    634                {
    635                  break;
    636                }
    637              }
   \                     ??CrossCallReturnLabel_32:
   \   000047   74..         MOV     A,#pgLost & 0xff
   \   000049   28           ADD     A,R0
   \   00004A   F582         MOV     DPL,A
   \   00004C   74..         MOV     A,#(pgLost >> 8) & 0xff
   \   00004E   39           ADDC    A,R1
   \   00004F   F583         MOV     DPH,A
   \   000051   12....       LCALL   ??Subroutine49_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   000054   E5..         MOV     A,?V0 + 2
   \   000056   C3           CLR     C
   \   000057   98           SUBB    A,R0
   \   000058   F8           MOV     R0,A
   \   000059   E5..         MOV     A,?V0 + 3
   \   00005B   99           SUBB    A,R1
   \   00005C   F9           MOV     R1,A
   \   00005D   E8           MOV     A,R0
   \   00005E   2A           ADD     A,R2
   \   00005F   F8           MOV     R0,A
   \   000060   E9           MOV     A,R1
   \   000061   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   000064   4009         JC      ??initItem_3
    638              pg++;
   \                     ??initItem_2:
   \   000066   0F           INC     R7
    639            } while (--cnt);
   \   000067   15..         DEC     ?V0 + 4
   \   000069   E5..         MOV     A,?V0 + 4
   \   00006B   70B4         JNZ     ??initItem_0
   \   00006D   8054         SJMP    ??initItem_4
    640          
    641            if (cnt)
   \                     ??initItem_3:
   \   00006F   E5..         MOV     A,?V0 + 4
   \   000071   6050         JZ      ??initItem_4
    642            {
    643              // Item fits if an old page is compacted.
    644              if ( (pgOff[idx] + sz) > OSAL_NV_PAGE_FREE )
   \   000073   E5..         MOV     A,?V0 + 2
   \   000075   2A           ADD     A,R2
   \   000076   F8           MOV     R0,A
   \   000077   E5..         MOV     A,?V0 + 3
   \   000079   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   00007C   4005         JC      ??initItem_5
    645              {
    646                pg = pgRes;
   \   00007E   90....       MOV     DPTR,#pgRes
   \   000081   E0           MOVX    A,@DPTR
   \   000082   FF           MOV     R7,A
    647              }
    648          
    649              // New item is the first one written to the reserved page, then the old page is compacted.
    650              rtrn = writeItem( pg, id, len, buf, flag );
   \                     ??initItem_5:
   \   000083                ; Setup parameters for call to function writeItem
   \   000083   E5..         MOV     A,?V0 + 0
   \   000085   F5..         MOV     ?V0 + 1,A
   \   000087   78..         MOV     R0,#?V0 + 1
   \   000089   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00008C   7411         MOV     A,#0x11
   \   00008E   12....       LCALL   ?XSTACK_DISP0_8
   \   000091   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000094   AA..         MOV     R2,?V0 + 6
   \   000096   AB..         MOV     R3,?V0 + 7
   \   000098   EF           MOV     A,R7
   \   000099   F9           MOV     R1,A
   \   00009A   12....       LCALL   ??writeItem?relay
   \   00009D   7403         MOV     A,#0x3
   \   00009F   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A2   E9           MOV     A,R1
   \   0000A3   F5..         MOV     ?V0 + 1,A
    651          
    652              if ( pg == pgRes )
   \   0000A5   90....       MOV     DPTR,#pgRes
   \   0000A8   E0           MOVX    A,@DPTR
   \   0000A9   6F           XRL     A,R7
   \   0000AA   7017         JNZ     ??initItem_4
    653              {
    654                if ( flag )
   \   0000AC   7479         MOV     A,#0x79
   \   0000AE   2E           ADD     A,R6
   \   0000AF   F9           MOV     R1,A
   \   0000B0   E5..         MOV     A,?V0 + 0
   \   0000B2   6005         JZ      ??initItem_6
    655                {
    656                  compactPage( OSAL_NV_PAGE_BEG+idx );
   \   0000B4                ; Setup parameters for call to function compactPage
   \   0000B4   12....       LCALL   ??compactPage?relay
   \   0000B7   800A         SJMP    ??initItem_4
    657                }
    658                else
    659                {
    660                  *(uint8 *)buf = OSAL_NV_PAGE_BEG+idx;
   \                     ??initItem_6:
   \   0000B9   7410         MOV     A,#0x10
   \   0000BB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BE   12....       LCALL   ?Subroutine14 & 0xFFFF
    661                }
    662              }
    663            }
   \                     ??CrossCallReturnLabel_23:
   \   0000C1   E9           MOV     A,R1
   \   0000C2   F0           MOVX    @DPTR,A
    664          
    665            return rtrn;
   \                     ??initItem_4:
   \   0000C3   A9..         MOV     R1,?V0 + 1
   \   0000C5   02....       LJMP    ??Subroutine50_0 & 0xFFFF
    666          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 2,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 3,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8882         MOV     DPL,R0
   \   000008   22           RET
    667          
    668          /*********************************************************************
    669           * @fn      setItem
    670           *
    671           * @brief   Set an item Id or status to mark its state.
    672           *
    673           * @param   pg - Valid NV page.
    674           * @param   offset - Valid offset into the page of the item data - the header
    675           *                   offset is calculated from this.
    676           * @param   stat - Valid enum value for the item status.
    677           *
    678           * @return  none
    679           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    680          static void setItem( uint8 pg, uint16 offset, eNvHdrEnum stat )
   \                     setItem:
    681          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V0 + 2,R1
   \   00000C   8C..         MOV     ?V0 + 3,R4
    682            osalNvHdr_t hdr;
    683          
    684            offset -= OSAL_NV_HDR_SIZE;
   \   00000E   EA           MOV     A,R2
   \   00000F   24F8         ADD     A,#-0x8
   \   000011   F5..         MOV     ?V0 + 0,A
   \   000013   EB           MOV     A,R3
   \   000014   34FF         ADDC    A,#-0x1
   \   000016   F5..         MOV     ?V0 + 1,A
    685            HalFlashRead(pg, offset, (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   \   000018                ; Setup parameters for call to function HalFlashRead
   \   000018   75..08       MOV     ?V0 + 4,#0x8
   \   00001B   75..00       MOV     ?V0 + 5,#0x0
   \   00001E   78..         MOV     R0,#?V0 + 4
   \   000020   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000023   7402         MOV     A,#0x2
   \   000025   12....       LCALL   ?XSTACK_DISP0_8
   \   000028   AC82         MOV     R4,DPL
   \   00002A   AD83         MOV     R5,DPH
   \   00002C   AA..         MOV     R2,?V0 + 0
   \   00002E   AB..         MOV     R3,?V0 + 1
   \   000030   12....       LCALL   ??Subroutine54_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_121:
   \   000033   12....       LCALL   ?DEALLOC_XSTACK8
    686          
    687            if ( stat == eNvXfer )
   \   000036   E5..         MOV     A,?V0 + 3
   \   000038   7023         JNZ     ??setItem_0
    688            {
    689              hdr.stat = OSAL_NV_ACTIVE;
   \   00003A   7406         MOV     A,#0x6
   \   00003C   12....       LCALL   ?XSTACK_DISP0_8
   \   00003F   E4           CLR     A
   \   000040   F0           MOVX    @DPTR,A
   \   000041   A3           INC     DPTR
   \   000042   F0           MOVX    @DPTR,A
    690              writeWord( pg, offset+OSAL_NV_HDR_CHK, (uint8*)(&(hdr.chk)) );
   \   000043                ; Setup parameters for call to function writeWord
   \   000043   7404         MOV     A,#0x4
   \   000045   12....       LCALL   ?XSTACK_DISP0_8
   \   000048   AC82         MOV     R4,DPL
   \   00004A   AD83         MOV     R5,DPH
   \   00004C   E5..         MOV     A,?V0 + 0
   \   00004E   2404         ADD     A,#0x4
   \   000050   FA           MOV     R2,A
   \   000051   E5..         MOV     A,?V0 + 1
   \   000053   3400         ADDC    A,#0x0
   \   000055   FB           MOV     R3,A
   \   000056   A9..         MOV     R1,?V0 + 2
   \   000058   12....       LCALL   ??writeWord?relay
   \   00005B   802B         SJMP    ??setItem_1
    691          }
    692            else // if ( stat == eNvZero )
    693            {
    694              uint16 sz = ((hdr.len + (OSAL_NV_WORD_SIZE-1)) / OSAL_NV_WORD_SIZE) * OSAL_NV_WORD_SIZE +
    695                                                                                    OSAL_NV_HDR_SIZE;
   \                     ??setItem_0:
   \   00005D   7402         MOV     A,#0x2
   \   00005F   12....       LCALL   ?XSTACK_DISP0_8
   \   000062   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000065   FE           MOV     R6,A
   \   000066   E9           MOV     A,R1
   \   000067   3400         ADDC    A,#0x0
   \   000069   FF           MOV     R7,A
    696              hdr.id = 0;
   \   00006A   12....       LCALL   ?Subroutine6 & 0xFFFF
    697              writeWord( pg, offset, (uint8 *)(&hdr) );
   \                     ??CrossCallReturnLabel_90:
   \   00006D   AA..         MOV     R2,?V0 + 0
   \   00006F   AB..         MOV     R3,?V0 + 1
   \   000071   A9..         MOV     R1,?V0 + 2
   \   000073   12....       LCALL   ??writeWord?relay
    698              pgLost[pg-OSAL_NV_PAGE_BEG] += sz;
   \   000076   E5..         MOV     A,?V0 + 2
   \   000078   C3           CLR     C
   \   000079   33           RLC     A
   \   00007A   F8           MOV     R0,A
   \   00007B   E4           CLR     A
   \   00007C   33           RLC     A
   \   00007D   F9           MOV     R1,A
   \   00007E   12....       LCALL   ?Subroutine40 & 0xFFFF
    699            }
   \                     ??CrossCallReturnLabel_79:
   \   000081   E0           MOVX    A,@DPTR
   \   000082   2E           ADD     A,R6
   \   000083   F0           MOVX    @DPTR,A
   \   000084   A3           INC     DPTR
   \   000085   E0           MOVX    A,@DPTR
   \   000086   3F           ADDC    A,R7
   \   000087   F0           MOVX    @DPTR,A
    700          }
   \                     ??setItem_1:
   \   000088   7408         MOV     A,#0x8
   \   00008A   02....       LJMP    ?Subroutine3 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   2403         ADD     A,#0x3
   \   000003   F8           MOV     R0,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   3400         ADDC    A,#0x0
   \   000008   F9           MOV     R1,A
   \   000009   E8           MOV     A,R0
   \   00000A   54FC         ANL     A,#0xfc
   \   00000C   2408         ADD     A,#0x8
   \   00000E   22           RET
    701          
    702          /*********************************************************************
    703           * @fn      calcChkB
    704           *
    705           * @brief   Calculates the data checksum over the 'buf' parameter.
    706           *
    707           * @param   pg - A valid NV Flash page.
    708           * @param   offset - A valid offset into the page.
    709           * @param   len - Byte count of the data to be checksummed.
    710           *
    711           * @return  Calculated checksum of the data bytes.
    712           */
    713          static uint16 calcChkB( uint16 len, uint8 *buf )
    714          {
    715            uint8 fill = len % OSAL_NV_WORD_SIZE;
    716            uint16 chk;
    717          
    718            if ( !buf )
    719            {
    720              chk = len * OSAL_NV_ERASED;
    721            }
    722            else
    723            {
    724              chk = 0;
    725              while ( len-- )
    726              {
    727                chk += *buf++;
    728              }
    729            }
    730          
    731            // calcChkF() will calculate over OSAL_NV_WORD_SIZE alignment.
    732            if ( fill )
    733            {
    734              chk += (OSAL_NV_WORD_SIZE - fill) * OSAL_NV_ERASED;
    735            }
    736          
    737            return chk;
    738          }
    739          
    740          /*********************************************************************
    741           * @fn      calcChkF
    742           *
    743           * @brief   Calculates the data checksum by reading the data bytes from NV.
    744           *
    745           * @param   pg - A valid NV Flash page.
    746           * @param   offset - A valid offset into the page.
    747           * @param   len - Byte count of the data to be checksummed.
    748           *
    749           * @return  Calculated checksum of the data bytes.
    750           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    751          static uint16 calcChkF( byte pg, uint16 offset, uint16 len )
   \                     calcChkF:
    752          {
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V0 + 6,R1
   \   00000C   8A..         MOV     ?V0 + 0,R2
   \   00000E   8B..         MOV     ?V0 + 1,R3
   \   000010   EC           MOV     A,R4
   \   000011   FE           MOV     R6,A
   \   000012   ED           MOV     A,R5
   \   000013   FF           MOV     R7,A
    753            uint16 chk = 0;
   \   000014   75..00       MOV     ?V0 + 2,#0x0
   \   000017   75..00       MOV     ?V0 + 3,#0x0
    754          
    755            len = (len + (OSAL_NV_WORD_SIZE-1)) / OSAL_NV_WORD_SIZE;
   \   00001A   EE           MOV     A,R6
   \   00001B   2403         ADD     A,#0x3
   \   00001D   F5..         MOV     ?V0 + 4,A
   \   00001F   EF           MOV     A,R7
   \   000020   3400         ADDC    A,#0x0
   \   000022   F5..         MOV     ?V0 + 5,A
   \   000024   7402         MOV     A,#0x2
   \   000026   78..         MOV     R0,#?V0 + 4
   \   000028   12....       LCALL   ?US_SHR
   \   00002B   AE..         MOV     R6,?V0 + 4
   \   00002D   AF..         MOV     R7,?V0 + 5
    756          
    757            while ( len-- )
   \                     ??calcChkF_0:
   \   00002F   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   000032   604F         JZ      ??calcChkF_1
    758            {
    759              uint8 cnt, tmp[OSAL_NV_WORD_SIZE];
    760          
    761              HalFlashRead(pg, offset, tmp, OSAL_NV_WORD_SIZE);
   \   000034                ; Setup parameters for call to function HalFlashRead
   \   000034   75..04       MOV     ?V0 + 4,#0x4
   \   000037   75..00       MOV     ?V0 + 5,#0x0
   \   00003A   78..         MOV     R0,#?V0 + 4
   \   00003C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003F   7402         MOV     A,#0x2
   \   000041   12....       LCALL   ?XSTACK_DISP0_8
   \   000044   AC82         MOV     R4,DPL
   \   000046   AD83         MOV     R5,DPH
   \   000048   AA..         MOV     R2,?V0 + 0
   \   00004A   AB..         MOV     R3,?V0 + 1
   \   00004C   A9..         MOV     R1,?V0 + 6
   \   00004E   12....       LCALL   ??Subroutine54_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_122:
   \   000051   12....       LCALL   ?DEALLOC_XSTACK8
    762              offset += OSAL_NV_WORD_SIZE;
   \   000054   12....       LCALL   ?Subroutine41 & 0xFFFF
    763          
    764              for ( cnt = 0; cnt < OSAL_NV_WORD_SIZE; cnt++ )
   \                     ??CrossCallReturnLabel_96:
   \   000057   7800         MOV     R0,#0x0
    765              {
    766                chk += tmp[cnt];
   \                     ??calcChkF_2:
   \   000059   88..         MOV     ?V0 + 4,R0
   \   00005B   85..82       MOV     DPL,?XSP + 0
   \   00005E   85..83       MOV     DPH,?XSP + 1
   \   000061   E582         MOV     A,DPL
   \   000063   25..         ADD     A,?V0 + 4
   \   000065   F582         MOV     DPL,A
   \   000067   E583         MOV     A,DPH
   \   000069   3400         ADDC    A,#0x0
   \   00006B   F583         MOV     DPH,A
   \   00006D   E0           MOVX    A,@DPTR
   \   00006E   FA           MOV     R2,A
   \   00006F   E5..         MOV     A,?V0 + 2
   \   000071   2A           ADD     A,R2
   \   000072   F5..         MOV     ?V0 + 2,A
   \   000074   E5..         MOV     A,?V0 + 3
   \   000076   3400         ADDC    A,#0x0
   \   000078   F5..         MOV     ?V0 + 3,A
    767              }
   \   00007A   08           INC     R0
   \   00007B   E8           MOV     A,R0
   \   00007C   C3           CLR     C
   \   00007D   9404         SUBB    A,#0x4
   \   00007F   50AE         JNC     ??calcChkF_0
   \   000081   80D6         SJMP    ??calcChkF_2
    768            }
    769          
    770            return chk;
   \                     ??calcChkF_1:
   \   000083   AA..         MOV     R2,?V0 + 2
   \   000085   AB..         MOV     R3,?V0 + 3
   \   000087   7404         MOV     A,#0x4
   \   000089                REQUIRE ?Subroutine4
   \   000089                ; // Fall through to label ?Subroutine4
    771          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F07         MOV     R7,#0x7
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   EE           MOV     A,R6
   \   000001   F8           MOV     R0,A
   \   000002   EF           MOV     A,R7
   \   000003   F9           MOV     R1,A
   \   000004   E8           MOV     A,R0
   \   000005   24FF         ADD     A,#-0x1
   \   000007   1E           DEC     R6
   \   000008   E9           MOV     A,R1
   \   000009   34FF         ADDC    A,#-0x1
   \   00000B   FF           MOV     R7,A
   \   00000C   E8           MOV     A,R0
   \   00000D   49           ORL     A,R1
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   E5..         MOV     A,?V0 + 0
   \   000002   2404         ADD     A,#0x4
   \   000004   F5..         MOV     ?V0 + 0,A
   \   000006   E5..         MOV     A,?V0 + 1
   \   000008   3400         ADDC    A,#0x0
   \   00000A   F5..         MOV     ?V0 + 1,A
   \   00000C   22           RET
    772          
    773          /*********************************************************************
    774           * @fn      writeWord
    775           *
    776           * @brief   Writes a Flash-WORD to NV.
    777           *
    778           * @param   pg - A valid NV Flash page.
    779           * @param   offset - A valid offset into the page.
    780           * @param   buf - Pointer to source buffer.
    781           *
    782           * @return  none
    783           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    784          static void writeWord( uint8 pg, uint16 offset, uint8 *buf )
   \                     writeWord:
    785          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 2,R1
   \   000007   8A..         MOV     ?V0 + 0,R2
   \   000009   8B..         MOV     ?V0 + 1,R3
   \   00000B   EC           MOV     A,R4
   \   00000C   FE           MOV     R6,A
   \   00000D   ED           MOV     A,R5
   \   00000E   FF           MOV     R7,A
    786            offset = (offset >> 2) + ((uint16)pg << 9);
    787          
    788            if ( OSAL_NV_CHECK_BUS_VOLTAGE )
   \   00000F                ; Setup parameters for call to function HalAdcCheckVdd
   \   00000F   7904         MOV     R1,#0x4
   \   000011   12....       LCALL   ??HalAdcCheckVdd?relay
   \   000014   E9           MOV     A,R1
   \   000015   602F         JZ      ??writeWord_0
    789            {
    790              HalFlashWrite(offset, buf, 1);
   \   000017                ; Setup parameters for call to function HalFlashWrite
   \   000017   75..01       MOV     ?V0 + 4,#0x1
   \   00001A   75..00       MOV     ?V0 + 5,#0x0
   \   00001D   78..         MOV     R0,#?V0 + 4
   \   00001F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000022   EE           MOV     A,R6
   \   000023   FC           MOV     R4,A
   \   000024   EF           MOV     A,R7
   \   000025   FD           MOV     R5,A
   \   000026   7402         MOV     A,#0x2
   \   000028   78..         MOV     R0,#?V0 + 0
   \   00002A   12....       LCALL   ?US_SHR
   \   00002D   85....       MOV     ?V0 + 4,?V0 + 2
   \   000030   7409         MOV     A,#0x9
   \   000032   78..         MOV     R0,#?V0 + 4
   \   000034   12....       LCALL   ?S_SHL
   \   000037   E5..         MOV     A,?V0 + 0
   \   000039   2400         ADD     A,#0x0
   \   00003B   FA           MOV     R2,A
   \   00003C   E5..         MOV     A,?V0 + 1
   \   00003E   12....       LCALL   ?Subroutine36 & 0xFFFF
    791            }
   \                     ??CrossCallReturnLabel_69:
   \   000041   12....       LCALL   ?DEALLOC_XSTACK8
   \   000044   8006         SJMP    ??writeWord_1
    792            else
    793            {
    794              failF = TRUE;
   \                     ??writeWord_0:
   \   000046   90....       MOV     DPTR,#failF
   \   000049   7401         MOV     A,#0x1
   \   00004B   F0           MOVX    @DPTR,A
    795            }
    796          }
   \                     ??writeWord_1:
   \   00004C   80..         SJMP    ??Subroutine47_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   35..         ADDC    A,?V0 + 5
   \   000002   FB           MOV     R3,A
   \   000003   12....       LCALL   ??HalFlashWrite?relay
   \   000006   7402         MOV     A,#0x2
   \   000008   22           RET
    797          
    798          /*********************************************************************
    799           * @fn      writeWordM
    800           *
    801           * @brief   Writes multiple Flash-WORDs to NV.
    802           *
    803           * @param   pg - A valid NV Flash page.
    804           * @param   offset - A valid offset into the page.
    805           * @param   buf - Pointer to source buffer.
    806           * @param   cnt - Number of 4-byte blocks to write.
    807           *
    808           * @return  none
    809           */
    810          static void writeWordM( uint8 pg, uint16 offset, uint8 *buf, uint16 cnt )
    811          {
    812            offset = (offset >> 2) + ((uint16)pg << 9);
    813          
    814            if ( OSAL_NV_CHECK_BUS_VOLTAGE )
    815            {
    816              HalFlashWrite(offset, buf, cnt);
    817            }
    818            else
    819            {
    820              failF = TRUE;
    821            }
    822          }
    823          
    824          /*********************************************************************
    825           * @fn      writeWordH
    826           *
    827           * @brief   Writes the 1st half of a Flash-WORD to NV (filling 2nd half with 0xffff).
    828           *
    829           * @param   pg - A valid NV Flash page.
    830           * @param   offset - A valid offset into the page.
    831           * @param   buf - Pointer to source buffer.
    832           *
    833           * @return  none
    834           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    835          static void writeWordH( uint8 pg, uint16 offset, uint8 *buf )
   \                     writeWordH:
    836          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    837            uint8 tmp[4];
    838          
    839            tmp[0] = buf[0];
   \   00000A   8C82         MOV     DPL,R4
   \   00000C   8D83         MOV     DPH,R5
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   85..82       MOV     DPL,?XSP + 0
   \   000012   85..83       MOV     DPH,?XSP + 1
   \   000015   F0           MOVX    @DPTR,A
    840            tmp[1] = buf[1];
   \   000016   8C82         MOV     DPL,R4
   \   000018   8D83         MOV     DPH,R5
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   C0E0         PUSH    A
   \   00001E   7401         MOV     A,#0x1
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   D0E0         POP     A
   \   000025   F0           MOVX    @DPTR,A
    841            tmp[2] = OSAL_NV_ERASED;
   \   000026   7402         MOV     A,#0x2
   \   000028   12....       LCALL   ?XSTACK_DISP0_8
   \   00002B   74FF         MOV     A,#-0x1
   \   00002D   F0           MOVX    @DPTR,A
    842            tmp[3] = OSAL_NV_ERASED;
   \   00002E   7403         MOV     A,#0x3
   \   000030   12....       LCALL   ?XSTACK_DISP0_8
   \   000033   74FF         MOV     A,#-0x1
   \   000035   12....       LCALL   ??Subroutine46_0 & 0xFFFF
    843          
    844            writeWord( pg, offset, tmp );
   \                     ??CrossCallReturnLabel_92:
   \   000038   12....       LCALL   ??writeWord?relay
    845          }
   \   00003B   7404         MOV     A,#0x4
   \   00003D   02....       LJMP    ?Subroutine1 & 0xFFFF
    846          
    847          /*********************************************************************
    848           * @fn      writeBuf
    849           *
    850           * @brief   Writes a data buffer to NV.
    851           *
    852           * @param   dstPg - A valid NV Flash page.
    853           * @param   offset - A valid offset into the page.
    854           * @param   len  - Byte count of the data to write.
    855           * @param   buf  - The data to write.
    856           *
    857           * @return  TRUE if data buf checksum matches read back checksum, else FALSE.
    858           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    859          static void writeBuf( uint8 dstPg, uint16 dstOff, uint16 len, uint8 *buf )
   \                     writeBuf:
    860          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V0 + 7,R1
   \   00000C   8A..         MOV     ?V0 + 0,R2
   \   00000E   8B..         MOV     ?V0 + 1,R3
   \   000010   EC           MOV     A,R4
   \   000011   FE           MOV     R6,A
   \   000012   ED           MOV     A,R5
   \   000013   FF           MOV     R7,A
    861            uint8 rem = dstOff % OSAL_NV_WORD_SIZE;
   \   000014   EA           MOV     A,R2
   \   000015   5403         ANL     A,#0x3
   \   000017   F5..         MOV     ?V0 + 6,A
    862            uint8 tmp[OSAL_NV_WORD_SIZE];
    863          
    864            if ( rem )
   \   000019   606B         JZ      ??CrossCallReturnLabel_95
    865            {
    866              dstOff = (dstOff / OSAL_NV_WORD_SIZE) * OSAL_NV_WORD_SIZE;
   \   00001B   74FC         MOV     A,#-0x4
   \   00001D   55..         ANL     A,?V0 + 0
   \   00001F   F5..         MOV     ?V0 + 0,A
    867              HalFlashRead(dstPg, dstOff, tmp, OSAL_NV_WORD_SIZE);
   \   000021                ; Setup parameters for call to function HalFlashRead
   \   000021   75..04       MOV     ?V0 + 2,#0x4
   \   000024   75..00       MOV     ?V0 + 3,#0x0
   \   000027   78..         MOV     R0,#?V0 + 2
   \   000029   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002C   7402         MOV     A,#0x2
   \   00002E   12....       LCALL   ?XSTACK_DISP0_8
   \   000031   AC82         MOV     R4,DPL
   \   000033   AD83         MOV     R5,DPH
   \   000035   AA..         MOV     R2,?V0 + 0
   \   000037   12....       LCALL   ??Subroutine54_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_123:
   \   00003A   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??writeBuf_0:
   \   00003D   EE           MOV     A,R6
   \   00003E   4F           ORL     A,R7
   \   00003F   6032         JZ      ??writeBuf_1
    868          
    869              while ( (rem < OSAL_NV_WORD_SIZE) && len )
    870              {
    871                tmp[rem++] = *buf++;
   \   000041   7414         MOV     A,#0x14
   \   000043   12....       LCALL   ?XSTACK_DISP0_8
   \   000046   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   000049   C0E0         PUSH    A
   \   00004B   85....       MOV     ?V0 + 2,?V0 + 6
   \   00004E   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   000051   D0E0         POP     A
   \   000053   F0           MOVX    @DPTR,A
   \   000054   7414         MOV     A,#0x14
   \   000056   12....       LCALL   ?XSTACK_DISP0_8
   \   000059   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   00005C   12....       LCALL   ?XSTACK_DISP0_8
   \   00005F   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000062   05..         INC     ?V0 + 6
    872                len--;
   \   000064   EE           MOV     A,R6
   \   000065   24FF         ADD     A,#-0x1
   \   000067   1E           DEC     R6
   \   000068   EF           MOV     A,R7
   \   000069   34FF         ADDC    A,#-0x1
   \   00006B   FF           MOV     R7,A
    873              }
   \   00006C   E5..         MOV     A,?V0 + 6
   \   00006E   C3           CLR     C
   \   00006F   9404         SUBB    A,#0x4
   \   000071   40CA         JC      ??writeBuf_0
    874          
    875              writeWord( dstPg, dstOff, tmp );
   \                     ??writeBuf_1:
   \   000073                ; Setup parameters for call to function writeWord
   \   000073   85..82       MOV     DPL,?XSP + 0
   \   000076   85..83       MOV     DPH,?XSP + 1
   \   000079   AC82         MOV     R4,DPL
   \   00007B   AD83         MOV     R5,DPH
   \   00007D   AA..         MOV     R2,?V0 + 0
   \   00007F   AB..         MOV     R3,?V0 + 1
   \   000081   A9..         MOV     R1,?V0 + 7
   \   000083   12....       LCALL   ??Subroutine48_0 & 0xFFFF
    876              dstOff += OSAL_NV_WORD_SIZE;
    877            }
    878          
    879            rem = len % OSAL_NV_WORD_SIZE;
   \                     ??CrossCallReturnLabel_95:
   \   000086   EE           MOV     A,R6
   \   000087   5403         ANL     A,#0x3
   \   000089   F5..         MOV     ?V0 + 6,A
    880            len /= OSAL_NV_WORD_SIZE;
   \   00008B   8E..         MOV     ?V0 + 2,R6
   \   00008D   8F..         MOV     ?V0 + 3,R7
   \   00008F   7402         MOV     A,#0x2
   \   000091   78..         MOV     R0,#?V0 + 2
   \   000093   12....       LCALL   ?US_SHR
   \   000096   AE..         MOV     R6,?V0 + 2
   \   000098   AF..         MOV     R7,?V0 + 3
    881          
    882            if ( len )
   \   00009A   EE           MOV     A,R6
   \   00009B   4F           ORL     A,R7
   \   00009C   6070         JZ      ??CrossCallReturnLabel_1
    883            {
    884              writeWordM( dstPg, dstOff, buf, len );
   \   00009E                ; Setup parameters for call to function HalAdcCheckVdd
   \   00009E   7904         MOV     R1,#0x4
   \   0000A0   12....       LCALL   ??HalAdcCheckVdd?relay
   \   0000A3   E9           MOV     A,R1
   \   0000A4   6035         JZ      ??writeBuf_2
   \   0000A6                ; Setup parameters for call to function HalFlashWrite
   \   0000A6   78..         MOV     R0,#?V0 + 2
   \   0000A8   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000AB   7416         MOV     A,#0x16
   \   0000AD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B0   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   0000B3   85....       MOV     ?V0 + 2,?V0 + 0
   \   0000B6   85....       MOV     ?V0 + 3,?V0 + 1
   \   0000B9   7402         MOV     A,#0x2
   \   0000BB   78..         MOV     R0,#?V0 + 2
   \   0000BD   12....       LCALL   ?US_SHR
   \   0000C0   85....       MOV     ?V0 + 4,?V0 + 7
   \   0000C3   F5..         MOV     ?V0 + 5,A
   \   0000C5   7409         MOV     A,#0x9
   \   0000C7   78..         MOV     R0,#?V0 + 4
   \   0000C9   12....       LCALL   ?S_SHL
   \   0000CC   E5..         MOV     A,?V0 + 2
   \   0000CE   2400         ADD     A,#0x0
   \   0000D0   FA           MOV     R2,A
   \   0000D1   E5..         MOV     A,?V0 + 3
   \   0000D3   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   0000D6   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000D9   8006         SJMP    ??writeBuf_3
   \                     ??writeBuf_2:
   \   0000DB   90....       MOV     DPTR,#failF
   \   0000DE   7401         MOV     A,#0x1
   \   0000E0   F0           MOVX    @DPTR,A
    885              dstOff += OSAL_NV_WORD_SIZE * len;
   \                     ??writeBuf_3:
   \   0000E1   8E..         MOV     ?V0 + 2,R6
   \   0000E3   8F..         MOV     ?V0 + 3,R7
   \   0000E5   7402         MOV     A,#0x2
   \   0000E7   78..         MOV     R0,#?V0 + 2
   \   0000E9   12....       LCALL   ?S_SHL
   \   0000EC   A8..         MOV     R0,?V0 + 2
   \   0000EE   A9..         MOV     R1,?V0 + 3
   \   0000F0   E5..         MOV     A,?V0 + 0
   \   0000F2   28           ADD     A,R0
   \   0000F3   F5..         MOV     ?V0 + 0,A
   \   0000F5   E5..         MOV     A,?V0 + 1
   \   0000F7   39           ADDC    A,R1
   \   0000F8   F5..         MOV     ?V0 + 1,A
    886              buf += OSAL_NV_WORD_SIZE * len;
   \   0000FA   7414         MOV     A,#0x14
   \   0000FC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FF   E0           MOVX    A,@DPTR
   \   000100   28           ADD     A,R0
   \   000101   F8           MOV     R0,A
   \   000102   A3           INC     DPTR
   \   000103   E0           MOVX    A,@DPTR
   \   000104   39           ADDC    A,R1
   \   000105   F9           MOV     R1,A
   \   000106   7414         MOV     A,#0x14
   \   000108   12....       LCALL   ?XSTACK_DISP0_8
   \   00010B   12....       LCALL   ?Subroutine7 & 0xFFFF
    887            }
    888          
    889            if ( rem )
   \                     ??CrossCallReturnLabel_1:
   \   00010E   E5..         MOV     A,?V0 + 6
   \   000110   6061         JZ      ??writeBuf_4
    890            {
    891              uint8 idx = 0;
   \   000112   7E00         MOV     R6,#0x0
    892              HalFlashRead(dstPg, dstOff, tmp, OSAL_NV_WORD_SIZE);
   \   000114                ; Setup parameters for call to function HalFlashRead
   \   000114   75..04       MOV     ?V0 + 2,#0x4
   \   000117   8E..         MOV     ?V0 + 3,R6
   \   000119   78..         MOV     R0,#?V0 + 2
   \   00011B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00011E   7402         MOV     A,#0x2
   \   000120   12....       LCALL   ?XSTACK_DISP0_8
   \   000123   AC82         MOV     R4,DPL
   \   000125   AD83         MOV     R5,DPH
   \   000127   AA..         MOV     R2,?V0 + 0
   \   000129   AB..         MOV     R3,?V0 + 1
   \   00012B   A9..         MOV     R1,?V0 + 7
   \   00012D   12....       LCALL   ??Subroutine54_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_124:
   \   000130   12....       LCALL   ?DEALLOC_XSTACK8
   \   000133   8021         SJMP    ??writeBuf_5
    893              while ( rem-- )
    894              {
    895                tmp[idx++] = *buf++;
   \                     ??writeBuf_6:
   \   000135   7414         MOV     A,#0x14
   \   000137   12....       LCALL   ?XSTACK_DISP0_8
   \   00013A   12....       LCALL   ?Subroutine12 & 0xFFFF
    896              }
   \                     ??CrossCallReturnLabel_19:
   \   00013D   C0E0         PUSH    A
   \   00013F   8E..         MOV     ?V0 + 2,R6
   \   000141   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   000144   D0E0         POP     A
   \   000146   F0           MOVX    @DPTR,A
   \   000147   7414         MOV     A,#0x14
   \   000149   12....       LCALL   ?XSTACK_DISP0_8
   \   00014C   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   00014F   12....       LCALL   ?XSTACK_DISP0_8
   \   000152   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000155   0E           INC     R6
   \                     ??writeBuf_5:
   \   000156   AF..         MOV     R7,?V0 + 6
   \   000158   74FF         MOV     A,#-0x1
   \   00015A   2F           ADD     A,R7
   \   00015B   F5..         MOV     ?V0 + 6,A
   \   00015D   04           INC     A
   \   00015E   70D5         JNZ     ??writeBuf_6
    897              writeWord( dstPg, dstOff, tmp );
   \   000160                ; Setup parameters for call to function writeWord
   \   000160   85..82       MOV     DPL,?XSP + 0
   \   000163   85..83       MOV     DPH,?XSP + 1
   \   000166   AC82         MOV     R4,DPL
   \   000168   AD83         MOV     R5,DPH
   \   00016A   AA..         MOV     R2,?V0 + 0
   \   00016C   AB..         MOV     R3,?V0 + 1
   \   00016E   A9..         MOV     R1,?V0 + 7
   \   000170   12....       LCALL   ??writeWord?relay
    898            }
    899          }
   \                     ??writeBuf_4:
   \   000173   7404         MOV     A,#0x4
   \   000175   02....       LJMP    ?Subroutine2 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   E582         MOV     A,DPL
   \   000008   25..         ADD     A,?V0 + 2
   \   00000A   F582         MOV     DPL,A
   \   00000C   E583         MOV     A,DPH
   \   00000E   3400         ADDC    A,#0x0
   \   000010   F583         MOV     DPH,A
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   2401         ADD     A,#0x1
   \   000003   F8           MOV     R0,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   3400         ADDC    A,#0x0
   \   000008   F9           MOV     R1,A
   \   000009   7414         MOV     A,#0x14
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine48_0:
   \   000000   12....       LCALL   ??writeWord?relay
   \   000003   12....       LCALL   ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET
    900          
    901          /*********************************************************************
    902           * @fn      xferBuf
    903           *
    904           * @brief   Xfers an NV buffer from one location to another, enforcing OSAL_NV_WORD_SIZE writes.
    905           *
    906           * @return  none
    907           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    908          static void xferBuf( uint8 srcPg, uint16 srcOff, uint8 dstPg, uint16 dstOff, uint16 len )
   \                     xferBuf:
    909          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   8A..         MOV     ?V0 + 6,R2
   \   000014   8B..         MOV     ?V0 + 7,R3
   \   000016   8C..         MOV     ?V0 + 3,R4
   \   000018   7415         MOV     A,#0x15
   \   00001A   12....       LCALL   ?XSTACK_DISP0_8
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   F5..         MOV     ?V0 + 0,A
   \   000020   A3           INC     DPTR
   \   000021   E0           MOVX    A,@DPTR
   \   000022   F5..         MOV     ?V0 + 1,A
   \   000024   7417         MOV     A,#0x17
   \   000026   12....       LCALL   ?XSTACK_DISP0_8
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   FE           MOV     R6,A
   \   00002B   A3           INC     DPTR
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   FF           MOV     R7,A
    910            uint8 rem = dstOff % OSAL_NV_WORD_SIZE;
   \   00002E   E5..         MOV     A,?V0 + 0
   \   000030   5403         ANL     A,#0x3
   \   000032   F5..         MOV     ?V0 + 2,A
    911            uint8 tmp[OSAL_NV_WORD_SIZE];
    912          
    913            if ( rem )
   \   000034   606B         JZ      ??CrossCallReturnLabel_93
    914            {
    915              dstOff -= rem;
   \   000036   F5..         MOV     ?V0 + 4,A
   \   000038   C3           CLR     C
   \   000039   E5..         MOV     A,?V0 + 0
   \   00003B   95..         SUBB    A,?V0 + 4
   \   00003D   F5..         MOV     ?V0 + 0,A
   \   00003F   E5..         MOV     A,?V0 + 1
   \   000041   9400         SUBB    A,#0x0
   \   000043   F5..         MOV     ?V0 + 1,A
    916              HalFlashRead(dstPg, dstOff, tmp, OSAL_NV_WORD_SIZE);
   \   000045                ; Setup parameters for call to function HalFlashRead
   \   000045   75..04       MOV     ?V0 + 4,#0x4
   \   000048   75..00       MOV     ?V0 + 5,#0x0
   \   00004B   78..         MOV     R0,#?V0 + 4
   \   00004D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000050   7403         MOV     A,#0x3
   \   000052   12....       LCALL   ?XSTACK_DISP0_8
   \   000055   AC82         MOV     R4,DPL
   \   000057   AD83         MOV     R5,DPH
   \   000059   AA..         MOV     R2,?V0 + 0
   \   00005B   AB..         MOV     R3,?V0 + 1
   \   00005D   A9..         MOV     R1,?V0 + 3
   \   00005F   12....       LCALL   ??Subroutine54_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_125:
   \   000062   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??xferBuf_0:
   \   000065   EE           MOV     A,R6
   \   000066   4F           ORL     A,R7
   \   000067   6030         JZ      ??xferBuf_1
    917          
    918              while ( (rem < OSAL_NV_WORD_SIZE) && len )
    919              {
    920                HalFlashRead(srcPg, srcOff, tmp+rem, 1);
   \   000069                ; Setup parameters for call to function HalFlashRead
   \   000069   75..01       MOV     ?V0 + 4,#0x1
   \   00006C   78..         MOV     R0,#?V0 + 4
   \   00006E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000071   85....       MOV     ?V0 + 4,?V0 + 2
   \   000074   7403         MOV     A,#0x3
   \   000076   12....       LCALL   ?XSTACK_DISP0_8
   \   000079   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   00007C   12....       LCALL   ?XSTACK_DISP0_8
   \   00007F   12....       LCALL   ??Subroutine52_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_113:
   \   000082   12....       LCALL   ?DEALLOC_XSTACK8
    921                srcOff++;
   \   000085   12....       LCALL   ?Subroutine35 & 0xFFFF
    922                rem++;
   \                     ??CrossCallReturnLabel_67:
   \   000088   05..         INC     ?V0 + 2
    923                len--;
   \   00008A   EE           MOV     A,R6
   \   00008B   24FF         ADD     A,#-0x1
   \   00008D   1E           DEC     R6
   \   00008E   EF           MOV     A,R7
   \   00008F   34FF         ADDC    A,#-0x1
   \   000091   FF           MOV     R7,A
    924              }
   \   000092   E5..         MOV     A,?V0 + 2
   \   000094   C3           CLR     C
   \   000095   9404         SUBB    A,#0x4
   \   000097   40CC         JC      ??xferBuf_0
    925          
    926              writeWord( dstPg, dstOff, tmp );
   \                     ??xferBuf_1:
   \   000099                ; Setup parameters for call to function writeWord
   \   000099   7401         MOV     A,#0x1
   \   00009B   12....       LCALL   ?XSTACK_DISP0_8
   \   00009E   12....       LCALL   ?Subroutine25 & 0xFFFF
    927              dstOff += OSAL_NV_WORD_SIZE;
    928            }
    929          
    930            rem = len % OSAL_NV_WORD_SIZE;
   \                     ??CrossCallReturnLabel_93:
   \   0000A1   EE           MOV     A,R6
   \   0000A2   5403         ANL     A,#0x3
   \   0000A4   F5..         MOV     ?V0 + 2,A
    931            len /= OSAL_NV_WORD_SIZE;
   \   0000A6   8E..         MOV     ?V0 + 4,R6
   \   0000A8   8F..         MOV     ?V0 + 5,R7
   \   0000AA   7402         MOV     A,#0x2
   \   0000AC   78..         MOV     R0,#?V0 + 4
   \   0000AE   12....       LCALL   ?US_SHR
   \   0000B1   AE..         MOV     R6,?V0 + 4
   \   0000B3   AF..         MOV     R7,?V0 + 5
   \   0000B5   8037         SJMP    ??CrossCallReturnLabel_94
    932          
    933            while ( len-- )
    934            {
    935              HalFlashRead(srcPg, srcOff, tmp, OSAL_NV_WORD_SIZE);
   \                     ??xferBuf_2:
   \   0000B7                ; Setup parameters for call to function HalFlashRead
   \   0000B7   75..04       MOV     ?V0 + 4,#0x4
   \   0000BA   75..00       MOV     ?V0 + 5,#0x0
   \   0000BD   78..         MOV     R0,#?V0 + 4
   \   0000BF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C2   7403         MOV     A,#0x3
   \   0000C4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C7   AC82         MOV     R4,DPL
   \   0000C9   AD83         MOV     R5,DPH
   \   0000CB   AA..         MOV     R2,?V0 + 6
   \   0000CD   AB..         MOV     R3,?V0 + 7
   \   0000CF   7402         MOV     A,#0x2
   \   0000D1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D4   12....       LCALL   ??Subroutine52_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_114:
   \   0000D7   12....       LCALL   ?DEALLOC_XSTACK8
    936              srcOff += OSAL_NV_WORD_SIZE;
   \   0000DA   E5..         MOV     A,?V0 + 6
   \   0000DC   2404         ADD     A,#0x4
   \   0000DE   F5..         MOV     ?V0 + 6,A
   \   0000E0   E5..         MOV     A,?V0 + 7
   \   0000E2   3400         ADDC    A,#0x0
   \   0000E4   F5..         MOV     ?V0 + 7,A
    937              writeWord( dstPg, dstOff, tmp );
   \   0000E6                ; Setup parameters for call to function writeWord
   \   0000E6   7401         MOV     A,#0x1
   \   0000E8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EB   12....       LCALL   ?Subroutine25 & 0xFFFF
    938              dstOff += OSAL_NV_WORD_SIZE;
    939            }
   \                     ??CrossCallReturnLabel_94:
   \   0000EE   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   0000F1   70C4         JNZ     ??xferBuf_2
    940          
    941            if ( rem )
   \   0000F3   E5..         MOV     A,?V0 + 2
   \   0000F5   605E         JZ      ??xferBuf_3
    942            {
    943              uint8 idx = 0;
   \   0000F7   7E00         MOV     R6,#0x0
    944              HalFlashRead(dstPg, dstOff, tmp, OSAL_NV_WORD_SIZE);
   \   0000F9                ; Setup parameters for call to function HalFlashRead
   \   0000F9   75..04       MOV     ?V0 + 4,#0x4
   \   0000FC   8E..         MOV     ?V0 + 5,R6
   \   0000FE   78..         MOV     R0,#?V0 + 4
   \   000100   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000103   7403         MOV     A,#0x3
   \   000105   12....       LCALL   ?XSTACK_DISP0_8
   \   000108   AC82         MOV     R4,DPL
   \   00010A   AD83         MOV     R5,DPH
   \   00010C   AA..         MOV     R2,?V0 + 0
   \   00010E   AB..         MOV     R3,?V0 + 1
   \   000110   A9..         MOV     R1,?V0 + 3
   \   000112   12....       LCALL   ??Subroutine54_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_126:
   \   000115   12....       LCALL   ?DEALLOC_XSTACK8
   \   000118   801F         SJMP    ??xferBuf_4
    945              while ( rem-- )
    946              {
    947                HalFlashRead(srcPg, srcOff, tmp+idx, 1);
   \                     ??xferBuf_5:
   \   00011A                ; Setup parameters for call to function HalFlashRead
   \   00011A   75..01       MOV     ?V0 + 4,#0x1
   \   00011D   78..         MOV     R0,#?V0 + 4
   \   00011F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000122   8E..         MOV     ?V0 + 4,R6
   \   000124   7403         MOV     A,#0x3
   \   000126   12....       LCALL   ?XSTACK_DISP0_8
   \   000129   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   00012C   12....       LCALL   ?XSTACK_DISP0_8
   \   00012F   12....       LCALL   ??Subroutine52_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_115:
   \   000132   12....       LCALL   ?DEALLOC_XSTACK8
    948                srcOff++;
   \   000135   12....       LCALL   ?Subroutine35 & 0xFFFF
    949                idx++;
   \                     ??CrossCallReturnLabel_68:
   \   000138   0E           INC     R6
    950              }
   \                     ??xferBuf_4:
   \   000139   AF..         MOV     R7,?V0 + 2
   \   00013B   74FF         MOV     A,#-0x1
   \   00013D   2F           ADD     A,R7
   \   00013E   F5..         MOV     ?V0 + 2,A
   \   000140   04           INC     A
   \   000141   70D7         JNZ     ??xferBuf_5
    951              writeWord( dstPg, dstOff, tmp );
   \   000143                ; Setup parameters for call to function writeWord
   \   000143   7401         MOV     A,#0x1
   \   000145   12....       LCALL   ?XSTACK_DISP0_8
   \   000148   AC82         MOV     R4,DPL
   \   00014A   AD83         MOV     R5,DPH
   \   00014C   AA..         MOV     R2,?V0 + 0
   \   00014E   AB..         MOV     R3,?V0 + 1
   \   000150   A9..         MOV     R1,?V0 + 3
   \   000152   12....       LCALL   ??writeWord?relay
    952            }
    953          }
   \                     ??xferBuf_3:
   \   000155   7405         MOV     A,#0x5
   \   000157   02....       LJMP    ?Subroutine2 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   E5..         MOV     A,?V0 + 6
   \   000002   2401         ADD     A,#0x1
   \   000004   F5..         MOV     ?V0 + 6,A
   \   000006   E5..         MOV     A,?V0 + 7
   \   000008   3400         ADDC    A,#0x0
   \   00000A   F5..         MOV     ?V0 + 7,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   E582         MOV     A,DPL
   \   000002   25..         ADD     A,?V0 + 4
   \   000004   FC           MOV     R4,A
   \   000005   E583         MOV     A,DPH
   \   000007   3400         ADDC    A,#0x0
   \   000009   FD           MOV     R5,A
   \   00000A   AA..         MOV     R2,?V0 + 6
   \   00000C   AB..         MOV     R3,?V0 + 7
   \   00000E   7402         MOV     A,#0x2
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   AC82         MOV     R4,DPL
   \   000002   AD83         MOV     R5,DPH
   \   000004   AA..         MOV     R2,?V0 + 0
   \   000006   AB..         MOV     R3,?V0 + 1
   \   000008   A9..         MOV     R1,?V0 + 3
   \   00000A                REQUIRE ??Subroutine48_0
   \   00000A                ; // Fall through to label ??Subroutine48_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine52_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001                REQUIRE ??Subroutine53_0
   \   000001                ; // Fall through to label ??Subroutine53_0
    954          
    955          /*********************************************************************
    956           * @fn      writeItem
    957           *
    958           * @brief   Writes an item header/data combo to the specified NV page.
    959           *
    960           * @param   pg - Valid NV Flash page.
    961           * @param   id - Valid NV item Id.
    962           * @param   len  - Byte count of the data to write.
    963           * @param   buf  - The data to write. If NULL, no data/checksum write.
    964           * @param   flag - TRUE if the checksum should be written, FALSE otherwise.
    965           *
    966           * @return  TRUE if header/data to write matches header/data read back, else FALSE.
    967           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    968          static uint8 writeItem( uint8 pg, uint16 id, uint16 len, void *buf, uint8 flag )
   \                     writeItem:
    969          {
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   EA           MOV     A,R2
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   EB           MOV     A,R3
   \   000014   F0           MOVX    @DPTR,A
   \   000015   E9           MOV     A,R1
   \   000016   FE           MOV     R6,A
   \   000017   8C..         MOV     ?V0 + 2,R4
   \   000019   8D..         MOV     ?V0 + 3,R5
   \   00001B   741D         MOV     A,#0x1d
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F5..         MOV     ?V0 + 6,A
    970            uint16 offset = pgOff[pg-OSAL_NV_PAGE_BEG];
   \   000023   EE           MOV     A,R6
   \   000024   C3           CLR     C
   \   000025   33           RLC     A
   \   000026   F8           MOV     R0,A
   \   000027   E4           CLR     A
   \   000028   33           RLC     A
   \   000029   F9           MOV     R1,A
   \   00002A   74..         MOV     A,#(pgOff + 14) & 0xff
   \   00002C   28           ADD     A,R0
   \   00002D   F8           MOV     R0,A
   \   00002E   74..         MOV     A,#((pgOff - 242) >> 8) & 0xff
   \   000030   39           ADDC    A,R1
   \   000031   F9           MOV     R1,A
   \   000032   7402         MOV     A,#0x2
   \   000034   12....       LCALL   ?XSTACK_DISP0_8
   \   000037   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   00003A   7402         MOV     A,#0x2
   \   00003C   12....       LCALL   ?XSTACK_DISP0_8
   \   00003F   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000042   F5..         MOV     ?V0 + 0,A
   \   000044   A3           INC     DPTR
   \   000045   E0           MOVX    A,@DPTR
   \   000046   F5..         MOV     ?V0 + 1,A
    971            uint8 rtrn = FALSE;
   \   000048   7F00         MOV     R7,#0x0
    972            osalNvHdr_t hdr;
    973          
    974            if ( pg == pgRes )
   \   00004A   90....       MOV     DPTR,#pgRes
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   6E           XRL     A,R6
   \   00004F   7007         JNZ     ??writeItem_0
    975            {
    976              /* Mark reserve page as being active, in process of receiving items.
    977               * Invoking function must effect a page compaction.
    978               */
    979              setPageUse( pg, FALSE );
   \   000051                ; Setup parameters for call to function setPageUse
   \   000051   7A00         MOV     R2,#0x0
   \   000053   EE           MOV     A,R6
   \   000054   F9           MOV     R1,A
   \   000055   12....       LCALL   ??setPageUse?relay
    980            }
    981          
    982            hdr.id = id;
   \                     ??writeItem_0:
   \   000058   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   00005B   7404         MOV     A,#0x4
   \   00005D   12....       LCALL   ?XSTACK_DISP0_8
   \   000060   12....       LCALL   ?Subroutine7 & 0xFFFF
    983            hdr.len = len;
   \                     ??CrossCallReturnLabel_4:
   \   000063   7406         MOV     A,#0x6
   \   000065   12....       LCALL   ?XSTACK_DISP0_8
   \   000068   E5..         MOV     A,?V0 + 2
   \   00006A   F0           MOVX    @DPTR,A
   \   00006B   A3           INC     DPTR
   \   00006C   E5..         MOV     A,?V0 + 3
   \   00006E   F0           MOVX    @DPTR,A
    984          
    985            writeWord( pg, offset, (uint8 *)&hdr );
   \   00006F                ; Setup parameters for call to function writeWord
   \   00006F   7404         MOV     A,#0x4
   \   000071   12....       LCALL   ?XSTACK_DISP0_8
   \   000074   AC82         MOV     R4,DPL
   \   000076   AD83         MOV     R5,DPH
   \   000078   AA..         MOV     R2,?V0 + 0
   \   00007A   AB..         MOV     R3,?V0 + 1
   \   00007C   EE           MOV     A,R6
   \   00007D   F9           MOV     R1,A
   \   00007E   12....       LCALL   ??writeWord?relay
    986            HalFlashRead(pg, offset, (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   \   000081                ; Setup parameters for call to function HalFlashRead
   \   000081   75..08       MOV     ?V0 + 4,#0x8
   \   000084   8F..         MOV     ?V0 + 5,R7
   \   000086   78..         MOV     R0,#?V0 + 4
   \   000088   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00008B   7406         MOV     A,#0x6
   \   00008D   12....       LCALL   ?XSTACK_DISP0_8
   \   000090   AC82         MOV     R4,DPL
   \   000092   AD83         MOV     R5,DPH
   \   000094   AA..         MOV     R2,?V0 + 0
   \   000096   AB..         MOV     R3,?V0 + 1
   \   000098   EE           MOV     A,R6
   \   000099   12....       LCALL   ??Subroutine53_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_118:
   \   00009C   12....       LCALL   ?DEALLOC_XSTACK8
    987          
    988            if ( (hdr.id == id) && (hdr.len == len) )
   \   00009F   7404         MOV     A,#0x4
   \   0000A1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A4   12....       LCALL   ??Subroutine49_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   0000A7   85..82       MOV     DPL,?XSP + 0
   \   0000AA   85..83       MOV     DPH,?XSP + 1
   \   0000AD   E0           MOVX    A,@DPTR
   \   0000AE   68           XRL     A,R0
   \   0000AF   7003         JNZ     ??writeItem_1
   \   0000B1   A3           INC     DPTR
   \   0000B2   E0           MOVX    A,@DPTR
   \   0000B3   69           XRL     A,R1
   \                     ??writeItem_1:
   \   0000B4   6003         JZ      $+5
   \   0000B6   02....       LJMP    ??writeItem_2 & 0xFFFF
   \   0000B9   7406         MOV     A,#0x6
   \   0000BB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BE   E0           MOVX    A,@DPTR
   \   0000BF   65..         XRL     A,?V0 + 2
   \   0000C1   7004         JNZ     ??writeItem_3
   \   0000C3   A3           INC     DPTR
   \   0000C4   E0           MOVX    A,@DPTR
   \   0000C5   65..         XRL     A,?V0 + 3
   \                     ??writeItem_3:
   \   0000C7   6003         JZ      $+5
   \   0000C9   02....       LJMP    ??writeItem_2 & 0xFFFF
    989            {
    990              if ( flag )
   \   0000CC   E5..         MOV     A,?V0 + 6
   \   0000CE   7003         JNZ     $+5
   \   0000D0   02....       LJMP    ??writeItem_4 & 0xFFFF
    991              {
    992                uint16 chk = calcChkB( len, buf );
   \   0000D3   741B         MOV     A,#0x1b
   \   0000D5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D8   12....       LCALL   ??Subroutine49_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   0000DB   8882         MOV     DPL,R0
   \   0000DD   8983         MOV     DPH,R1
   \   0000DF   A8..         MOV     R0,?V0 + 2
   \   0000E1   A9..         MOV     R1,?V0 + 3
   \   0000E3   E8           MOV     A,R0
   \   0000E4   5403         ANL     A,#0x3
   \   0000E6   F5..         MOV     ?V0 + 4,A
   \   0000E8   E582         MOV     A,DPL
   \   0000EA   4583         ORL     A,DPH
   \   0000EC   7015         JNZ     ??writeItem_5
   \   0000EE   E8           MOV     A,R0
   \   0000EF   75F0FF       MOV     B,#-0x1
   \   0000F2   A4           MUL     AB
   \   0000F3   F8           MOV     R0,A
   \   0000F4   AAF0         MOV     R2,B
   \   0000F6   75F0FF       MOV     B,#-0x1
   \   0000F9   E9           MOV     A,R1
   \   0000FA   A4           MUL     AB
   \   0000FB   2A           ADD     A,R2
   \   0000FC   F9           MOV     R1,A
   \   0000FD   E8           MOV     A,R0
   \   0000FE   FA           MOV     R2,A
   \   0000FF   E9           MOV     A,R1
   \   000100   FB           MOV     R3,A
   \   000101   8020         SJMP    ??writeItem_6
   \                     ??writeItem_5:
   \   000103   7A00         MOV     R2,#0x0
   \   000105   7B00         MOV     R3,#0x0
   \   000107   800A         SJMP    ??writeItem_7
   \                     ??writeItem_8:
   \   000109   E0           MOVX    A,@DPTR
   \   00010A   FC           MOV     R4,A
   \   00010B   EA           MOV     A,R2
   \   00010C   2C           ADD     A,R4
   \   00010D   FA           MOV     R2,A
   \   00010E   EB           MOV     A,R3
   \   00010F   3400         ADDC    A,#0x0
   \   000111   FB           MOV     R3,A
   \   000112   A3           INC     DPTR
   \                     ??writeItem_7:
   \   000113   E8           MOV     A,R0
   \   000114   FC           MOV     R4,A
   \   000115   E9           MOV     A,R1
   \   000116   FD           MOV     R5,A
   \   000117   EC           MOV     A,R4
   \   000118   24FF         ADD     A,#-0x1
   \   00011A   18           DEC     R0
   \   00011B   ED           MOV     A,R5
   \   00011C   34FF         ADDC    A,#-0x1
   \   00011E   F9           MOV     R1,A
   \   00011F   EC           MOV     A,R4
   \   000120   4D           ORL     A,R5
   \   000121   70E6         JNZ     ??writeItem_8
   \                     ??writeItem_6:
   \   000123   E5..         MOV     A,?V0 + 4
   \   000125   601E         JZ      ??writeItem_9
   \   000127   7404         MOV     A,#0x4
   \   000129   C3           CLR     C
   \   00012A   95..         SUBB    A,?V0 + 4
   \   00012C   F8           MOV     R0,A
   \   00012D   95E0         SUBB    A,0xE0 /* A   */
   \   00012F   F9           MOV     R1,A
   \   000130   E8           MOV     A,R0
   \   000131   75F0FF       MOV     B,#-0x1
   \   000134   A4           MUL     AB
   \   000135   F8           MOV     R0,A
   \   000136   ACF0         MOV     R4,B
   \   000138   75F0FF       MOV     B,#-0x1
   \   00013B   E9           MOV     A,R1
   \   00013C   A4           MUL     AB
   \   00013D   2C           ADD     A,R4
   \   00013E   F9           MOV     R1,A
   \   00013F   EA           MOV     A,R2
   \   000140   28           ADD     A,R0
   \   000141   FA           MOV     R2,A
   \   000142   EB           MOV     A,R3
   \   000143   39           ADDC    A,R1
   \   000144   FB           MOV     R3,A
   \                     ??writeItem_9:
   \   000145   85..82       MOV     DPL,?XSP + 0
   \   000148   85..83       MOV     DPH,?XSP + 1
   \   00014B   EA           MOV     A,R2
   \   00014C   F0           MOVX    @DPTR,A
   \   00014D   A3           INC     DPTR
   \   00014E   EB           MOV     A,R3
   \   00014F   F0           MOVX    @DPTR,A
    993          
    994                offset += OSAL_NV_HDR_SIZE;
   \   000150   12....       LCALL   ?Subroutine27 & 0xFFFF
    995                if ( buf != NULL )
   \                     ??CrossCallReturnLabel_54:
   \   000153   741B         MOV     A,#0x1b
   \   000155   12....       LCALL   ?XSTACK_DISP0_8
   \   000158   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   00015B   601A         JZ      ??writeItem_10
    996                {
    997                  writeBuf( pg, offset, len, buf );
   \   00015D                ; Setup parameters for call to function writeBuf
   \   00015D   741B         MOV     A,#0x1b
   \   00015F   12....       LCALL   ?XSTACK_DISP0_8
   \   000162   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000165   AC..         MOV     R4,?V0 + 2
   \   000167   AD..         MOV     R5,?V0 + 3
   \   000169   AA..         MOV     R2,?V0 + 0
   \   00016B   AB..         MOV     R3,?V0 + 1
   \   00016D   EE           MOV     A,R6
   \   00016E   F9           MOV     R1,A
   \   00016F   12....       LCALL   ??writeBuf?relay
   \   000172   7402         MOV     A,#0x2
   \   000174   12....       LCALL   ?DEALLOC_XSTACK8
    998                }
    999          
   1000                if ( chk == calcChkF( pg, offset, len ) )
   \                     ??writeItem_10:
   \   000177                ; Setup parameters for call to function calcChkF
   \   000177   AC..         MOV     R4,?V0 + 2
   \   000179   AD..         MOV     R5,?V0 + 3
   \   00017B   AA..         MOV     R2,?V0 + 0
   \   00017D   AB..         MOV     R3,?V0 + 1
   \   00017F   EE           MOV     A,R6
   \   000180   F9           MOV     R1,A
   \   000181   12....       LCALL   ??calcChkF?relay
   \   000184   8A..         MOV     ?V0 + 2,R2
   \   000186   8B..         MOV     ?V0 + 3,R3
   \   000188   A8..         MOV     R0,?V0 + 2
   \   00018A   A9..         MOV     R1,?V0 + 3
   \   00018C   85..82       MOV     DPL,?XSP + 0
   \   00018F   85..83       MOV     DPH,?XSP + 1
   \   000192   E0           MOVX    A,@DPTR
   \   000193   68           XRL     A,R0
   \   000194   7003         JNZ     ??writeItem_11
   \   000196   A3           INC     DPTR
   \   000197   E0           MOVX    A,@DPTR
   \   000198   69           XRL     A,R1
   \                     ??writeItem_11:
   \   000199   7050         JNZ     ??writeItem_2
   1001                {
   1002                  writeWordH(pg, (offset-OSAL_NV_WORD_SIZE), (uint8 *)&chk);
   \   00019B                ; Setup parameters for call to function writeWordH
   \   00019B   85..82       MOV     DPL,?XSP + 0
   \   00019E   85..83       MOV     DPH,?XSP + 1
   \   0001A1   AC82         MOV     R4,DPL
   \   0001A3   AD83         MOV     R5,DPH
   \   0001A5   E5..         MOV     A,?V0 + 0
   \   0001A7   24FC         ADD     A,#-0x4
   \   0001A9   FA           MOV     R2,A
   \   0001AA   E5..         MOV     A,?V0 + 1
   \   0001AC   34FF         ADDC    A,#-0x1
   \   0001AE   FB           MOV     R3,A
   \   0001AF   EE           MOV     A,R6
   \   0001B0   F9           MOV     R1,A
   \   0001B1   12....       LCALL   ??writeWordH?relay
   1003                  HalFlashRead(pg, (offset-OSAL_NV_HDR_SIZE), (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   \   0001B4                ; Setup parameters for call to function HalFlashRead
   \   0001B4   75..08       MOV     ?V0 + 2,#0x8
   \   0001B7   8F..         MOV     ?V0 + 3,R7
   \   0001B9   78..         MOV     R0,#?V0 + 2
   \   0001BB   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001BE   7406         MOV     A,#0x6
   \   0001C0   12....       LCALL   ?XSTACK_DISP0_8
   \   0001C3   AC82         MOV     R4,DPL
   \   0001C5   AD83         MOV     R5,DPH
   \   0001C7   E5..         MOV     A,?V0 + 0
   \   0001C9   24F8         ADD     A,#-0x8
   \   0001CB   FA           MOV     R2,A
   \   0001CC   E5..         MOV     A,?V0 + 1
   \   0001CE   34FF         ADDC    A,#-0x1
   \   0001D0   FB           MOV     R3,A
   \   0001D1   EE           MOV     A,R6
   \   0001D2   12....       LCALL   ??Subroutine53_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_119:
   \   0001D5   12....       LCALL   ?DEALLOC_XSTACK8
   1004          
   1005                  if ( chk == hdr.chk )
   \   0001D8   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   0001DB   7408         MOV     A,#0x8
   \   0001DD   12....       LCALL   ?XSTACK_DISP0_8
   \   0001E0   E0           MOVX    A,@DPTR
   \   0001E1   68           XRL     A,R0
   \   0001E2   7003         JNZ     ??writeItem_12
   \   0001E4   A3           INC     DPTR
   \   0001E5   E0           MOVX    A,@DPTR
   \   0001E6   69           XRL     A,R1
   \                     ??writeItem_12:
   \   0001E7   7002         JNZ     ??writeItem_2
   1006                  {
   1007                    rtrn = pg;
   \                     ??writeItem_4:
   \   0001E9   EE           MOV     A,R6
   \   0001EA   FF           MOV     R7,A
   1008                  }
   1009                }
   1010              }
   1011              else
   1012              {
   1013                rtrn = pg;
   1014              }
   1015            }
   1016          
   1017            len = OSAL_NV_ITEM_SIZE( hdr.len );
   1018            pgOff[pg-OSAL_NV_PAGE_BEG] += len;
   \                     ??writeItem_2:
   \   0001EB   7406         MOV     A,#0x6
   \   0001ED   12....       LCALL   ?XSTACK_DISP0_8
   \   0001F0   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   0001F3   F8           MOV     R0,A
   \   0001F4   E9           MOV     A,R1
   \   0001F5   3400         ADDC    A,#0x0
   \   0001F7   F9           MOV     R1,A
   \   0001F8   7402         MOV     A,#0x2
   \   0001FA   12....       LCALL   ?XSTACK_DISP0_8
   \   0001FD   E0           MOVX    A,@DPTR
   \   0001FE   FA           MOV     R2,A
   \   0001FF   A3           INC     DPTR
   \   000200   E0           MOVX    A,@DPTR
   \   000201   F583         MOV     DPH,A
   \   000203   8A82         MOV     DPL,R2
   \   000205   E0           MOVX    A,@DPTR
   \   000206   28           ADD     A,R0
   \   000207   F0           MOVX    @DPTR,A
   \   000208   A3           INC     DPTR
   \   000209   E0           MOVX    A,@DPTR
   \   00020A   39           ADDC    A,R1
   \   00020B   F0           MOVX    @DPTR,A
   1019          
   1020            return rtrn;
   \   00020C   EF           MOV     A,R7
   \   00020D   F9           MOV     R1,A
   \   00020E   740C         MOV     A,#0xc
   \   000210   02....       LJMP    ?Subroutine4 & 0xFFFF
   1021          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine49_0
   \   000006                ; // Fall through to label ??Subroutine49_0
   1022          
   1023          /*********************************************************************
   1024           * @fn      osal_nv_init
   1025           *
   1026           * @brief   Initialize NV service.
   1027           *
   1028           * @param   p - Not used.
   1029           *
   1030           * @return  none
   1031           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1032          void osal_nv_init( void *p )
   \                     osal_nv_init:
   1033          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1034            (void)p;  // Suppress Lint warning.
   1035            (void)initNV();  // Always returns TRUE after pages have been erased.
   \   000004                ; Setup parameters for call to function initNV
   \   000004   12....       LCALL   ??initNV?relay
   1036          }
   \   000007   D083         POP     DPH
   \   000009   D082         POP     DPL
   \   00000B   02....       LJMP    ?BRET
   1037          
   1038          /*********************************************************************
   1039           * @fn      osal_nv_item_init
   1040           *
   1041           * @brief   If the NV item does not already exist, it is created and
   1042           *          initialized with the data passed to the function, if any.
   1043           *          This function must be called before calling osal_nv_read() or
   1044           *          osal_nv_write().
   1045           *
   1046           * @param   id  - Valid NV item Id.
   1047           * @param   len - Item length.
   1048           * @param  *buf - Pointer to item initalization data. Set to NULL if none.
   1049           *
   1050           * @return  NV_ITEM_UNINIT - Id did not exist and was created successfully.
   1051           *          ZSUCCESS       - Id already existed, no action taken.
   1052           *          NV_OPER_FAILED - Failure to find or create Id.
   1053           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1054          uint8 osal_nv_item_init( uint16 id, uint16 len, void *buf )
   \                     osal_nv_item_init:
   1055          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0 + 0,R4
   \   00000B   8D..         MOV     ?V0 + 1,R5
   \   00000D   740E         MOV     A,#0xe
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   12....       LCALL   ?Subroutine18 & 0xFFFF
   1056            /* Global fail flag for fail due to low bus voltage has less impact on code
   1057             * size than passing back a return value all the way from the lowest level.
   1058             */
   1059            failF = FALSE;
   \                     ??CrossCallReturnLabel_33:
   \   000015   90....       MOV     DPTR,#failF
   \   000018   E4           CLR     A
   \   000019   F0           MOVX    @DPTR,A
   1060          
   1061            if ( (findItem( id ) != OSAL_NV_ITEM_NULL) )
   \   00001A                ; Setup parameters for call to function findItem
   \   00001A   12....       LCALL   ??findItem?relay
   \   00001D   8B..         MOV     ?V0 + 5,R3
   \   00001F   EA           MOV     A,R2
   \   000020   45..         ORL     A,?V0 + 5
   \   000022   6004         JZ      ??osal_nv_item_init_0
   1062            {
   1063              return ZSUCCESS;
   \   000024   7900         MOV     R1,#0x0
   \   000026   802B         SJMP    ??osal_nv_item_init_1
   1064            }
   1065            else if ( initItem( TRUE, id, len, buf ) )
   \                     ??osal_nv_item_init_0:
   \   000028                ; Setup parameters for call to function initItem
   \   000028   78..         MOV     R0,#?V0 + 2
   \   00002A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002D   AC..         MOV     R4,?V0 + 0
   \   00002F   AD..         MOV     R5,?V0 + 1
   \   000031   EE           MOV     A,R6
   \   000032   FA           MOV     R2,A
   \   000033   EF           MOV     A,R7
   \   000034   FB           MOV     R3,A
   \   000035   7901         MOV     R1,#0x1
   \   000037   12....       LCALL   ??initItem?relay
   \   00003A   7402         MOV     A,#0x2
   \   00003C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00003F   E9           MOV     A,R1
   \   000040   600F         JZ      ??osal_nv_item_init_2
   1066            {
   1067              if ( failF )
   \   000042   90....       MOV     DPTR,#failF
   \   000045   E0           MOVX    A,@DPTR
   \   000046   6005         JZ      ??osal_nv_item_init_3
   1068              {
   1069                (void)initNV();  // See comment at the declaration of failF.
   \   000048                ; Setup parameters for call to function initNV
   \   000048   12....       LCALL   ??initNV?relay
   1070                return NV_OPER_FAILED;
   \   00004B   8004         SJMP    ??osal_nv_item_init_2
   1071              }
   1072              else
   1073              {
   1074                return NV_ITEM_UNINIT;
   \                     ??osal_nv_item_init_3:
   \   00004D   7909         MOV     R1,#0x9
   \   00004F   8002         SJMP    ??osal_nv_item_init_1
   1075              }
   1076            }
   1077            else
   1078            {
   1079              return NV_OPER_FAILED;
   \                     ??osal_nv_item_init_2:
   \   000051   790A         MOV     R1,#0xa
   1080            }
   \                     ??osal_nv_item_init_1:
   \   000053   02....       LJMP    ??Subroutine47_0 & 0xFFFF
   1081          }
   1082          
   1083          /*********************************************************************
   1084           * @fn      osal_nv_item_len
   1085           *
   1086           * @brief   Get the data length of the item stored in NV memory.
   1087           *
   1088           * @param   id  - Valid NV item Id.
   1089           *
   1090           * @return  Item length, if found; zero otherwise.
   1091           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1092          uint16 osal_nv_item_len( uint16 id )
   \                     osal_nv_item_len:
   1093          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1094            uint16 offset = findItem( id );
   \   00000A                ; Setup parameters for call to function findItem
   \   00000A   12....       LCALL   ??findItem?relay
   1095          
   1096            if ( offset == OSAL_NV_ITEM_NULL )
   \   00000D   EA           MOV     A,R2
   \   00000E   4B           ORL     A,R3
   \   00000F   7006         JNZ     ??osal_nv_item_len_0
   1097            {
   1098              return 0;
   \   000011   7A00         MOV     R2,#0x0
   \   000013   7B00         MOV     R3,#0x0
   \   000015   8027         SJMP    ??CrossCallReturnLabel_45
   1099            }
   1100            else
   1101            {
   1102              osalNvHdr_t hdr;
   1103              HalFlashRead(findPg, (offset - OSAL_NV_HDR_SIZE), (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   \                     ??osal_nv_item_len_0:
   \   000017                ; Setup parameters for call to function HalFlashRead
   \   000017   75..08       MOV     ?V0 + 0,#0x8
   \   00001A   75..00       MOV     ?V0 + 1,#0x0
   \   00001D   78..         MOV     R0,#?V0 + 0
   \   00001F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000022   7402         MOV     A,#0x2
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   AC82         MOV     R4,DPL
   \   000029   AD83         MOV     R5,DPH
   \   00002B   EA           MOV     A,R2
   \   00002C   24F8         ADD     A,#-0x8
   \   00002E   FA           MOV     R2,A
   \   00002F   EB           MOV     A,R3
   \   000030   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_109:
   \   000033   12....       LCALL   ?DEALLOC_XSTACK8
   1104              return hdr.len;
   \   000036   7402         MOV     A,#0x2
   \   000038   12....       LCALL   ?XSTACK_DISP0_8
   \   00003B   12....       LCALL   ?Subroutine22 & 0xFFFF
   1105            }
   \                     ??CrossCallReturnLabel_45:
   \   00003E   7408         MOV     A,#0x8
   \   000040   12....       LCALL   ?DEALLOC_XSTACK8
   \   000043   7F02         MOV     R7,#0x2
   \   000045   02....       LJMP    ?BANKED_LEAVE_XDATA
   1106          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   34FF         ADDC    A,#-0x1
   \   000002                REQUIRE ??Subroutine51_0
   \   000002                ; // Fall through to label ??Subroutine51_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine51_0:
   \   000000   FB           MOV     R3,A
   \   000001   90....       MOV     DPTR,#findPg
   \   000004                REQUIRE ??Subroutine52_0
   \   000004                ; // Fall through to label ??Subroutine52_0
   1107          
   1108          /*********************************************************************
   1109           * @fn      osal_nv_write
   1110           *
   1111           * @brief   Write a data item to NV. Function can write an entire item to NV or
   1112           *          an element of an item by indexing into the item with an offset.
   1113           *
   1114           * @param   id  - Valid NV item Id.
   1115           * @param   ndx - Index offset into item
   1116           * @param   len - Length of data to write.
   1117           * @param  *buf - Data to write.
   1118           *
   1119           * @return  ZSUCCESS if successful, NV_ITEM_UNINIT if item did not
   1120           *          exist in NV and offset is non-zero, NV_OPER_FAILED if failure.
   1121           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1122          uint8 osal_nv_write( uint16 id, uint16 ndx, uint16 len, void *buf )
   \                     osal_nv_write:
   1123          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 15
   \   000005   74F1         MOV     A,#-0xf
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7403         MOV     A,#0x3
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   EA           MOV     A,R2
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   EB           MOV     A,R3
   \   000013   F0           MOVX    @DPTR,A
   \   000014   8C..         MOV     ?V0 + 2,R4
   \   000016   8D..         MOV     ?V0 + 3,R5
   1124            uint8 rtrn = ZSUCCESS;
   \   000018   75..00       MOV     ?V0 + 1,#0x0
   1125          
   1126            /* Global fail flag for fail due to low bus voltage has less impact on code
   1127             * size than passing back a return value all the way from the lowest level.
   1128             */
   1129            failF = FALSE;
   \   00001B   90....       MOV     DPTR,#failF
   \   00001E   E4           CLR     A
   \   00001F   F0           MOVX    @DPTR,A
   1130          
   1131            if ( len != 0 )
   \   000020   741F         MOV     A,#0x1f
   \   000022   12....       LCALL   ?XSTACK_DISP0_8
   \   000025   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000028   7003         JNZ     $+5
   \   00002A   02....       LJMP    ??osal_nv_write_0 & 0xFFFF
   1132            {
   1133              osalNvHdr_t hdr;
   1134              uint16 origOff, srcOff;
   1135              uint16 cnt;
   1136              uint8 *ptr;
   1137          
   1138              origOff = srcOff = findItem( id );
   \   00002D                ; Setup parameters for call to function findItem
   \   00002D   7403         MOV     A,#0x3
   \   00002F   12....       LCALL   ?XSTACK_DISP0_8
   \   000032   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   000035   12....       LCALL   ??findItem?relay
   \   000038   8A..         MOV     ?V0 + 4,R2
   \   00003A   8B..         MOV     ?V0 + 5,R3
   \   00003C   A8..         MOV     R0,?V0 + 4
   \   00003E   A9..         MOV     R1,?V0 + 5
   \   000040   E8           MOV     A,R0
   \   000041   FE           MOV     R6,A
   \   000042   E9           MOV     A,R1
   \   000043   FF           MOV     R7,A
   \   000044   7405         MOV     A,#0x5
   \   000046   12....       LCALL   ?XSTACK_DISP0_8
   \   000049   12....       LCALL   ?Subroutine7 & 0xFFFF
   1139              if ( srcOff == OSAL_NV_ITEM_NULL )
   \                     ??CrossCallReturnLabel_5:
   \   00004C   EE           MOV     A,R6
   \   00004D   4F           ORL     A,R7
   \   00004E   7005         JNZ     ??osal_nv_write_1
   1140              {
   1141                return NV_ITEM_UNINIT;
   \   000050   7909         MOV     R1,#0x9
   \   000052   02....       LJMP    ??osal_nv_write_2 & 0xFFFF
   1142              }
   1143          
   1144              HalFlashRead(findPg, (srcOff - OSAL_NV_HDR_SIZE), (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   \                     ??osal_nv_write_1:
   \   000055                ; Setup parameters for call to function HalFlashRead
   \   000055   75..08       MOV     ?V0 + 4,#0x8
   \   000058   75..00       MOV     ?V0 + 5,#0x0
   \   00005B   78..         MOV     R0,#?V0 + 4
   \   00005D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000060   7409         MOV     A,#0x9
   \   000062   12....       LCALL   ?XSTACK_DISP0_8
   \   000065   AC82         MOV     R4,DPL
   \   000067   AD83         MOV     R5,DPH
   \   000069   EE           MOV     A,R6
   \   00006A   24F8         ADD     A,#-0x8
   \   00006C   FA           MOV     R2,A
   \   00006D   EF           MOV     A,R7
   \   00006E   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_110:
   \   000071   12....       LCALL   ?DEALLOC_XSTACK8
   1145              if ( hdr.len < (ndx + len) )
   \   000074   7409         MOV     A,#0x9
   \   000076   12....       LCALL   ?XSTACK_DISP0_8
   \   000079   C082         PUSH    DPL
   \   00007B   C083         PUSH    DPH
   \   00007D   741F         MOV     A,#0x1f
   \   00007F   12....       LCALL   ?XSTACK_DISP0_8
   \   000082   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   000085   D083         POP     DPH
   \   000087   D082         POP     DPL
   \   000089   C3           CLR     C
   \   00008A   E0           MOVX    A,@DPTR
   \   00008B   98           SUBB    A,R0
   \   00008C   A3           INC     DPTR
   \   00008D   E0           MOVX    A,@DPTR
   \   00008E   99           SUBB    A,R1
   \   00008F   5005         JNC     ??osal_nv_write_3
   1146              {
   1147                return NV_OPER_FAILED;
   \   000091   790A         MOV     R1,#0xa
   \   000093   02....       LJMP    ??osal_nv_write_2 & 0xFFFF
   1148              }
   1149          
   1150              srcOff += ndx;
   \                     ??osal_nv_write_3:
   \   000096   12....       LCALL   ?Subroutine33 & 0xFFFF
   1151              ptr = buf;
   \                     ??CrossCallReturnLabel_63:
   \   000099   12....       LCALL   ?XSTACK_DISP0_8
   \   00009C   E0           MOVX    A,@DPTR
   \   00009D   F5..         MOV     ?V0 + 6,A
   \   00009F   A3           INC     DPTR
   \   0000A0   E0           MOVX    A,@DPTR
   \   0000A1   F5..         MOV     ?V0 + 7,A
   1152              cnt = len;
   \   0000A3   741F         MOV     A,#0x1f
   \   0000A5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A8   12....       LCALL   ??Subroutine49_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   0000AB   7401         MOV     A,#0x1
   \   0000AD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B0   12....       LCALL   ?Subroutine7 & 0xFFFF
   1153              while ( cnt )
   1154              {
   1155                uint8 tmp;
   1156                HalFlashRead(findPg, srcOff++, &tmp, 1);
   \                     ??CrossCallReturnLabel_6:
   \   0000B3                ; Setup parameters for call to function HalFlashRead
   \   0000B3   75..01       MOV     ?V0 + 4,#0x1
   \   0000B6   78..         MOV     R0,#?V0 + 4
   \   0000B8   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000BB   7402         MOV     A,#0x2
   \   0000BD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C0   AC82         MOV     R4,DPL
   \   0000C2   AD83         MOV     R5,DPH
   \   0000C4   EE           MOV     A,R6
   \   0000C5   FA           MOV     R2,A
   \   0000C6   EF           MOV     A,R7
   \   0000C7   12....       LCALL   ??Subroutine51_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_111:
   \   0000CA   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000CD   EE           MOV     A,R6
   \   0000CE   2401         ADD     A,#0x1
   \   0000D0   0E           INC     R6
   \   0000D1   EF           MOV     A,R7
   \   0000D2   3400         ADDC    A,#0x0
   \   0000D4   FF           MOV     R7,A
   1157                if ( tmp != *ptr++ )
   \   0000D5   A8..         MOV     R0,?V0 + 6
   \   0000D7   A9..         MOV     R1,?V0 + 7
   \   0000D9   8882         MOV     DPL,R0
   \   0000DB   8983         MOV     DPH,R1
   \   0000DD   A3           INC     DPTR
   \   0000DE   8582..       MOV     ?V0 + 6,DPL
   \   0000E1   8583..       MOV     ?V0 + 7,DPH
   \   0000E4   85..82       MOV     DPL,?XSP + 0
   \   0000E7   85..83       MOV     DPH,?XSP + 1
   \   0000EA   E0           MOVX    A,@DPTR
   \   0000EB   FA           MOV     R2,A
   \   0000EC   8882         MOV     DPL,R0
   \   0000EE   8983         MOV     DPH,R1
   \   0000F0   E0           MOVX    A,@DPTR
   \   0000F1   6A           XRL     A,R2
   \   0000F2   7017         JNZ     ??osal_nv_write_4
   1158                {
   1159                  break;
   1160                }
   1161                cnt--;
   1162              }
   \   0000F4   7401         MOV     A,#0x1
   \   0000F6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F9   E0           MOVX    A,@DPTR
   \   0000FA   24FF         ADD     A,#-0x1
   \   0000FC   F0           MOVX    @DPTR,A
   \   0000FD   F8           MOV     R0,A
   \   0000FE   A3           INC     DPTR
   \   0000FF   E0           MOVX    A,@DPTR
   \   000100   34FF         ADDC    A,#-0x1
   \   000102   F0           MOVX    @DPTR,A
   \   000103   F9           MOV     R1,A
   \   000104   E8           MOV     A,R0
   \   000105   49           ORL     A,R1
   \   000106   70AB         JNZ     ??CrossCallReturnLabel_6
   \   000108   02....       LJMP    ??osal_nv_write_5 & 0xFFFF
   1163          
   1164              if ( cnt != 0 )  // If the buffer to write is different in one or more bytes.
   1165              {
   1166                uint8 comPg, dstPg = initItem( FALSE, id, hdr.len, &comPg );
   \                     ??osal_nv_write_4:
   \   00010B                ; Setup parameters for call to function initItem
   \   00010B   85..82       MOV     DPL,?XSP + 0
   \   00010E   85..83       MOV     DPH,?XSP + 1
   \   000111   8582..       MOV     ?V0 + 4,DPL
   \   000114   8583..       MOV     ?V0 + 5,DPH
   \   000117   78..         MOV     R0,#?V0 + 4
   \   000119   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00011C   740B         MOV     A,#0xb
   \   00011E   12....       LCALL   ?XSTACK_DISP0_8
   \   000121   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   000124   7405         MOV     A,#0x5
   \   000126   12....       LCALL   ?XSTACK_DISP0_8
   \   000129   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   00012C   7900         MOV     R1,#0x0
   \   00012E   12....       LCALL   ??initItem?relay
   \   000131   7402         MOV     A,#0x2
   \   000133   12....       LCALL   ?DEALLOC_XSTACK8
   \   000136   E9           MOV     A,R1
   \   000137   F5..         MOV     ?V0 + 0,A
   1167          
   1168                if ( dstPg != OSAL_NV_PAGE_NULL )
   \   000139   7003         JNZ     $+5
   \   00013B   02....       LJMP    ??osal_nv_write_6 & 0xFFFF
   1169                {
   1170                  uint16 tmp = OSAL_NV_DATA_SIZE( hdr.len );
   \   00013E   7409         MOV     A,#0x9
   \   000140   12....       LCALL   ?XSTACK_DISP0_8
   \   000143   E0           MOVX    A,@DPTR
   \   000144   2403         ADD     A,#0x3
   \   000146   F8           MOV     R0,A
   \   000147   A3           INC     DPTR
   \   000148   E0           MOVX    A,@DPTR
   \   000149   12....       LCALL   ??Subroutine44_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   00014C   F8           MOV     R0,A
   \   00014D   7401         MOV     A,#0x1
   \   00014F   12....       LCALL   ?XSTACK_DISP0_8
   \   000152   12....       LCALL   ?Subroutine7 & 0xFFFF
   1171                  uint16 dstOff = pgOff[dstPg-OSAL_NV_PAGE_BEG] - tmp;
   \                     ??CrossCallReturnLabel_7:
   \   000155   E5..         MOV     A,?V0 + 0
   \   000157   C3           CLR     C
   \   000158   33           RLC     A
   \   000159   F8           MOV     R0,A
   \   00015A   E4           CLR     A
   \   00015B   33           RLC     A
   \   00015C   F9           MOV     R1,A
   \   00015D   74..         MOV     A,#(pgOff + 14) & 0xff
   \   00015F   28           ADD     A,R0
   \   000160   F8           MOV     R0,A
   \   000161   74..         MOV     A,#((pgOff - 242) >> 8) & 0xff
   \   000163   39           ADDC    A,R1
   \   000164   F9           MOV     R1,A
   \   000165   7403         MOV     A,#0x3
   \   000167   12....       LCALL   ?XSTACK_DISP0_8
   \   00016A   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   00016D   7403         MOV     A,#0x3
   \   00016F   12....       LCALL   ?XSTACK_DISP0_8
   \   000172   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000175   C082         PUSH    DPL
   \   000177   C083         PUSH    DPH
   \   000179   7401         MOV     A,#0x1
   \   00017B   12....       LCALL   ?XSTACK_DISP0_8
   \   00017E   12....       LCALL   ??Subroutine49_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   000181   D083         POP     DPH
   \   000183   D082         POP     DPL
   \   000185   12....       LCALL   ?Subroutine24 & 0xFFFF
   1172                  uint8 srcPg = findPg;
   \                     ??CrossCallReturnLabel_51:
   \   000188   90....       MOV     DPTR,#findPg
   \   00018B   E0           MOVX    A,@DPTR
   \   00018C   F5..         MOV     ?V0 + 6,A
   1173                  srcOff = origOff;
   1174          
   1175                  setItem( srcPg, srcOff, eNvXfer );
   \   00018E                ; Setup parameters for call to function setItem
   \   00018E   7C00         MOV     R4,#0x0
   \   000190   7405         MOV     A,#0x5
   \   000192   12....       LCALL   ?XSTACK_DISP0_8
   \   000195   12....       LCALL   ?Subroutine17 & 0xFFFF
   1176          
   1177                  xferBuf( srcPg, srcOff, dstPg, dstOff, ndx );
   \                     ??CrossCallReturnLabel_30:
   \   000198                ; Setup parameters for call to function xferBuf
   \   000198   78..         MOV     R0,#?V0 + 2
   \   00019A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00019D   8E..         MOV     ?V0 + 4,R6
   \   00019F   8F..         MOV     ?V0 + 5,R7
   \   0001A1   78..         MOV     R0,#?V0 + 4
   \   0001A3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001A6   AC..         MOV     R4,?V0 + 0
   \   0001A8   7409         MOV     A,#0x9
   \   0001AA   12....       LCALL   ?XSTACK_DISP0_8
   \   0001AD   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   0001B0   A9..         MOV     R1,?V0 + 6
   \   0001B2   12....       LCALL   ??xferBuf?relay
   \   0001B5   7404         MOV     A,#0x4
   \   0001B7   12....       LCALL   ?DEALLOC_XSTACK8
   1178                  srcOff += ndx;
   1179                  dstOff += ndx;
   \   0001BA   12....       LCALL   ?Subroutine33 & 0xFFFF
   1180          
   1181                  writeBuf( dstPg, dstOff, len, buf );
   \                     ??CrossCallReturnLabel_64:
   \   0001BD   12....       LCALL   ?XSTACK_DISP0_8
   \   0001C0   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0001C3   7421         MOV     A,#0x21
   \   0001C5   12....       LCALL   ?XSTACK_DISP0_8
   \   0001C8   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   0001CB   12....       LCALL   ??writeBuf?relay
   \   0001CE   7402         MOV     A,#0x2
   \   0001D0   12....       LCALL   ?DEALLOC_XSTACK8
   1182                  srcOff += len;
   1183                  dstOff += len;
   1184          
   1185                  xferBuf( srcPg, srcOff, dstPg, dstOff, (hdr.len-ndx-len) );
   \   0001D3                ; Setup parameters for call to function xferBuf
   \   0001D3   7409         MOV     A,#0x9
   \   0001D5   12....       LCALL   ?XSTACK_DISP0_8
   \   0001D8   E0           MOVX    A,@DPTR
   \   0001D9   C3           CLR     C
   \   0001DA   95..         SUBB    A,?V0 + 2
   \   0001DC   FA           MOV     R2,A
   \   0001DD   A3           INC     DPTR
   \   0001DE   E0           MOVX    A,@DPTR
   \   0001DF   95..         SUBB    A,?V0 + 3
   \   0001E1   FB           MOV     R3,A
   \   0001E2   741F         MOV     A,#0x1f
   \   0001E4   12....       LCALL   ?XSTACK_DISP0_8
   \   0001E7   12....       LCALL   ??Subroutine49_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   0001EA   EA           MOV     A,R2
   \   0001EB   C3           CLR     C
   \   0001EC   98           SUBB    A,R0
   \   0001ED   F5..         MOV     ?V0 + 4,A
   \   0001EF   EB           MOV     A,R3
   \   0001F0   99           SUBB    A,R1
   \   0001F1   F5..         MOV     ?V0 + 5,A
   \   0001F3   78..         MOV     R0,#?V0 + 4
   \   0001F5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001F8   7421         MOV     A,#0x21
   \   0001FA   12....       LCALL   ?XSTACK_DISP0_8
   \   0001FD   E0           MOVX    A,@DPTR
   \   0001FE   2E           ADD     A,R6
   \   0001FF   F5..         MOV     ?V0 + 4,A
   \   000201   A3           INC     DPTR
   \   000202   E0           MOVX    A,@DPTR
   \   000203   3F           ADDC    A,R7
   \   000204   F5..         MOV     ?V0 + 5,A
   \   000206   78..         MOV     R0,#?V0 + 4
   \   000208   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00020B   AC..         MOV     R4,?V0 + 0
   \   00020D   7409         MOV     A,#0x9
   \   00020F   12....       LCALL   ?XSTACK_DISP0_8
   \   000212   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   000215   7423         MOV     A,#0x23
   \   000217   12....       LCALL   ?XSTACK_DISP0_8
   \   00021A   E0           MOVX    A,@DPTR
   \   00021B   28           ADD     A,R0
   \   00021C   FA           MOV     R2,A
   \   00021D   A3           INC     DPTR
   \   00021E   E0           MOVX    A,@DPTR
   \   00021F   39           ADDC    A,R1
   \   000220   FB           MOV     R3,A
   \   000221   A9..         MOV     R1,?V0 + 6
   \   000223   12....       LCALL   ??xferBuf?relay
   \   000226   7404         MOV     A,#0x4
   \   000228   12....       LCALL   ?DEALLOC_XSTACK8
   1186          
   1187                  // Calculate and write the new checksum.
   1188                  dstOff = pgOff[dstPg-OSAL_NV_PAGE_BEG] - tmp;
   \   00022B   7403         MOV     A,#0x3
   \   00022D   12....       LCALL   ?XSTACK_DISP0_8
   \   000230   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000233   C082         PUSH    DPL
   \   000235   C083         PUSH    DPH
   \   000237   7401         MOV     A,#0x1
   \   000239   12....       LCALL   ?XSTACK_DISP0_8
   \   00023C   12....       LCALL   ??Subroutine49_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   00023F   D083         POP     DPH
   \   000241   D082         POP     DPL
   \   000243   12....       LCALL   ?Subroutine24 & 0xFFFF
   1189                  tmp = calcChkF( dstPg, dstOff, hdr.len );
   \                     ??CrossCallReturnLabel_52:
   \   000246                ; Setup parameters for call to function calcChkF
   \   000246   7409         MOV     A,#0x9
   \   000248   12....       LCALL   ?XSTACK_DISP0_8
   \   00024B   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   00024E   12....       LCALL   ??calcChkF?relay
   \   000251   7401         MOV     A,#0x1
   \   000253   12....       LCALL   ?XSTACK_DISP0_8
   \   000256   EA           MOV     A,R2
   \   000257   F0           MOVX    @DPTR,A
   \   000258   A3           INC     DPTR
   \   000259   EB           MOV     A,R3
   \   00025A   F0           MOVX    @DPTR,A
   1190                  dstOff -= OSAL_NV_HDR_SIZE;
   \   00025B   EE           MOV     A,R6
   \   00025C   24F8         ADD     A,#-0x8
   \   00025E   FE           MOV     R6,A
   \   00025F   EF           MOV     A,R7
   \   000260   34FF         ADDC    A,#-0x1
   \   000262   FF           MOV     R7,A
   1191                  writeWordH( dstPg, (dstOff+OSAL_NV_HDR_CHK), (uint8 *)&tmp );
   \   000263                ; Setup parameters for call to function writeWordH
   \   000263   7401         MOV     A,#0x1
   \   000265   12....       LCALL   ?XSTACK_DISP0_8
   \   000268   AC82         MOV     R4,DPL
   \   00026A   AD83         MOV     R5,DPH
   \   00026C   EE           MOV     A,R6
   \   00026D   2404         ADD     A,#0x4
   \   00026F   FA           MOV     R2,A
   \   000270   EF           MOV     A,R7
   \   000271   3400         ADDC    A,#0x0
   \   000273   FB           MOV     R3,A
   \   000274   A9..         MOV     R1,?V0 + 0
   \   000276   12....       LCALL   ??writeWordH?relay
   1192                  HalFlashRead(dstPg, dstOff, (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   \   000279                ; Setup parameters for call to function HalFlashRead
   \   000279   75..08       MOV     ?V0 + 2,#0x8
   \   00027C   75..00       MOV     ?V0 + 3,#0x0
   \   00027F   78..         MOV     R0,#?V0 + 2
   \   000281   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000284   7409         MOV     A,#0x9
   \   000286   12....       LCALL   ?XSTACK_DISP0_8
   \   000289   AC82         MOV     R4,DPL
   \   00028B   AD83         MOV     R5,DPH
   \   00028D   EE           MOV     A,R6
   \   00028E   FA           MOV     R2,A
   \   00028F   EF           MOV     A,R7
   \   000290   FB           MOV     R3,A
   \   000291   A9..         MOV     R1,?V0 + 0
   \   000293   12....       LCALL   ??Subroutine54_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_127:
   \   000296   12....       LCALL   ?DEALLOC_XSTACK8
   1193          
   1194                  if ( tmp == hdr.chk )
   \   000299   7401         MOV     A,#0x1
   \   00029B   12....       LCALL   ?XSTACK_DISP0_8
   \   00029E   12....       LCALL   ??Subroutine49_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   0002A1   740B         MOV     A,#0xb
   \   0002A3   12....       LCALL   ?XSTACK_DISP0_8
   \   0002A6   E0           MOVX    A,@DPTR
   \   0002A7   68           XRL     A,R0
   \   0002A8   7003         JNZ     ??osal_nv_write_7
   \   0002AA   A3           INC     DPTR
   \   0002AB   E0           MOVX    A,@DPTR
   \   0002AC   69           XRL     A,R1
   \                     ??osal_nv_write_7:
   \   0002AD   700C         JNZ     ??osal_nv_write_8
   1195                  {
   1196                    setItem( srcPg, origOff, eNvZero );
   \   0002AF                ; Setup parameters for call to function setItem
   \   0002AF   7C01         MOV     R4,#0x1
   \   0002B1   7405         MOV     A,#0x5
   \   0002B3   12....       LCALL   ?XSTACK_DISP0_8
   \   0002B6   12....       LCALL   ?Subroutine17 & 0xFFFF
   1197                  }
   \                     ??CrossCallReturnLabel_31:
   \   0002B9   8003         SJMP    ??osal_nv_write_9
   1198                  else
   1199                  {
   1200                    rtrn = NV_OPER_FAILED;
   \                     ??osal_nv_write_8:
   \   0002BB   75..0A       MOV     ?V0 + 1,#0xa
   1201                  }
   1202          
   1203                  if ( dstPg == pgRes )
   \                     ??osal_nv_write_9:
   \   0002BE   90....       MOV     DPTR,#pgRes
   \   0002C1   E0           MOVX    A,@DPTR
   \   0002C2   65..         XRL     A,?V0 + 0
   \   0002C4   7010         JNZ     ??osal_nv_write_5
   1204                  {
   1205                    compactPage( comPg );
   \   0002C6                ; Setup parameters for call to function compactPage
   \   0002C6   85..82       MOV     DPL,?XSP + 0
   \   0002C9   85..83       MOV     DPH,?XSP + 1
   \   0002CC   E0           MOVX    A,@DPTR
   \   0002CD   F9           MOV     R1,A
   \   0002CE   12....       LCALL   ??compactPage?relay
   \   0002D1   8003         SJMP    ??osal_nv_write_5
   1206                  }
   1207                }
   1208                else
   1209                {
   1210                  rtrn = NV_OPER_FAILED;
   \                     ??osal_nv_write_6:
   \   0002D3   75..0A       MOV     ?V0 + 1,#0xa
   1211                }
   1212              }
   1213            }
   1214          
   1215            if ( failF )
   \                     ??osal_nv_write_5:
   \   0002D6   90....       MOV     DPTR,#failF
   \   0002D9   E0           MOVX    A,@DPTR
   \   0002DA   6006         JZ      ??osal_nv_write_0
   1216            {
   1217              (void)initNV();  // See comment at the declaration of failF.
   \   0002DC                ; Setup parameters for call to function initNV
   \   0002DC   12....       LCALL   ??initNV?relay
   1218              rtrn = NV_OPER_FAILED;
   \   0002DF   75..0A       MOV     ?V0 + 1,#0xa
   1219            }
   1220          
   1221            return rtrn;
   \                     ??osal_nv_write_0:
   \   0002E2   A9..         MOV     R1,?V0 + 1
   \                     ??osal_nv_write_2:
   \   0002E4   740F         MOV     A,#0xf
   \   0002E6                REQUIRE ?Subroutine2
   \   0002E6                ; // Fall through to label ?Subroutine2
   1222          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   EE           MOV     A,R6
   \   000001   25..         ADD     A,?V0 + 2
   \   000003   FE           MOV     R6,A
   \   000004   EF           MOV     A,R7
   \   000005   35..         ADDC    A,?V0 + 3
   \   000007   FF           MOV     R7,A
   \   000008                ; Setup parameters for call to function writeBuf
   \   000008   7421         MOV     A,#0x21
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   C3           CLR     C
   \   000002   98           SUBB    A,R0
   \   000003   FE           MOV     R6,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   99           SUBB    A,R1
   \   000007   FF           MOV     R7,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   25..         ADD     A,?V0 + 2
   \   000003   F8           MOV     R0,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   35..         ADDC    A,?V0 + 3
   \   000008   F9           MOV     R1,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   000003   A9..         MOV     R1,?V0 + 6
   \   000005   12....       LCALL   ??setItem?relay
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   EE           MOV     A,R6
   \   000006   FA           MOV     R2,A
   \   000007   EF           MOV     A,R7
   \   000008   FB           MOV     R3,A
   \   000009   A9..         MOV     R1,?V0 + 0
   \   00000B   22           RET
   1223          
   1224          /*********************************************************************
   1225           * @fn      osal_nv_read
   1226           *
   1227           * @brief   Read data from NV. This function can be used to read an entire item from NV or
   1228           *          an element of an item by indexing into the item with an offset.
   1229           *          Read data is copied into *buf.
   1230           *
   1231           * @param   id  - Valid NV item Id.
   1232           * @param   ndx - Index offset into item
   1233           * @param   len - Length of data to read.
   1234           * @param  *buf - Data is read into this buffer.
   1235           *
   1236           * @return  ZSUCCESS if NV data was copied to the parameter 'buf'.
   1237           *          Otherwise, NV_OPER_FAILED for failure.
   1238           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1239          uint8 osal_nv_read( uint16 id, uint16 ndx, uint16 len, void *buf )
   \                     osal_nv_read:
   1240          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8C..         MOV     ?V0 + 0,R4
   \   000007   8D..         MOV     ?V0 + 1,R5
   \   000009   740E         MOV     A,#0xe
   \   00000B   12....       LCALL   ?XSTACK_DISP0_8
   \   00000E   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   000011   7410         MOV     A,#0x10
   \   000013   12....       LCALL   ?XSTACK_DISP0_8
   \   000016   E0           MOVX    A,@DPTR
   \   000017   FE           MOV     R6,A
   \   000018   A3           INC     DPTR
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   FF           MOV     R7,A
   1241            uint16 offset;
   1242          
   1243            offset = findItem( id );
   \   00001B                ; Setup parameters for call to function findItem
   \   00001B   12....       LCALL   ??findItem?relay
   1244            if ( offset == OSAL_NV_ITEM_NULL )
   \   00001E   EA           MOV     A,R2
   \   00001F   4B           ORL     A,R3
   \   000020   7004         JNZ     ??osal_nv_read_0
   1245            {
   1246              return NV_OPER_FAILED;
   \   000022   790A         MOV     R1,#0xa
   \   000024   8018         SJMP    ??osal_nv_read_1
   1247            }
   1248          
   1249            HalFlashRead(findPg, offset+ndx, buf, len);
   \                     ??osal_nv_read_0:
   \   000026                ; Setup parameters for call to function HalFlashRead
   \   000026   78..         MOV     R0,#?V0 + 2
   \   000028   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002B   EE           MOV     A,R6
   \   00002C   FC           MOV     R4,A
   \   00002D   EF           MOV     A,R7
   \   00002E   FD           MOV     R5,A
   \   00002F   EA           MOV     A,R2
   \   000030   25..         ADD     A,?V0 + 0
   \   000032   FA           MOV     R2,A
   \   000033   EB           MOV     A,R3
   \   000034   35..         ADDC    A,?V0 + 1
   \   000036   12....       LCALL   ??Subroutine51_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_112:
   \   000039   12....       LCALL   ?DEALLOC_XSTACK8
   1250          
   1251            return ZSUCCESS;
   \   00003C   7900         MOV     R1,#0x0
   \                     ??osal_nv_read_1:
   \   00003E   02....       LJMP    ??Subroutine47_0 & 0xFFFF
   1252          }

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??initNV?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    initNV

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??setPageUse?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    setPageUse

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??initPage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    initPage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??erasePage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    erasePage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??compactPage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    compactPage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??findItem?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    findItem

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??initItem?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    initItem

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??setItem?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    setItem

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??calcChkF?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    calcChkF

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??writeWord?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    writeWord

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??writeWordH?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    writeWordH

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??writeBuf?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    writeBuf

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??xferBuf?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    xferBuf

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??writeItem?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    writeItem

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??osal_nv_init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_nv_init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??osal_nv_item_init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_nv_item_init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??osal_nv_item_len?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_nv_item_len

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??osal_nv_write?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_nv_write

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??osal_nv_read?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_nv_read
   1253          
   1254          /*********************************************************************
   1255          *********************************************************************/

   Maximum stack usage in bytes:

     Function            ISTACK PSTACK XSTACK
     --------            ------ ------ ------
     calcChkF                0      0     52
       -> HalFlashRead       0      0     42
     compactPage             0      0     59
       -> writeWordH         0      0     48
       -> calcChkF           0      0     48
       -> setItem            0      0     48
       -> writeBuf           0      0     52
       -> xferBuf            0      0     56
       -> setItem            0      0     48
       -> HalFlashRead       0      0     52
       -> erasePage          0      0     48
       -> setPageUse         0      0     48
     erasePage               0      0     33
       -> HalAdcCheckVdd     0      0     18
       -> HalFlashErase      0      0     18
     findItem                0      0     43
       -> initPage           0      0     24
     initItem                1      0     52
       -> writeItem          0      0     38
       -> compactPage        0      0     32
     initNV                  0      0     53
       -> HalFlashRead       0      0     44
       -> setPageUse         0      0     40
       -> initPage           0      0     40
       -> setPageUse         0      0     40
       -> compactPage        0      0     40
       -> erasePage          0      0     40
       -> initNV             0      0     40
     initPage                0      0     48
       -> HalFlashRead       0      0     56
       -> calcChkF           0      0     52
       -> findItem           0      0     52
       -> setItem            0      0     52
       -> setItem            0      0     52
     osal_nv_init            2      0      0
       -> initNV             4      0      0
     osal_nv_item_init       0      0     18
       -> findItem           0      0     28
       -> initItem           0      0     32
       -> initNV             0      0     28
     osal_nv_item_len        0      0     20
       -> findItem           0      0     36
       -> HalFlashRead       0      0     40
     osal_nv_read            0      0     20
       -> findItem           0      0     28
       -> HalFlashRead       0      0     32
     osal_nv_write           2      0     39
       -> findItem           0      0     62
       -> HalFlashRead       0      0     66
       -> HalFlashRead       0      0     66
       -> initItem           0      0     66
       -> setItem            0      0     62
       -> xferBuf            0      0     70
       -> writeBuf           0      0     66
       -> xferBuf            0      0     70
       -> calcChkF           0      0     62
       -> writeWordH         0      0     62
       -> HalFlashRead       0      0     66
       -> setItem            0      0     62
       -> compactPage        0      0     62
       -> initNV             0      0     62
     setItem                 0      0     55
       -> HalFlashRead       0      0     48
       -> writeWord          0      0     44
       -> writeWord          0      0     44
     setPageUse              0      0     44
       -> writeWord          0      0     34
     writeBuf                1      0     55
       -> HalFlashRead       0      0     44
       -> writeWord          0      0     40
       -> HalAdcCheckVdd     0      0     40
       -> HalFlashWrite      0      0     44
       -> HalFlashRead       0      0     44
       -> writeWord          0      0     40
     writeItem               0      0     48
       -> setPageUse         0      0     54
       -> writeWord          0      0     54
       -> HalFlashRead       0      0     58
       -> writeBuf           0      0     58
       -> calcChkF           0      0     54
       -> writeWordH         0      0     54
       -> HalFlashRead       0      0     58
     writeWord               0      0     43
       -> HalAdcCheckVdd     0      0     28
       -> HalFlashWrite      0      0     32
     writeWordH              1      0     44
       -> writeWord          0      0     26
     xferBuf                 1      0     58
       -> HalFlashRead       0      0     46
       -> HalFlashRead       0      0     46
       -> writeWord          0      0     42
       -> HalFlashRead       0      0     46
       -> writeWord          0      0     42
       -> HalFlashRead       0      0     46
       -> HalFlashRead       0      0     46
       -> writeWord          0      0     42


   Segment part sizes:

     Function/Label            Bytes
     --------------            -----
     _nvBuf                    12288
     _nvIEEE                       8
     pgOff                        12
     pgLost                       12
     pgRes                         1
     findPg                        1
     failF                         1
     initNV                      218
     ?Subroutine0                  5
     ??Subroutine53_0              1
     ??Subroutine54_0              6
     setPageUse                   52
     ?Subroutine1                  3
     ??Subroutine42_0              5
     ??Subroutine45_0              2
     ??Subroutine46_0             12
     initPage                    425
     ?Subroutine29                 4
     ?Subroutine8                  5
     ?Subroutine40                11
     ??Subroutine43_0              9
     ?Subroutine30                14
     ?Subroutine26                 5
     ??Subroutine44_0              7
     ?Subroutine39                17
     ?Subroutine20                 6
     ??Subroutine49_0              6
     ?Subroutine9                  8
     ?Subroutine22                 4
     ?Subroutine37                 6
     ?Subroutine2                  3
     ??Subroutine50_0              5
     erasePage                    46
     compactPage                 325
     ?Subroutine21                 5
     ?Subroutine16                15
     ?Subroutine11                 8
     ?Subroutine6                  7
     ?Subroutine3                  3
     ??Subroutine47_0              5
     ?Subroutine27                13
     findItem                     68
     ?Subroutine31                 1
     initItem                    200
     ?Subroutine18                 8
     ?Subroutine14                 4
     ?Subroutine38                 9
     setItem                     141
     ?Subroutine13                15
     calcChkF                    137
     ?Subroutine4                  8
     ?Subroutine34                15
     ?Subroutine41                13
     writeWord                    78
     ?Subroutine36                 9
     writeWordH                   64
     writeBuf                    376
     ?Subroutine32                19
     ?Subroutine19                12
     ??Subroutine48_0              7
     ?Subroutine12                 5
     ?Subroutine7                  6
     xferBuf                     346
     ?Subroutine35                13
     ?Subroutine28                17
     ?Subroutine25                10
     ??Subroutine52_0              1
     writeItem                   531
     ?Subroutine10                 6
     osal_nv_init                 14
     osal_nv_item_init            86
     osal_nv_item_len             72
     ?Subroutine5                  2
     ??Subroutine51_0              4
     osal_nv_write               742
     ?Subroutine33                11
     ?Subroutine24                 9
     ?Subroutine23                10
     ?Subroutine17                 9
     ?Subroutine15                12
     osal_nv_read                 65
     ??initNV?relay                6
     ??setPageUse?relay            6
     ??initPage?relay              6
     ??erasePage?relay             6
     ??compactPage?relay           6
     ??findItem?relay              6
     ??initItem?relay              6
     ??setItem?relay               6
     ??calcChkF?relay              6
     ??writeWord?relay             6
     ??writeWordH?relay            6
     ??writeBuf?relay              6
     ??xferBuf?relay               6
     ??writeItem?relay             6
     ??osal_nv_init?relay          6
     ??osal_nv_item_init?relay     6
     ??osal_nv_item_len?relay      6
     ??osal_nv_write?relay         6
     ??osal_nv_read?relay          6

 
  4 421 bytes in segment BANKED_CODE
    114 bytes in segment BANK_RELAYS
      8 bytes in segment IEEE_ADDRESS_SPACE
     27 bytes in segment XDATA_Z
 12 288 bytes in segment ZIGNV_ADDRESS_SPACE
 
  4 535 bytes of CODE  memory
 12 323 bytes of XDATA memory

Errors: none
Warnings: none
