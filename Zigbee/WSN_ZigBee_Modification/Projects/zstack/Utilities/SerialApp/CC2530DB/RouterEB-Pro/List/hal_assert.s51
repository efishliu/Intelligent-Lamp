///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.3.10338/W32 for 8051        03/Jul/2018  14:53:02 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Components\hal\common\hal_assert.c               /
//    Command line       =  -f D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_Ð /
//                          Þ¸Ä\Projects\zstack\Utilities\SerialApp\CC2530DB\ /
//                          ..\..\..\Tools\CC2530DB\f8wRouter.cfg             /
//                          (-DCPU32MHZ -DROOT=__near_func                    /
//                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE -DRTR_NWK        /
//                          -DBLINK_LEDS) -f D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼ /
//                          «\WSN_ZigBee_ÐÞ¸Ä\Projects\zstack\Utilities\Seria /
//                          lApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.c /
//                          fg (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR  /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          "-DCONST=const __code" -DGENERIC=__generic        /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµ /
//                          Ï°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\Components\hal\common\hal /
//                          _assert.c -D ZIGBEEPRO -D HAL_UART=TRUE -D        /
//                          SERIAL_APP_PORT=0 -D LCD_SUPPORTED -lC            /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\Rou /
//                          terEB-Pro\List\ -lA D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ /
//                          ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\Projects\zstack\Utilities\Se /
//                          rialApp\CC2530DB\RouterEB-Pro\List\               /
//                          --diag_suppress Pe001,Pa010 -o                    /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\Rou /
//                          terEB-Pro\Obj\ -e --debug --core=plain            /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 8 -I D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµ /
//                          Ï°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\Projects\zstack\Utilities /
//                          \SerialApp\CC2530DB\ -I                           /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          SOURCE\ -I D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ /
//                          ZigBee_ÐÞ¸Ä\Projects\zstack\Utilities\SerialApp\C /
//                          C2530DB\..\..\..\ZMAIN\TI2530DB\ -I               /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\MT\ -I                     /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\HAL\INCLUDE\ -I            /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\ -I    /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\ -I         /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\OSAL\INCLUDE\ -I           /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\STACK\AF\ -I               /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\STACK\NWK\ -I              /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\STACK\SEC\ -I              /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\STACK\SAPI\ -I             /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\STACK\SYS\ -I              /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\STACK\ZDO\ -I              /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\ZMAC\F8W\ -I               /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\ZMAC\ -I                   /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\SERVICES\SADDR\ -I         /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\SERVICES\SDATA\ -I         /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\MAC\INCLUDE\ -I            /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\ -I         /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\ -I    /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE /
//                          _CHIP\ -Ohz --require_prototypes                  /
//    List file          =  D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\Rou /
//                          terEB-Pro\List\hal_assert.s51                     /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME hal_assert

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_ADD_TO_X
        EXTERN ?L_MOV_X
        EXTERN ?S_SHL
        EXTERN ?UL_GT_X
        EXTERN ?V0
        EXTERN ?XLOAD_R2345
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTORE_R2345
        EXTERN __INIT_XDATA_Z

        PUBLIC ??halAssertHandler?relay
        FUNCTION ??halAssertHandler?relay,0203H
        PUBLIC ??halAssertHazardLights?relay
        FUNCTION ??halAssertHazardLights?relay,0203H
        PUBWEAK CLKCONCMD
        PUBWEAK CLKCONSTA
        PUBWEAK P0INP
        PUBWEAK P1DIR
        PUBWEAK SLEEPCMD
        PUBWEAK SLEEPSTA
        PUBWEAK _A_IEN0
        PUBWEAK _A_P0
        PUBWEAK _A_P1
        PUBWEAK __Constant_0
        PUBWEAK __Constant_1
        PUBWEAK __Constant_5800
        PUBLIC halAssertHandler
        FUNCTION halAssertHandler,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC halAssertHazardLights
        FUNCTION halAssertHazardLights,080203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 22, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
halAssertHandler    SYMBOL "halAssertHandler"
??halAssertHandler?relay SYMBOL "?relay", halAssertHandler
halAssertHazardLights SYMBOL "halAssertHazardLights"
??halAssertHazardLights?relay SYMBOL "?relay", halAssertHazardLights

        EXTERN macRxActive
        EXTERN macTxActive

// D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\Components\hal\common\hal_assert.c
//    1 /**************************************************************************************************
//    2   Filename:       hal_assert.c
//    3   Revised:        $Date: 2008-06-13 19:14:56 -0700 (Fri, 13 Jun 2008) $
//    4   Revision:       $Revision: 17243 $
//    5 
//    6   Description:    Describe the purpose and contents of the file.
//    7 
//    8 
//    9   Copyright 2006-2008 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License").  You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product.  Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 
//   40 
//   41 /* ------------------------------------------------------------------------------------------------
//   42  *                                          Includes
//   43  * ------------------------------------------------------------------------------------------------
//   44  */
//   45 #include "hal_assert.h"
//   46 #include "hal_types.h"
//   47 #include "hal_board.h"

        ASEGN SFR_AN:DATA:NOROOT,080H
// union <unnamed> volatile __sfr _A_P0
_A_P0:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,08fH
// unsigned char volatile __sfr P0INP
P0INP:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,090H
// union <unnamed> volatile __sfr _A_P1
_A_P1:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,09dH
// unsigned char volatile __sfr SLEEPSTA
SLEEPSTA:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,09eH
// unsigned char volatile __sfr CLKCONSTA
CLKCONSTA:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0a8H
// union <unnamed> volatile __sfr _A_IEN0
_A_IEN0:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0beH
// unsigned char volatile __sfr SLEEPCMD
SLEEPCMD:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0c6H
// unsigned char volatile __sfr CLKCONCMD
CLKCONCMD:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0feH
// unsigned char volatile __sfr P1DIR
P1DIR:
        DATA8
        DS 1
//   48 #include "hal_defs.h"
//   49 #include "hal_mcu.h"
//   50 
//   51 #ifndef HAL_ONLY_BUILD
//   52   /* for access to debug data */
//   53   #include "mac_rx.h"
//   54   #include "mac_tx.h"
//   55 #endif
//   56 
//   57 /* ------------------------------------------------------------------------------------------------
//   58  *                                       Local Prototypes
//   59  * ------------------------------------------------------------------------------------------------
//   60  */
//   61 void halAssertHazardLights(void);
//   62 
//   63 
//   64 /**************************************************************************************************
//   65  * @fn          halAssertHandler
//   66  *
//   67  * @brief       Logic to handle an assert.
//   68  *
//   69  * @param       none
//   70  *
//   71  * @return      none
//   72  **************************************************************************************************
//   73  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   74 void halAssertHandler(void)
halAssertHandler:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function halAssertHandler
        CODE
//   75 {
        FUNCALL halAssertHandler, halAssertHazardLights
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//   76   /* execute code that handles asserts */
//   77 #ifdef ASSERT_RESET
//   78   HAL_SYSTEM_RESET();
//   79 #else
//   80   halAssertHazardLights();
        ; Setup parameters for call to function halAssertHazardLights
        LCALL   ??halAssertHazardLights?relay
//   81 #endif
//   82 
//   83 }
        POP     DPH
        CFI DPH0 SameValue
        CFI CFA_SP SP+-4
        POP     DPL
        CFI DPL0 SameValue
        CFI CFA_SP SP+-3
        LJMP    ?BRET
        CFI EndBlock cfiBlock0
//   84 
//   85 
//   86 /**************************************************************************************************
//   87  * @fn          halAssertHazardLights
//   88  *
//   89  * @brief       Blink LEDs to indicate an error.
//   90  *
//   91  * @param       none
//   92  *
//   93  * @return      none
//   94  **************************************************************************************************
//   95  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   96 void halAssertHazardLights(void)
halAssertHazardLights:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function halAssertHazardLights
        CODE
//   97 {
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 10
        MOV     A,#-0xa
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
//   98   enum
//   99   {
//  100     DEBUG_DATA_RSTACK_HIGH_OFS,
//  101     DEBUG_DATA_RSTACK_LOW_OFS,
//  102     DEBUG_DATA_TX_ACTIVE_OFS,
//  103     DEBUG_DATA_RX_ACTIVE_OFS,
//  104 
//  105 #if (defined HAL_MCU_AVR) || (defined HAL_MCU_CC2430)
//  106     DEBUG_DATA_INT_MASK_OFS,
//  107 #elif (defined HAL_MCU_CC2530)
//  108     DEBUG_DATA_INT_MASK0_OFS,
//  109     DEBUG_DATA_INT_MASK1_OFS,
//  110 #endif
//  111 
//  112     DEBUG_DATA_SIZE
//  113   };
//  114 
//  115   uint8 buttonHeld;
//  116   uint8 debugData[DEBUG_DATA_SIZE];
//  117 
//  118   /* disable all interrupts before anything else */
//  119   HAL_DISABLE_INTERRUPTS();
        CLR     0xa8.7
//  120 
//  121   /*-------------------------------------------------------------------------------
//  122    *  Initialize LEDs and turn them off.
//  123    */
//  124   HAL_BOARD_INIT();
        ANL     0xbe,#0xfb
??halAssertHazardLights_0:
        MOV     A,0x9d
        MOV     C,0xE0 /* A   */.6
        JNC     ??halAssertHazardLights_0
        NOP
        MOV     R0,#-0x8
        MOV     R1,#0x1
??halAssertHazardLights_1:
        NOP
        MOV     A,R0
        ADD     A,#-0x1
        DEC     R0
        MOV     A,R1
        ADDC    A,#-0x1
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JNZ     ??halAssertHazardLights_1
        MOV     0xc6,#-0x80
??halAssertHazardLights_2:
        MOV     A,#-0x80
        XRL     A,0x9e
        JNZ     ??halAssertHazardLights_2
        ORL     0xbe,#0x4
        ORL     0xfe,#0x1
        ORL     0xfe,#0x2
        ORL     0xfe,#0x10
        ORL     0x8f,#0x1
//  125 
//  126   HAL_TURN_OFF_LED1();
        SETB    0x90.0
//  127   HAL_TURN_OFF_LED2();
        SETB    0x90.1
//  128   HAL_TURN_OFF_LED3();
        SETB    0x90.4
//  129   HAL_TURN_OFF_LED4();
        SJMP    ??halAssertHazardLights_3
//  130 
//  131   /*-------------------------------------------------------------------------------
//  132    *  Master infinite loop.
//  133    */
//  134   for (;;)
//  135   {
//  136     buttonHeld = 0;
//  137 
//  138     /*-------------------------------------------------------------------------------
//  139      *  "Hazard lights" loop.  A held keypress will exit this loop.
//  140      */
//  141     do
//  142     {
//  143       HAL_LED_BLINK_DELAY();
//  144 
//  145       /* toggle LEDS, the #ifdefs are in case HAL has logically remapped non-existent LEDs */
//  146 #if (HAL_NUM_LEDS >= 1)
//  147       HAL_TOGGLE_LED1();
//  148 #if (HAL_NUM_LEDS >= 2)
//  149       HAL_TOGGLE_LED2();
//  150 #if (HAL_NUM_LEDS >= 3)
//  151       HAL_TOGGLE_LED3();
//  152 #if (HAL_NUM_LEDS >= 4)
//  153       HAL_TOGGLE_LED4();
//  154 #endif
//  155 #endif
//  156 #endif
//  157 #endif
//  158 
//  159       /* escape hatch to continue execution, set escape to '1' to continue execution */
//  160       {
//  161         static uint8 escape = 0;
//  162         if (escape)
//  163         {
//  164           escape = 0;
//  165           return;
//  166         }
//  167       }
//  168 
//  169       /* break out of loop if button is held long enough */
//  170       if (HAL_PUSH_BUTTON1())
//  171       {
//  172         buttonHeld++;
//  173       }
//  174       else
//  175       {
//  176         buttonHeld = 0;
//  177       }
//  178     }
//  179     while (buttonHeld != 10);  /* loop until button is held specified number of loops */
//  180 
//  181     /*-------------------------------------------------------------------------------
//  182      *  Just exited from "hazard lights" loop.
//  183      */
//  184 
//  185     /* turn off all LEDs */
//  186     HAL_TURN_OFF_LED1();
//  187     HAL_TURN_OFF_LED2();
//  188     HAL_TURN_OFF_LED3();
//  189     HAL_TURN_OFF_LED4();
//  190 
//  191     /* wait for button release */
//  192     HAL_DEBOUNCE(!HAL_PUSH_BUTTON1());
//  193 
//  194     /*-------------------------------------------------------------------------------
//  195      *  Load debug data into memory.
//  196      */
//  197 #ifdef HAL_MCU_AVR
//  198     {
//  199       uint8 * pStack;
//  200       pStack = (uint8 *) SP;
//  201       pStack++; /* point to return address on stack */
//  202       debugData[DEBUG_DATA_RSTACK_HIGH_OFS] = *pStack;
//  203       pStack++;
//  204       debugData[DEBUG_DATA_RSTACK_LOW_OFS] = *pStack;
//  205     }
//  206     debugData[DEBUG_DATA_INT_MASK_OFS] = EIMSK;
//  207 #endif
//  208 
//  209 #if (defined HAL_MCU_CC2430)
//  210     debugData[DEBUG_DATA_INT_MASK_OFS] = RFIM;
//  211 #elif (defined HAL_MCU_CC2530)
//  212     debugData[DEBUG_DATA_INT_MASK0_OFS] = RFIRQM0;
//  213     debugData[DEBUG_DATA_INT_MASK1_OFS] = RFIRQM1;
//  214 #endif
//  215 
//  216 
//  217 #ifndef HAL_ONLY_BUILD
//  218     debugData[DEBUG_DATA_TX_ACTIVE_OFS] = macTxActive;
//  219     debugData[DEBUG_DATA_RX_ACTIVE_OFS] = macRxActive;
//  220 #endif
//  221 
//  222    /* initialize for data dump loop */
//  223     {
//  224       uint8 iBit;
//  225       uint8 iByte;
//  226 
//  227       iBit  = 0;
//  228       iByte = 0;
//  229 
//  230       /*-------------------------------------------------------------------------------
//  231        *  Data dump loop.  A button press cycles data bits to an LED.
//  232        */
//  233       while (iByte < DEBUG_DATA_SIZE)
//  234       {
//  235         /* wait for key press */
//  236         while(!HAL_PUSH_BUTTON1());
//  237 
//  238         /* turn on all LEDs for first bit of byte, turn on three LEDs if not first bit */
//  239         HAL_TURN_ON_LED1();
//  240         HAL_TURN_ON_LED2();
//  241         HAL_TURN_ON_LED3();
//  242         if (iBit == 0)
//  243         {
//  244           HAL_TURN_ON_LED4();
//  245         }
//  246         else
//  247         {
//  248           HAL_TURN_OFF_LED4();
//  249         }
//  250 
//  251         /* wait for debounced key release */
//  252         HAL_DEBOUNCE(!HAL_PUSH_BUTTON1());
//  253 
//  254         /* turn off all LEDs */
//  255         HAL_TURN_OFF_LED1();
//  256         HAL_TURN_OFF_LED2();
//  257         HAL_TURN_OFF_LED3();
//  258         HAL_TURN_OFF_LED4();
//  259 
//  260         /* output value of data bit to LED1 */
//  261         if (debugData[iByte] & (1 << (7 - iBit)))
//  262         {
//  263           HAL_TURN_ON_LED1();
//  264         }
//  265         else
//  266         {
//  267           HAL_TURN_OFF_LED1();
??halAssertHazardLights_4:
        SETB    0x90.0
//  268         }
//  269 
//  270         /* advance to next bit */
//  271         iBit++;
??halAssertHazardLights_5:
        INC     R3
//  272         if (iBit == 8)
        MOV     A,#0x8
        XRL     A,R3
        JZ      $+5
        LJMP    ??halAssertHazardLights_6 & 0xFFFF
//  273         {
//  274           iBit = 0;
        MOV     R3,#0x0
//  275           iByte++;
        INC     R2
//  276         }
        MOV     A,R2
        CLR     C
        SUBB    A,#0x6
        JNC     $+5
        LJMP    ??halAssertHazardLights_6 & 0xFFFF
//  277       }
//  278     }
//  279 
//  280     /*
//  281      *  About to enter "hazard lights" loop again.  Turn off LED1 in case the last bit
//  282      *  displayed happened to be one.  This guarantees all LEDs are off at the start of
//  283      *  the flashing loop which uses a toggle operation to change LED states.
//  284      */
//  285     HAL_TURN_OFF_LED1();
??halAssertHazardLights_3:
        SETB    0x90.0
??halAssertHazardLights_7:
        MOV     R1,#0x0
??halAssertHazardLights_8:
        MOV     DPTR,#__Constant_0
        LCALL   ?XLOAD_R2345
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?XSTORE_R2345
        SJMP    ??halAssertHazardLights_9
??halAssertHazardLights_10:
        MOV     DPTR,#__Constant_1
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 0
        LCALL   ?L_ADD_TO_X
??halAssertHazardLights_9:
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        PUSH    DPL
        CFI CFA_SP SP+-1
        PUSH    DPH
        CFI CFA_SP SP+-2
        MOV     DPTR,#__Constant_5800
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        POP     DPH
        CFI CFA_SP SP+-1
        POP     DPL
        CFI CFA_SP SP+0
        MOV     R0,#?V0 + 0
        LCALL   ?UL_GT_X
        JC      ??halAssertHazardLights_10
        MOV     C,0x90.0
        JNC     ??halAssertHazardLights_11
        CLR     0x90.0
        SJMP    ??halAssertHazardLights_12
??halAssertHazardLights_11:
        SETB    0x90.0
??halAssertHazardLights_12:
        MOV     C,0x90.1
        JNC     ??halAssertHazardLights_13
        CLR     0x90.1
        SJMP    ??halAssertHazardLights_14
??halAssertHazardLights_13:
        SETB    0x90.1
??halAssertHazardLights_14:
        MOV     C,0x90.4
        JNC     ??halAssertHazardLights_15
        CLR     0x90.4
        SJMP    ??halAssertHazardLights_16
??halAssertHazardLights_15:
        SETB    0x90.4
??halAssertHazardLights_16:
        MOV     DPTR,#??escape
        MOVX    A,@DPTR
        JZ      ??halAssertHazardLights_17
        CLR     A
        MOVX    @DPTR,A
        MOV     A,#0xa
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI CFA_XSP16 add(XSP16, 22)
??halAssertHazardLights_17:
        MOV     C,0x80.1
        JNC     ??halAssertHazardLights_7
        INC     R1
        MOV     A,#0xa
        XRL     A,R1
        JNZ     ??halAssertHazardLights_8
        SETB    0x90.0
        SETB    0x90.1
        SETB    0x90.4
        SETB    0x90.0
        MOV     R0,#0x0
        MOV     R1,#0x0
??halAssertHazardLights_18:
        MOV     C,0x80.1
        JNC     ??halAssertHazardLights_19
        MOV     R0,#0x0
        MOV     R1,#0x0
??halAssertHazardLights_19:
        LCALL   ?Subroutine0 & 0xFFFF
??CrossCallReturnLabel_0:
        JC      ??halAssertHazardLights_18
        MOV     DPTR,#0x61a3
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPTR,#0x61a4
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPTR,#macTxActive
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPTR,#macRxActive
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     R3,#0x0
        MOV     R2,#0x0
??halAssertHazardLights_6:
        MOV     C,0x80.1
        JNC     ??halAssertHazardLights_6
        CLR     0x90.0
        CLR     0x90.1
        CLR     0x90.4
        MOV     A,R3
        JNZ     ??halAssertHazardLights_20
        CLR     0x90.0
        SJMP    ??halAssertHazardLights_21
??halAssertHazardLights_20:
        SETB    0x90.0
??halAssertHazardLights_21:
        MOV     R0,#0x0
        MOV     R1,#0x0
??halAssertHazardLights_22:
        MOV     C,0x80.1
        JNC     ??halAssertHazardLights_23
        MOV     R0,#0x0
        MOV     R1,#0x0
??halAssertHazardLights_23:
        LCALL   ?Subroutine0 & 0xFFFF
??CrossCallReturnLabel_1:
        JC      ??halAssertHazardLights_22
        SETB    0x90.0
        SETB    0x90.1
        SETB    0x90.4
        SETB    0x90.0
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        MOV     A,#0x7
        CLR     C
        SUBB    A,R3
        MOV     R0,#?V0 + 0
        LCALL   ?S_SHL
        MOV     ?V0 + 2,R2
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,DPL
        ADD     A,?V0 + 2
        MOV     DPL,A
        MOV     A,DPH
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        ANL     A,?V0 + 0
        JNZ     $+5
        LJMP    ??halAssertHazardLights_4 & 0xFFFF
        CLR     0x90.0
        LJMP    ??halAssertHazardLights_5 & 0xFFFF
        CFI EndBlock cfiBlock1
        REQUIRE _A_IEN0
        REQUIRE SLEEPCMD
        REQUIRE SLEEPSTA
        REQUIRE CLKCONCMD
        REQUIRE CLKCONSTA
        REQUIRE P1DIR
        REQUIRE P0INP
        REQUIRE _A_P1
        REQUIRE _A_P0
//  286   }
//  287 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiCond2 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond3 Using cfiCommon0
        CFI (cfiCond3) NoFunction
        CFI (cfiCond3) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond3) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond3) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond3) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond3) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond3) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond3) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond3) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond3) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond3) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond3) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond3) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond3) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond3) CFA_SP SP+0
        CFI (cfiCond3) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiPicker4 Using cfiCommon1
        CFI (cfiPicker4) NoFunction
        CFI (cfiPicker4) Picker
        MOV     A,R0
        ADD     A,#0x1
        INC     R0
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R1,A
        CLR     C
        MOV     A,R0
        SUBB    A,#-0xc
        MOV     A,R1
        SUBB    A,#0x1
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        RET
        CFI EndBlock cfiCond2
        CFI EndBlock cfiCond3
        CFI EndBlock cfiPicker4

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
??escape:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_0:
        DD 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_1:
        DD 1

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_5800:
        DD 22528

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??halAssertHandler?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    halAssertHandler

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??halAssertHazardLights?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    halAssertHazardLights

        END
//  288 
//  289 
//  290 /* ------------------------------------------------------------------------------------------------
//  291  *                                    Compile Time Assertions
//  292  * ------------------------------------------------------------------------------------------------
//  293  */
//  294 
//  295 /* integrity check of type sizes */
//  296 HAL_ASSERT_SIZE(  int8, 1);
//  297 HAL_ASSERT_SIZE( uint8, 1);
//  298 HAL_ASSERT_SIZE( int16, 2);
//  299 HAL_ASSERT_SIZE(uint16, 2);
//  300 HAL_ASSERT_SIZE( int32, 4);
//  301 HAL_ASSERT_SIZE(uint32, 4);
//  302 
//  303 
//  304 /**************************************************************************************************
//  305 */
// 
// 430 bytes in segment BANKED_CODE
//  12 bytes in segment BANK_RELAYS
//   9 bytes in segment SFR_AN
//  12 bytes in segment XDATA_ROM_C
//   1 byte  in segment XDATA_Z
// 
// 442 bytes of CODE  memory
//   0 bytes of CONST memory (+ 12 bytes shared)
//   0 bytes of DATA  memory (+  9 bytes shared)
//   1 byte  of XDATA memory
//
//Errors: none
//Warnings: none
