///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.3.10338/W32 for 8051        03/Jul/2018  14:52:43 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Components\mt\MT_ZDO.c                           /
//    Command line       =  -f D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_Ð /
//                          Þ¸Ä\Projects\zstack\Utilities\SerialApp\CC2530DB\ /
//                          ..\..\..\Tools\CC2530DB\f8wRouter.cfg             /
//                          (-DCPU32MHZ -DROOT=__near_func                    /
//                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE -DRTR_NWK        /
//                          -DBLINK_LEDS) -f D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼ /
//                          «\WSN_ZigBee_ÐÞ¸Ä\Projects\zstack\Utilities\Seria /
//                          lApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.c /
//                          fg (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR  /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          "-DCONST=const __code" -DGENERIC=__generic        /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµ /
//                          Ï°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\Components\mt\MT_ZDO.c    /
//                          -D ZIGBEEPRO -D HAL_UART=TRUE -D                  /
//                          SERIAL_APP_PORT=0 -D LCD_SUPPORTED -lC            /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\Rou /
//                          terEB-Pro\List\ -lA D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ /
//                          ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\Projects\zstack\Utilities\Se /
//                          rialApp\CC2530DB\RouterEB-Pro\List\               /
//                          --diag_suppress Pe001,Pa010 -o                    /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\Rou /
//                          terEB-Pro\Obj\ -e --debug --core=plain            /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 8 -I D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµ /
//                          Ï°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\Projects\zstack\Utilities /
//                          \SerialApp\CC2530DB\ -I                           /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          SOURCE\ -I D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ /
//                          ZigBee_ÐÞ¸Ä\Projects\zstack\Utilities\SerialApp\C /
//                          C2530DB\..\..\..\ZMAIN\TI2530DB\ -I               /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\MT\ -I                     /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\HAL\INCLUDE\ -I            /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\ -I    /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\ -I         /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\OSAL\INCLUDE\ -I           /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\STACK\AF\ -I               /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\STACK\NWK\ -I              /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\STACK\SEC\ -I              /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\STACK\SAPI\ -I             /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\STACK\SYS\ -I              /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\STACK\ZDO\ -I              /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\ZMAC\F8W\ -I               /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\ZMAC\ -I                   /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\SERVICES\SADDR\ -I         /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\SERVICES\SDATA\ -I         /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\MAC\INCLUDE\ -I            /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\ -I         /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\ -I    /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE /
//                          _CHIP\ -Ohz --require_prototypes                  /
//    List file          =  D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\Rou /
//                          terEB-Pro\List\MT_ZDO.s51                         /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME MT_ZDO

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)


        END
// D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\Components\mt\MT_ZDO.c
//    1 /**************************************************************************************************
//    2   Filename:       MT_ZDO.c
//    3   Revised:        $Date: 2009-01-05 16:58:00 -0800 (Mon, 05 Jan 2009) $
//    4   Revision:       $Revision: 18682 $
//    5 
//    6   Description:    MonitorTest functions for the ZDO layer.
//    7 
//    8 
//    9   Copyright 2004-2007 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License").  You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product.  Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 
//   40 #ifdef MT_ZDO_FUNC
//   41 
//   42 /**************************************************************************************************
//   43  * INCLUDES
//   44  **************************************************************************************************/
//   45 #include "ZComDef.h"
//   46 #include "OSAL.h"
//   47 #include "MT.h"
//   48 #include "MT_ZDO.h"
//   49 #include "APSMEDE.h"
//   50 #include "ZDConfig.h"
//   51 #include "ZDProfile.h"
//   52 #include "ZDObject.h"
//   53 #include "ZDApp.h"
//   54 
//   55 #if !defined( WIN32 )
//   56   #include "OnBoard.h"
//   57 #endif
//   58 
//   59 #include "nwk_util.h"
//   60 
//   61 /**************************************************************************************************
//   62  * CONSTANTS
//   63  **************************************************************************************************/
//   64 #define MT_ZDO_END_DEVICE_ANNCE_IND_LEN   0x0D
//   65 #define MT_ZDO_ADDR_RSP_LEN               0x0D
//   66 #define MT_ZDO_BIND_UNBIND_RSP_LEN        0x03
//   67 
//   68 #define MTZDO_RESPONSE_BUFFER_LEN   100
//   69 
//   70 #define MTZDO_MAX_MATCH_CLUSTERS    16
//   71 #define MTZDO_MAX_ED_BIND_CLUSTERS  15
//   72 
//   73 /**************************************************************************************************
//   74  * GLOBAL VARIABLES
//   75  **************************************************************************************************/
//   76 uint32 _zdoCallbackSub;
//   77 
//   78 /**************************************************************************************************
//   79  * LOCAL VARIABLES
//   80  **************************************************************************************************/
//   81 uint8 mtzdoResponseBuffer[MTZDO_RESPONSE_BUFFER_LEN];
//   82 
//   83 /**************************************************************************************************
//   84  * LOCAL FUNCTIONS
//   85  **************************************************************************************************/
//   86 #if defined (MT_ZDO_FUNC)
//   87 void MT_ZdoNWKAddressRequest(uint8 *pBuf);
//   88 void MT_ZdoIEEEAddrRequest(uint8 *pBuf);
//   89 void MT_ZdoNodeDescRequest(uint8 *pBuf);
//   90 void MT_ZdoPowerDescRequest(uint8 *pBuf);
//   91 void MT_ZdoSimpleDescRequest(uint8 *pBuf);
//   92 void MT_ZdoActiveEpRequest(uint8 *pBuf);
//   93 void MT_ZdoMatchDescRequest(uint8 *pBuf);
//   94 void MT_ZdoComplexDescRequest(uint8 *pBuf);
//   95 void MT_ZdoUserDescRequest(uint8 *pBuf);
//   96 void MT_ZdoEndDevAnnce(uint8 *pBuf);
//   97 void MT_ZdoUserDescSet(uint8 *pBuf);
//   98 void MT_ZdoServiceDiscRequest(uint8 *pBuf);
//   99 void MT_ZdoEndDevBindRequest(uint8 *pBuf);
//  100 void MT_ZdoBindRequest(uint8 *pBuf);
//  101 void MT_ZdoUnbindRequest(uint8 *pBuf);
//  102 void MT_ZdoMgmtNwkDiscRequest(uint8 *pBuf);
//  103 void MT_ZdoStartupFromApp(uint8 *pBuf);
//  104 #if defined (MT_ZDO_MGMT)
//  105 void MT_ZdoMgmtLqiRequest(uint8 *pBuf);
//  106 void MT_ZdoMgmtRtgRequest(uint8 *pBuf);
//  107 void MT_ZdoMgmtBindRequest(uint8 *pBuf);
//  108 void MT_ZdoMgmtLeaveRequest(uint8 *pBuf);
//  109 void MT_ZdoMgmtDirectJoinRequest(uint8 *pBuf);
//  110 void MT_ZdoMgmtPermitJoinRequest(uint8 *pBuf);
//  111 void MT_ZdoMgmtNwkUpdateRequest(uint8 *pBuf);
//  112 #endif /* MT_ZDO_MGMT */
//  113 #endif /* MT_ZDO_FUNC */
//  114 
//  115 #if defined (MT_ZDO_CB_FUNC)
//  116 uint8 MT_ZdoHandleExceptions( afIncomingMSGPacket_t *pData, zdoIncomingMsg_t *inMsg );
//  117 void MT_ZdoAddrRspCB( ZDO_NwkIEEEAddrResp_t *pMsg, uint16 clusterID );
//  118 void MT_ZdoEndDevAnnceCB( ZDO_DeviceAnnce_t *pMsg, uint16 srcAddr );
//  119 void MT_ZdoBindUnbindRspCB( uint16 clusterID, uint16 srcAddr, uint8 status );
//  120 
//  121 /* ZDO cluster ID to MT response command ID lookup */
//  122 static const uint8 CODE mtZdoCluster2Rsp[4][7] =
//  123 {
//  124   {
//  125     MT_ZDO_NWK_ADDR_RSP,         /* NWK_addr_req */
//  126     MT_ZDO_IEEE_ADDR_RSP,        /* IEEE_addr_req */
//  127     MT_ZDO_NODE_DESC_RSP,        /* Node_Desc_req */
//  128     MT_ZDO_POWER_DESC_RSP,       /* Power_Desc_req */
//  129     MT_ZDO_SIMPLE_DESC_RSP,      /* Simple_Desc_req */
//  130     MT_ZDO_ACTIVE_EP_RSP,        /* Active_EP_req */
//  131     MT_ZDO_MATCH_DESC_RSP        /* Match_Desc_req */
//  132   },
//  133   {
//  134     MT_ZDO_COMPLEX_DESC_RSP,     /* Complex_Desc_req */
//  135     MT_ZDO_USER_DESC_RSP,        /* User_Desc_req */
//  136     0,                           /* Discovery_Cache_req */
//  137     0,                           /* End_Device_annce */
//  138     MT_ZDO_USER_DESC_CONF,       /* User_Desc_set */
//  139     MT_ZDO_SERVER_DISC_RSP,      /* Server_Discovery_req */
//  140     0
//  141   },
//  142   {
//  143     MT_ZDO_END_DEVICE_BIND_RSP,  /* End_Device_Bind_req */
//  144     MT_ZDO_BIND_RSP,             /* Bind_req */
//  145     MT_ZDO_UNBIND_RSP,           /* Unbind_req */
//  146     0,
//  147     0,
//  148     0,
//  149     MT_ZDO_STATUS_ERROR_RSP      /* default error status msg */
//  150   },
//  151   {
//  152     MT_ZDO_MGMT_NWK_DISC_RSP,    /* Mgmt_NWK_Disc_req */
//  153     MT_ZDO_MGMT_LQI_RSP,         /* Mgmt_Lqi_req */
//  154     MT_ZDO_MGMT_RTG_RSP,         /* Mgmt_Rtg_req */
//  155     MT_ZDO_MGMT_BIND_RSP,        /* Mgmt_Bind_req */
//  156     MT_ZDO_MGMT_LEAVE_RSP,       /* Mgmt_Leave_req */
//  157     MT_ZDO_MGMT_DIRECT_JOIN_RSP, /* Mgmt_Direct_Join_req */
//  158     MT_ZDO_MGMT_PERMIT_JOIN_RSP  /* Mgmt_Permit_Join_req */
//  159   }
//  160 };
//  161 #endif /* MT_ZDO_CB_FUNC */
//  162 
//  163 #if defined (MT_ZDO_FUNC)
//  164 /***************************************************************************************************
//  165  * @fn      MT_ZdoCommandProcessing
//  166  *
//  167  * @brief
//  168  *
//  169  *   Process all the ZDO commands that are issued by test tool
//  170  *
//  171  * @param   pBuf - pointer to the msg buffer
//  172  *
//  173  *          | LEN  | CMD0  | CMD1  |  DATA  |
//  174  *          |  1   |   1   |   1   |  0-255 |
//  175  *
//  176  * @return  status
//  177  ***************************************************************************************************/
//  178 uint8 MT_ZdoCommandProcessing(uint8* pBuf)
//  179 {
//  180   uint8 status = MT_RPC_SUCCESS;
//  181 
//  182   switch (pBuf[MT_RPC_POS_CMD1])
//  183   {
//  184 #if defined ( ZDO_NWKADDR_REQUEST )
//  185     case MT_ZDO_NWK_ADDR_REQ:
//  186       MT_ZdoNWKAddressRequest(pBuf);
//  187       break;
//  188 #endif
//  189 
//  190 #if defined ( ZDO_IEEEADDR_REQUEST )
//  191     case MT_ZDO_IEEE_ADDR_REQ:
//  192       MT_ZdoIEEEAddrRequest(pBuf);
//  193       break;
//  194 #endif
//  195 
//  196 #if defined ( ZDO_NODEDESC_REQUEST )
//  197     case MT_ZDO_NODE_DESC_REQ:
//  198       MT_ZdoNodeDescRequest(pBuf);
//  199       break;
//  200 #endif
//  201 
//  202 #if defined ( ZDO_POWERDESC_REQUEST )
//  203     case MT_ZDO_POWER_DESC_REQ:
//  204       MT_ZdoPowerDescRequest(pBuf);
//  205       break;
//  206 #endif
//  207 
//  208 #if defined ( ZDO_SIMPLEDESC_REQUEST )
//  209     case MT_ZDO_SIMPLE_DESC_REQ:
//  210       MT_ZdoSimpleDescRequest(pBuf);
//  211       break;
//  212 #endif
//  213 
//  214 #if defined ( ZDO_ACTIVEEP_REQUEST )
//  215     case MT_ZDO_ACTIVE_EP_REQ:
//  216       MT_ZdoActiveEpRequest(pBuf);
//  217       break;
//  218 #endif
//  219 
//  220 #if defined ( ZDO_MATCH_REQUEST )
//  221     case MT_ZDO_MATCH_DESC_REQ:
//  222       MT_ZdoMatchDescRequest(pBuf);
//  223       break;
//  224 #endif
//  225 
//  226 #if defined ( ZDO_COMPLEXDESC_REQUEST )
//  227     case MT_ZDO_COMPLEX_DESC_REQ:
//  228       MT_ZdoComplexDescRequest(pBuf);
//  229       break;
//  230 #endif
//  231 
//  232 #if defined ( ZDO_USERDESC_REQUEST )
//  233     case MT_ZDO_USER_DESC_REQ:
//  234       MT_ZdoUserDescRequest(pBuf);
//  235       break;
//  236 #endif
//  237 
//  238 #if defined ( ZDO_ENDDEVICE_ANNCE )
//  239     case MT_ZDO_END_DEV_ANNCE:
//  240       MT_ZdoEndDevAnnce(pBuf);
//  241       break;
//  242 #endif      
//  243 
//  244 #if defined ( ZDO_USERDESCSET_REQUEST )
//  245     case MT_ZDO_USER_DESC_SET:
//  246       MT_ZdoUserDescSet(pBuf);
//  247       break;
//  248 #endif
//  249 
//  250 #if defined ( ZDO_SERVERDISC_REQUEST )
//  251     case MT_ZDO_SERVICE_DISC_REQ:
//  252       MT_ZdoServiceDiscRequest(pBuf);
//  253       break;
//  254 #endif
//  255 
//  256 #if defined ( ZDO_ENDDEVICEBIND_REQUEST )
//  257     case MT_ZDO_END_DEV_BIND_REQ:
//  258       MT_ZdoEndDevBindRequest(pBuf);
//  259       break;
//  260 #endif
//  261 
//  262 #if defined ( ZDO_BIND_UNBIND_REQUEST )
//  263     case MT_ZDO_BIND_REQ:
//  264       MT_ZdoBindRequest(pBuf);
//  265       break;
//  266 #endif
//  267 
//  268 #if defined ( ZDO_BIND_UNBIND_REQUEST )
//  269     case MT_ZDO_UNBIND_REQ:
//  270       MT_ZdoUnbindRequest(pBuf);
//  271       break;
//  272 #endif
//  273 
//  274 #if defined ( ZDO_NETWORKSTART_REQUEST )
//  275     case MT_ZDO_STARTUP_FROM_APP:
//  276       MT_ZdoStartupFromApp(pBuf);
//  277       break;
//  278 #endif
//  279 
//  280 #if defined ( ZDO_MGMT_NWKDISC_REQUEST )
//  281     case MT_ZDO_MGMT_NWKDISC_REQ:
//  282       MT_ZdoMgmtNwkDiscRequest(pBuf);
//  283       break;
//  284 #endif
//  285 
//  286 #if defined ( ZDO_MGMT_LQI_REQUEST )
//  287     case MT_ZDO_MGMT_LQI_REQ:
//  288       MT_ZdoMgmtLqiRequest(pBuf);
//  289       break;
//  290 #endif
//  291 
//  292 #if defined ( ZDO_MGMT_RTG_REQUEST )
//  293     case MT_ZDO_MGMT_RTG_REQ:
//  294       MT_ZdoMgmtRtgRequest(pBuf);
//  295       break;
//  296 #endif
//  297 
//  298 #if defined ( ZDO_MGMT_BIND_REQUEST )
//  299     case MT_ZDO_MGMT_BIND_REQ:
//  300       MT_ZdoMgmtBindRequest(pBuf);
//  301       break;
//  302 #endif
//  303 
//  304 #if defined ( ZDO_MGMT_LEAVE_REQUEST )
//  305     case MT_ZDO_MGMT_LEAVE_REQ:
//  306       MT_ZdoMgmtLeaveRequest(pBuf);
//  307       break;
//  308 #endif
//  309 
//  310 #if defined ( ZDO_MGMT_JOINDIRECT_REQUEST )
//  311     case MT_ZDO_MGMT_DIRECT_JOIN_REQ:
//  312       MT_ZdoMgmtDirectJoinRequest(pBuf);
//  313       break;
//  314 #endif
//  315 
//  316 #if defined ( ZDO_MGMT_PERMIT_JOIN_REQUEST )
//  317     case MT_ZDO_MGMT_PERMIT_JOIN_REQ:
//  318       MT_ZdoMgmtPermitJoinRequest(pBuf);
//  319       break;
//  320 #endif
//  321 
//  322 #if defined ( ZDO_MGMT_NWKUPDATE_REQUEST )
//  323     case MT_ZDO_MGMT_NWK_UPDATE_REQ:
//  324       MT_ZdoMgmtNwkUpdateRequest(pBuf);
//  325       break;
//  326 #endif 
//  327 
//  328     default:
//  329       status = MT_RPC_ERR_COMMAND_ID;
//  330       break;
//  331   }
//  332 
//  333   return status;
//  334 }
//  335 
//  336 /***************************************************************************************************
//  337  * @fn      MT_ZdoNwkAddrReq
//  338  *
//  339  * @brief   Handle a nwk address request.
//  340  *
//  341  * @param   pData  - MT message data
//  342  *
//  343  * @return  void
//  344  ***************************************************************************************************/
//  345 void MT_ZdoNWKAddressRequest(uint8 *pBuf)
//  346 {
//  347   uint8 cmdId;
//  348   uint8 retValue;
//  349   uint8 reqType;
//  350   uint8 startIndex;
//  351   uint8 *pExtAddr;
//  352 
//  353   /* parse header */
//  354   cmdId = pBuf[MT_RPC_POS_CMD1];
//  355   pBuf += MT_RPC_FRAME_HDR_SZ;
//  356 
//  357   /* parse parameters */
//  358   pExtAddr = pBuf;
//  359   pBuf += Z_EXTADDR_LEN;
//  360 
//  361   /* Request type */
//  362   reqType = *pBuf++;
//  363 
//  364   /* Start index */
//  365   startIndex = *pBuf;
//  366 
//  367   retValue = (uint8)ZDP_NwkAddrReq(pExtAddr, reqType, startIndex, 0);
//  368 
//  369   /* Build and send back the response */
//  370   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  371 }
//  372 
//  373 /***************************************************************************************************
//  374  * @fn      MT_ZdoIEEEAddrRequest
//  375  *
//  376  * @brief   Handle a IEEE address request.
//  377  *
//  378  * @param   pData  - MT message data
//  379  *
//  380  * @return  void
//  381  ***************************************************************************************************/
//  382 void MT_ZdoIEEEAddrRequest (uint8 *pBuf)
//  383 {
//  384   uint8 cmdId;
//  385   uint8 retValue;
//  386   uint16 shortAddr;
//  387   uint8 reqType;
//  388   uint8 startIndex;
//  389 
//  390   /* parse header */
//  391   cmdId = pBuf[MT_RPC_POS_CMD1];
//  392   pBuf += MT_RPC_FRAME_HDR_SZ;
//  393 
//  394   /* Dev address */
//  395   shortAddr = BUILD_UINT16(pBuf[0], pBuf[1]);
//  396   pBuf += 2;
//  397 
//  398   /* request type */
//  399   reqType = *pBuf++;
//  400 
//  401   /* start index */
//  402   startIndex = *pBuf;
//  403 
//  404   retValue = (uint8)ZDP_IEEEAddrReq(shortAddr, reqType, startIndex, 0);
//  405 
//  406   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  407 }
//  408 
//  409 /***************************************************************************************************
//  410  * @fn      MT_ZdoNodeDescRequest
//  411  *
//  412  * @brief   Handle a Node Descriptor request.
//  413  *
//  414  * @param   pData  - MT message data
//  415  *
//  416  * @return  void
//  417  ***************************************************************************************************/
//  418 void MT_ZdoNodeDescRequest (uint8 *pBuf)
//  419 {
//  420   uint8 cmdId;
//  421   uint8 retValue;
//  422   zAddrType_t destAddr;
//  423   uint16 shortAddr;
//  424 
//  425   /* parse header */
//  426   cmdId = pBuf[MT_RPC_POS_CMD1];
//  427   pBuf += MT_RPC_FRAME_HDR_SZ;
//  428 
//  429   /* Destination address */
//  430   destAddr.addrMode = Addr16Bit;
//  431   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
//  432   pBuf += 2;
//  433 
//  434   /* Network address of interest */
//  435   shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
//  436   pBuf += 2;
//  437 
//  438   retValue = (uint8)ZDP_NodeDescReq( &destAddr, shortAddr, 0);
//  439 
//  440   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  441 }
//  442 
//  443 /***************************************************************************************************
//  444  * @fn      MT_ZdoPowerDescRequest
//  445  *
//  446  * @brief   Handle a Power Descriptor request.
//  447  *
//  448  * @param   pData  - MT message data
//  449  *
//  450  * @return  void
//  451  ***************************************************************************************************/
//  452 void MT_ZdoPowerDescRequest(uint8 *pBuf)
//  453 {
//  454   uint8 cmdId;
//  455   uint8 retValue;
//  456   zAddrType_t destAddr;
//  457   uint16 shortAddr;
//  458 
//  459   /* parse header */
//  460   cmdId = pBuf[MT_RPC_POS_CMD1];
//  461   pBuf += MT_RPC_FRAME_HDR_SZ;
//  462 
//  463   /* Dev address */
//  464   destAddr.addrMode = Addr16Bit;
//  465   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
//  466   pBuf += 2;
//  467 
//  468   /* Network address of interest */
//  469   shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
//  470   pBuf += 2;
//  471 
//  472   retValue = (uint8)ZDP_PowerDescReq( &destAddr, shortAddr, 0);
//  473 
//  474   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  475 }
//  476 
//  477 /***************************************************************************************************
//  478  * @fn      MT_ZdoSimpleDescRequest
//  479  *
//  480  * @brief   Handle a Simple Descriptor request.
//  481  *
//  482  * @param   pBuf  - MT message data
//  483  *
//  484  * @return  void
//  485  ***************************************************************************************************/
//  486 void MT_ZdoSimpleDescRequest(uint8 *pBuf)
//  487 {
//  488   uint8 cmdId;
//  489   uint8 retValue;
//  490   uint8 epInt;
//  491   zAddrType_t destAddr;
//  492   uint16 shortAddr;
//  493 
//  494   /* parse header */
//  495   cmdId = pBuf[MT_RPC_POS_CMD1];
//  496   pBuf += MT_RPC_FRAME_HDR_SZ;
//  497 
//  498   /* Dev address */
//  499   destAddr.addrMode = Addr16Bit;
//  500   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
//  501   pBuf += 2;
//  502 
//  503   /* Network address of interest */
//  504   shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
//  505   pBuf += 2;
//  506 
//  507   /* endpoint/interface */
//  508   epInt = *pBuf++;
//  509 
//  510   retValue = (uint8)ZDP_SimpleDescReq( &destAddr, shortAddr, epInt, 0);
//  511 
//  512   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  513 }
//  514 
//  515 /***************************************************************************************************
//  516  * @fn      MT_ZdoSimpleDescRequest
//  517  *
//  518  * @brief   Handle a Active EP request.
//  519  *
//  520  * @param   pBuf  - MT message data
//  521  *
//  522  * @return  void
//  523  ***************************************************************************************************/
//  524 void MT_ZdoActiveEpRequest(uint8 *pBuf)
//  525 {
//  526   uint8 cmdId;
//  527   uint8 retValue;
//  528   zAddrType_t destAddr;
//  529   uint16 shortAddr;
//  530 
//  531   /* parse header */
//  532   cmdId = pBuf[MT_RPC_POS_CMD1];
//  533   pBuf += MT_RPC_FRAME_HDR_SZ;
//  534 
//  535   /* Dev address */
//  536   destAddr.addrMode = Addr16Bit;
//  537   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
//  538   pBuf += 2;
//  539 
//  540   /* Network address of interest */
//  541   shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
//  542   pBuf += 2;
//  543 
//  544   retValue = (uint8)ZDP_ActiveEPReq( &destAddr, shortAddr, 0);
//  545 
//  546   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  547 }
//  548 
//  549 /***************************************************************************************************
//  550  * @fn      MT_ZdoMatchDescRequest
//  551  *
//  552  * @brief   Handle a Match Descriptor request.
//  553  *
//  554  * @param   pBuf  - MT message data
//  555  *
//  556  * @return  void
//  557  ***************************************************************************************************/
//  558 void MT_ZdoMatchDescRequest(uint8 *pBuf)
//  559 {
//  560   uint8 cmdId;
//  561   uint8 retValue = 0;
//  562   uint8 i, numInClusters, numOutClusters;
//  563   uint16 profileId;
//  564   zAddrType_t destAddr;
//  565   uint16 shortAddr;
//  566   uint16 inClusters[MTZDO_MAX_MATCH_CLUSTERS], outClusters[MTZDO_MAX_MATCH_CLUSTERS];
//  567 
//  568   /* parse header */
//  569   cmdId = pBuf[MT_RPC_POS_CMD1];
//  570   pBuf += MT_RPC_FRAME_HDR_SZ;
//  571 
//  572   /* Dev address */
//  573   destAddr.addrMode = Addr16Bit;
//  574   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
//  575   pBuf += 2;
//  576 
//  577   /* Network address of interest */
//  578   shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
//  579   pBuf += 2;
//  580 
//  581   /* Profile ID */
//  582   profileId = BUILD_UINT16( pBuf[0], pBuf[1] );
//  583   pBuf += 2;
//  584 
//  585   /* NumInClusters */
//  586   numInClusters = *pBuf++;
//  587   if ( numInClusters <= MTZDO_MAX_MATCH_CLUSTERS )
//  588   {
//  589     /* IN clusters */
//  590     for ( i = 0; i < numInClusters; i++ )
//  591     {
//  592       inClusters[i] = BUILD_UINT16( pBuf[0], pBuf[1]);
//  593       pBuf += 2;
//  594     }
//  595   }
//  596   else
//  597   {
//  598     retValue = ZDP_INVALID_REQTYPE;
//  599   }
//  600 
//  601   /* NumOutClusters */
//  602   numOutClusters = *pBuf++;
//  603   if ( numOutClusters <= MTZDO_MAX_MATCH_CLUSTERS )
//  604   {
//  605     /* OUT Clusters */
//  606     for ( i = 0; i < numOutClusters; i++ )
//  607     {
//  608       outClusters[i] = BUILD_UINT16( pBuf[0], pBuf[1]);
//  609       pBuf += 2;
//  610     }
//  611   }
//  612   else
//  613   {
//  614     retValue = ZDP_INVALID_REQTYPE;
//  615   }
//  616 
//  617   if ( retValue == 0 )
//  618   {
//  619     retValue = (uint8)ZDP_MatchDescReq( &destAddr, shortAddr, profileId, numInClusters,
//  620                                        inClusters, numOutClusters, outClusters, 0);
//  621   }
//  622 
//  623   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  624 }
//  625 
//  626 /***************************************************************************************************
//  627  * @fn      MT_ZdoComplexDescRequest
//  628  *
//  629  * @brief   Handle a Complex Descriptor request.
//  630  *
//  631  * @param   pBuf  - MT message data
//  632  *
//  633  * @return  void
//  634  ***************************************************************************************************/
//  635 void MT_ZdoComplexDescRequest(uint8 *pBuf)
//  636 {
//  637   uint8 cmdId;
//  638   uint8 retValue;
//  639   zAddrType_t destAddr;
//  640   uint16 shortAddr;
//  641 
//  642   /* parse header */
//  643   cmdId = pBuf[MT_RPC_POS_CMD1];
//  644   pBuf += MT_RPC_FRAME_HDR_SZ;
//  645 
//  646   /* Dev address */
//  647   destAddr.addrMode = Addr16Bit;
//  648   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
//  649   pBuf += 2;
//  650 
//  651   /* Network address of interest */
//  652   shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
//  653   pBuf += 2;
//  654 
//  655   retValue = (uint8)ZDP_ComplexDescReq( &destAddr, shortAddr, 0);
//  656 
//  657   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  658 }
//  659 
//  660 /***************************************************************************************************
//  661  * @fn      MT_ZdoUserDescRequest
//  662  *
//  663  * @brief   Handle a User Descriptor request.
//  664  *
//  665  * @param   pBuf  - MT message data
//  666  *
//  667  * @return  void
//  668  ***************************************************************************************************/
//  669 void MT_ZdoUserDescRequest(uint8 *pBuf)
//  670 {
//  671   uint8 cmdId;
//  672   uint8 retValue;
//  673   zAddrType_t destAddr;
//  674   uint16 shortAddr;
//  675 
//  676   /* parse header */
//  677   cmdId = pBuf[MT_RPC_POS_CMD1];
//  678   pBuf += MT_RPC_FRAME_HDR_SZ;
//  679 
//  680   /* Dev address */
//  681   destAddr.addrMode = Addr16Bit;
//  682   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1]);
//  683   pBuf += 2;
//  684 
//  685   /* Network address of interest */
//  686   shortAddr = BUILD_UINT16( pBuf[0], pBuf[1]);
//  687   pBuf += 2;
//  688 
//  689   retValue = (uint8)ZDP_UserDescReq( &destAddr, shortAddr, 0);
//  690 
//  691   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  692 }
//  693 
//  694 /***************************************************************************************************
//  695  * @fn      MT_ZdoEndDevAnnce
//  696  *
//  697  * @brief   Handle a End Device Announce Descriptor request.
//  698  *
//  699  * @param   pBuf  - MT message data
//  700  *
//  701  * @return  void
//  702  ***************************************************************************************************/
//  703 void MT_ZdoEndDevAnnce(uint8 *pBuf)
//  704 {
//  705   uint8 cmdId;
//  706   uint8 retValue;
//  707   uint16 shortAddr;
//  708   uint8 *pIEEEAddr;
//  709 
//  710   /* parse header */
//  711   cmdId = pBuf[MT_RPC_POS_CMD1];
//  712   pBuf += MT_RPC_FRAME_HDR_SZ;
//  713 
//  714   /* network address */
//  715   shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
//  716   pBuf += 2;
//  717 
//  718   /* extended address */
//  719   pIEEEAddr = pBuf;
//  720   pBuf += Z_EXTADDR_LEN;
//  721 
//  722   retValue = (uint8)ZDP_DeviceAnnce( shortAddr, pIEEEAddr, *pBuf, 0);
//  723 
//  724   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  725 }
//  726 
//  727 /***************************************************************************************************
//  728  * @fn      MT_ZdoUserDescSet
//  729  *
//  730  * @brief   Handle a User Descriptor Set.
//  731  *
//  732  * @param   pBuf  - MT message data
//  733  *
//  734  * @return  void
//  735  ***************************************************************************************************/
//  736 void MT_ZdoUserDescSet(uint8 *pBuf)
//  737 {
//  738   uint8 cmdId;
//  739   uint8 retValue;
//  740   zAddrType_t destAddr;
//  741   uint16 shortAddr;
//  742   UserDescriptorFormat_t userDesc;
//  743 
//  744   /* parse header */
//  745   cmdId = pBuf[MT_RPC_POS_CMD1];
//  746   pBuf += MT_RPC_FRAME_HDR_SZ;
//  747 
//  748   /* Dev address */
//  749   destAddr.addrMode = Addr16Bit;
//  750   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
//  751   pBuf += 2;
//  752 
//  753   /* Network address of interest */
//  754   shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
//  755   pBuf += 2;
//  756 
//  757   /* User descriptor */
//  758   userDesc.len = *pBuf++;
//  759   osal_memcpy( userDesc.desc, pBuf, userDesc.len );
//  760   pBuf += 16;
//  761 
//  762   retValue = (uint8)ZDP_UserDescSet( &destAddr, shortAddr, &userDesc, 0);
//  763 
//  764   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  765 }
//  766 
//  767 /***************************************************************************************************
//  768  * @fn      MT_ZdoServiceDiscRequest
//  769  *
//  770  * @brief   Handle a Server Discovery request.
//  771  *
//  772  * @param   pBuf  - MT message data
//  773  *
//  774  * @return  void
//  775  ***************************************************************************************************/
//  776 void MT_ZdoServiceDiscRequest(uint8 *pBuf)
//  777 {
//  778   uint8 cmdId;
//  779   uint8 retValue;
//  780   uint16 serviceMask;
//  781 
//  782   /* parse header */
//  783   cmdId = pBuf[MT_RPC_POS_CMD1];
//  784   pBuf += MT_RPC_FRAME_HDR_SZ;
//  785 
//  786   /* Service Mask */
//  787   serviceMask = BUILD_UINT16( pBuf[0], pBuf[1]);
//  788   pBuf += 2;
//  789 
//  790   retValue = (uint8)ZDP_ServerDiscReq( serviceMask, 0);
//  791 
//  792   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  793 }
//  794 
//  795 /***************************************************************************************************
//  796  * @fn      MT_ZdoEndDevBindRequest
//  797  *
//  798  * @brief   Handle a End Device Bind request.
//  799  *
//  800  * @param   pBuf  - MT message data
//  801  *
//  802  * @return  void
//  803  ***************************************************************************************************/
//  804 void MT_ZdoEndDevBindRequest(uint8 *pBuf)
//  805 {
//  806   uint8 cmdId;
//  807   uint8 retValue = 0;
//  808   uint8 i, epInt, numInClusters, numOutClusters;
//  809   zAddrType_t destAddr;
//  810   uint16 shortAddr;
//  811   uint16 profileID, inClusters[MTZDO_MAX_ED_BIND_CLUSTERS], outClusters[MTZDO_MAX_ED_BIND_CLUSTERS];
//  812 
//  813   /* parse header */
//  814   cmdId = pBuf[MT_RPC_POS_CMD1];
//  815   pBuf += MT_RPC_FRAME_HDR_SZ;
//  816 
//  817   /* Dev address */
//  818   destAddr.addrMode = Addr16Bit;
//  819   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
//  820   pBuf += 2;
//  821 
//  822   /* Local coordinator of the binding */
//  823   shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
//  824   pBuf += 2;
//  825   
//  826   /* For now, skip past the extended address */
//  827   pBuf += Z_EXTADDR_LEN;
//  828 
//  829   /* Endpoint */
//  830   epInt = *pBuf++;
//  831 
//  832   /* Profile ID */
//  833   profileID = BUILD_UINT16( pBuf[0], pBuf[1] );
//  834   pBuf += 2;
//  835 
//  836   /* NumInClusters */
//  837   numInClusters = *pBuf++;
//  838   if ( numInClusters <= MTZDO_MAX_ED_BIND_CLUSTERS )
//  839   {
//  840     for ( i = 0; i < numInClusters; i++ )
//  841     {
//  842       inClusters[i] = BUILD_UINT16(pBuf[0], pBuf[1]);
//  843       pBuf += 2;
//  844     }
//  845   }
//  846   else
//  847     retValue = ZDP_INVALID_REQTYPE;
//  848 
//  849   /* NumOutClusters */
//  850   numOutClusters = *pBuf++;
//  851   if ( numOutClusters <= MTZDO_MAX_ED_BIND_CLUSTERS )
//  852   {
//  853     for ( i = 0; i < numOutClusters; i++ )
//  854     {
//  855       outClusters[i] = BUILD_UINT16(pBuf[0], pBuf[1]);
//  856       pBuf += 2;
//  857     }
//  858   }
//  859   else
//  860     retValue = ZDP_INVALID_REQTYPE;
//  861   
//  862   if ( retValue == 0 )
//  863   {
//  864     retValue = (uint8)ZDP_EndDeviceBindReq( &destAddr, shortAddr, epInt, profileID,
//  865                                           numInClusters, inClusters, numOutClusters, outClusters, 0);
//  866   }
//  867 
//  868   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  869 }
//  870 
//  871 /***************************************************************************************************
//  872  * @fn      MT_ZdoBindRequest
//  873  *
//  874  * @brief   Handle a Bind request.
//  875  *
//  876  * @param   pBuf  - MT message data
//  877  *
//  878  * @return  void
//  879  ***************************************************************************************************/
//  880 void MT_ZdoBindRequest(uint8 *pBuf)
//  881 {
//  882   uint8 cmdId;
//  883   uint8 retValue;
//  884   zAddrType_t destAddr, devAddr;
//  885   uint8 *pSrcAddr, *ptr;
//  886   uint8 srcEPInt, dstEPInt;
//  887   uint16 clusterID;
//  888 
//  889   /* parse header */
//  890   cmdId = pBuf[MT_RPC_POS_CMD1];
//  891   pBuf += MT_RPC_FRAME_HDR_SZ;
//  892 
//  893   /* Dev address */
//  894   destAddr.addrMode = Addr16Bit;
//  895   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
//  896   pBuf += 2;
//  897 
//  898   /* SrcAddress */
//  899   pSrcAddr = pBuf;
//  900   pBuf += Z_EXTADDR_LEN;
//  901 
//  902   /* SrcEPInt */
//  903   srcEPInt = *pBuf++;
//  904 
//  905   /* ClusterID */
//  906   clusterID = BUILD_UINT16( pBuf[0], pBuf[1]);
//  907   pBuf += 2;
//  908 
//  909   /* Destination Address mode */
//  910   devAddr.addrMode = *pBuf++;
//  911 
//  912   /* Destination Address */
//  913   if ( devAddr.addrMode == Addr64Bit )
//  914   {
//  915     ptr = pBuf;
//  916     osal_cpyExtAddr( devAddr.addr.extAddr, ptr );
//  917   }
//  918   else
//  919   {
//  920     devAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
//  921   }
//  922   /* The short address occupies LSB two bytes */
//  923   pBuf += Z_EXTADDR_LEN;
//  924 
//  925   /* DstEPInt */
//  926   dstEPInt = *pBuf;
//  927 
//  928   retValue = (uint8)ZDP_BindReq( &destAddr, pSrcAddr, srcEPInt, clusterID, &devAddr, dstEPInt, 0);
//  929 
//  930   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  931 }
//  932 
//  933 /***************************************************************************************************
//  934  * @fn      MT_ZdoUnbindRequest
//  935  *
//  936  * @brief   Handle a Unbind request.
//  937  *
//  938  * @param   pBuf  - MT message data
//  939  *
//  940  * @return  void
//  941  ***************************************************************************************************/
//  942 void MT_ZdoUnbindRequest(uint8 *pBuf)
//  943 {
//  944   uint8 cmdId;
//  945   uint8 retValue;
//  946   zAddrType_t destAddr, devAddr;
//  947   uint8 *pSrcAddr, *ptr;
//  948   uint8 srcEPInt, dstEPInt;
//  949   uint16 clusterID;
//  950 
//  951   /* parse header */
//  952   cmdId = pBuf[MT_RPC_POS_CMD1];
//  953   pBuf += MT_RPC_FRAME_HDR_SZ;
//  954 
//  955   /* dev address */
//  956   destAddr.addrMode = Addr16Bit;
//  957   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
//  958   pBuf += 2;
//  959 
//  960   /* SrcAddress */
//  961   pSrcAddr = pBuf;
//  962   pBuf += Z_EXTADDR_LEN;
//  963 
//  964   /* SrcEPInt */
//  965   srcEPInt = *pBuf++;
//  966 
//  967   /* ClusterID */
//  968   clusterID = BUILD_UINT16( pBuf[0], pBuf[1]);
//  969   pBuf += 2;
//  970 
//  971   /* Destination Address mode */
//  972   devAddr.addrMode = *pBuf++;
//  973 
//  974   /* Destination Address */
//  975   if ( devAddr.addrMode == Addr64Bit )
//  976   {
//  977     ptr = pBuf;
//  978     osal_cpyExtAddr( devAddr.addr.extAddr, ptr );
//  979   }
//  980   else
//  981   {
//  982     devAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
//  983   }
//  984   /* The short address occupies LSB two bytes */
//  985   pBuf += Z_EXTADDR_LEN;
//  986 
//  987   /* dstEPInt */
//  988   dstEPInt = *pBuf;
//  989 
//  990   retValue = (uint8)ZDP_UnbindReq( &destAddr, pSrcAddr, srcEPInt, clusterID, &devAddr, dstEPInt, 0);
//  991 
//  992   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  993 }
//  994 
//  995 /***************************************************************************************************
//  996  * @fn      MT_ZdoStartupFromApp
//  997  *
//  998  * @brief   Handle a Startup from App request.
//  999  *
// 1000  * @param   pBuf  - MT message data
// 1001  *
// 1002  * @return  void
// 1003  ***************************************************************************************************/
// 1004 void MT_ZdoStartupFromApp(uint8 *pBuf)
// 1005 {
// 1006   uint8 cmdId;
// 1007   uint8 retValue;
// 1008 
// 1009   /* parse header */
// 1010   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1011   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1012 
// 1013   retValue = ZDOInitDevice(100);
// 1014 
// 1015   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1016 }
// 1017 
// 1018 #if defined (MT_ZDO_MGMT)
// 1019 /***************************************************************************************************
// 1020  * @fn      MT_ZdoMgmtNwkDiscRequest
// 1021  *
// 1022  * @brief   Handle a Mgmt Nwk Discovery request.
// 1023  *
// 1024  * @param   pBuf  - MT message data
// 1025  *
// 1026  * @return  void
// 1027  ***************************************************************************************************/
// 1028 void MT_ZdoMgmtNwkDiscRequest(uint8 *pBuf)
// 1029 {
// 1030   uint8 cmdId;
// 1031   uint8 retValue;
// 1032   zAddrType_t destAddr;
// 1033   uint32 scanChannels;
// 1034   uint8 scanDuration, startIndex;
// 1035 
// 1036   /* parse header */
// 1037   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1038   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1039 
// 1040   /* Dev address */
// 1041   destAddr.addrMode = Addr16Bit;
// 1042   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
// 1043   pBuf += 2;
// 1044 
// 1045   /* Scan Channels */
// 1046   scanChannels = BUILD_UINT32( pBuf[0], pBuf[1], pBuf[2], pBuf[3] );
// 1047   pBuf += 4;
// 1048 
// 1049   /* Scan Duration */
// 1050   scanDuration = *pBuf++;
// 1051 
// 1052   /* Start Index */
// 1053   startIndex = *pBuf;
// 1054 
// 1055   retValue = (uint8)ZDP_MgmtNwkDiscReq( &destAddr, scanChannels, scanDuration, startIndex, 0);
// 1056 
// 1057   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1058 }
// 1059 
// 1060 /***************************************************************************************************
// 1061  * @fn      MT_ZdoMgmtLqiRequest
// 1062  *
// 1063  * @brief   Handle a Mgmt Lqi request.
// 1064  *
// 1065  * @param   pBuf  - MT message data
// 1066  *
// 1067  * @return  void
// 1068  ***************************************************************************************************/
// 1069 void MT_ZdoMgmtLqiRequest(uint8 *pBuf)
// 1070 {
// 1071   uint8 cmdId;
// 1072   uint8 retValue;
// 1073   zAddrType_t destAddr;
// 1074   uint8 startIndex;
// 1075 
// 1076   /* parse header */
// 1077   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1078   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1079 
// 1080   /* Dev address */
// 1081   destAddr.addrMode = Addr16Bit;
// 1082   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
// 1083   pBuf += 2;
// 1084 
// 1085   /* Start Index */
// 1086   startIndex = *pBuf;
// 1087 
// 1088   retValue = (uint8)ZDP_MgmtLqiReq( &destAddr, startIndex, 0);
// 1089 
// 1090   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1091 }
// 1092 
// 1093 /***************************************************************************************************
// 1094  * @fn      MT_ZdoMgmtRtgRequest
// 1095  *
// 1096  * @brief   Handle a Mgmt Rtg request.
// 1097  *
// 1098  * @param   pBuf  - MT message data
// 1099  *
// 1100  * @return  void
// 1101  ***************************************************************************************************/
// 1102 void MT_ZdoMgmtRtgRequest(uint8 *pBuf)
// 1103 {
// 1104   uint8 cmdId;
// 1105   uint8 retValue;
// 1106   zAddrType_t destAddr;
// 1107   uint8 startIndex;
// 1108 
// 1109   /* parse header */
// 1110   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1111   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1112 
// 1113   /* Dev Address */
// 1114   destAddr.addrMode = Addr16Bit;
// 1115   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1]);
// 1116   pBuf += 2;
// 1117 
// 1118   /* Start Index */
// 1119   startIndex = *pBuf;
// 1120 
// 1121   retValue = (byte)ZDP_MgmtRtgReq( &destAddr, startIndex, 0);
// 1122 
// 1123   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1124 }
// 1125 
// 1126 /***************************************************************************************************
// 1127  * @fn      MT_ZdoMgmtBindRequest
// 1128  *
// 1129  * @brief   Handle a Mgmt Bind request.
// 1130  *
// 1131  * @param   pBuf  - MT message data
// 1132  *
// 1133  * @return  void
// 1134  ***************************************************************************************************/
// 1135 void MT_ZdoMgmtBindRequest(uint8 *pBuf)
// 1136 {
// 1137   uint8 cmdId;
// 1138   uint8 retValue;
// 1139   zAddrType_t destAddr;
// 1140   uint8 startIndex;
// 1141 
// 1142   /* parse header */
// 1143   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1144   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1145 
// 1146   /* Dev Address */
// 1147   destAddr.addrMode = Addr16Bit;
// 1148   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
// 1149   pBuf += 2;
// 1150 
// 1151   /* Start Index */
// 1152   startIndex = *pBuf;
// 1153 
// 1154   retValue = (uint8)ZDP_MgmtBindReq( &destAddr, startIndex, 0);
// 1155 
// 1156   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1157 }
// 1158 
// 1159 /***************************************************************************************************
// 1160  * @fn      MT_ZdoMgmtLeaveRequest
// 1161  *
// 1162  * @brief   Handle a Mgmt Leave request.
// 1163  *
// 1164  * @param   pBuf  - MT message data
// 1165  *
// 1166  * @return  void
// 1167  ***************************************************************************************************/
// 1168 void MT_ZdoMgmtLeaveRequest(uint8 *pBuf)
// 1169 {
// 1170   uint8 cmdId;
// 1171   uint8 retValue;
// 1172   zAddrType_t destAddr;
// 1173   uint8 *pIEEEAddr;
// 1174   uint8 removeChildren, rejoin;
// 1175 
// 1176   /* parse header */
// 1177   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1178   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1179 
// 1180   /* Destination Address */
// 1181   destAddr.addrMode = Addr16Bit;
// 1182   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
// 1183   pBuf += 2;
// 1184 
// 1185   /* IEEE address */
// 1186   pIEEEAddr = pBuf;
// 1187   pBuf += Z_EXTADDR_LEN;
// 1188 
// 1189   /* Remove Children */
// 1190   removeChildren = *pBuf++;
// 1191 
// 1192   /* Rejoin */
// 1193   rejoin = *pBuf;
// 1194 
// 1195   retValue = (byte)ZDP_MgmtLeaveReq( &destAddr, pIEEEAddr, removeChildren, rejoin, 0);
// 1196 
// 1197   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1198 }
// 1199 
// 1200 
// 1201 /***************************************************************************************************
// 1202  * @fn      MT_ZdoMgmtDirectJoinRequest
// 1203  *
// 1204  * @brief   Handle a Mgmt Direct Join request.
// 1205  *
// 1206  * @param   pBuf  - MT message data
// 1207  *
// 1208  * @return  void
// 1209  ***************************************************************************************************/
// 1210 void MT_ZdoMgmtDirectJoinRequest(uint8 *pBuf)
// 1211 {
// 1212   uint8 cmdId;
// 1213   uint8 retValue;
// 1214   zAddrType_t destAddr;
// 1215   uint8 *deviceAddr;
// 1216   uint8 capInfo;
// 1217 
// 1218   /* parse header */
// 1219   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1220   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1221 
// 1222   /* Destination Address */
// 1223   destAddr.addrMode = Addr16Bit;
// 1224   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
// 1225   pBuf += 2;
// 1226 
// 1227   /* Device Address */
// 1228   deviceAddr = pBuf;
// 1229   pBuf += Z_EXTADDR_LEN;
// 1230 
// 1231   /* Capability information */
// 1232   capInfo = *pBuf;
// 1233 
// 1234   retValue = (uint8)ZDP_MgmtDirectJoinReq( &destAddr, deviceAddr, capInfo, 0);
// 1235 
// 1236   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1237 }
// 1238 
// 1239 /***************************************************************************************************
// 1240  * @fn      MT_ZdoMgmtPermitJoinRequest
// 1241  *
// 1242  * @brief   Handle a Mgmt Permit Join request.
// 1243  *
// 1244  * @param   pBuf  - MT message data
// 1245  *
// 1246  * @return  void
// 1247  ***************************************************************************************************/
// 1248 void MT_ZdoMgmtPermitJoinRequest(uint8 *pBuf)
// 1249 {
// 1250   uint8 cmdId;
// 1251   uint8 retValue;
// 1252   zAddrType_t destAddr;
// 1253   uint8 duration, tcSignificance;
// 1254 
// 1255   /* parse header */
// 1256   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1257   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1258 
// 1259   /* Destination Address */
// 1260   destAddr.addrMode = Addr16Bit;
// 1261   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
// 1262   pBuf += 2;
// 1263 
// 1264   /* Duration */
// 1265   duration = *pBuf++;
// 1266 
// 1267   /* Trust center significance */
// 1268   tcSignificance = *pBuf;
// 1269 
// 1270   retValue = (byte)ZDP_MgmtPermitJoinReq( &destAddr, duration, tcSignificance, 0);
// 1271 
// 1272   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1273 }
// 1274 
// 1275 /***************************************************************************************************
// 1276  * @fn      MT_ZdoMgmtNwkUpdateRequest
// 1277  *
// 1278  * @brief   Handle a Mgmt Nwk Update request.
// 1279  *
// 1280  * @param   pBuf  - MT message data
// 1281  *
// 1282  * @return  void
// 1283  ***************************************************************************************************/
// 1284 void MT_ZdoMgmtNwkUpdateRequest(uint8 *pBuf)
// 1285 {
// 1286   uint8 cmdId;
// 1287   uint8 retValue;
// 1288   zAddrType_t destAddr;
// 1289   uint32 channelMask;
// 1290   uint8 scanDuration, scanCount;
// 1291   uint16 nwkManagerAddr;
// 1292 
// 1293     /* parse header */
// 1294   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1295   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1296 
// 1297   /* Destination address */
// 1298   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
// 1299   pBuf += 2;
// 1300 
// 1301   /* Destination address mode */
// 1302   destAddr.addrMode = *pBuf++;
// 1303 
// 1304   channelMask = BUILD_UINT32( pBuf[0], pBuf[1], pBuf[2], pBuf[3]);
// 1305   pBuf += 4;
// 1306 
// 1307   /* Scan duration */
// 1308   scanDuration = *pBuf++;
// 1309 
// 1310   /* Scan count */
// 1311   scanCount = *pBuf++;
// 1312 
// 1313   /* NWK manager address */
// 1314   nwkManagerAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
// 1315 
// 1316   /* Send the Management Network Update request */
// 1317   retValue = (uint8)ZDP_MgmtNwkUpdateReq( &destAddr, channelMask, scanDuration,
// 1318                                           scanCount, _NIB.nwkUpdateId+1, nwkManagerAddr );
// 1319 
// 1320   /*
// 1321     Since we don't recevied our own broadcast messages, we should
// 1322     send a unicast copy of the message to ourself.
// 1323   */
// 1324   if ( destAddr.addrMode == AddrBroadcast )
// 1325   {
// 1326     destAddr.addrMode = Addr16Bit;
// 1327     destAddr.addr.shortAddr = _NIB.nwkDevAddress;
// 1328     retValue = (uint8) ZDP_MgmtNwkUpdateReq( &destAddr, channelMask, scanDuration,
// 1329                                              scanCount, _NIB.nwkUpdateId+1, nwkManagerAddr );
// 1330   }
// 1331 
// 1332   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1333 }
// 1334 #endif /* MT_ZDO_MGMT */
// 1335 
// 1336 #endif /* MT_ZDO_FUNC */
// 1337 
// 1338 
// 1339 /***************************************************************************************************
// 1340  * Callback handling function
// 1341  ***************************************************************************************************/
// 1342 
// 1343 #if defined (MT_ZDO_CB_FUNC)
// 1344 /***************************************************************************************************
// 1345  * @fn     MT_ZdoDirectCB()
// 1346  *
// 1347  * @brief  ZDO direct callback.  Build an MT message directly from the
// 1348  *         over-the-air ZDO message.
// 1349  *
// 1350  * @param  pData - Incoming AF frame.
// 1351  *
// 1352  * @return  none
// 1353  ***************************************************************************************************/
// 1354 void MT_ZdoDirectCB( afIncomingMSGPacket_t *pData,  zdoIncomingMsg_t *inMsg )
// 1355 {
// 1356   uint8 dataLen;
// 1357   uint8 msgLen;
// 1358   uint8 *pBuf;
// 1359   uint8 *p;
// 1360   uint8 id;
// 1361   
// 1362   // Is the message an exception or not a response?
// 1363   if ( ((pData->clusterId & ZDO_RESPONSE_BIT) == 0) 
// 1364                       || MT_ZdoHandleExceptions( pData, inMsg ) )
// 1365   {
// 1366     // Handled somewhere else or not needed
// 1367     return;
// 1368   }
// 1369 
// 1370   /* map cluster ID to MT message */
// 1371   id = (uint8) pData->clusterId;
// 1372   id = mtZdoCluster2Rsp[id >> 4][id & 0x0F];
// 1373 
// 1374   /* ZDO data starts after one-byte sequence number */
// 1375   dataLen = pData->cmd.DataLength - 1;
// 1376 
// 1377   /* msg buffer length includes two bytes for srcAddr */
// 1378   msgLen = dataLen + sizeof(uint16);
// 1379 
// 1380   /* get buffer */
// 1381   if ((p = pBuf = MT_TransportAlloc(((uint8)MT_RPC_CMD_AREQ |(uint8)MT_RPC_SYS_ZDO), msgLen)) != NULL)
// 1382   {
// 1383     /* build header */
// 1384     *p++ = msgLen;
// 1385     *p++ = (uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO;
// 1386     *p++ = id;
// 1387 
// 1388     /* build srcAddr */
// 1389     *p++ = LO_UINT16(pData->srcAddr.addr.shortAddr);
// 1390     *p++ = HI_UINT16(pData->srcAddr.addr.shortAddr);
// 1391 
// 1392     /* copy ZDO data, skipping one-byte sequence number */
// 1393     osal_memcpy(p, (pData->cmd.Data + 1), dataLen);
// 1394 
// 1395     /* send it */
// 1396     MT_TransportSend(pBuf);
// 1397   }
// 1398 }
// 1399 
// 1400 /***************************************************************************************************
// 1401  * @fn     MT_ZdoHandleExceptions()
// 1402  *
// 1403  * @brief  Handles all messages that are an expection to the generic MT ZDO Response.
// 1404  *
// 1405  * @param  pData - Incoming AF frame.
// 1406  *
// 1407  * @return  TRUE if handled by this function, FALSE if not
// 1408  ***************************************************************************************************/
// 1409 uint8 MT_ZdoHandleExceptions( afIncomingMSGPacket_t *pData, zdoIncomingMsg_t *inMsg )
// 1410 {
// 1411   uint8 ret = TRUE;
// 1412   ZDO_NwkIEEEAddrResp_t *nwkRsp = NULL;
// 1413   ZDO_DeviceAnnce_t devAnnce;
// 1414   uint8 doDefault = FALSE;
// 1415   
// 1416   switch ( inMsg->clusterID )
// 1417   {
// 1418     case NWK_addr_rsp:
// 1419     case IEEE_addr_rsp:
// 1420       nwkRsp = ZDO_ParseAddrRsp( inMsg );
// 1421       MT_ZdoAddrRspCB( nwkRsp, inMsg->clusterID );
// 1422       if ( nwkRsp )
// 1423         osal_mem_free( nwkRsp );
// 1424       break;
// 1425       
// 1426     case Device_annce:
// 1427       ZDO_ParseDeviceAnnce( inMsg, &devAnnce );
// 1428       MT_ZdoEndDevAnnceCB( &devAnnce, inMsg->srcAddr.addr.shortAddr );
// 1429       break;
// 1430       
// 1431     case Simple_Desc_rsp:
// 1432       if ( pData->cmd.DataLength > 5 )
// 1433         ret = FALSE;
// 1434       else
// 1435         doDefault = TRUE;        
// 1436       break;  
// 1437       
// 1438     default:
// 1439       ret = FALSE;
// 1440       break;
// 1441   }
// 1442   
// 1443   if ( doDefault )
// 1444   {
// 1445     ret = FALSE;
// 1446     pData->clusterId = 0x26;
// 1447     pData->cmd.DataLength = 2;
// 1448   }
// 1449   
// 1450   return ( ret );
// 1451 }
// 1452 
// 1453 /***************************************************************************************************
// 1454  * @fn      MT_ZdoAddrRspCB
// 1455  *
// 1456  * @brief   Handle IEEE or nwk address response OSAL message from ZDO.
// 1457  *
// 1458  * @param   pMsg  - Message data
// 1459  *
// 1460  * @return  void
// 1461  */
// 1462 void MT_ZdoAddrRspCB( ZDO_NwkIEEEAddrResp_t *pMsg, uint16 clusterID )
// 1463 {
// 1464   uint8   listLen;
// 1465   uint8   msgLen;
// 1466   uint8   *pBuf;
// 1467   uint8   *p;
// 1468 
// 1469   /* both ZDO_NwkAddrResp_t and ZDO_IEEEAddrResp_t must be the same */
// 1470 
// 1471   /* get length, sanity check length */
// 1472   listLen = pMsg->numAssocDevs;
// 1473   
// 1474   /* calculate msg length */
// 1475   msgLen = MT_ZDO_ADDR_RSP_LEN + (listLen * sizeof(uint16));
// 1476 
// 1477   /* get buffer */
// 1478   if ((p = pBuf = MT_TransportAlloc(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO), msgLen)) != NULL)
// 1479   {
// 1480     /* build header */
// 1481     *p++ = msgLen;
// 1482     *p++ = (uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO;
// 1483     *p++ = (clusterID == IEEE_addr_rsp) ?
// 1484            MT_ZDO_IEEE_ADDR_RSP : MT_ZDO_NWK_ADDR_RSP;
// 1485 
// 1486     /* build msg parameters */
// 1487 
// 1488     *p++ = pMsg->status;
// 1489 
// 1490     osal_cpyExtAddr(p, pMsg->extAddr);
// 1491     p += Z_EXTADDR_LEN;
// 1492 
// 1493     *p++ = LO_UINT16(pMsg->nwkAddr);
// 1494     *p++ = HI_UINT16(pMsg->nwkAddr);
// 1495 
// 1496     *p++ = pMsg->startIndex;
// 1497 
// 1498     *p++ = listLen;
// 1499 
// 1500     MT_Word2Buf(p, pMsg->devList, listLen);
// 1501 
// 1502     /* send it */
// 1503     MT_TransportSend(pBuf);
// 1504   }
// 1505 }
// 1506 
// 1507 /***************************************************************************************************
// 1508  * @fn      MT_ZdoEndDevAnnceCB
// 1509  *
// 1510  * @brief   Handle end device announce OSAL message from ZDO.
// 1511  *
// 1512  * @param   pMsg  - Message data
// 1513  *
// 1514  * @return  void
// 1515  */
// 1516 void MT_ZdoEndDevAnnceCB( ZDO_DeviceAnnce_t *pMsg, uint16 srcAddr )
// 1517 {
// 1518   uint8 *pBuf;
// 1519   uint8 *p;
// 1520 
// 1521   if ((p = pBuf = MT_TransportAlloc(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
// 1522                     MT_ZDO_END_DEVICE_ANNCE_IND_LEN)) != NULL)
// 1523   {
// 1524     *p++ = MT_ZDO_END_DEVICE_ANNCE_IND_LEN;
// 1525     *p++ = (uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO;
// 1526     *p++ = MT_ZDO_END_DEVICE_ANNCE_IND;
// 1527 
// 1528     *p++ = LO_UINT16(srcAddr);
// 1529     *p++ = HI_UINT16(srcAddr);
// 1530 
// 1531     *p++ = LO_UINT16(pMsg->nwkAddr);
// 1532     *p++ = HI_UINT16(pMsg->nwkAddr);
// 1533 
// 1534     osal_cpyExtAddr(p, pMsg->extAddr);
// 1535     p += Z_EXTADDR_LEN;
// 1536 
// 1537     *p = pMsg->capabilities;
// 1538 
// 1539     MT_TransportSend(pBuf);
// 1540   }
// 1541 }
// 1542 #endif // MT_ZDO_CB_FUNC
// 1543 /***************************************************************************************************
// 1544 ***************************************************************************************************/
// 1545 
// 1546 #endif   /*ZDO Command Processing in MT*/
// 
// 
// 0 bytes of memory
//
//Errors: none
//Warnings: none
