///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.3.10338/W32 for 8051        03/Jul/2018  14:53:09 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Components\mac\low_level\srf04\mac_rx.c          /
//    Command line       =  -f D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_Ð /
//                          Þ¸Ä\Projects\zstack\Utilities\SerialApp\CC2530DB\ /
//                          ..\..\..\Tools\CC2530DB\f8wRouter.cfg             /
//                          (-DCPU32MHZ -DROOT=__near_func                    /
//                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE -DRTR_NWK        /
//                          -DBLINK_LEDS) -f D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼ /
//                          «\WSN_ZigBee_ÐÞ¸Ä\Projects\zstack\Utilities\Seria /
//                          lApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.c /
//                          fg (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR  /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          "-DCONST=const __code" -DGENERIC=__generic        /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµ /
//                          Ï°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\Components\mac\low_level\ /
//                          srf04\mac_rx.c -D ZIGBEEPRO -D HAL_UART=TRUE -D   /
//                          SERIAL_APP_PORT=0 -D LCD_SUPPORTED -lC            /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\Rou /
//                          terEB-Pro\List\ -lA D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ /
//                          ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\Projects\zstack\Utilities\Se /
//                          rialApp\CC2530DB\RouterEB-Pro\List\               /
//                          --diag_suppress Pe001,Pa010 -o                    /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\Rou /
//                          terEB-Pro\Obj\ -e --debug --core=plain            /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 8 -I D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµ /
//                          Ï°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\Projects\zstack\Utilities /
//                          \SerialApp\CC2530DB\ -I                           /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          SOURCE\ -I D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ /
//                          ZigBee_ÐÞ¸Ä\Projects\zstack\Utilities\SerialApp\C /
//                          C2530DB\..\..\..\ZMAIN\TI2530DB\ -I               /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\MT\ -I                     /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\HAL\INCLUDE\ -I            /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\ -I    /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\ -I         /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\OSAL\INCLUDE\ -I           /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\STACK\AF\ -I               /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\STACK\NWK\ -I              /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\STACK\SEC\ -I              /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\STACK\SAPI\ -I             /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\STACK\SYS\ -I              /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\STACK\ZDO\ -I              /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\ZMAC\F8W\ -I               /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\ZMAC\ -I                   /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\SERVICES\SADDR\ -I         /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\SERVICES\SDATA\ -I         /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\MAC\INCLUDE\ -I            /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\ -I         /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\ -I    /
//                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE /
//                          _CHIP\ -Ohz --require_prototypes                  /
//    List file          =  D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\Rou /
//                          terEB-Pro\List\mac_rx.s51                         /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME mac_rx

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?CALL_IND
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_MOV_TO_X
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_Z

        PUBLIC ??macRxAckTxDoneCallback?relay
        FUNCTION ??macRxAckTxDoneCallback?relay,0203H
        PUBLIC ??macRxFifoOverflowIsr?relay
        FUNCTION ??macRxFifoOverflowIsr?relay,0203H
        PUBLIC ??macRxHaltCleanup?relay
        FUNCTION ??macRxHaltCleanup?relay,0203H
        PUBLIC ??macRxInit?relay
        FUNCTION ??macRxInit?relay,0203H
        PUBLIC ??macRxPromiscuousMode?relay
        FUNCTION ??macRxPromiscuousMode?relay,0203H
        PUBLIC ??macRxRadioPowerUpInit?relay
        FUNCTION ??macRxRadioPowerUpInit?relay,0203H
        PUBLIC ??macRxThresholdIsr?relay
        FUNCTION ??macRxThresholdIsr?relay,0203H
        PUBLIC ??macRxTxReset?relay
        FUNCTION ??macRxTxReset?relay,0203H
        FUNCTION ??rxAddrIsr?relay,0203H
        FUNCTION ??rxDiscardFrame?relay,0203H
        FUNCTION ??rxDiscardIsr?relay,0203H
        FUNCTION ??rxDone?relay,0203H
        FUNCTION ??rxFcsIsr?relay,0203H
        FUNCTION ??rxHaltCleanupFinalStep?relay,0203H
        FUNCTION ??rxPayloadIsr?relay,0203H
        FUNCTION ??rxPostRxUpdates?relay,0203H
        FUNCTION ??rxPrepPayload?relay,0203H
        FUNCTION ??rxStartIsr?relay,0203H
        PUBWEAK RFIRQF0
        PUBWEAK RFIRQF1
        PUBWEAK RFST
        PUBWEAK S1CON
        PUBWEAK _A_IEN0
        PUBLIC macRxAckTxDoneCallback
        FUNCTION macRxAckTxDoneCallback,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC macRxActive
        PUBLIC macRxFifoOverflowIsr
        FUNCTION macRxFifoOverflowIsr,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC macRxFilter
        PUBLIC macRxHaltCleanup
        FUNCTION macRxHaltCleanup,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC macRxInit
        FUNCTION macRxInit,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC macRxOutgoingAckFlag
        PUBLIC macRxPromiscuousMode
        FUNCTION macRxPromiscuousMode,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC macRxRadioPowerUpInit
        FUNCTION macRxRadioPowerUpInit,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC macRxThresholdIsr
        FUNCTION macRxThresholdIsr,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC macRxTxReset
        FUNCTION macRxTxReset,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        FUNCTION rxAddrIsr,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        FUNCTION rxDiscardFrame,021203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        FUNCTION rxDiscardIsr,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 16, STACK
        FUNCTION rxDone,021203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        FUNCTION rxFcsIsr,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        FUNCTION rxHaltCleanupFinalStep,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        FUNCTION rxPayloadIsr,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        FUNCTION rxPostRxUpdates,021203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        FUNCTION rxPrepPayload,0203H
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        FUNCTION rxStartIsr,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 14, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
macRxHardDisable    SYMBOL "macRxHardDisable"
macDataRxMemFree    SYMBOL "macDataRxMemFree"
halAssertHandler    SYMBOL "halAssertHandler"
macCspForceTxDoneIfPending SYMBOL "macCspForceTxDoneIfPending"
macMemReadRxFifo    SYMBOL "macMemReadRxFifo"
macRadioComputeLQI  SYMBOL "macRadioComputeLQI"
macTxAckReceivedCallback SYMBOL "macTxAckReceivedCallback"
macTxAckNotReceivedCallback SYMBOL "macTxAckNotReceivedCallback"
macDataRxMemAlloc   SYMBOL "macDataRxMemAlloc"
macRxCheckMACPendingCallback SYMBOL "macRxCheckMACPendingCallback"
MAC_SrcMatchCheckAllPending SYMBOL "MAC_SrcMatchCheckAllPending"
macRxCheckPendingCallback SYMBOL "macRxCheckPendingCallback"
macMcuOverflowCapture SYMBOL "macMcuOverflowCapture"
macMcuTimerCapture  SYMBOL "macMcuTimerCapture"
sAddrExtCpy         SYMBOL "sAddrExtCpy"
macRxOffRequest     SYMBOL "macRxOffRequest"
MAC_SrcMatchCheckResult SYMBOL "MAC_SrcMatchCheckResult"
macRxCompleteCallback SYMBOL "macRxCompleteCallback"
macRadioUpdateTxPower SYMBOL "macRadioUpdateTxPower"
macTxStartQueuedFrame SYMBOL "macTxStartQueuedFrame"
macRxOff            SYMBOL "macRxOff"
macRxOnRequest      SYMBOL "macRxOnRequest"
??MAC_SrcMatchCheckAllPending?relay SYMBOL "?relay", MAC_SrcMatchCheckAllPending
??MAC_SrcMatchCheckResult?relay SYMBOL "?relay", MAC_SrcMatchCheckResult
??halAssertHandler?relay SYMBOL "?relay", halAssertHandler
??macCspForceTxDoneIfPending?relay SYMBOL "?relay", macCspForceTxDoneIfPending
??macDataRxMemAlloc?relay SYMBOL "?relay", macDataRxMemAlloc
??macDataRxMemFree?relay SYMBOL "?relay", macDataRxMemFree
??macMcuOverflowCapture?relay SYMBOL "?relay", macMcuOverflowCapture
??macMcuTimerCapture?relay SYMBOL "?relay", macMcuTimerCapture
??macMemReadRxFifo?relay SYMBOL "?relay", macMemReadRxFifo
??macRadioComputeLQI?relay SYMBOL "?relay", macRadioComputeLQI
??macRadioUpdateTxPower?relay SYMBOL "?relay", macRadioUpdateTxPower
??macRxCheckMACPendingCallback?relay SYMBOL "?relay", macRxCheckMACPendingCallback
??macRxCheckPendingCallback?relay SYMBOL "?relay", macRxCheckPendingCallback
??macRxCompleteCallback?relay SYMBOL "?relay", macRxCompleteCallback
??macRxHardDisable?relay SYMBOL "?relay", macRxHardDisable
??macRxOff?relay    SYMBOL "?relay", macRxOff
??macRxOffRequest?relay SYMBOL "?relay", macRxOffRequest
??macRxOnRequest?relay SYMBOL "?relay", macRxOnRequest
??macTxAckNotReceivedCallback?relay SYMBOL "?relay", macTxAckNotReceivedCallback
??macTxAckReceivedCallback?relay SYMBOL "?relay", macTxAckReceivedCallback
??macTxStartQueuedFrame?relay SYMBOL "?relay", macTxStartQueuedFrame
??sAddrExtCpy?relay SYMBOL "?relay", sAddrExtCpy
macRxAckTxDoneCallback SYMBOL "macRxAckTxDoneCallback"
??macRxAckTxDoneCallback?relay SYMBOL "?relay", macRxAckTxDoneCallback
macRxFifoOverflowIsr SYMBOL "macRxFifoOverflowIsr"
??macRxFifoOverflowIsr?relay SYMBOL "?relay", macRxFifoOverflowIsr
macRxHaltCleanup    SYMBOL "macRxHaltCleanup"
??macRxHaltCleanup?relay SYMBOL "?relay", macRxHaltCleanup
macRxInit           SYMBOL "macRxInit"
??macRxInit?relay   SYMBOL "?relay", macRxInit
macRxPromiscuousMode SYMBOL "macRxPromiscuousMode"
??macRxPromiscuousMode?relay SYMBOL "?relay", macRxPromiscuousMode
macRxRadioPowerUpInit SYMBOL "macRxRadioPowerUpInit"
??macRxRadioPowerUpInit?relay SYMBOL "?relay", macRxRadioPowerUpInit
macRxThresholdIsr   SYMBOL "macRxThresholdIsr"
??macRxThresholdIsr?relay SYMBOL "?relay", macRxThresholdIsr
macRxTxReset        SYMBOL "macRxTxReset"
??macRxTxReset?relay SYMBOL "?relay", macRxTxReset

        EXTERN macRxHardDisable
        FUNCTION macRxHardDisable,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN macDataRxMemFree
        FUNCTION macDataRxMemFree,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN halAssertHandler
        FUNCTION halAssertHandler,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN macCspForceTxDoneIfPending
        FUNCTION macCspForceTxDoneIfPending,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN macMemReadRxFifo
        FUNCTION macMemReadRxFifo,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN macRadioComputeLQI
        FUNCTION macRadioComputeLQI,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN macTxAckReceivedCallback
        FUNCTION macTxAckReceivedCallback,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN macTxAckNotReceivedCallback
        FUNCTION macTxAckNotReceivedCallback,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN macDataRxMemAlloc
        FUNCTION macDataRxMemAlloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN macRxCheckMACPendingCallback
        FUNCTION macRxCheckMACPendingCallback,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MAC_SrcMatchCheckAllPending
        FUNCTION MAC_SrcMatchCheckAllPending,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN macRxCheckPendingCallback
        FUNCTION macRxCheckPendingCallback,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN macMcuOverflowCapture
        FUNCTION macMcuOverflowCapture,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN macMcuTimerCapture
        FUNCTION macMcuTimerCapture,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN sAddrExtCpy
        FUNCTION sAddrExtCpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN macRxOffRequest
        FUNCTION macRxOffRequest,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MAC_SrcMatchCheckResult
        FUNCTION MAC_SrcMatchCheckResult,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN macRxCompleteCallback
        FUNCTION macRxCompleteCallback,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN macRadioUpdateTxPower
        FUNCTION macRadioUpdateTxPower,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN macTxStartQueuedFrame
        FUNCTION macTxStartQueuedFrame,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN macRxOff
        FUNCTION macRxOff,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN macRxOnRequest
        FUNCTION macRxOnRequest,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??MAC_SrcMatchCheckAllPending?relay
        FUNCTION ??MAC_SrcMatchCheckAllPending?relay,00H
        EXTERN ??MAC_SrcMatchCheckResult?relay
        FUNCTION ??MAC_SrcMatchCheckResult?relay,00H
        EXTERN ??halAssertHandler?relay
        FUNCTION ??halAssertHandler?relay,00H
        EXTERN ??macCspForceTxDoneIfPending?relay
        FUNCTION ??macCspForceTxDoneIfPending?relay,00H
        EXTERN ??macDataRxMemAlloc?relay
        FUNCTION ??macDataRxMemAlloc?relay,00H
        EXTERN ??macDataRxMemFree?relay
        FUNCTION ??macDataRxMemFree?relay,00H
        EXTERN ??macMcuOverflowCapture?relay
        FUNCTION ??macMcuOverflowCapture?relay,00H
        EXTERN ??macMcuTimerCapture?relay
        FUNCTION ??macMcuTimerCapture?relay,00H
        EXTERN ??macMemReadRxFifo?relay
        FUNCTION ??macMemReadRxFifo?relay,00H
        EXTERN ??macRadioComputeLQI?relay
        FUNCTION ??macRadioComputeLQI?relay,00H
        EXTERN ??macRadioUpdateTxPower?relay
        FUNCTION ??macRadioUpdateTxPower?relay,00H
        EXTERN ??macRxCheckMACPendingCallback?relay
        FUNCTION ??macRxCheckMACPendingCallback?relay,00H
        EXTERN ??macRxCheckPendingCallback?relay
        FUNCTION ??macRxCheckPendingCallback?relay,00H
        EXTERN ??macRxCompleteCallback?relay
        FUNCTION ??macRxCompleteCallback?relay,00H
        EXTERN ??macRxHardDisable?relay
        FUNCTION ??macRxHardDisable?relay,00H
        EXTERN ??macRxOff?relay
        FUNCTION ??macRxOff?relay,00H
        EXTERN ??macRxOffRequest?relay
        FUNCTION ??macRxOffRequest?relay,00H
        EXTERN ??macRxOnRequest?relay
        FUNCTION ??macRxOnRequest?relay,00H
        EXTERN ??macTxAckNotReceivedCallback?relay
        FUNCTION ??macTxAckNotReceivedCallback?relay,00H
        EXTERN ??macTxAckReceivedCallback?relay
        FUNCTION ??macTxAckReceivedCallback?relay,00H
        EXTERN ??macTxStartQueuedFrame?relay
        FUNCTION ??macTxStartQueuedFrame?relay,00H
        EXTERN ??sAddrExtCpy?relay
        FUNCTION ??sAddrExtCpy?relay,00H
        EXTERN macChipVersion
        EXTERN macRxOnFlag
        EXTERN macSrcMatchIsEnabled
        EXTERN macTxActive
        EXTERN pMacDataTx

// D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\Components\mac\low_level\srf04\mac_rx.c
//    1 /**************************************************************************************************
//    2   Filename:       mac_rx.c
//    3   Revised:        $Date: 2007-10-08 14:05:36 -0700 (Mon, 08 Oct 2007) $
//    4   Revision:       $Revision: 15624 $
//    5 
//    6   Description:    Describe the purpose and contents of the file.
//    7 
//    8 
//    9   Copyright 2006-2009 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License").  You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product.  Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 
//   40 /* ------------------------------------------------------------------------------------------------
//   41  *                                          Includes
//   42  * ------------------------------------------------------------------------------------------------
//   43  */
//   44 
//   45 /* hal */
//   46 #include "hal_defs.h"
//   47 #include "hal_types.h"
//   48 
//   49 /* high-level */
//   50 #include "mac_high_level.h"
//   51 #include "mac_spec.h"
//   52 
//   53 /* exported low-level */
//   54 #include "mac_low_level.h"
//   55 
//   56 /* low-level specific */
//   57 #include "mac_rx.h"
//   58 #include "mac_tx.h"
//   59 #include "mac_rx_onoff.h"
//   60 #include "mac_radio.h"
//   61 
//   62 /* target specific */
//   63 #include "mac_radio_defs.h"

        ASEGN SFR_AN:DATA:NOROOT,091H
// unsigned char volatile __sfr RFIRQF1
RFIRQF1:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,09bH
// unsigned char volatile __sfr S1CON
S1CON:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0a8H
// union <unnamed> volatile __sfr _A_IEN0
_A_IEN0:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0e1H
// unsigned char volatile __sfr RFST
RFST:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0e9H
// unsigned char volatile __sfr RFIRQF0
RFIRQF0:
        DATA8
        DS 1
//   64 #include "mac_autopend.h"
//   65 
//   66 /* debug */
//   67 #include "mac_assert.h"
//   68 
//   69 
//   70 /* ------------------------------------------------------------------------------------------------
//   71  *                                            Defines
//   72  * ------------------------------------------------------------------------------------------------
//   73  */
//   74 #define MAX_PAYLOAD_BYTES_READ_PER_INTERRUPT   16   /* adjustable to tune performance */
//   75 
//   76 /* receive FIFO bytes needed to start a valid receive (see function rxStartIsr for details) */
//   77 #define RX_THRESHOLD_START_LEN    (MAC_PHY_PHR_LEN        +  \ 
//   78                                    MAC_FCF_FIELD_LEN      +  \ 
//   79                                    MAC_SEQ_NUM_FIELD_LEN  +  \ 
//   80                                    MAC_FCS_FIELD_LEN)
//   81 
//   82 /* maximum size of addressing fields (note: command frame identifier processed as part of address) */
//   83 #define MAX_ADDR_FIELDS_LEN  ((MAC_EXT_ADDR_FIELD_LEN + MAC_PAN_ID_FIELD_LEN) * 2)
//   84 
//   85 /* addressing mode reserved value */
//   86 #define ADDR_MODE_RESERVERED  1
//   87 
//   88 /* length of command frame identifier */
//   89 #define CMD_FRAME_ID_LEN      1
//   90 
//   91 /* packet size mask is equal to the maximum value */
//   92 #define PHY_PACKET_SIZE_MASK  0x7F
//   93 
//   94 /* value for promiscuous off, must not conflict with other mode variants from separate include files */
//   95 #define PROMISCUOUS_MODE_OFF  0x00
//   96 
//   97 /* bit of proprietary FCS format that indicates if the CRC is OK */
//   98 #define PROPRIETARY_FCS_CRC_OK_BIT  0x80
//   99 
//  100 /* dummy length value for unused entry in lookup table */
//  101 #define DUMMY_LEN   0xBE
//  102 
//  103 /* value for rxThresholdIntState */
//  104 #define RX_THRESHOLD_INT_STATE_INACTIVE   0
//  105 #define RX_THRESHOLD_INT_STATE_ACTIVE     1
//  106 #define RX_THRESHOLD_INT_STATE_RESET      2
//  107 
//  108 
//  109 /* ------------------------------------------------------------------------------------------------
//  110  *                                             Macros
//  111  * ------------------------------------------------------------------------------------------------
//  112  */
//  113 #define MEM_ALLOC(x)   macDataRxMemAlloc(x)
//  114 #define MEM_FREE(x)    macDataRxMemFree((uint8 *)x)
//  115 
//  116 /*
//  117  *  Macro for encoding frame control information into internal flags format.
//  118  *  Parameter is pointer to the frame.  NOTE!  If either the internal frame
//  119  *  format *or* the specification changes, this macro will need to be modified.
//  120  */
//  121 #define INTERNAL_FCF_FLAGS(p)  ((((p)[1] >> 4) & 0x03) | ((p)[0] & 0x78))
//  122 
//  123 /*
//  124  *  The radio replaces the actual FCS with different information.  This proprietary FCS is
//  125  *  the same length as the original and includes:
//  126  *    1) the RSSI value
//  127  *    2) the average correlation value (used for LQI)
//  128  *    3) a CRC passed bit
//  129  *
//  130  *  These macros decode the proprietary FCS.  The macro parameter is a pointer to the two byte FCS.
//  131  */
//  132 #define PROPRIETARY_FCS_RSSI(p)                 ((int8)((p)[0]))
//  133 #define PROPRIETARY_FCS_CRC_OK(p)               ((p)[1] & PROPRIETARY_FCS_CRC_OK_BIT)
//  134 #define PROPRIETARY_FCS_CORRELATION_VALUE(p)    ((p)[1] & ~PROPRIETARY_FCS_CRC_OK_BIT)
//  135 
//  136 
//  137 /* ------------------------------------------------------------------------------------------------
//  138  *                                       Global Variables
//  139  * ------------------------------------------------------------------------------------------------
//  140  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  141 uint8 macRxActive;
macRxActive:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  142 uint8 macRxFilter;
macRxFilter:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  143 uint8 macRxOutgoingAckFlag;
macRxOutgoingAckFlag:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  144 
//  145 
//  146 /* ------------------------------------------------------------------------------------------------
//  147  *                                       Local Constants
//  148  * ------------------------------------------------------------------------------------------------
//  149  */

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA32
//  150 static const uint8 CODE macRxAddrLen[] =
macRxAddrLen:
        DATA8
        DB 0
        DB 190
        DB 4
        DB 10
//  151 {
//  152   0,                                                /* no address */
//  153   DUMMY_LEN,                                        /* reserved */
//  154   MAC_PAN_ID_FIELD_LEN + MAC_SHORT_ADDR_FIELD_LEN,  /* short address + pan id */
//  155   MAC_PAN_ID_FIELD_LEN + MAC_EXT_ADDR_FIELD_LEN     /* extended address + pan id */
//  156 };
//  157 
//  158 
//  159 /* ------------------------------------------------------------------------------------------------
//  160  *                                       Local Prototypes
//  161  * ------------------------------------------------------------------------------------------------
//  162  */
//  163 static void rxHaltCleanupFinalStep(void);
//  164 
//  165 static void rxStartIsr(void);
//  166 static void rxAddrIsr(void);
//  167 static void rxPayloadIsr(void);
//  168 static void rxDiscardIsr(void);
//  169 static void rxFcsIsr(void);
//  170 
//  171 static void rxPrepPayload(void);
//  172 static void rxDiscardFrame(void);
//  173 static void rxDone(void);
//  174 static void rxPostRxUpdates(void);
//  175 
//  176 
//  177 /* ------------------------------------------------------------------------------------------------
//  178  *                                         Local Variables
//  179  * ------------------------------------------------------------------------------------------------
//  180  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  181 static void    (* pFuncRxState)(void);
pFuncRxState:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  182 static macRx_t  * pRxBuf;
pRxBuf:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  183 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
//  184 static uint8  rxBuf[MAC_PHY_PHR_LEN + MAC_FCF_FIELD_LEN + MAC_SEQ_NUM_FIELD_LEN];
rxBuf:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  185 static uint8  rxUnreadLen;
rxUnreadLen:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  186 static uint8  rxNextLen;
rxNextLen:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  187 static uint8  rxPayloadLen;
rxPayloadLen:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  188 static uint8  rxFilter;
rxFilter:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  189 static uint8  rxPromiscuousMode;
rxPromiscuousMode:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  190 static uint8  rxIsrActiveFlag;
rxIsrActiveFlag:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  191 static uint8  rxResetFlag;
rxResetFlag:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  192 static uint8  rxFifoOverflowCount;
rxFifoOverflowCount:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  193 
//  194 
//  195 /**************************************************************************************************
//  196  * @fn          macRxInit
//  197  *
//  198  * @brief       Initialize receive variable states.
//  199  *
//  200  * @param       none
//  201  *
//  202  * @return      none
//  203  **************************************************************************************************
//  204  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  205 void macRxInit(void)
macRxInit:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function macRxInit
        CODE
//  206 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  207   macRxFilter          = RX_FILTER_OFF;
        MOV     DPTR,#macRxFilter
        CLR     A
        MOVX    @DPTR,A
//  208   rxPromiscuousMode    = PROMISCUOUS_MODE_OFF;
        MOV     DPTR,#rxPromiscuousMode
        MOVX    @DPTR,A
//  209   pRxBuf               = NULL; /* required for macRxReset() to function correctly */
        MOV     DPTR,#pRxBuf
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  210   macRxActive          = MAC_RX_ACTIVE_NO_ACTIVITY;
        MOV     DPTR,#macRxActive
        LCALL   ?Subroutine3 & 0xFFFF
//  211   pFuncRxState         = &rxStartIsr;
//  212   macRxOutgoingAckFlag = 0;
??CrossCallReturnLabel_2:
        MOV     DPTR,#macRxOutgoingAckFlag
        CLR     A
        MOVX    @DPTR,A
//  213   rxIsrActiveFlag      = 0;
        MOV     DPTR,#rxIsrActiveFlag
        MOVX    @DPTR,A
//  214   rxResetFlag          = 0;
        MOV     DPTR,#rxResetFlag
        MOVX    @DPTR,A
//  215   rxFifoOverflowCount  = 0;
        MOV     DPTR,#rxFifoOverflowCount
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock0
//  216 }
//  217 
//  218 
//  219 /**************************************************************************************************
//  220  * @fn          macRxRadioPowerUpInit
//  221  *
//  222  * @brief       Initialization for after radio first powers up.
//  223  *
//  224  * @param       none
//  225  *
//  226  * @return      none
//  227  **************************************************************************************************
//  228  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  229 void macRxRadioPowerUpInit(void)
macRxRadioPowerUpInit:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function macRxRadioPowerUpInit
        CODE
//  230 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  231   /* set threshold at initial value */
//  232   MAC_RADIO_SET_RX_THRESHOLD(RX_THRESHOLD_START_LEN);
        MOV     DPTR,#0x6194
        MOV     A,#0x5
        LCALL   ?Subroutine7 & 0xFFFF
//  233 
//  234   /* clear any accidental threshold interrupt that happened as part of power up sequence */
//  235   MAC_RADIO_CLEAR_RX_THRESHOLD_INTERRUPT_FLAG();
??CrossCallReturnLabel_8:
        MOV     0xe9,#-0x5
        MOV     C,0xE0 /* A   */.7
        MOV     0xa8.7,C
//  236 
//  237   /* enable threshold interrupts */
//  238   MAC_RADIO_ENABLE_RX_THRESHOLD_INTERRUPT();
        MOV     DPTR,#0x61a3
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.2
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock1
        REQUIRE _A_IEN0
        REQUIRE S1CON
        REQUIRE RFIRQF0
//  239 }
//  240 
//  241 
//  242 /**************************************************************************************************
//  243  * @fn          macRxTxReset
//  244  *
//  245  * @brief       Reset the receive state.
//  246  *
//  247  * @param       none
//  248  *
//  249  * @return      none
//  250  **************************************************************************************************
//  251  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  252 void macRxTxReset(void)
macRxTxReset:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function macRxTxReset
        CODE
//  253 {
        FUNCALL macRxTxReset, macRxHardDisable
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL macRxTxReset, macRxPromiscuousMode
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  254   /* forces receiver off, cleans up by calling macRxHaltCleanup() and macTxHaltCleanup() */
//  255   macRxHardDisable();
        ; Setup parameters for call to function macRxHardDisable
        LCALL   ??macRxHardDisable?relay
//  256 
//  257   /*
//  258    *   Note : transmit does not require any reset logic
//  259    *          beyond what macRxHardDisable() provides.
//  260    */
//  261 
//  262   /* restore deault filter mode to off */
//  263   macRxFilter = RX_FILTER_OFF;
        MOV     DPTR,#macRxFilter
        CLR     A
        MOVX    @DPTR,A
//  264 
//  265   /* return promiscuous mode to default off state */
//  266   macRxPromiscuousMode(MAC_PROMISCUOUS_MODE_OFF);
        ; Setup parameters for call to function macRxPromiscuousMode
        MOV     R1,A
        LCALL   ??macRxPromiscuousMode?relay
//  267 }
        LJMP    ??Subroutine24_0 & 0xFFFF
        CFI EndBlock cfiBlock2
//  268 
//  269 
//  270 /**************************************************************************************************
//  271  * @fn          macRxHaltCleanup
//  272  *
//  273  * @brief       Cleanup up the receive logic after receiver is forced off.
//  274  *
//  275  * @param       none
//  276  *
//  277  * @return      none
//  278  **************************************************************************************************
//  279  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  280 void macRxHaltCleanup(void)
macRxHaltCleanup:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function macRxHaltCleanup
        CODE
//  281 {
        FUNCALL macRxHaltCleanup, rxHaltCleanupFinalStep
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  282   rxResetFlag = 1;
        MOV     DPTR,#rxResetFlag
        MOV     A,#0x1
        MOVX    @DPTR,A
//  283   if (!rxIsrActiveFlag)
        MOV     DPTR,#rxIsrActiveFlag
        MOVX    A,@DPTR
        JNZ     ??CrossCallReturnLabel_38
//  284   {
//  285     rxHaltCleanupFinalStep();
        ; Setup parameters for call to function rxHaltCleanupFinalStep
        LCALL   ?Subroutine19 & 0xFFFF
//  286     rxResetFlag = 0;
//  287   }
//  288 }
??CrossCallReturnLabel_38:
        LJMP    ??Subroutine24_0 & 0xFFFF
        CFI EndBlock cfiBlock3
//  289 
//  290 
//  291 /*=================================================================================================
//  292  * @fn          rxHaltCleanupFinalStep
//  293  *
//  294  * @brief       Required cleanup if receiver is halted in the middle of a receive.
//  295  *
//  296  * @param       none
//  297  *
//  298  * @return      none
//  299  *=================================================================================================
//  300  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  301 static void rxHaltCleanupFinalStep(void)
rxHaltCleanupFinalStep:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI Function rxHaltCleanupFinalStep
        CODE
//  302 {
        FUNCALL rxHaltCleanupFinalStep, macDataRxMemFree
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxHaltCleanupFinalStep, rxPostRxUpdates
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  303   /* cancel any upcoming ACK transmit complete callback */
//  304   MAC_RADIO_CANCEL_ACK_TX_DONE_CALLBACK();
        MOV     DPTR,#0x61a4
        MOVX    A,@DPTR
        CLR     0xE0 /* A   */.0
        MOVX    @DPTR,A
//  305 
//  306   /* set start of frame threshold */
//  307   MAC_RADIO_SET_RX_THRESHOLD(RX_THRESHOLD_START_LEN);
        MOV     DPTR,#0x6194
        MOV     A,#0x5
        MOVX    @DPTR,A
//  308 
//  309   /* flush the receive FIFO */
//  310   MAC_RADIO_FLUSH_RX_FIFO();
        MOV     0xe1,#-0x13
        MOV     0xe1,#-0x13
//  311 
//  312   /* clear any receive interrupt that happened to squeak through */
//  313   MAC_RADIO_CLEAR_RX_THRESHOLD_INTERRUPT_FLAG();
        MOV     A,0xa8
        CLR     0xa8.7
        MOV     0x9b,#0x0
        MOV     0xe9,#-0x5
        MOV     C,0xE0 /* A   */.7
        MOV     0xa8.7,C
//  314 
//  315   /* if data buffer has been allocated, free it */
//  316   if (pRxBuf != NULL)
        MOV     DPTR,#pRxBuf
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JZ      ??rxHaltCleanupFinalStep_0
//  317   {
//  318     MEM_FREE((uint8 *) pRxBuf);
        ; Setup parameters for call to function macDataRxMemFree
        MOV     DPTR,#pRxBuf
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??macDataRxMemFree?relay
//  319   }
//  320   pRxBuf = NULL; /* needed to indicate buffer is no longer allocated */
??rxHaltCleanupFinalStep_0:
        MOV     DPTR,#pRxBuf
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        LCALL   ?Subroutine3 & 0xFFFF
//  321 
//  322   pFuncRxState = &rxStartIsr;
//  323 
//  324   /* if receive was active, perform the post receive updates */
//  325   if (macRxActive || macRxOutgoingAckFlag)
??CrossCallReturnLabel_3:
        MOV     DPTR,#macRxActive
        MOVX    A,@DPTR
        JNZ     ??rxHaltCleanupFinalStep_1
        MOV     DPTR,#macRxOutgoingAckFlag
        MOVX    A,@DPTR
        JZ      ??rxHaltCleanupFinalStep_2
//  326   {
//  327     macRxActive = MAC_RX_ACTIVE_NO_ACTIVITY;
??rxHaltCleanupFinalStep_1:
        MOV     DPTR,#macRxActive
        CLR     A
        MOVX    @DPTR,A
//  328     macRxOutgoingAckFlag = 0;
        MOV     DPTR,#macRxOutgoingAckFlag
        MOVX    @DPTR,A
//  329 
//  330     rxPostRxUpdates();
        ; Setup parameters for call to function rxPostRxUpdates
        LCALL   ??rxPostRxUpdates?relay
//  331   }
//  332 }
??rxHaltCleanupFinalStep_2:
        LJMP    ??Subroutine24_0 & 0xFFFF
        CFI EndBlock cfiBlock4
        REQUIRE RFST
        REQUIRE _A_IEN0
        REQUIRE S1CON
        REQUIRE RFIRQF0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond5 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond6 Using cfiCommon0
        CFI (cfiCond6) NoFunction
        CFI (cfiCond6) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond6) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond6) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond6) CFA_SP SP+-5
        CFI Block cfiPicker7 Using cfiCommon1
        CFI (cfiPicker7) NoFunction
        CFI (cfiPicker7) Picker
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_40:
        RET
        CFI EndBlock cfiCond5
        CFI EndBlock cfiCond6
        CFI EndBlock cfiPicker7

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine20:
        CFI Block cfiCond8 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_40, ??CrossCallReturnLabel_2
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond9 Using cfiCommon0
        CFI (cfiCond9) NoFunction
        CFI (cfiCond9) Conditional ??CrossCallReturnLabel_40, ??CrossCallReturnLabel_3
        CFI (cfiCond9) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond9) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond9) CFA_SP SP+-5
        CFI Block cfiCond10 Using cfiCommon0
        CFI (cfiCond10) NoFunction
        CFI (cfiCond10) Conditional ??CrossCallReturnLabel_41, ??CrossCallReturnLabel_0
        CFI (cfiCond10) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond10) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond10) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond10) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond10) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond10) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond10) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond10) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond10) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond10) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond10) CFA_SP SP+0
        CFI (cfiCond10) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond11 Using cfiCommon0
        CFI (cfiCond11) NoFunction
        CFI (cfiCond11) Conditional ??CrossCallReturnLabel_41, ??CrossCallReturnLabel_1
        CFI (cfiCond11) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond11) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond11) CFA_SP SP+-5
        CFI (cfiCond11) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker12 Using cfiCommon1
        CFI (cfiPicker12) NoFunction
        CFI (cfiPicker12) Picker
        MOVX    @DPTR,A
        MOV     DPTR,#pFuncRxState
        MOV     A,#??rxStartIsr?relay & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(??rxStartIsr?relay >> 8) & 0xff
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond8
        CFI EndBlock cfiCond9
        CFI EndBlock cfiCond10
        CFI EndBlock cfiCond11
        CFI EndBlock cfiPicker12
//  333 
//  334 
//  335 /**************************************************************************************************
//  336  * @fn          macRxThresholdIsr
//  337  *
//  338  * @brief       Interrupt service routine called when bytes in FIFO reach threshold value.
//  339  *              It implements a state machine for receiving a packet.
//  340  *
//  341  * @param       none
//  342  *
//  343  * @return      none
//  344  **************************************************************************************************
//  345  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  346 void macRxThresholdIsr(void)
macRxThresholdIsr:
        CFI Block cfiBlock13 Using cfiCommon0
        CFI Function macRxThresholdIsr
        CODE
//  347 {
        FUNCALL macRxThresholdIsr, rxHaltCleanupFinalStep
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  348   /* if currently reseting, do not execute receive ISR logic */
//  349   if (rxResetFlag)
        MOV     DPTR,#rxResetFlag
        MOVX    A,@DPTR
        JNZ     ??CrossCallReturnLabel_39
//  350   {
//  351     return;
//  352   }
//  353 
//  354   /*
//  355    *  Call the function that handles the current receive state.
//  356    *  A flag is set for the duration of the call to indicate
//  357    *  the ISR is executing.  This is necessary for the reset
//  358    *  logic so it does not perform a reset in the middle of
//  359    *  executing the ISR.
//  360    */
//  361   rxIsrActiveFlag = 1;
        MOV     DPTR,#rxIsrActiveFlag
        MOV     A,#0x1
        MOVX    @DPTR,A
//  362   (*pFuncRxState)();
        ; Setup parameters for indirect call
        MOV     DPTR,#pFuncRxState
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_34:
        LCALL   ?CALL_IND
//  363   rxIsrActiveFlag = 0;
        MOV     DPTR,#rxIsrActiveFlag
        CLR     A
        MOVX    @DPTR,A
//  364 
//  365   /* if a reset occurred during the ISR, peform cleanup here */
//  366   if (rxResetFlag)
        MOV     DPTR,#rxResetFlag
        MOVX    A,@DPTR
        JZ      ??CrossCallReturnLabel_39
//  367   {
//  368     rxHaltCleanupFinalStep();
        ; Setup parameters for call to function rxHaltCleanupFinalStep
        LCALL   ?Subroutine19 & 0xFFFF
//  369     rxResetFlag = 0;
//  370   }
??CrossCallReturnLabel_39:
        LJMP    ??Subroutine24_0 & 0xFFFF
        CFI EndBlock cfiBlock13
//  371 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine19:
        CFI Block cfiCond14 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_38
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond15 Using cfiCommon0
        CFI (cfiCond15) NoFunction
        CFI (cfiCond15) Conditional ??CrossCallReturnLabel_39
        CFI (cfiCond15) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond15) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond15) CFA_SP SP+-5
        CFI Block cfiPicker16 Using cfiCommon1
        CFI (cfiPicker16) NoFunction
        CFI (cfiPicker16) Picker
        LCALL   ??rxHaltCleanupFinalStep?relay
        MOV     DPTR,#rxResetFlag
        CLR     A
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond14
        CFI EndBlock cfiCond15
        CFI EndBlock cfiPicker16
//  372 
//  373 
//  374 /*=================================================================================================
//  375  * @fn          rxStartIsr
//  376  *
//  377  * @brief       First ISR state for receiving a packet - compute packet length, allocate
//  378  *              buffer, initialize buffer.  Acknowledgements are handled immediately without
//  379  *              allocating a buffer.
//  380  *
//  381  * @param       none
//  382  *
//  383  * @return      none
//  384  *=================================================================================================
//  385  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  386 static void rxStartIsr(void)
rxStartIsr:
        CFI Block cfiBlock17 Using cfiCommon0
        CFI Function rxStartIsr
        CODE
//  387 {
        FUNCALL rxStartIsr, halAssertHandler
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxStartIsr, rxPostRxUpdates
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxStartIsr, macCspForceTxDoneIfPending
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxStartIsr, macMemReadRxFifo
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxStartIsr, rxDone
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxStartIsr, halAssertHandler
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxStartIsr, macMemReadRxFifo
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxStartIsr, halAssertHandler
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxStartIsr, macRadioComputeLQI
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxStartIsr, macTxAckReceivedCallback
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxStartIsr, macTxAckNotReceivedCallback
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxStartIsr, rxDone
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxStartIsr, macTxAckNotReceivedCallback
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxStartIsr, macDataRxMemAlloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxStartIsr, rxDiscardFrame
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxStartIsr, macRxCheckMACPendingCallback
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxStartIsr, MAC_SrcMatchCheckAllPending
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxStartIsr, macRxCheckPendingCallback
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxStartIsr, macMcuOverflowCapture
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxStartIsr, macMcuTimerCapture
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxStartIsr, rxPrepPayload
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
//  388   uint8  addrLen;
//  389   uint8  ackWithPending;
//  390   uint8  dstAddrMode;
//  391   uint8  srcAddrMode;
//  392 
//  393   MAC_ASSERT(!macRxActive); /* receive on top of receive */
        MOV     DPTR,#macRxActive
        MOVX    A,@DPTR
        JZ      ??rxStartIsr_0
        ; Setup parameters for call to function halAssertHandler
        LCALL   ??halAssertHandler?relay
//  394 
//  395   /* indicate rx is active */
//  396   macRxActive = MAC_RX_ACTIVE_STARTED;
??rxStartIsr_0:
        MOV     DPTR,#macRxActive
        MOV     A,#-0x7f
        MOVX    @DPTR,A
//  397 
//  398   /*
//  399    *  For bullet proof functionality, need to see if the receiver was just turned off.
//  400    *  The logic to request turning off the receiver, disables interrupts and then checks
//  401    *  the value of macRxActive.  If it is TRUE, the receiver will not be turned off.
//  402    *
//  403    *  There is a small hole though.  It's possible to attempt turning off the receiver
//  404    *  in the window from when the receive interrupt fires and the point where macRxActive
//  405    *  is set to TRUE.  To plug this hole, the on/off status must be tested *after*
//  406    *  macRxActive has been set.  If the receiver is off at this point, there is nothing
//  407    *  in the RX fifo and the receive is simply aborted.
//  408    *
//  409    *  Also, there are some considerations in case a hard disable just happened.  Usually,
//  410    *  the receiver will just be off at this point after a hard disable.  The check described
//  411    *  above will account for this case too.  However, if a hard disable were immediately
//  412    *  followed by an enable, the receiver would be on.  To catch this case, the receive
//  413    *  FIFO is also tested to see if it is empty.  Recovery is identical to the other cases.
//  414    */
//  415   if (!macRxOnFlag || MAC_RADIO_RX_FIFO_IS_EMPTY())
        MOV     DPTR,#macRxOnFlag
        MOVX    A,@DPTR
        JZ      ??rxStartIsr_1
        MOV     DPTR,#0x6193
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.7
        JC      ??rxStartIsr_2
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.6
        JC      ??rxStartIsr_2
//  416   {
//  417     /* reset active flag */
//  418     macRxActive = MAC_RX_ACTIVE_NO_ACTIVITY;
??rxStartIsr_1:
        MOV     DPTR,#macRxActive
        CLR     A
        MOVX    @DPTR,A
//  419 
//  420     /*
//  421      *  To be absolutely bulletproof, must make sure no transmit queue'ed up during
//  422      *  the tiny, tiny window when macRxActive was not zero.
//  423      */
//  424     rxPostRxUpdates();
        ; Setup parameters for call to function rxPostRxUpdates
        LCALL   ??rxPostRxUpdates?relay
//  425 
//  426     /* return immediately from here */
//  427     return;
        LJMP    ??rxStartIsr_3 & 0xFFFF
//  428   }
//  429 
//  430   /*
//  431    *  If interrupts are held off for too long it's possible the previous "transmit done"
//  432    *  callback is pending.  If this is the case, it needs to be completed before
//  433    *  continuing with the receive logic.
//  434    */
//  435   MAC_RADIO_FORCE_TX_DONE_IF_PENDING();
??rxStartIsr_2:
        ; Setup parameters for call to function macCspForceTxDoneIfPending
        LCALL   ??macCspForceTxDoneIfPending?relay
//  436 
//  437   /*
//  438    *  It's possible receive logic is still waiting for confirmation of an ACK that went out
//  439    *  for the previous receive.  This is OK but the callback needs to be canceled at this point.
//  440    *  That callback execute receive cleanup logic that will run at the completion
//  441    *  of *this* receive.  Also, it is important the flag for the outgoing ACK to be cleared.
//  442    */
//  443   MAC_RADIO_CANCEL_ACK_TX_DONE_CALLBACK();
        LCALL   ?Subroutine16 & 0xFFFF
//  444   macRxOutgoingAckFlag = 0;
??CrossCallReturnLabel_32:
        MOVX    @DPTR,A
//  445 
//  446   /*
//  447    *  Make a module-local copy of macRxFilter.  This prevents the selected
//  448    *  filter from changing in the middle of a receive.
//  449    */
//  450   rxFilter = macRxFilter;
        MOV     DPTR,#macRxFilter
        MOVX    A,@DPTR
        MOV     DPTR,#rxFilter
        MOVX    @DPTR,A
//  451 
//  452   /*-------------------------------------------------------------------------------
//  453    *  Read initial frame information from FIFO.
//  454    *
//  455    *   This code is not triggered until the following are in the RX FIFO:
//  456    *     frame length          - one byte containing length of MAC frame (excludes this field)
//  457    *     frame control field   - two bytes defining frame type, addressing fields, control flags
//  458    *     sequence number       - one byte unique sequence identifier
//  459    *     additional two bytes  - these bytes are available in case the received frame is an ACK,
//  460    *                             if so, the frame can be verified and responded to immediately,
//  461    *                             if not an ACK, these bytes will be processed normally
//  462    */
//  463 
//  464   /* read frame length, frame control field, and sequence number from FIFO */
//  465   MAC_RADIO_READ_RX_FIFO(rxBuf, MAC_PHY_PHR_LEN + MAC_FCF_FIELD_LEN + MAC_SEQ_NUM_FIELD_LEN);
        ; Setup parameters for call to function macMemReadRxFifo
        MOV     R1,#0x4
        MOV     R2,#rxBuf & 0xff
        MOV     R3,#(rxBuf >> 8) & 0xff
        LCALL   ??macMemReadRxFifo?relay
//  466 
//  467   /* bytes to read from FIFO equals frame length minus length of MHR fields just read from FIFO */
//  468   rxUnreadLen = (rxBuf[0] & PHY_PACKET_SIZE_MASK) - MAC_FCF_FIELD_LEN - MAC_SEQ_NUM_FIELD_LEN;
        MOV     DPTR,#rxBuf
        MOVX    A,@DPTR
        ANL     A,#0x7f
        ADD     A,#-0x3
        MOV     DPTR,#rxUnreadLen
        MOVX    @DPTR,A
//  469 
//  470   /*
//  471    *  Workaround for chip bug #1547.  The receive buffer can sometimes be corrupted by hardware.
//  472    *  This usually occurs under heavy traffic.  If a corrupted receive buffer is detected
//  473    *  the entire receive buffer is flushed.
//  474    *
//  475    *  In the case that this workaround is not needed, an assert is used to make sure the
//  476    *  receive length field is not corrupted.  This is important because a corrupted receive
//  477    *  length field is utterly fatal and, if not caught here, extremely hard to track down.
//  478    */
//  479   if (macChipVersion == REV_A)
        MOV     DPTR,#macChipVersion
        MOVX    A,@DPTR
        MOV     DPTR,#rxUnreadLen
        JNZ     ??rxStartIsr_4
//  480   {
//  481     if ((rxUnreadLen > (MAC_A_MAX_PHY_PACKET_SIZE - MAC_FCF_FIELD_LEN - MAC_SEQ_NUM_FIELD_LEN)) ||
//  482         (MAC_FRAME_TYPE(&rxBuf[1]) > MAC_FRAME_TYPE_MAX_VALID))
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0x7d
        JNC     ??rxStartIsr_5
        MOV     DPTR,#rxBuf + 1
        MOVX    A,@DPTR
        ANL     A,#0x7
        CLR     C
        SUBB    A,#0x4
        JC      ??rxStartIsr_6
//  483     {
//  484       MAC_RADIO_FLUSH_RX_FIFO();
??rxStartIsr_5:
        MOV     0xe1,#-0x13
        MOV     0xe1,#-0x13
//  485       rxDone();
        ; Setup parameters for call to function rxDone
??rxStartIsr_7:
        LCALL   ??rxDone?relay
//  486       return;
        LJMP    ??rxStartIsr_3 & 0xFFFF
//  487     }
//  488   }
//  489   else
//  490   {
//  491     /* radio supplied a corrupted receive buffer length */
//  492     MAC_ASSERT(rxUnreadLen <= (MAC_A_MAX_PHY_PACKET_SIZE - MAC_FCF_FIELD_LEN - MAC_SEQ_NUM_FIELD_LEN));
??rxStartIsr_4:
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0x7d
        JC      ??rxStartIsr_6
        ; Setup parameters for call to function halAssertHandler
        LCALL   ??halAssertHandler?relay
//  493   }
//  494 
//  495 
//  496 
//  497   /*-------------------------------------------------------------------------------
//  498    *  Process ACKs.
//  499    *
//  500    *  If this frame is an ACK, process it immediately and exit from here.
//  501    *  If this frame is not an ACK and transmit is listening for an ACK, let
//  502    *  the transmit logic know an non-ACK was received so transmit can complete.
//  503    *
//  504    *  In promiscuous mode ACKs are treated like any other frame.
//  505    */
//  506   if ((MAC_FRAME_TYPE(&rxBuf[1]) == MAC_FRAME_TYPE_ACK) && (rxPromiscuousMode == PROMISCUOUS_MODE_OFF))
??rxStartIsr_6:
        MOV     DPTR,#rxBuf + 1
        MOVX    A,@DPTR
        ANL     A,#0x7
        XRL     A,#0x2
        JZ      $+5
        LJMP    ??rxStartIsr_8 & 0xFFFF
        MOV     DPTR,#rxPromiscuousMode
        MOVX    A,@DPTR
        JZ      $+5
        LJMP    ??rxStartIsr_8 & 0xFFFF
//  507   {
//  508     halIntState_t  s;
//  509     uint8 fcsBuf[MAC_FCF_FIELD_LEN];
//  510     /*
//  511      *  There are guaranteed to be two unread bytes in the FIFO.  By defintion, for ACK frames
//  512      *  these two bytes will be the FCS.
//  513      */
//  514 
//  515     /* read FCS from FIFO (threshold set so bytes are guaranteed to be there) */
//  516     MAC_RADIO_READ_RX_FIFO(fcsBuf, MAC_FCS_FIELD_LEN);
        ; Setup parameters for call to function macMemReadRxFifo
        MOV     R1,#0x2
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??macMemReadRxFifo?relay
//  517 
//  518     /*
//  519      *  This critical section ensures that the ACK timeout won't be triggered in the
//  520      *  millde of receiving the ACK frame.
//  521      */
//  522     HAL_ENTER_CRITICAL_SECTION(s);
        MOV     C,0xa8.7
        CLR     A
        RLC     A
        MOV     ?V0 + 0,A
        CLR     0xa8.7
//  523 
//  524     /* see if transmit is listening for an ACK */
//  525     if (macTxActive == MAC_TX_ACTIVE_LISTEN_FOR_ACK)
        MOV     DPTR,#macTxActive
        MOVX    A,@DPTR
        XRL     A,#0x86
        JNZ     ??rxStartIsr_9
//  526     {
//  527       MAC_ASSERT(pMacDataTx != NULL); /* transmit buffer must be present */
        MOV     DPTR,#pMacDataTx
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JNZ     ??rxStartIsr_10
        ; Setup parameters for call to function halAssertHandler
        LCALL   ??halAssertHandler?relay
//  528 
//  529       /* record link quality metrics for the receive ACK */
//  530       {
//  531         int8 rssiDbm;
//  532         uint8 corr;
//  533 
//  534         rssiDbm = PROPRIETARY_FCS_RSSI(fcsBuf) + MAC_RADIO_RSSI_OFFSET;
??rxStartIsr_10:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        ADD     A,#-0x49
        MOV     R6,A
//  535 #if defined (HAL_PA_LNA) || defined (HAL_PA_LNA_CC2590)
//  536         MAC_RADIO_RSSI_LNA_OFFSET(rssiDbm);
//  537 #endif
//  538         corr = PROPRIETARY_FCS_CORRELATION_VALUE(fcsBuf);
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ANL     A,#0x7f
        MOV     R7,A
//  539 
//  540         pMacDataTx->internal.mpduLinkQuality = macRadioComputeLQI(rssiDbm, corr);
        ; Setup parameters for call to function macRadioComputeLQI
        MOV     R2,A
        MOV     A,R6
        MOV     R1,A
        LCALL   ??macRadioComputeLQI?relay
        MOV     A,R1
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     DPTR,#pMacDataTx
        MOVX    A,@DPTR
        ADD     A,#0x14
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_24:
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  541         pMacDataTx->internal.correlation = corr;
        MOV     DPTR,#pMacDataTx
        MOVX    A,@DPTR
        ADD     A,#0x15
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_20:
        MOVX    @DPTR,A
//  542         pMacDataTx->internal.rssi= rssiDbm;
        MOV     DPTR,#pMacDataTx
        MOVX    A,@DPTR
        ADD     A,#0x16
        LCALL   ?Subroutine14 & 0xFFFF
//  543       }
??CrossCallReturnLabel_22:
        MOVX    @DPTR,A
//  544 
//  545       /*
//  546        *  It's okay if the ACK timeout is triggered here. The callbacks for ACK received
//  547        *  or ACK not received will check "macTxActive" flag before taking any actions.
//  548        */
//  549       HAL_EXIT_CRITICAL_SECTION(s);
        MOV     A,?V0 + 0
        MOV     C,0xE0 /* A   */.0
        MOV     0xa8.7,C
//  550 
//  551       /*
//  552        *  An ACK was received so transmit logic needs to know.  If the FCS failed,
//  553        *  the transmit logic still needs to know.  In that case, treat the frame
//  554        *  as a non-ACK to complete the active transmit.
//  555        */
//  556       if (PROPRIETARY_FCS_CRC_OK(fcsBuf))
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.7
        JNC     ??rxStartIsr_11
//  557       {
//  558         /* call transmit logic to indicate ACK was received */
//  559         macTxAckReceivedCallback(MAC_SEQ_NUMBER(&rxBuf[1]), MAC_FRAME_PENDING(&rxBuf[1]));
        ; Setup parameters for call to function macTxAckReceivedCallback
        MOV     DPTR,#rxBuf + 1
        MOVX    A,@DPTR
        ANL     A,#0x10
        MOV     R2,A
        MOV     DPTR,#rxBuf + 3
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??macTxAckReceivedCallback?relay
        SJMP    ??rxStartIsr_12
//  560       }
//  561       else
//  562       {
//  563         macTxAckNotReceivedCallback();
??rxStartIsr_11:
        ; Setup parameters for call to function macTxAckNotReceivedCallback
        LCALL   ??macTxAckNotReceivedCallback?relay
        SJMP    ??rxStartIsr_12
//  564       }
//  565     }
//  566     else
//  567     {
//  568       HAL_EXIT_CRITICAL_SECTION(s);
??rxStartIsr_9:
        MOV     A,?V0 + 0
        MOV     C,0xE0 /* A   */.0
        MOV     0xa8.7,C
//  569     }
//  570 
//  571     /* receive is done, exit from here */
//  572     rxDone();
??rxStartIsr_12:
        ; Setup parameters for call to function rxDone
        LJMP    ??rxStartIsr_7 & 0xFFFF
//  573     return;
//  574   }
//  575   else if (macTxActive == MAC_TX_ACTIVE_LISTEN_FOR_ACK)
??rxStartIsr_8:
        MOV     DPTR,#macTxActive
        MOVX    A,@DPTR
        XRL     A,#0x86
        JNZ     ??rxStartIsr_13
//  576   {
//  577     macTxAckNotReceivedCallback();
        ; Setup parameters for call to function macTxAckNotReceivedCallback
        LCALL   ??macTxAckNotReceivedCallback?relay
//  578   }
//  579 
//  580   /*-------------------------------------------------------------------------------
//  581    *  Apply filtering.
//  582    *
//  583    *  For efficiency, see if filtering is even 'on' before processing.  Also test
//  584    *  to make sure promiscuous mode is disabled.  If promiscuous mode is enabled,
//  585    *  do not apply filtering.
//  586    */
//  587   if ((rxFilter != RX_FILTER_OFF) && !rxPromiscuousMode)
??rxStartIsr_13:
        MOV     DPTR,#rxFilter
        MOVX    A,@DPTR
        JZ      ??rxStartIsr_14
        MOV     DPTR,#rxPromiscuousMode
        MOVX    A,@DPTR
        JNZ     ??rxStartIsr_14
//  588   {
//  589     if (/* filter all frames */
//  590          (rxFilter == RX_FILTER_ALL) ||
//  591 
//  592          /* filter non-beacon frames */
//  593          ((rxFilter == RX_FILTER_NON_BEACON_FRAMES) &&
//  594           (MAC_FRAME_TYPE(&rxBuf[1]) != MAC_FRAME_TYPE_BEACON)) ||
//  595 
//  596          /* filter non-command frames */
//  597          ((rxFilter == RX_FILTER_NON_COMMAND_FRAMES) &&
//  598           ((MAC_FRAME_TYPE(&rxBuf[1]) != MAC_FRAME_TYPE_COMMAND))))
        MOV     DPTR,#rxFilter
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     $+5
        LJMP    ??rxStartIsr_15 & 0xFFFF
        MOV     DPTR,#rxBuf + 1
        MOVX    A,@DPTR
        ANL     A,#0x7
        MOV     R0,A
        MOV     DPTR,#rxFilter
        MOVX    A,@DPTR
        XRL     A,#0x2
        JZ      $+5
        LJMP    ??rxStartIsr_16 & 0xFFFF
        MOV     A,R0
        JZ      $+5
        LJMP    ??rxStartIsr_15 & 0xFFFF
//  599     {
//  600       /* discard rest of frame */
//  601       rxDiscardFrame();
//  602       return;
//  603     }
//  604   }
//  605 
//  606   /*-------------------------------------------------------------------------------
//  607    *  Compute length of addressing fields.  Compute payload length.
//  608    */
//  609 
//  610   /* decode addressing modes */
//  611   dstAddrMode = MAC_DEST_ADDR_MODE(&rxBuf[1]);
??rxStartIsr_14:
        MOV     DPTR,#rxBuf + 2
        MOVX    A,@DPTR
        MOV     R0,A
        RRC     A
        RRC     A
        ANL     A,#0x3f
        ANL     A,#0x3
        MOV     ?V0 + 1,A
//  612   srcAddrMode = MAC_SRC_ADDR_MODE(&rxBuf[1]);
        MOV     A,R0
        SWAP    A
        RRC     A
        RRC     A
        ANL     A,#0x3
        MOV     ?V0 + 0,A
//  613 
//  614   /*
//  615   *  Workaround for chip bug #1547.  The receive buffer can sometimes be corrupted by hardware.
//  616    *  This usually occurs under heavy traffic.  If a corrupted receive buffer is detected
//  617    *  the entire receive buffer is flushed.
//  618    */
//  619   if (macChipVersion == REV_A)
        MOV     DPTR,#macChipVersion
        MOVX    A,@DPTR
        JNZ     ??rxStartIsr_17
//  620   {
//  621     if ((srcAddrMode == ADDR_MODE_RESERVERED) || (dstAddrMode == ADDR_MODE_RESERVERED))
        MOV     A,#0x1
        XRL     A,?V0 + 0
        JNZ     $+5
        LJMP    ??rxStartIsr_5 & 0xFFFF
        MOV     A,#0x1
        XRL     A,?V0 + 1
        JNZ     $+5
        LJMP    ??rxStartIsr_5 & 0xFFFF
//  622     {
//  623       MAC_RADIO_FLUSH_RX_FIFO();
//  624       rxDone();
//  625       return;
//  626     }
//  627   }
//  628 
//  629   /*
//  630    *  Compute the addressing field length.  A lookup table based on addressing
//  631    *  mode is used for efficiency.  If the source address is present and the
//  632    *  frame is intra-PAN, the PAN Id is not repeated.  In this case, the address
//  633    *  length is adjusted to match the smaller length.
//  634    */
//  635   addrLen = macRxAddrLen[dstAddrMode] + macRxAddrLen[srcAddrMode];
??rxStartIsr_17:
        MOV     ?V0 + 2,?V0 + 0
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_36:
        MOV     R0,A
        MOV     ?V0 + 2,?V0 + 1
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_37:
        ADD     A,R0
        MOV     R6,A
//  636   if ((srcAddrMode != SADDR_MODE_NONE) && MAC_INTRA_PAN(&rxBuf[1]))
        MOV     A,?V0 + 0
        JZ      ??rxStartIsr_18
        MOV     DPTR,#rxBuf + 1
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.6
        JNC     ??rxStartIsr_18
//  637   {
//  638     addrLen -= MAC_PAN_ID_FIELD_LEN;
        DEC     R6
        DEC     R6
//  639   }
//  640 
//  641   /*
//  642    *  If there are not enough unread bytes to include the computed address
//  643    *  plus FCS field, the frame is corrupted and must be discarded.
//  644    */
//  645   if ((addrLen + MAC_FCS_FIELD_LEN) > rxUnreadLen)
??rxStartIsr_18:
        MOV     DPTR,#rxUnreadLen
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     ?V0 + 2,R6
        MOV     A,?V0 + 2
        ADD     A,#0x2
        MOV     R0,A
        CLR     A
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,R2
        SUBB    A,R0
        CLR     A
        SUBB    A,R1
        CLR     C
        XRL     A,PSW
        RLC     A
        JC      ??rxStartIsr_15
//  646   {
//  647     /* discard frame and exit */
//  648     rxDiscardFrame();
//  649     return;
//  650   }
//  651 
//  652   /* payload length is equal to unread bytes minus address length, minus the FCS */
//  653   rxPayloadLen = rxUnreadLen - addrLen - MAC_FCS_FIELD_LEN;
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,R6
        ADD     A,#-0x2
        MOV     DPTR,#rxPayloadLen
        MOVX    @DPTR,A
//  654 
//  655   /*-------------------------------------------------------------------------------
//  656    *  Allocate memory for the incoming frame.
//  657    */
//  658   pRxBuf = (macRx_t *) MEM_ALLOC(sizeof(macRx_t) + rxPayloadLen);
        ; Setup parameters for call to function macDataRxMemAlloc
        ADD     A,#0x32
        MOV     R2,A
        CLR     A
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ??macDataRxMemAlloc?relay
        MOV     DPTR,#pRxBuf
        LCALL   ?Subroutine5 & 0xFFFF
//  659   if (pRxBuf == NULL)
??CrossCallReturnLabel_50:
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JNZ     ??rxStartIsr_19
//  660   {
//  661     /* Cancel the outgoing TX ACK */
//  662     MAC_RADIO_CANCEL_TX_ACK();
        MOV     0xe1,#-0x18
        SJMP    ??rxStartIsr_15
//  663 
//  664     /* buffer allocation failed, discard the frame and exit*/
//  665     rxDiscardFrame();
//  666     return;
//  667   }
??rxStartIsr_16:
        MOVX    A,@DPTR
        XRL     A,#0x3
        JZ      $+5
        LJMP    ??rxStartIsr_14 & 0xFFFF
        MOV     A,#0x3
        XRL     A,R0
        JNZ     $+5
        LJMP    ??rxStartIsr_14 & 0xFFFF
??rxStartIsr_15:
        ; Setup parameters for call to function rxDiscardFrame
        LCALL   ??rxDiscardFrame?relay
        LJMP    ??rxStartIsr_3 & 0xFFFF
//  668 
//  669   /*-------------------------------------------------------------------------------
//  670    *  Set up to process ACK request.  Do not ACK if in promiscuous mode.
//  671    */
//  672   ackWithPending = 0;
??rxStartIsr_19:
        MOV     R7,#0x0
//  673   if (!rxPromiscuousMode)
        MOV     DPTR,#rxBuf + 1
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     DPTR,#rxPromiscuousMode
        MOVX    A,@DPTR
        JNZ     ??rxStartIsr_20
//  674   {
//  675     macRxOutgoingAckFlag = MAC_ACK_REQUEST(&rxBuf[1]);
        MOV     A,#0x20
        ANL     A,R0
        MOV     DPTR,#macRxOutgoingAckFlag
        MOVX    @DPTR,A
//  676   }
//  677 
//  678   /*-------------------------------------------------------------------------------
//  679    *  Process any ACK request.
//  680    */
//  681   if (macRxOutgoingAckFlag)
??rxStartIsr_20:
        MOV     DPTR,#macRxOutgoingAckFlag
        MOVX    A,@DPTR
        JZ      ??rxStartIsr_21
//  682   {
//  683     halIntState_t  s;
//  684 
//  685     /*
//  686      *  This critical section ensures that the callback ISR is initiated within time
//  687      *  to guarantee correlation with the strobe.
//  688      */
//  689     HAL_ENTER_CRITICAL_SECTION(s);
        MOV     C,0xa8.7
        CLR     A
        RLC     A
        MOV     ?V0 + 2,A
        CLR     0xa8.7
//  690 
//  691     /* Do not ack data packet with pending more data */
//  692     if( MAC_FRAME_TYPE(&rxBuf[1]) == MAC_FRAME_TYPE_COMMAND )
        MOV     A,#0x7
        ANL     A,R0
        XRL     A,#0x3
        JNZ     ??rxStartIsr_22
//  693     {
//  694       if( macRxCheckMACPendingCallback())
        ; Setup parameters for call to function macRxCheckMACPendingCallback
        LCALL   ??macRxCheckMACPendingCallback?relay
        MOV     A,R1
        JZ      ??rxStartIsr_23
//  695       {
//  696         /* Check is any mac data pending for end devices */
//  697         ackWithPending = MAC_RX_FLAG_ACK_PENDING;
??rxStartIsr_24:
        MOV     R7,#0x4
//  698       }
//  699       else
//  700       {
//  701         if( macSrcMatchIsEnabled )
//  702         {
//  703           /* When autopend is enabled, check if allpending is set to true */
//  704           if( MAC_SrcMatchCheckAllPending() == MAC_AUTOACK_PENDING_ALL_ON )
//  705           {
//  706             ackWithPending = MAC_RX_FLAG_ACK_PENDING;
//  707           }
//  708         }
//  709         else
//  710         {
//  711           /* When autopend is disabled, check the application pending callback */
//  712           if( macRxCheckPendingCallback() )
//  713           {
//  714             ackWithPending = MAC_RX_FLAG_ACK_PENDING;
//  715           }
//  716         }
//  717       }
//  718     }
//  719 
//  720     if( ackWithPending == MAC_RX_FLAG_ACK_PENDING )
//  721     {
//  722       MAC_RADIO_TX_ACK_PEND();
        MOV     DPTR,#0x618a
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.2
        SJMP    ??rxStartIsr_25
//  723     }
??rxStartIsr_23:
        MOV     DPTR,#macSrcMatchIsEnabled
        MOVX    A,@DPTR
        JZ      ??rxStartIsr_26
        ; Setup parameters for call to function MAC_SrcMatchCheckAllPending
        LCALL   ??MAC_SrcMatchCheckAllPending?relay
        MOV     A,R1
        XRL     A,#0xfe
        JNZ     ??rxStartIsr_22
        SJMP    ??rxStartIsr_24
??rxStartIsr_26:
        ; Setup parameters for call to function macRxCheckPendingCallback
        LCALL   ??macRxCheckPendingCallback?relay
        MOV     A,R1
        JNZ     ??rxStartIsr_24
//  724     else
//  725     {
//  726       MAC_RADIO_TX_ACK();
??rxStartIsr_22:
        MOV     DPTR,#0x618a
        MOVX    A,@DPTR
        CLR     0xE0 /* A   */.2
//  727     }
??rxStartIsr_25:
        LCALL   ?Subroutine7 & 0xFFFF
//  728 
//  729 
//  730     /* request a callback to macRxAckTxDoneCallback() when the ACK transmit has finished */
//  731     MAC_RADIO_REQUEST_ACK_TX_DONE_CALLBACK();
??CrossCallReturnLabel_9:
        MOV     0x91,#-0x2
        MOV     C,0xE0 /* A   */.7
        MOV     0xa8.7,C
        MOV     DPTR,#0x61a4
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.0
        MOVX    @DPTR,A
//  732     HAL_EXIT_CRITICAL_SECTION(s);
        MOV     A,?V0 + 2
        MOV     C,0xE0 /* A   */.0
        MOV     0xa8.7,C
//  733   }
//  734 
//  735  /*-------------------------------------------------------------------------------
//  736   *  Populate the receive buffer going up to high-level.
//  737   */
//  738 
//  739   /* configure the payload buffer */
//  740   pRxBuf->msdu.p = (uint8 *) (pRxBuf + 1);
??rxStartIsr_21:
        MOV     DPTR,#pRxBuf
        MOVX    A,@DPTR
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_10:
        MOVX    @DPTR,A
//  741   pRxBuf->msdu.len = rxPayloadLen;
        MOV     DPTR,#rxPayloadLen
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_18:
        POP     A
        CFI CFA_SP SP+0
        LCALL   ??Subroutine25_0 & 0xFFFF
//  742 
//  743   /* set internal values */
//  744   pRxBuf->mac.srcAddr.addrMode  = srcAddrMode;
??CrossCallReturnLabel_52:
        ADD     A,#0x1a
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_25:
        MOV     A,?V0 + 0
        LCALL   ??Subroutine25_0 & 0xFFFF
//  745   pRxBuf->mac.dstAddr.addrMode  = dstAddrMode;
??CrossCallReturnLabel_53:
        ADD     A,#0x23
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_26:
        MOV     A,?V0 + 1
        MOVX    @DPTR,A
//  746   pRxBuf->mac.timestamp         = MAC_RADIO_BACKOFF_CAPTURE();
        ; Setup parameters for call to function macMcuOverflowCapture
        LCALL   ??macMcuOverflowCapture?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     ?V0 + 2,R4
        MOV     ?V0 + 3,R5
        MOV     DPTR,#pRxBuf
        MOVX    A,@DPTR
        ADD     A,#0x24
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_27:
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_TO_X
//  747   pRxBuf->mac.timestamp2        = MAC_RADIO_TIMER_CAPTURE();
        ; Setup parameters for call to function macMcuTimerCapture
        LCALL   ??macMcuTimerCapture?relay
        MOV     DPTR,#pRxBuf
        MOVX    A,@DPTR
        ADD     A,#0x28
        LCALL   ?Subroutine11 & 0xFFFF
//  748   pRxBuf->internal.frameType    = MAC_FRAME_TYPE(&rxBuf[1]);
??CrossCallReturnLabel_16:
        MOV     DPTR,#rxBuf + 1
        MOVX    A,@DPTR
        ANL     A,#0x7
        PUSH    A
        CFI CFA_SP SP+-1
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_19:
        INC     DPTR
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  749   pRxBuf->mac.dsn               = MAC_SEQ_NUMBER(&rxBuf[1]);
        MOV     DPTR,#rxBuf + 3
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     DPTR,#pRxBuf
        MOVX    A,@DPTR
        ADD     A,#0x31
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_28:
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  750   pRxBuf->internal.flags        = INTERNAL_FCF_FLAGS(&rxBuf[1]) | ackWithPending;
        MOV     DPTR,#rxBuf + 1
        MOVX    A,@DPTR
        ANL     A,#0x78
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        SWAP    A
        ANL     A,#0xf
        ANL     A,#0x3
        ORL     A,R0
        ORL     A,R7
        PUSH    A
        CFI CFA_SP SP+-1
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_14:
        POP     A
        CFI CFA_SP SP+0
        LCALL   ??Subroutine25_0 & 0xFFFF
//  751   pRxBuf->sec.securityLevel     = MAC_SEC_LEVEL_NONE;
??CrossCallReturnLabel_54:
        ADD     A,#0xf
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_29:
        CLR     A
        MOVX    @DPTR,A
//  752 
//  753   /*-------------------------------------------------------------------------------
//  754    *  If the processing the addressing fields does not require more bytes from
//  755    *  the FIFO go directly address processing function.  Otherwise, configure
//  756    *  interrupt to jump there once bytes are received.
//  757    */
//  758   if (addrLen == 0)
        MOV     A,R6
        JNZ     ??rxStartIsr_27
//  759   {
//  760     /* no addressing fields to read, prepare for payload interrupts */
//  761     pFuncRxState = &rxPayloadIsr;
        LCALL   ?Subroutine6 & 0xFFFF
//  762     rxPrepPayload();
//  763   }
??CrossCallReturnLabel_6:
        SJMP    ??rxStartIsr_3
//  764   else
//  765   {
//  766     /* need to read and process addressing fields, prepare for address interrupt */
//  767     rxNextLen = addrLen;
??rxStartIsr_27:
        MOV     DPTR,#rxNextLen
        MOVX    @DPTR,A
//  768     MAC_RADIO_SET_RX_THRESHOLD(rxNextLen);
        DEC     A
        MOV     DPTR,#0x6194
        MOVX    @DPTR,A
//  769     pFuncRxState = &rxAddrIsr;
        MOV     DPTR,#pFuncRxState
        MOV     A,#??rxAddrIsr?relay & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(??rxAddrIsr?relay >> 8) & 0xff
        MOVX    @DPTR,A
??rxStartIsr_3:
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock17
        REQUIRE RFST
        REQUIRE _A_IEN0
        REQUIRE S1CON
        REQUIRE RFIRQF1
//  770   }
//  771 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine18:
        CFI Block cfiCond18 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_36
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond19 Using cfiCommon0
        CFI (cfiCond19) NoFunction
        CFI (cfiCond19) Conditional ??CrossCallReturnLabel_37
        CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond19) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond19) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond19) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond19) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond19) CFA_SP SP+0
        CFI (cfiCond19) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker20 Using cfiCommon1
        CFI (cfiPicker20) NoFunction
        CFI (cfiPicker20) Picker
        MOV     A,#macRxAddrLen & 0xff
        ADD     A,?V0 + 2
        MOV     DPL,A
        MOV     A,#(macRxAddrLen >> 8) & 0xff
        ADDC    A,#0x0
        MOV     DPH,A
        CLR     A
        MOVC    A,@A+DPTR
        RET
        CFI EndBlock cfiCond18
        CFI EndBlock cfiCond19
        CFI EndBlock cfiPicker20

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
        CFI Block cfiCond21 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_18
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+-1
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond22 Using cfiCommon0
        CFI (cfiCond22) NoFunction
        CFI (cfiCond22) Conditional ??CrossCallReturnLabel_19
        CFI (cfiCond22) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond22) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond22) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond22) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond22) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond22) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond22) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond22) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond22) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond22) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond22) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond22) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond22) CFA_SP SP+-1
        CFI (cfiCond22) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker23 Using cfiCommon1
        CFI (cfiPicker23) NoFunction
        CFI (cfiPicker23) Picker
        LCALL   ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_47:
        RET
        CFI EndBlock cfiCond21
        CFI EndBlock cfiCond22
        CFI EndBlock cfiPicker23

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine22:
        CFI Block cfiCond24 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_47, ??CrossCallReturnLabel_18
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+-1
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond25 Using cfiCommon0
        CFI (cfiCond25) NoFunction
        CFI (cfiCond25) Conditional ??CrossCallReturnLabel_47, ??CrossCallReturnLabel_19
        CFI (cfiCond25) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond25) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond25) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond25) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond25) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond25) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond25) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond25) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond25) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond25) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond25) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond25) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond25) CFA_SP SP+-1
        CFI (cfiCond25) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond26 Using cfiCommon0
        CFI (cfiCond26) NoFunction
        CFI (cfiCond26) Conditional ??CrossCallReturnLabel_46, ??CrossCallReturnLabel_14
        CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond26) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond26) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond26) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond26) CFA_SP SP+-1
        CFI (cfiCond26) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond27 Using cfiCommon0
        CFI (cfiCond27) NoFunction
        CFI (cfiCond27) Conditional ??CrossCallReturnLabel_46, ??CrossCallReturnLabel_15
        CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond27) CFA_SP SP+0
        CFI (cfiCond27) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiPicker28 Using cfiCommon1
        CFI (cfiPicker28) NoFunction
        CFI (cfiPicker28) Picker
        MOV     DPTR,#pRxBuf
        LCALL   ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_49:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond24
        CFI EndBlock cfiCond25
        CFI EndBlock cfiCond26
        CFI EndBlock cfiCond27
        CFI EndBlock cfiPicker28

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond29 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_8
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond30 Using cfiCommon0
        CFI (cfiCond30) NoFunction
        CFI (cfiCond30) Conditional ??CrossCallReturnLabel_9
        CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond30) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond30) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond30) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond30) CFA_SP SP+0
        CFI (cfiCond30) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker31 Using cfiCommon1
        CFI (cfiPicker31) NoFunction
        CFI (cfiPicker31) Picker
        MOVX    @DPTR,A
        MOV     A,0xa8
        CLR     0xa8.7
        MOV     0x9b,#0x0
        RET
        CFI EndBlock cfiCond29
        CFI EndBlock cfiCond30
        CFI EndBlock cfiPicker31
//  772 
//  773 
//  774 /*=================================================================================================
//  775  * @fn          rxAddrIsr
//  776  *
//  777  * @brief       Receive ISR state for decoding address.  Reads and stores the address information
//  778  *              from the incoming packet.
//  779  *
//  780  * @param       none
//  781  *
//  782  * @return      none
//  783  *=================================================================================================
//  784  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  785 static void rxAddrIsr(void)
rxAddrIsr:
        CFI Block cfiBlock32 Using cfiCommon0
        CFI Function rxAddrIsr
        CODE
//  786 {
        FUNCALL rxAddrIsr, halAssertHandler
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxAddrIsr, macMemReadRxFifo
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxAddrIsr, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxAddrIsr, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxAddrIsr, rxPrepPayload
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 20
        MOV     A,#-0x14
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 29)
//  787   uint8 buf[MAX_ADDR_FIELDS_LEN];
//  788   uint8 dstAddrMode;
//  789   uint8 srcAddrMode;
//  790   uint8  * p;
//  791 
//  792   MAC_ASSERT(rxNextLen != 0); /* logic assumes at least one address byte in buffer */
        MOV     DPTR,#rxNextLen
        MOVX    A,@DPTR
        JNZ     ??rxAddrIsr_0
        ; Setup parameters for call to function halAssertHandler
        LCALL   ??halAssertHandler?relay
//  793 
//  794   /*  read out address fields into local buffer in one shot */
//  795   MAC_RADIO_READ_RX_FIFO(buf, rxNextLen);
??rxAddrIsr_0:
        ; Setup parameters for call to function macMemReadRxFifo
        LCALL   ?Subroutine9 & 0xFFFF
//  796 
//  797   /* set pointer to buffer with addressing fields */
//  798   p = buf;
??CrossCallReturnLabel_12:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
//  799 
//  800   /* destination address */
//  801   dstAddrMode = MAC_DEST_ADDR_MODE(&rxBuf[1]);
        MOV     DPTR,#rxBuf + 2
        MOVX    A,@DPTR
        RRC     A
        RRC     A
        ANL     A,#0x3f
        ANL     A,#0x3
        MOV     R6,A
//  802   if (dstAddrMode != SADDR_MODE_NONE)
        JZ      ??rxAddrIsr_1
//  803   {
//  804     pRxBuf->mac.srcPanId = pRxBuf->mac.dstPanId = BUILD_UINT16(p[0], p[1]);
        MOV     DPTR,#pRxBuf
        MOVX    A,@DPTR
        ADD     A,#0x2c
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     A,R4
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPTR,#pRxBuf
        MOVX    A,@DPTR
        ADD     A,#0x2a
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_30:
        LCALL   ?Subroutine5 & 0xFFFF
//  805     p += MAC_PAN_ID_FIELD_LEN;
//  806     if (dstAddrMode == SADDR_MODE_EXT)
??CrossCallReturnLabel_51:
        ADD     A,#0x1b
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R3,A
        MOV     A,#0x3
        XRL     A,R6
        JNZ     ??rxAddrIsr_2
//  807     {
//  808       sAddrExtCpy(pRxBuf->mac.dstAddr.addr.extAddr, p);
        ; Setup parameters for call to function sAddrExtCpy
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        LCALL   ??sAddrExtCpy?relay
//  809       p += MAC_EXT_ADDR_FIELD_LEN;
        MOV     A,#0xa
        SJMP    ??rxAddrIsr_3
//  810     }
//  811     else
//  812     {
//  813       pRxBuf->mac.dstAddr.addr.shortAddr = BUILD_UINT16(p[0], p[1]);
??rxAddrIsr_2:
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R4
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  814       p += MAC_SHORT_ADDR_FIELD_LEN;
        MOV     A,#0x4
??rxAddrIsr_3:
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
//  815     }
//  816   }
//  817 
//  818   /* sources address */
//  819   srcAddrMode = MAC_SRC_ADDR_MODE(&rxBuf[1]);
??rxAddrIsr_1:
        MOV     DPTR,#rxBuf + 2
        MOVX    A,@DPTR
        SWAP    A
        RRC     A
        RRC     A
        ANL     A,#0x3
        MOV     R6,A
//  820   if (srcAddrMode != SADDR_MODE_NONE)
        JZ      ??rxAddrIsr_4
//  821   {
//  822     if (!(pRxBuf->internal.flags & MAC_RX_FLAG_INTRA_PAN))
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_15:
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.6
        JC      ??rxAddrIsr_5
//  823     {
//  824       pRxBuf->mac.srcPanId = BUILD_UINT16(p[0], p[1]);
        MOV     DPL,R4
        MOV     DPH,R5
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R2
        ADD     A,#0x0
        CLR     A
        ADDC    A,R1
        MOV     R3,A
        MOV     DPTR,#pRxBuf
        MOVX    A,@DPTR
        ADD     A,#0x2a
        LCALL   ?Subroutine11 & 0xFFFF
//  825       p += MAC_PAN_ID_FIELD_LEN;
??CrossCallReturnLabel_17:
        MOV     A,R4
        ADD     A,#0x2
        INC     R4
        INC     R4
        MOV     A,R5
        ADDC    A,#0x0
        MOV     R5,A
//  826     }
//  827     if (srcAddrMode == SADDR_MODE_EXT)
??rxAddrIsr_5:
        MOV     DPTR,#pRxBuf
        MOVX    A,@DPTR
        ADD     A,#0x12
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R3,A
        MOV     A,#0x3
        XRL     A,R6
        JNZ     ??rxAddrIsr_6
//  828     {
//  829       sAddrExtCpy(pRxBuf->mac.srcAddr.addr.extAddr, p);
        ; Setup parameters for call to function sAddrExtCpy
        LCALL   ??sAddrExtCpy?relay
        SJMP    ??rxAddrIsr_4
//  830     }
//  831     else
//  832     {
//  833       pRxBuf->mac.srcAddr.addr.shortAddr = BUILD_UINT16(p[0], p[1]);
??rxAddrIsr_6:
        MOV     DPL,R4
        MOV     DPH,R5
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R6
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  834     }
//  835   }
//  836 
//  837   /*-------------------------------------------------------------------------------
//  838    *  Prepare for payload interrupts.
//  839    */
//  840   pFuncRxState = &rxPayloadIsr;
??rxAddrIsr_4:
        LCALL   ?Subroutine6 & 0xFFFF
//  841   rxPrepPayload();
//  842 }
??CrossCallReturnLabel_7:
        MOV     A,#0x14
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock32
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiBlock33 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock33

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine15:
        CFI Block cfiCond34 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_24
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+-1
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond35 Using cfiCommon0
        CFI (cfiCond35) NoFunction
        CFI (cfiCond35) Conditional ??CrossCallReturnLabel_25
        CFI (cfiCond35) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond35) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond35) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond35) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond35) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond35) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond35) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond35) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond35) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond35) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond35) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond35) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond35) CFA_SP SP+0
        CFI (cfiCond35) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond36 Using cfiCommon0
        CFI (cfiCond36) NoFunction
        CFI (cfiCond36) Conditional ??CrossCallReturnLabel_26
        CFI (cfiCond36) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond36) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond36) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond36) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond36) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond36) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond36) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond36) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond36) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond36) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond36) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond36) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond36) CFA_SP SP+0
        CFI (cfiCond36) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond37 Using cfiCommon0
        CFI (cfiCond37) NoFunction
        CFI (cfiCond37) Conditional ??CrossCallReturnLabel_27
        CFI (cfiCond37) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond37) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond37) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond37) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond37) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond37) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond37) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond37) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond37) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond37) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond37) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond37) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond37) CFA_SP SP+0
        CFI (cfiCond37) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond38 Using cfiCommon0
        CFI (cfiCond38) NoFunction
        CFI (cfiCond38) Conditional ??CrossCallReturnLabel_28
        CFI (cfiCond38) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond38) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond38) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond38) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond38) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond38) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond38) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond38) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond38) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond38) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond38) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond38) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond38) CFA_SP SP+-1
        CFI (cfiCond38) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond39 Using cfiCommon0
        CFI (cfiCond39) NoFunction
        CFI (cfiCond39) Conditional ??CrossCallReturnLabel_29
        CFI (cfiCond39) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond39) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond39) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond39) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond39) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond39) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond39) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond39) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond39) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond39) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond39) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond39) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond39) CFA_SP SP+0
        CFI (cfiCond39) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond40 Using cfiCommon0
        CFI (cfiCond40) NoFunction
        CFI (cfiCond40) Conditional ??CrossCallReturnLabel_30
        CFI (cfiCond40) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond40) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond40) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond40) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond40) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond40) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond40) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond40) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond40) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond40) CFA_SP SP+0
        CFI (cfiCond40) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond41 Using cfiCommon0
        CFI (cfiCond41) NoFunction
        CFI (cfiCond41) Conditional ??CrossCallReturnLabel_31
        CFI (cfiCond41) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond41) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond41) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond41) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond41) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond41) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond41) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond41) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond41) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond41) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond41) CFA_SP SP+-1
        CFI (cfiCond41) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker42 Using cfiCommon1
        CFI (cfiPicker42) NoFunction
        CFI (cfiPicker42) Picker
        LCALL   ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_45:
        RET
        CFI EndBlock cfiCond34
        CFI EndBlock cfiCond35
        CFI EndBlock cfiCond36
        CFI EndBlock cfiCond37
        CFI EndBlock cfiCond38
        CFI EndBlock cfiCond39
        CFI EndBlock cfiCond40
        CFI EndBlock cfiCond41
        CFI EndBlock cfiPicker42

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine21:
        CFI Block cfiCond43 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_45, ??CrossCallReturnLabel_24
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+-1
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond44 Using cfiCommon0
        CFI (cfiCond44) NoFunction
        CFI (cfiCond44) Conditional ??CrossCallReturnLabel_45, ??CrossCallReturnLabel_25
        CFI (cfiCond44) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond44) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond44) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond44) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond44) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond44) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond44) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond44) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond44) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond44) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond44) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond44) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond44) CFA_SP SP+0
        CFI (cfiCond44) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond45 Using cfiCommon0
        CFI (cfiCond45) NoFunction
        CFI (cfiCond45) Conditional ??CrossCallReturnLabel_45, ??CrossCallReturnLabel_26
        CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond45) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond45) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond45) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond45) CFA_SP SP+0
        CFI (cfiCond45) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond46 Using cfiCommon0
        CFI (cfiCond46) NoFunction
        CFI (cfiCond46) Conditional ??CrossCallReturnLabel_45, ??CrossCallReturnLabel_27
        CFI (cfiCond46) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond46) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond46) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond46) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond46) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond46) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond46) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond46) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond46) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond46) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond46) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond46) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond46) CFA_SP SP+0
        CFI (cfiCond46) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond47 Using cfiCommon0
        CFI (cfiCond47) NoFunction
        CFI (cfiCond47) Conditional ??CrossCallReturnLabel_45, ??CrossCallReturnLabel_28
        CFI (cfiCond47) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond47) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond47) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond47) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond47) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond47) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond47) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond47) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond47) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond47) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond47) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond47) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond47) CFA_SP SP+-1
        CFI (cfiCond47) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond48 Using cfiCommon0
        CFI (cfiCond48) NoFunction
        CFI (cfiCond48) Conditional ??CrossCallReturnLabel_45, ??CrossCallReturnLabel_29
        CFI (cfiCond48) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond48) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond48) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond48) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond48) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond48) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond48) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond48) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond48) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond48) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond48) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond48) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond48) CFA_SP SP+0
        CFI (cfiCond48) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond49 Using cfiCommon0
        CFI (cfiCond49) NoFunction
        CFI (cfiCond49) Conditional ??CrossCallReturnLabel_45, ??CrossCallReturnLabel_30
        CFI (cfiCond49) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond49) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond49) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond49) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond49) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond49) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond49) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond49) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond49) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond49) CFA_SP SP+0
        CFI (cfiCond49) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond50 Using cfiCommon0
        CFI (cfiCond50) NoFunction
        CFI (cfiCond50) Conditional ??CrossCallReturnLabel_45, ??CrossCallReturnLabel_31
        CFI (cfiCond50) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond50) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond50) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond50) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond50) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond50) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond50) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond50) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond50) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond50) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond50) CFA_SP SP+-1
        CFI (cfiCond50) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond51 Using cfiCommon0
        CFI (cfiCond51) NoFunction
        CFI (cfiCond51) Conditional ??CrossCallReturnLabel_42, ??CrossCallReturnLabel_16
        CFI (cfiCond51) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond51) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond51) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond51) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond51) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond51) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond51) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond51) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond51) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond51) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond51) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond51) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond51) CFA_SP SP+0
        CFI (cfiCond51) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond52 Using cfiCommon0
        CFI (cfiCond52) NoFunction
        CFI (cfiCond52) Conditional ??CrossCallReturnLabel_42, ??CrossCallReturnLabel_17
        CFI (cfiCond52) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond52) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond52) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond52) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond52) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond52) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond52) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond52) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond52) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond52) CFA_SP SP+0
        CFI (cfiCond52) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond53 Using cfiCommon0
        CFI (cfiCond53) NoFunction
        CFI (cfiCond53) Conditional ??CrossCallReturnLabel_44, ??CrossCallReturnLabel_22
        CFI (cfiCond53) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond53) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond53) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond53) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond53) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond53) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond53) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond53) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond53) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond53) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond53) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond53) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond53) CFA_SP SP+0
        CFI (cfiCond53) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond54 Using cfiCommon0
        CFI (cfiCond54) NoFunction
        CFI (cfiCond54) Conditional ??CrossCallReturnLabel_44, ??CrossCallReturnLabel_23
        CFI (cfiCond54) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond54) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond54) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond54) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond54) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond54) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond54) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond54) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond54) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond54) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond54) CFA_SP SP+0
        CFI (cfiCond54) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond55 Using cfiCommon0
        CFI (cfiCond55) NoFunction
        CFI (cfiCond55) Conditional ??CrossCallReturnLabel_43, ??CrossCallReturnLabel_20
        CFI (cfiCond55) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond55) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond55) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond55) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond55) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond55) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond55) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond55) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond55) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond55) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond55) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond55) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond55) CFA_SP SP+0
        CFI (cfiCond55) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond56 Using cfiCommon0
        CFI (cfiCond56) NoFunction
        CFI (cfiCond56) Conditional ??CrossCallReturnLabel_43, ??CrossCallReturnLabel_21
        CFI (cfiCond56) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond56) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond56) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond56) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond56) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond56) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond56) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond56) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond56) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond56) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond56) CFA_SP SP+0
        CFI (cfiCond56) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker57 Using cfiCommon1
        CFI (cfiPicker57) NoFunction
        CFI (cfiPicker57) Picker
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        RET
        CFI EndBlock cfiCond43
        CFI EndBlock cfiCond44
        CFI EndBlock cfiCond45
        CFI EndBlock cfiCond46
        CFI EndBlock cfiCond47
        CFI EndBlock cfiCond48
        CFI EndBlock cfiCond49
        CFI EndBlock cfiCond50
        CFI EndBlock cfiCond51
        CFI EndBlock cfiCond52
        CFI EndBlock cfiCond53
        CFI EndBlock cfiCond54
        CFI EndBlock cfiCond55
        CFI EndBlock cfiCond56
        CFI EndBlock cfiPicker57

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
        CFI Block cfiCond58 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_16
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond59 Using cfiCommon0
        CFI (cfiCond59) NoFunction
        CFI (cfiCond59) Conditional ??CrossCallReturnLabel_17
        CFI (cfiCond59) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond59) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond59) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond59) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond59) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond59) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond59) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond59) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond59) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond59) CFA_SP SP+0
        CFI (cfiCond59) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiPicker60 Using cfiCommon1
        CFI (cfiPicker60) NoFunction
        CFI (cfiPicker60) Picker
        LCALL   ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_42:
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond58
        CFI EndBlock cfiCond59
        CFI EndBlock cfiPicker60

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
        CFI Block cfiCond61 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_14
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+-1
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond62 Using cfiCommon0
        CFI (cfiCond62) NoFunction
        CFI (cfiCond62) Conditional ??CrossCallReturnLabel_15
        CFI (cfiCond62) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond62) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond62) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond62) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond62) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond62) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond62) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond62) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond62) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond62) CFA_SP SP+0
        CFI (cfiCond62) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiPicker63 Using cfiCommon1
        CFI (cfiPicker63) NoFunction
        CFI (cfiPicker63) Picker
        LCALL   ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_46:
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond61
        CFI EndBlock cfiCond62
        CFI EndBlock cfiPicker63

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond64 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_6
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond65 Using cfiCommon0
        CFI (cfiCond65) NoFunction
        CFI (cfiCond65) Conditional ??CrossCallReturnLabel_7
        CFI (cfiCond65) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond65) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond65) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond65) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond65) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond65) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond65) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond65) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond65) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond65) CFA_SP SP+0
        CFI (cfiCond65) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiPicker66 Using cfiCommon1
        CFI (cfiPicker66) NoFunction
        CFI (cfiPicker66) Picker
        MOV     DPTR,#pFuncRxState
        MOV     A,#??rxPayloadIsr?relay & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(??rxPayloadIsr?relay >> 8) & 0xff
        MOVX    @DPTR,A
        ; Setup parameters for call to function rxPrepPayload
        ; Setup parameters for call to function rxPrepPayload
        LCALL   ??rxPrepPayload?relay
        RET
        CFI EndBlock cfiCond64
        CFI EndBlock cfiCond65
        CFI EndBlock cfiPicker66
//  843 
//  844 
//  845 /*=================================================================================================
//  846  * @fn          rxPrepPayload
//  847  *
//  848  * @brief       Common code to prepare for the payload ISR.
//  849  *
//  850  * @param       none
//  851  *
//  852  * @return      none
//  853  *=================================================================================================
//  854  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  855 static void rxPrepPayload(void)
rxPrepPayload:
        CFI Block cfiBlock67 Using cfiCommon0
        CFI Function rxPrepPayload
        CODE
//  856 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  857   if (rxPayloadLen == 0)
        MOV     DPTR,#rxPayloadLen
        MOVX    A,@DPTR
        JNZ     ??rxPrepPayload_0
//  858   {
//  859     MAC_RADIO_SET_RX_THRESHOLD(MAC_FCS_FIELD_LEN);
        MOV     DPTR,#0x6194
        MOV     A,#0x1
        MOVX    @DPTR,A
//  860     pFuncRxState = &rxFcsIsr;
        MOV     DPTR,#pFuncRxState
        MOV     A,#??rxFcsIsr?relay & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(??rxFcsIsr?relay >> 8) & 0xff
        SJMP    ??rxPrepPayload_1
//  861   }
//  862   else
//  863   {
//  864     rxNextLen = MIN(rxPayloadLen, MAX_PAYLOAD_BYTES_READ_PER_INTERRUPT);
??rxPrepPayload_0:
        CLR     C
        SUBB    A,#0x10
        JNC     ??rxPrepPayload_2
        MOVX    A,@DPTR
        MOV     DPTR,#rxNextLen
        SJMP    ??rxPrepPayload_3
??rxPrepPayload_2:
        MOV     DPTR,#rxNextLen
        MOV     A,#0x10
??rxPrepPayload_3:
        MOVX    @DPTR,A
//  865     MAC_RADIO_SET_RX_THRESHOLD(rxNextLen);
        MOVX    A,@DPTR
        DEC     A
        MOV     DPTR,#0x6194
//  866   }
??rxPrepPayload_1:
        SJMP    ?Subroutine0
        CFI EndBlock cfiBlock67
//  867 }
//  868 
//  869 
//  870 /*=================================================================================================
//  871  * @fn          rxPayloadIsr
//  872  *
//  873  * @brief       Receive ISR state for reading out and storing the packet payload.
//  874  *
//  875  * @param       none
//  876  *
//  877  * @return      none
//  878  *=================================================================================================
//  879  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  880 static void rxPayloadIsr(void)
rxPayloadIsr:
        CFI Block cfiBlock68 Using cfiCommon0
        CFI Function rxPayloadIsr
        CODE
//  881 {
        FUNCALL rxPayloadIsr, macMemReadRxFifo
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxPayloadIsr, rxPrepPayload
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  882   MAC_RADIO_READ_RX_FIFO(pRxBuf->msdu.p, rxNextLen);
        ; Setup parameters for call to function macMemReadRxFifo
        MOV     DPTR,#rxNextLen
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPTR,#pRxBuf
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_35:
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??macMemReadRxFifo?relay
//  883   pRxBuf->msdu.p += rxNextLen;
        MOV     DPTR,#pRxBuf
        MOVX    A,@DPTR
        ADD     A,#0x2
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPTR,#rxNextLen
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        ADD     A,R2
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R3,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  884   rxPayloadLen -= rxNextLen;
        MOV     DPTR,#rxNextLen
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     DPTR,#rxPayloadLen
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,R0
        MOVX    @DPTR,A
//  885 
//  886   rxPrepPayload();
        ; Setup parameters for call to function rxPrepPayload
        LCALL   ??rxPrepPayload?relay
//  887 }
        SJMP    ??Subroutine24_0
        CFI EndBlock cfiBlock68

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine17:
        CFI Block cfiCond69 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_34
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond70 Using cfiCommon0
        CFI (cfiCond70) NoFunction
        CFI (cfiCond70) Conditional ??CrossCallReturnLabel_35
        CFI (cfiCond70) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond70) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond70) CFA_SP SP+-5
        CFI Block cfiPicker71 Using cfiCommon1
        CFI (cfiPicker71) NoFunction
        CFI (cfiPicker71) Picker
        LCALL   ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_48:
        RET
        CFI EndBlock cfiCond69
        CFI EndBlock cfiCond70
        CFI EndBlock cfiPicker71

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine23:
        CFI Block cfiCond72 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_49, ??CrossCallReturnLabel_47, ??CrossCallReturnLabel_18
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+-1
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond73 Using cfiCommon0
        CFI (cfiCond73) NoFunction
        CFI (cfiCond73) Conditional ??CrossCallReturnLabel_49, ??CrossCallReturnLabel_47, ??CrossCallReturnLabel_19
        CFI (cfiCond73) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond73) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond73) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond73) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond73) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond73) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond73) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond73) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond73) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond73) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond73) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond73) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond73) CFA_SP SP+-1
        CFI (cfiCond73) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond74 Using cfiCommon0
        CFI (cfiCond74) NoFunction
        CFI (cfiCond74) Conditional ??CrossCallReturnLabel_49, ??CrossCallReturnLabel_46, ??CrossCallReturnLabel_14
        CFI (cfiCond74) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond74) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond74) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond74) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond74) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond74) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond74) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond74) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond74) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond74) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond74) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond74) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond74) CFA_SP SP+-1
        CFI (cfiCond74) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond75 Using cfiCommon0
        CFI (cfiCond75) NoFunction
        CFI (cfiCond75) Conditional ??CrossCallReturnLabel_49, ??CrossCallReturnLabel_46, ??CrossCallReturnLabel_15
        CFI (cfiCond75) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond75) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond75) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond75) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond75) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond75) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond75) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond75) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond75) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond75) CFA_SP SP+0
        CFI (cfiCond75) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond76 Using cfiCommon0
        CFI (cfiCond76) NoFunction
        CFI (cfiCond76) Conditional ??CrossCallReturnLabel_48, ??CrossCallReturnLabel_34
        CFI (cfiCond76) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond76) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond76) CFA_SP SP+-5
        CFI Block cfiCond77 Using cfiCommon0
        CFI (cfiCond77) NoFunction
        CFI (cfiCond77) Conditional ??CrossCallReturnLabel_48, ??CrossCallReturnLabel_35
        CFI (cfiCond77) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond77) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond77) CFA_SP SP+-5
        CFI Block cfiPicker78 Using cfiCommon1
        CFI (cfiPicker78) NoFunction
        CFI (cfiPicker78) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        RET
        CFI EndBlock cfiCond72
        CFI EndBlock cfiCond73
        CFI EndBlock cfiCond74
        CFI EndBlock cfiCond75
        CFI EndBlock cfiCond76
        CFI EndBlock cfiCond77
        CFI EndBlock cfiPicker78

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock79 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        MOVX    @DPTR,A
        CFI EndBlock cfiBlock79
        REQUIRE ??Subroutine24_0
        ; // Fall through to label ??Subroutine24_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine24_0:
        CFI Block cfiBlock80 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP     DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP    ?BRET
        CFI EndBlock cfiBlock80
//  888 
//  889 
//  890 /*=================================================================================================
//  891  * @fn          rxFcsIsr
//  892  *
//  893  * @brief       Receive ISR state for handling the FCS.
//  894  *
//  895  * @param       none
//  896  *
//  897  * @return      none
//  898  *=================================================================================================
//  899  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  900 static void rxFcsIsr(void)
rxFcsIsr:
        CFI Block cfiBlock81 Using cfiCommon0
        CFI Function rxFcsIsr
        CODE
//  901 {
        FUNCALL rxFcsIsr, macMemReadRxFifo
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxFcsIsr, macRxOffRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxFcsIsr, MAC_SrcMatchCheckResult
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxFcsIsr, macRadioComputeLQI
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxFcsIsr, macRxCompleteCallback
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxFcsIsr, macDataRxMemFree
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxFcsIsr, rxDone
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  902   uint8 crcOK;
//  903   uint8 ackWithPending = 0;
        MOV     ?V0 + 0,#0x0
//  904 
//  905   /* read FCS, rxBuf is now available storage */
//  906   MAC_RADIO_READ_RX_FIFO(rxBuf, MAC_FCS_FIELD_LEN);
        ; Setup parameters for call to function macMemReadRxFifo
        MOV     R1,#0x2
        MOV     R2,#rxBuf & 0xff
        MOV     R3,#(rxBuf >> 8) & 0xff
        LCALL   ??macMemReadRxFifo?relay
//  907 
//  908   /*
//  909    *  The FCS has actually been replaced within the radio by a proprietary version of the FCS.
//  910    *  This proprietary FCS is two bytes (same length as the real FCS) and contains:
//  911    *    1) the RSSI value
//  912    *    2) the average correlation value (used for LQI)
//  913    *    3) a CRC passed bit
//  914    */
//  915 
//  916   /* save the "CRC-is-OK" status */
//  917   crcOK = PROPRIETARY_FCS_CRC_OK(rxBuf);
        MOV     DPTR,#rxBuf + 1
        MOVX    A,@DPTR
        ANL     A,#0x80
        MOV     ?V0 + 1,A
//  918 
//  919   /*
//  920    *  See if the frame should be passed up to high-level MAC.  If the CRC is OK, the
//  921    *  the frame is always passed up.  Frames with a bad CRC are also passed up *if*
//  922    *  a special variant of promiscuous mode is active.
//  923    */
//  924   if (crcOK || (rxPromiscuousMode == MAC_PROMISCUOUS_MODE_WITH_BAD_CRC))
        JNZ     ??rxFcsIsr_0
        MOV     DPTR,#rxPromiscuousMode
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??rxFcsIsr_1
//  925   {
//  926     int8 rssiDbm;
//  927     uint8 corr;
//  928 
//  929     /*
//  930      *  As power saving optimization, set state variable to indicate physical receive
//  931      *  has completed and then request turning of the receiver.  This means the receiver
//  932      *  can be off (if other conditions permit) during execution of the callback function.
//  933      *
//  934      *  The receiver will be requested to turn off once again at the end of the receive
//  935      *  logic.  There is no harm in doing this.
//  936      */
//  937     macRxActive = MAC_RX_ACTIVE_DONE;
??rxFcsIsr_0:
        MOV     DPTR,#macRxActive
        MOV     A,#0x2
        MOVX    @DPTR,A
//  938     macRxOffRequest();
        ; Setup parameters for call to function macRxOffRequest
        LCALL   ??macRxOffRequest?relay
//  939 
//  940     /* decode RSSI and correlation values */
//  941     rssiDbm = PROPRIETARY_FCS_RSSI(rxBuf) + MAC_RADIO_RSSI_OFFSET;
        MOV     DPTR,#rxBuf
        MOVX    A,@DPTR
        ADD     A,#-0x49
        MOV     R7,A
//  942 #if defined (HAL_PA_LNA) || defined (HAL_PA_LNA_CC2590)
//  943     MAC_RADIO_RSSI_LNA_OFFSET(rssiDbm);
//  944 #endif
//  945     corr = PROPRIETARY_FCS_CORRELATION_VALUE(rxBuf);
        INC     DPTR
        MOVX    A,@DPTR
        ANL     A,#0x7f
        MOV     R6,A
//  946 
//  947     /* Read the source matching result back */
//  948     if( macSrcMatchIsEnabled && MAC_RADIO_SRC_MATCH_RESULT() )
        MOV     DPTR,#macSrcMatchIsEnabled
        MOVX    A,@DPTR
        JZ      ??rxFcsIsr_2
        ; Setup parameters for call to function MAC_SrcMatchCheckResult
        LCALL   ??MAC_SrcMatchCheckResult?relay
        MOV     A,R1
        JZ      ??rxFcsIsr_2
//  949     {
//  950       /* This result will not overwrite the previously determined pRxBuf->internal.flags */
//  951       ackWithPending = MAC_RX_FLAG_ACK_PENDING;
        MOV     ?V0 + 0,#0x4
//  952     }
//  953 
//  954     /* record parameters that get passed up to high-level */
//  955     pRxBuf->internal.flags |= ( crcOK | ackWithPending );
??rxFcsIsr_2:
        MOV     A,?V0 + 1
        ORL     A,?V0 + 0
        MOV     R0,A
        MOV     DPTR,#pRxBuf
        MOVX    A,@DPTR
        MOV     R1,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        ORL     A,R0
        MOVX    @DPTR,A
//  956     pRxBuf->mac.mpduLinkQuality = macRadioComputeLQI(rssiDbm, corr);
        ; Setup parameters for call to function macRadioComputeLQI
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R1,A
        LCALL   ??macRadioComputeLQI?relay
        MOV     A,R1
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     DPTR,#pRxBuf
        MOVX    A,@DPTR
        ADD     A,#0x2e
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_31:
        POP     A
        CFI CFA_SP SP+0
        LCALL   ??Subroutine25_0 & 0xFFFF
//  957     pRxBuf->mac.rssi = rssiDbm;
??CrossCallReturnLabel_55:
        ADD     A,#0x30
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_21:
        LCALL   ??Subroutine25_0 & 0xFFFF
//  958     pRxBuf->mac.correlation = corr;
??CrossCallReturnLabel_56:
        ADD     A,#0x2f
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_23:
        LCALL   ??Subroutine25_0 & 0xFFFF
//  959 
//  960     /* set the MSDU pointer to point at start of data */
//  961     pRxBuf->msdu.p = (uint8 *) (pRxBuf + 1);
??CrossCallReturnLabel_57:
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_11:
        LCALL   ?Subroutine4 & 0xFFFF
//  962 
//  963     /* finally... execute callback function */
//  964     macRxCompleteCallback(pRxBuf);
??CrossCallReturnLabel_4:
        LCALL   ??macRxCompleteCallback?relay
//  965     pRxBuf = NULL; /* needed to indicate buffer is no longer allocated */
        SJMP    ??rxFcsIsr_3
//  966   }
//  967   else
//  968   {
//  969     /*
//  970      *  The CRC is bad so no ACK was sent.  Cancel any callback and clear the flag.
//  971      *  (It's OK to cancel the outgoing ACK even if an ACK was not requested.  It's
//  972      *  slightly more efficient to do so.)
//  973      */
//  974     MAC_RADIO_CANCEL_ACK_TX_DONE_CALLBACK();
??rxFcsIsr_1:
        LCALL   ?Subroutine16 & 0xFFFF
//  975     macRxOutgoingAckFlag = 0;
??CrossCallReturnLabel_33:
        LCALL   ?Subroutine4 & 0xFFFF
//  976 
//  977     /* the CRC failed so the packet must be discarded */
//  978     MEM_FREE((uint8 *) pRxBuf);
??CrossCallReturnLabel_5:
        LCALL   ??macDataRxMemFree?relay
//  979     pRxBuf = NULL;  /* needed to indicate buffer is no longer allocated */
??rxFcsIsr_3:
        MOV     DPTR,#pRxBuf
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  980   }
//  981 
//  982   /* reset threshold level, reset receive state, and complete receive logic */
//  983   MAC_RADIO_SET_RX_THRESHOLD(RX_THRESHOLD_START_LEN);
        LCALL   ?Subroutine2 & 0xFFFF
//  984   pFuncRxState = &rxStartIsr;
//  985   rxDone();
//  986 }
??CrossCallReturnLabel_0:
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock81

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine16:
        CFI Block cfiCond82 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_32
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond83 Using cfiCommon0
        CFI (cfiCond83) NoFunction
        CFI (cfiCond83) Conditional ??CrossCallReturnLabel_33
        CFI (cfiCond83) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond83) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond83) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond83) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond83) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond83) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond83) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond83) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond83) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond83) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond83) CFA_SP SP+0
        CFI (cfiCond83) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker84 Using cfiCommon1
        CFI (cfiPicker84) NoFunction
        CFI (cfiPicker84) Picker
        MOV     DPTR,#0x61a4
        MOVX    A,@DPTR
        CLR     0xE0 /* A   */.0
        MOVX    @DPTR,A
        MOV     DPTR,#macRxOutgoingAckFlag
        CLR     A
        RET
        CFI EndBlock cfiCond82
        CFI EndBlock cfiCond83
        CFI EndBlock cfiPicker84

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine14:
        CFI Block cfiCond85 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_22
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond86 Using cfiCommon0
        CFI (cfiCond86) NoFunction
        CFI (cfiCond86) Conditional ??CrossCallReturnLabel_23
        CFI (cfiCond86) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond86) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond86) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond86) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond86) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond86) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond86) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond86) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond86) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond86) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond86) CFA_SP SP+0
        CFI (cfiCond86) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker87 Using cfiCommon1
        CFI (cfiPicker87) NoFunction
        CFI (cfiPicker87) Picker
        LCALL   ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_44:
        MOV     A,R6
        RET
        CFI EndBlock cfiCond85
        CFI EndBlock cfiCond86
        CFI EndBlock cfiPicker87

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
        CFI Block cfiCond88 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_20
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond89 Using cfiCommon0
        CFI (cfiCond89) NoFunction
        CFI (cfiCond89) Conditional ??CrossCallReturnLabel_21
        CFI (cfiCond89) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond89) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond89) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond89) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond89) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond89) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond89) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond89) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond89) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond89) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond89) CFA_SP SP+0
        CFI (cfiCond89) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker90 Using cfiCommon1
        CFI (cfiPicker90) NoFunction
        CFI (cfiPicker90) Picker
        LCALL   ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_43:
        MOV     A,R7
        RET
        CFI EndBlock cfiCond88
        CFI EndBlock cfiCond89
        CFI EndBlock cfiPicker90

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiCond91 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_10
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond92 Using cfiCommon0
        CFI (cfiCond92) NoFunction
        CFI (cfiCond92) Conditional ??CrossCallReturnLabel_11
        CFI (cfiCond92) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond92) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond92) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond92) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond92) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond92) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond92) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond92) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond92) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond92) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond92) CFA_SP SP+0
        CFI (cfiCond92) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker93 Using cfiCommon1
        CFI (cfiPicker93) NoFunction
        CFI (cfiPicker93) Picker
        ADD     A,#0x32
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPTR,#pRxBuf
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R2
        INC     DPTR
        INC     DPTR
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        RET
        CFI EndBlock cfiCond91
        CFI EndBlock cfiCond92
        CFI EndBlock cfiPicker93

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond94 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_50
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond95 Using cfiCommon0
        CFI (cfiCond95) NoFunction
        CFI (cfiCond95) Conditional ??CrossCallReturnLabel_51
        CFI (cfiCond95) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond95) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond95) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond95) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond95) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond95) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond95) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond95) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond95) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond95) CFA_SP SP+0
        CFI (cfiCond95) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiPicker96 Using cfiCommon1
        CFI (cfiPicker96) NoFunction
        CFI (cfiPicker96) Picker
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        CFI EndBlock cfiCond94
        CFI EndBlock cfiCond95
        CFI EndBlock cfiPicker96
        REQUIRE ??Subroutine25_0
        ; // Fall through to label ??Subroutine25_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine25_0:
        CFI Block cfiCond97 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_52
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond98 Using cfiCommon0
        CFI (cfiCond98) NoFunction
        CFI (cfiCond98) Conditional ??CrossCallReturnLabel_53
        CFI (cfiCond98) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond98) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond98) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond98) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond98) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond98) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond98) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond98) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond98) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond98) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond98) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond98) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond98) CFA_SP SP+0
        CFI (cfiCond98) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond99 Using cfiCommon0
        CFI (cfiCond99) NoFunction
        CFI (cfiCond99) Conditional ??CrossCallReturnLabel_54
        CFI (cfiCond99) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond99) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond99) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond99) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond99) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond99) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond99) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond99) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond99) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond99) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond99) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond99) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond99) CFA_SP SP+0
        CFI (cfiCond99) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond100 Using cfiCommon0
        CFI (cfiCond100) NoFunction
        CFI (cfiCond100) Conditional ??CrossCallReturnLabel_55
        CFI (cfiCond100) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond100) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond100) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond100) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond100) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond100) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond100) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond100) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond100) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond100) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond100) CFA_SP SP+0
        CFI (cfiCond100) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond101 Using cfiCommon0
        CFI (cfiCond101) NoFunction
        CFI (cfiCond101) Conditional ??CrossCallReturnLabel_56
        CFI (cfiCond101) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond101) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond101) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond101) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond101) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond101) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond101) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond101) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond101) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond101) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond101) CFA_SP SP+0
        CFI (cfiCond101) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond102 Using cfiCommon0
        CFI (cfiCond102) NoFunction
        CFI (cfiCond102) Conditional ??CrossCallReturnLabel_57
        CFI (cfiCond102) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond102) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond102) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond102) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond102) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond102) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond102) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond102) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond102) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond102) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond102) CFA_SP SP+0
        CFI (cfiCond102) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond103 Using cfiCommon0
        CFI (cfiCond103) NoFunction
        CFI (cfiCond103) Conditional ??CrossCallReturnLabel_50
        CFI (cfiCond103) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond103) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond103) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond103) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond103) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond103) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond103) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond103) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond103) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond103) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond103) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond103) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond103) CFA_SP SP+0
        CFI (cfiCond103) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond104 Using cfiCommon0
        CFI (cfiCond104) NoFunction
        CFI (cfiCond104) Conditional ??CrossCallReturnLabel_51
        CFI (cfiCond104) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond104) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond104) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond104) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond104) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond104) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond104) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond104) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond104) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond104) CFA_SP SP+0
        CFI (cfiCond104) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiPicker105 Using cfiCommon1
        CFI (cfiPicker105) NoFunction
        CFI (cfiPicker105) Picker
        MOVX    @DPTR,A
        MOV     DPTR,#pRxBuf
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond97
        CFI EndBlock cfiCond98
        CFI EndBlock cfiCond99
        CFI EndBlock cfiCond100
        CFI EndBlock cfiCond101
        CFI EndBlock cfiCond102
        CFI EndBlock cfiCond103
        CFI EndBlock cfiCond104
        CFI EndBlock cfiPicker105

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond106 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond107 Using cfiCommon0
        CFI (cfiCond107) NoFunction
        CFI (cfiCond107) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond107) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond107) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond107) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond107) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond107) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond107) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond107) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond107) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond107) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond107) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond107) CFA_SP SP+0
        CFI (cfiCond107) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker108 Using cfiCommon1
        CFI (cfiPicker108) NoFunction
        CFI (cfiPicker108) Picker
        MOVX    @DPTR,A
        ; Setup parameters for call to function macRxCompleteCallback
        ; Setup parameters for call to function macDataRxMemFree
        MOV     DPTR,#pRxBuf
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        RET
        CFI EndBlock cfiCond106
        CFI EndBlock cfiCond107
        CFI EndBlock cfiPicker108
//  987 
//  988 
//  989 /*=================================================================================================
//  990  * @fn          rxDone
//  991  *
//  992  * @brief       Common exit point for receive.
//  993  *
//  994  * @param       none
//  995  *
//  996  * @return      none
//  997  *=================================================================================================
//  998  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  999 static void rxDone(void)
rxDone:
        CFI Block cfiBlock109 Using cfiCommon0
        CFI Function rxDone
        CODE
// 1000 {
        FUNCALL rxDone, rxPostRxUpdates
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1001   /* if the receive FIFO has overflowed, flush it here */
// 1002   if (MAC_RADIO_RX_FIFO_HAS_OVERFLOWED())
        MOV     DPTR,#0x6193
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.6
        JNC     ??rxDone_0
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.7
        JC      ??rxDone_0
// 1003   {
// 1004     MAC_RADIO_FLUSH_RX_FIFO();
        MOV     0xe1,#-0x13
        MOV     0xe1,#-0x13
// 1005   }
// 1006 
// 1007   /* mark receive as inactive */
// 1008   macRxActive = MAC_RX_ACTIVE_NO_ACTIVITY;
??rxDone_0:
        MOV     DPTR,#macRxActive
        CLR     A
        MOVX    @DPTR,A
// 1009 
// 1010   /* if there is no outgoing ACK, run the post receive updates */
// 1011   if (!macRxOutgoingAckFlag)
        MOV     DPTR,#macRxOutgoingAckFlag
        MOVX    A,@DPTR
        JNZ     ??rxDone_1
// 1012   {
// 1013     rxPostRxUpdates();
        ; Setup parameters for call to function rxPostRxUpdates
        LCALL   ??rxPostRxUpdates?relay
// 1014   }
// 1015 }
??rxDone_1:
        LJMP    ??Subroutine24_0 & 0xFFFF
        CFI EndBlock cfiBlock109
        REQUIRE RFST
// 1016 
// 1017 
// 1018 /**************************************************************************************************
// 1019  * @fn          macRxAckTxDoneCallback
// 1020  *
// 1021  * @brief       Function called when the outoing ACK has completed transmitting.
// 1022  *
// 1023  * @param       none
// 1024  *
// 1025  * @return      none
// 1026  **************************************************************************************************
// 1027  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1028 void macRxAckTxDoneCallback(void)
macRxAckTxDoneCallback:
        CFI Block cfiBlock110 Using cfiCommon0
        CFI Function macRxAckTxDoneCallback
        CODE
// 1029 {
        FUNCALL macRxAckTxDoneCallback, rxPostRxUpdates
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1030   macRxOutgoingAckFlag = 0;
        MOV     DPTR,#macRxOutgoingAckFlag
        CLR     A
        MOVX    @DPTR,A
// 1031 
// 1032   /*
// 1033    *  With certain interrupt priorities and timing conditions, it is possible this callback
// 1034    *  could be executed before the primary receive logic completes.  To prevent this, the
// 1035    *  post updates are only executed if receive logic is no longer active.  In the case the
// 1036    *  post updates are not executed here, they will execute when the main receive logic
// 1037    *  completes.
// 1038    */
// 1039   if (!macRxActive)
        MOV     DPTR,#macRxActive
        MOVX    A,@DPTR
        JNZ     ??macRxAckTxDoneCallback_0
// 1040   {
// 1041     rxPostRxUpdates();
        ; Setup parameters for call to function rxPostRxUpdates
        LCALL   ??rxPostRxUpdates?relay
// 1042   }
// 1043 }
??macRxAckTxDoneCallback_0:
        LJMP    ??Subroutine24_0 & 0xFFFF
        CFI EndBlock cfiBlock110
// 1044 
// 1045 
// 1046 /*=================================================================================================
// 1047  * @fn          rxPostRxUpdates
// 1048  *
// 1049  * @brief       Updates that need to be performed once receive is complete.
// 1050  *
// 1051  *              It is not fatal to execute this function if somehow receive is active.  Under
// 1052  *              certain timing/interrupt conditions a new receive may have started before this
// 1053  *              function executes.  This should happen very rarely (if it happens at all) and
// 1054  *              would cause no problems.
// 1055  *
// 1056  * @param       none
// 1057  *
// 1058  * @return      none
// 1059  *=================================================================================================
// 1060  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1061 static void rxPostRxUpdates(void)
rxPostRxUpdates:
        CFI Block cfiBlock111 Using cfiCommon0
        CFI Function rxPostRxUpdates
        CODE
// 1062 {
        FUNCALL rxPostRxUpdates, macRxOffRequest
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxPostRxUpdates, macRadioUpdateTxPower
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxPostRxUpdates, macTxStartQueuedFrame
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1063   /* turn off receiver if permitted */
// 1064   macRxOffRequest();
        ; Setup parameters for call to function macRxOffRequest
        LCALL   ??macRxOffRequest?relay
// 1065 
// 1066   /* update the transmit power, update may have been blocked by transmit of outgoing ACK */
// 1067   macRadioUpdateTxPower();
        ; Setup parameters for call to function macRadioUpdateTxPower
        LCALL   ??macRadioUpdateTxPower?relay
// 1068 
// 1069   /* initiate and transmit that was queued during receive */
// 1070   macTxStartQueuedFrame();
        ; Setup parameters for call to function macTxStartQueuedFrame
        LCALL   ??macTxStartQueuedFrame?relay
// 1071 }
        LJMP    ??Subroutine24_0 & 0xFFFF
        CFI EndBlock cfiBlock111
// 1072 
// 1073 
// 1074 /*=================================================================================================
// 1075  * @fn          rxDiscardFrame
// 1076  *
// 1077  * @brief       Initializes for discarding a packet.  Must be called before ACK is strobed.
// 1078  *
// 1079  * @param       none
// 1080  *
// 1081  * @return      none
// 1082  *=================================================================================================
// 1083  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1084 static void rxDiscardFrame(void)
rxDiscardFrame:
        CFI Block cfiBlock112 Using cfiCommon0
        CFI Function rxDiscardFrame
        CODE
// 1085 {
        FUNCALL rxDiscardFrame, halAssertHandler
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxDiscardFrame, rxDone
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1086   MAC_ASSERT(pFuncRxState == &rxStartIsr); /* illegal state for calling discard frame function */
        MOV     DPTR,#pFuncRxState
        MOVX    A,@DPTR
        XRL     A,#??rxStartIsr?relay & 0xff
        JNZ     ??rxDiscardFrame_0
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#(??rxStartIsr?relay >> 8) & 0xff
??rxDiscardFrame_0:
        JZ      ??rxDiscardFrame_1
        ; Setup parameters for call to function halAssertHandler
        LCALL   ??halAssertHandler?relay
// 1087 
// 1088   if (rxUnreadLen == 0)
??rxDiscardFrame_1:
        MOV     DPTR,#rxUnreadLen
        MOVX    A,@DPTR
        JNZ     ??rxDiscardFrame_2
// 1089   {
// 1090     rxDone();
        ; Setup parameters for call to function rxDone
        LCALL   ??rxDone?relay
        SJMP    ??rxDiscardFrame_3
// 1091   }
// 1092   else
// 1093   {
// 1094     rxNextLen = MIN(rxUnreadLen, MAX_PAYLOAD_BYTES_READ_PER_INTERRUPT);
??rxDiscardFrame_2:
        CLR     C
        SUBB    A,#0x10
        JNC     ??rxDiscardFrame_4
        MOVX    A,@DPTR
        MOV     DPTR,#rxNextLen
        SJMP    ??rxDiscardFrame_5
??rxDiscardFrame_4:
        MOV     DPTR,#rxNextLen
        MOV     A,#0x10
??rxDiscardFrame_5:
        MOVX    @DPTR,A
// 1095     MAC_RADIO_SET_RX_THRESHOLD(rxNextLen);
        MOVX    A,@DPTR
        DEC     A
        MOV     DPTR,#0x6194
        MOVX    @DPTR,A
// 1096     pFuncRxState = &rxDiscardIsr;
        MOV     DPTR,#pFuncRxState
        MOV     A,#??rxDiscardIsr?relay & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(??rxDiscardIsr?relay >> 8) & 0xff
        MOVX    @DPTR,A
// 1097   }
// 1098 }
??rxDiscardFrame_3:
        LJMP    ??Subroutine24_0 & 0xFFFF
        CFI EndBlock cfiBlock112
// 1099 
// 1100 
// 1101 /*=================================================================================================
// 1102  * @fn          rxDiscardIsr
// 1103  *
// 1104  * @brief       Receive ISR state for discarding a packet.
// 1105  *
// 1106  * @param       none
// 1107  *
// 1108  * @return      none
// 1109  *=================================================================================================
// 1110  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1111 static void rxDiscardIsr(void)
rxDiscardIsr:
        CFI Block cfiBlock113 Using cfiCommon0
        CFI Function rxDiscardIsr
        CODE
// 1112 {
        FUNCALL rxDiscardIsr, macMemReadRxFifo
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxDiscardIsr, rxDone
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 16
        MOV     A,#-0x10
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
// 1113   uint8 buf[MAX_PAYLOAD_BYTES_READ_PER_INTERRUPT];
// 1114 
// 1115   MAC_RADIO_READ_RX_FIFO(buf, rxNextLen);
        ; Setup parameters for call to function macMemReadRxFifo
        LCALL   ?Subroutine9 & 0xFFFF
// 1116   rxUnreadLen -= rxNextLen;
??CrossCallReturnLabel_13:
        MOV     DPTR,#rxNextLen
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     DPTR,#rxUnreadLen
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,R0
        MOVX    @DPTR,A
// 1117 
// 1118   /* read out and discard bytes until all bytes of packet are disposed of */
// 1119   if (rxUnreadLen != 0)
        JZ      ??rxDiscardIsr_0
// 1120   {
// 1121     if (rxUnreadLen < MAX_PAYLOAD_BYTES_READ_PER_INTERRUPT)
        CLR     C
        SUBB    A,#0x10
        JNC     ??CrossCallReturnLabel_1
// 1122     {
// 1123       rxNextLen = rxUnreadLen;
        MOVX    A,@DPTR
        MOV     DPTR,#rxNextLen
        MOVX    @DPTR,A
// 1124       MAC_RADIO_SET_RX_THRESHOLD(rxNextLen);
        DEC     A
        MOV     DPTR,#0x6194
        MOVX    @DPTR,A
        SJMP    ??CrossCallReturnLabel_1
// 1125     }
// 1126   }
// 1127   else
// 1128   {
// 1129     /* reset threshold level, reset receive state, and complete receive logic */
// 1130     MAC_RADIO_SET_RX_THRESHOLD(RX_THRESHOLD_START_LEN);
??rxDiscardIsr_0:
        LCALL   ?Subroutine2 & 0xFFFF
// 1131     pFuncRxState = &rxStartIsr;
// 1132     rxDone();
// 1133   }
// 1134 }
??CrossCallReturnLabel_1:
        MOV     A,#0x10
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 XSP16+0
        LJMP    ??Subroutine24_0 & 0xFFFF
        CFI EndBlock cfiBlock113

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
        CFI Block cfiCond114 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_12
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond115 Using cfiCommon0
        CFI (cfiCond115) NoFunction
        CFI (cfiCond115) Conditional ??CrossCallReturnLabel_13
        CFI (cfiCond115) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond115) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond115) CFA_SP SP+-5
        CFI (cfiCond115) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker116 Using cfiCommon1
        CFI (cfiPicker116) NoFunction
        CFI (cfiPicker116) Picker
        MOV     DPTR,#rxNextLen
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??macMemReadRxFifo?relay
        RET
        CFI EndBlock cfiCond114
        CFI EndBlock cfiCond115
        CFI EndBlock cfiPicker116

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond117 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond118 Using cfiCommon0
        CFI (cfiCond118) NoFunction
        CFI (cfiCond118) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond118) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond118) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond118) CFA_SP SP+-5
        CFI (cfiCond118) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker119 Using cfiCommon1
        CFI (cfiPicker119) NoFunction
        CFI (cfiPicker119) Picker
        MOV     DPTR,#0x6194
        MOV     A,#0x5
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_41:
        ; Setup parameters for call to function rxDone
        ; Setup parameters for call to function rxDone
        LCALL   ??rxDone?relay
        RET
        CFI EndBlock cfiCond117
        CFI EndBlock cfiCond118
        CFI EndBlock cfiPicker119
// 1135 
// 1136 
// 1137 /**************************************************************************************************
// 1138  * @fn          maxRxRifoOverflowIsr
// 1139  *
// 1140  * @brief       This interrupt service routine is called when RX FIFO overflow. Note that this
// 1141  *              exception does not retrieve the good frames that are trapped in the RX FIFO.
// 1142  *              It simply halts and cleanup the RX.
// 1143  *
// 1144  * @param       none
// 1145  *
// 1146  * @return      none
// 1147  **************************************************************************************************
// 1148  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1149 void macRxFifoOverflowIsr(void)
macRxFifoOverflowIsr:
        CFI Block cfiBlock120 Using cfiCommon0
        CFI Function macRxFifoOverflowIsr
        CODE
// 1150 {
        FUNCALL macRxFifoOverflowIsr, macRxOff
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL macRxFifoOverflowIsr, macRxHaltCleanup
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL macRxFifoOverflowIsr, macRxOnRequest
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1151   rxFifoOverflowCount++; /* This flag is used for debug purpose only */
        MOV     DPTR,#rxFifoOverflowCount
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
// 1152   macRxOff();
        ; Setup parameters for call to function macRxOff
        LCALL   ??macRxOff?relay
// 1153   macRxHaltCleanup();
        ; Setup parameters for call to function macRxHaltCleanup
        LCALL   ??macRxHaltCleanup?relay
// 1154   macRxOnRequest();
        ; Setup parameters for call to function macRxOnRequest
        LCALL   ??macRxOnRequest?relay
// 1155 }
        LJMP    ??Subroutine24_0 & 0xFFFF
        CFI EndBlock cfiBlock120
// 1156 
// 1157 
// 1158 /**************************************************************************************************
// 1159  * @fn          macRxPromiscuousMode
// 1160  *
// 1161  * @brief       Sets promiscuous mode - enabling or disabling it.
// 1162  *
// 1163  * @param       none
// 1164  *
// 1165  * @return      none
// 1166  **************************************************************************************************
// 1167  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1168 void macRxPromiscuousMode(uint8 mode)
macRxPromiscuousMode:
        CFI Block cfiBlock121 Using cfiCommon0
        CFI Function macRxPromiscuousMode
        CODE
// 1169 {
        FUNCALL macRxPromiscuousMode, halAssertHandler
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
// 1170   rxPromiscuousMode = mode;
        MOV     DPTR,#rxPromiscuousMode
        MOVX    @DPTR,A
// 1171 
// 1172   if (rxPromiscuousMode == MAC_PROMISCUOUS_MODE_OFF)
        JNZ     ??macRxPromiscuousMode_0
// 1173   {
// 1174       MAC_RADIO_TURN_ON_RX_FRAME_FILTERING();
        MOV     DPTR,#0x6180
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.0
        SJMP    ??macRxPromiscuousMode_1
// 1175   }
// 1176   else
// 1177   {
// 1178     MAC_ASSERT((mode == MAC_PROMISCUOUS_MODE_WITH_BAD_CRC)   ||
// 1179                (mode == MAC_PROMISCUOUS_MODE_COMPLIANT));  /* invalid mode */
??macRxPromiscuousMode_0:
        MOV     A,#0x2
        XRL     A,R6
        JZ      ??macRxPromiscuousMode_2
        MOV     A,#0x1
        XRL     A,R6
        JZ      ??macRxPromiscuousMode_2
        ; Setup parameters for call to function halAssertHandler
        LCALL   ??halAssertHandler?relay
// 1180 
// 1181     MAC_RADIO_TURN_OFF_RX_FRAME_FILTERING();
??macRxPromiscuousMode_2:
        MOV     DPTR,#0x6180
        MOVX    A,@DPTR
        CLR     0xE0 /* A   */.0
??macRxPromiscuousMode_1:
        MOVX    @DPTR,A
// 1182   }
// 1183 }
        LJMP    ?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock121

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??macRxInit?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    macRxInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??macRxRadioPowerUpInit?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    macRxRadioPowerUpInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??macRxTxReset?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    macRxTxReset

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??macRxHaltCleanup?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    macRxHaltCleanup

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??rxHaltCleanupFinalStep?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    rxHaltCleanupFinalStep

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??macRxThresholdIsr?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    macRxThresholdIsr

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??rxStartIsr?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    rxStartIsr

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??rxAddrIsr?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    rxAddrIsr

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??rxPrepPayload?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    rxPrepPayload

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??rxPayloadIsr?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    rxPayloadIsr

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??rxFcsIsr?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    rxFcsIsr

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??rxDone?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    rxDone

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??macRxAckTxDoneCallback?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    macRxAckTxDoneCallback

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??rxPostRxUpdates?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    rxPostRxUpdates

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??rxDiscardFrame?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    rxDiscardFrame

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??rxDiscardIsr?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    rxDiscardIsr

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??macRxFifoOverflowIsr?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    macRxFifoOverflowIsr

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??macRxPromiscuousMode?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    macRxPromiscuousMode

        END
// 1184 
// 1185 
// 1186 
// 1187 /**************************************************************************************************
// 1188  *                                  Compile Time Integrity Checks
// 1189  **************************************************************************************************
// 1190  */
// 1191 
// 1192 /* check for changes to the spec that would affect the source code */
// 1193 #if ((MAC_A_MAX_PHY_PACKET_SIZE   !=  0x7F )   ||  \ 
// 1194      (MAC_FCF_FIELD_LEN           !=  2    )   ||  \ 
// 1195      (MAC_FCF_FRAME_TYPE_POS      !=  0    )   ||  \ 
// 1196      (MAC_FCF_FRAME_PENDING_POS   !=  4    )   ||  \ 
// 1197      (MAC_FCF_ACK_REQUEST_POS     !=  5    )   ||  \ 
// 1198      (MAC_FCF_INTRA_PAN_POS       !=  6    )   ||  \ 
// 1199      (MAC_FCF_DST_ADDR_MODE_POS   !=  10   )   ||  \ 
// 1200      (MAC_FCF_FRAME_VERSION_POS   !=  12   )   ||  \ 
// 1201      (MAC_FCF_SRC_ADDR_MODE_POS   !=  14   ))
// 1202 #error "ERROR!  Change to the spec that requires modification of source code."
// 1203 #endif
// 1204 
// 1205 /* check for changes to the internal flags format */
// 1206 #if ((MAC_RX_FLAG_VERSION      !=  0x03)  ||  \ 
// 1207      (MAC_RX_FLAG_ACK_PENDING  !=  0x04)  ||  \ 
// 1208      (MAC_RX_FLAG_SECURITY     !=  0x08)  ||  \ 
// 1209      (MAC_RX_FLAG_PENDING      !=  0x10)  ||  \ 
// 1210      (MAC_RX_FLAG_ACK_REQUEST  !=  0x20)  ||  \ 
// 1211      (MAC_RX_FLAG_INTRA_PAN    !=  0x40))
// 1212 #error "ERROR!  Change to the internal RX flags format.  Requires modification of source code."
// 1213 #endif
// 1214 
// 1215 /* validate CRC OK bit optimization */
// 1216 #if (MAC_RX_FLAG_CRC_OK != PROPRIETARY_FCS_CRC_OK_BIT)
// 1217 #error "ERROR!  Optimization relies on these bits having the same position."
// 1218 #endif
// 1219 
// 1220 #if (MAC_RX_ACTIVE_NO_ACTIVITY != 0x00)
// 1221 #error "ERROR! Zero is reserved value of macRxActive. Allows boolean operations, e.g !macRxActive."
// 1222 #endif
// 1223 
// 1224 #if (MAC_PROMISCUOUS_MODE_OFF != 0x00)
// 1225 #error "ERROR! Zero is reserved value of rxPromiscuousMode. Allows boolean operations, e.g !rxPromiscuousMode."
// 1226 #endif
// 1227 
// 1228 
// 1229 /**************************************************************************************************
// 1230 */
// 
// 2 131 bytes in segment BANKED_CODE
//   108 bytes in segment BANK_RELAYS
//     4 bytes in segment CODE_C
//     5 bytes in segment SFR_AN
//    19 bytes in segment XDATA_Z
// 
// 2 243 bytes of CODE  memory
//     0 bytes of DATA  memory (+ 5 bytes shared)
//    19 bytes of XDATA memory
//
//Errors: none
//Warnings: none
