###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         03/Jul/2018  14:53:02 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Components\hal\common\hal_drivers.c                #
#    Command line       =  -f D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ #
#                          ¸Ä\Projects\zstack\Utilities\SerialApp\CC2530DB\.. #
#                          \..\..\Tools\CC2530DB\f8wRouter.cfg (-DCPU32MHZ    #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRU #
#                          E -DRTR_NWK -DBLINK_LEDS) -f                       #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\Tools\CC2530DB\f8wConfig.cfg (-DSECURE=0       #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Components\hal\common\hal_drivers.c -D ZIGBEEPRO   #
#                          -D HAL_UART=TRUE -D SERIAL_APP_PORT=0 -D           #
#                          LCD_SUPPORTED -lC D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼ #
#                          «\WSN_ZigBee_ÐÞ¸Ä\Projects\zstack\Utilities\Serial #
#                          App\CC2530DB\RouterEB-Pro\List\ -lA                #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\Route #
#                          rEB-Pro\List\ --diag_suppress Pe001,Pa010 -o       #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\Route #
#                          rEB-Pro\Obj\ -e --debug --core=plain --dptr=16,1   #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 8 -I  #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\ -I   #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\SO #
#                          URCE\ -I D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_Zig #
#                          Bee_ÐÞ¸Ä\Projects\zstack\Utilities\SerialApp\CC253 #
#                          0DB\..\..\..\ZMAIN\TI2530DB\ -I                    #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\MT\ -I                        #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\HAL\INCLUDE\ -I               #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\ -I       #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\OSAL\MCU\CCSOC\ -I            #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\OSAL\INCLUDE\ -I              #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\STACK\AF\ -I                  #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\STACK\NWK\ -I                 #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\STACK\SEC\ -I                 #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\STACK\SAPI\ -I                #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\STACK\SYS\ -I                 #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\STACK\ZDO\ -I                 #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\ZMAC\F8W\ -I                  #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\ZMAC\ -I                      #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\SERVICES\SADDR\ -I            #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\SERVICES\SDATA\ -I            #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\MAC\INCLUDE\ -I               #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\MAC\HIGH_LEVEL\ -I            #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\ -I       #
#                          D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CH #
#                          IP\ -Ohz --require_prototypes                      #
#    List file          =  D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\Route #
#                          rEB-Pro\List\hal_drivers.lst                       #
#    Object file        =  D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\Route #
#                          rEB-Pro\Obj\hal_drivers.r51                        #
#                                                                             #
#                                                                             #
###############################################################################

D:\ÊµÏ°×ÊÁÏ\Àí¹¤´óÎïÁªÍøÊµÏ°\ÖÕ¼«\WSN_ZigBee_ÐÞ¸Ä\Components\hal\common\hal_drivers.c
      1          /**************************************************************************************************
      2            Filename:       hal_drivers.c
      3            Revised:        $Date: 2007-07-06 10:42:24 -0700 (Fri, 06 Jul 2007) $
      4            Revision:       $Revision: 13579 $
      5          
      6            Description:    This file contains the interface to the Drivers Service.
      7          
      8          
      9            Copyright 2005-2007 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          
     41          /**************************************************************************************************
     42           *                                            INCLUDES
     43           **************************************************************************************************/
     44          #include "hal_types.h"
     45          #include "OSAL.h"
     46          #include "hal_drivers.h"
     47          #include "hal_adc.h"
     48          #if (defined HAL_DMA) && (HAL_DMA == TRUE)
     49            #include "hal_dma.h"
     50          #endif
     51          #include "hal_flash.h"
     52          #include "hal_key.h"
     53          #include "hal_lcd.h"
     54          #include "hal_led.h"
     55          #include "hal_timer.h"
     56          #include "hal_uart.h"
     57          #include "hal_sleep.h"
     58          #if (defined HAL_AES) && (HAL_AES == TRUE)
     59            #include "hal_aes.h"
     60          #endif
     61          
     62          #if (defined HAL_SPI) && (HAL_SPI == TRUE)
     63            #include "hal_spi.h"
     64          #endif
     65          
     66          /**************************************************************************************************
     67           *                                            MACROS
     68           **************************************************************************************************/
     69          
     70          
     71          
     72          /**************************************************************************************************
     73           *                                          CONSTANTS
     74           **************************************************************************************************/
     75          
     76          
     77          /**************************************************************************************************
     78           *                                          TYPEDEFS
     79           **************************************************************************************************/
     80          
     81          
     82          /**************************************************************************************************
     83           *                                      GLOBAL VARIABLES
     84           **************************************************************************************************/

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     85          uint8 Hal_TaskID;
   \                     Hal_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     86          
     87          extern void HalLedUpdate( void ); /* Notes: This for internal only so it shouldn't be in hal_led.h */
     88          
     89          /**************************************************************************************************
     90           *                                      FUNCTIONS - API
     91           **************************************************************************************************/
     92          
     93          /**************************************************************************************************
     94           * @fn      Hal_Init
     95           *
     96           * @brief   Hal Initialization function.
     97           *
     98           * @param   task_id - Hal TaskId
     99           *
    100           * @return  None
    101           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    102          void Hal_Init( uint8 task_id )
   \                     Hal_Init:
    103          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    104            /* Register task ID */
    105            Hal_TaskID = task_id;
   \   000004   E9           MOV     A,R1
   \   000005   90....       MOV     DPTR,#Hal_TaskID
   \   000008   F0           MOVX    @DPTR,A
    106          }
   \   000009                REQUIRE ?Subroutine0
   \   000009                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    107          
    108          /**************************************************************************************************
    109           * @fn      Hal_DriverInit
    110           *
    111           * @brief   Initialize HW - These need to be initialized before anyone.
    112           *
    113           * @param   task_id - Hal TaskId
    114           *
    115           * @return  None
    116           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    117          void HalDriverInit (void)
   \                     HalDriverInit:
    118          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    119            /* TIMER */
    120          #if (defined HAL_TIMER) && (HAL_TIMER == TRUE)
    121            HalTimerInit();
    122          #endif
    123          
    124            /* ADC */
    125          #if (defined HAL_ADC) && (HAL_ADC == TRUE)
    126            HalAdcInit();
   \   000004                ; Setup parameters for call to function HalAdcInit
   \   000004   12....       LCALL   ??HalAdcInit?relay
    127          #endif
    128          
    129            /* DMA */
    130          #if (defined HAL_DMA) && (HAL_DMA == TRUE)
    131            // Must be called before the init call to any module that uses DMA.
    132            HalDmaInit();
   \   000007                ; Setup parameters for call to function HalDmaInit
   \   000007   12....       LCALL   ??HalDmaInit?relay
    133          #endif
    134          
    135            /* Flash */
    136          #if (defined HAL_FLASH) && (HAL_FLASH == TRUE)
    137            // Must be called before the init call to any module that uses Flash access or NV.
    138            HalFlashInit();
   \   00000A                ; Setup parameters for call to function HalFlashInit
   \   00000A   12....       LCALL   ??HalFlashInit?relay
    139          #endif
    140          
    141            /* AES */
    142          #if (defined HAL_AES) && (HAL_AES == TRUE)
    143            HalAesInit();
   \   00000D                ; Setup parameters for call to function HalAesInit
   \   00000D   12....       LCALL   ??HalAesInit?relay
    144          #endif
    145          
    146            /* LCD */
    147          #if (defined HAL_LCD) && (HAL_LCD == TRUE)
    148            HalLcdInit();
   \   000010                ; Setup parameters for call to function HalLcdInit
   \   000010   12....       LCALL   ??HalLcdInit?relay
    149          #endif
    150          
    151            /* LED */
    152          #if (defined HAL_LED) && (HAL_LED == TRUE)
    153            HalLedInit();
   \   000013                ; Setup parameters for call to function HalLedInit
   \   000013   12....       LCALL   ??HalLedInit?relay
    154          #endif
    155          
    156            /* UART */
    157          #if (defined HAL_UART) && (HAL_UART == TRUE)
    158            HalUARTInit();
   \   000016                ; Setup parameters for call to function HalUARTInit
   \   000016   12....       LCALL   ??HalUARTInit?relay
    159          #endif
    160          
    161            /* KEY */
    162          #if (defined HAL_KEY) && (HAL_KEY == TRUE)
    163            HalKeyInit();
   \   000019                ; Setup parameters for call to function HalKeyInit
   \   000019   12....       LCALL   ??HalKeyInit?relay
    164          #endif
    165          
    166            /* SPI */
    167          #if (defined HAL_SPI) && (HAL_SPI == TRUE)
    168            HalSpiInit();
    169          #endif
    170          }
   \   00001C   80..         SJMP    ?Subroutine0
    171          
    172          
    173          /**************************************************************************************************
    174           * @fn      Hal_ProcessEvent
    175           *
    176           * @brief   Hal Process Event
    177           *
    178           * @param   task_id - Hal TaskId
    179           *          events - events
    180           *
    181           * @return  None
    182           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    183          uint16 Hal_ProcessEvent( uint8 task_id, uint16 events )
   \                     Hal_ProcessEvent:
    184          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    185            uint8 *msgPtr;
    186            
    187            (void)task_id;  // Intentionally unreferenced parameter
    188          
    189            if ( events & SYS_EVENT_MSG )
   \   000009   5480         ANL     A,#0x80
   \   00000B   6019         JZ      ??Hal_ProcessEvent_0
    190            {
    191              msgPtr = osal_msg_receive(Hal_TaskID);
   \   00000D                ; Setup parameters for call to function osal_msg_receive
   \   00000D   8003         SJMP    ??Hal_ProcessEvent_1
    192          
    193              while (msgPtr)
    194              {
    195                /* Do something here - for now, just deallocate the msg and move on */
    196          
    197                /* De-allocate */
    198                osal_msg_deallocate( msgPtr );
   \                     ??Hal_ProcessEvent_2:
   \   00000F                ; Setup parameters for call to function osal_msg_deallocate
   \   00000F   12....       LCALL   ??osal_msg_deallocate?relay
    199                /* Next */
    200                msgPtr = osal_msg_receive( Hal_TaskID );
   \   000012                ; Setup parameters for call to function osal_msg_receive
   \                     ??Hal_ProcessEvent_1:
   \   000012   90....       MOV     DPTR,#Hal_TaskID
   \   000015   E0           MOVX    A,@DPTR
   \   000016   F9           MOV     R1,A
   \   000017   12....       LCALL   ??osal_msg_receive?relay
    201              }
   \   00001A   EA           MOV     A,R2
   \   00001B   4B           ORL     A,R3
   \   00001C   70F1         JNZ     ??Hal_ProcessEvent_2
    202              return events ^ SYS_EVENT_MSG;
   \   00001E   EE           MOV     A,R6
   \   00001F   FA           MOV     R2,A
   \   000020   EF           MOV     A,R7
   \   000021   6480         XRL     A,#0x80
   \                     ??Hal_ProcessEvent_3:
   \   000023   FB           MOV     R3,A
   \   000024   8036         SJMP    ??Hal_ProcessEvent_4
    203            }
    204          
    205            if ( events & HAL_LED_BLINK_EVENT )
   \                     ??Hal_ProcessEvent_0:
   \   000026   EE           MOV     A,R6
   \   000027   5402         ANL     A,#0x2
   \   000029   600A         JZ      ??Hal_ProcessEvent_5
    206            {
    207          #if (defined (BLINK_LEDS)) && (HAL_LED == TRUE)
    208              HalLedUpdate();
   \   00002B                ; Setup parameters for call to function HalLedUpdate
   \   00002B   12....       LCALL   ??HalLedUpdate?relay
    209          #endif /* BLINK_LEDS && HAL_LED */
    210              return events ^ HAL_LED_BLINK_EVENT;
   \   00002E   EE           MOV     A,R6
   \   00002F   6402         XRL     A,#0x2
   \                     ??Hal_ProcessEvent_6:
   \   000031   FA           MOV     R2,A
   \   000032   EF           MOV     A,R7
   \   000033   80EE         SJMP    ??Hal_ProcessEvent_3
    211            }
    212          
    213            if (events & HAL_KEY_EVENT)
   \                     ??Hal_ProcessEvent_5:
   \   000035   EE           MOV     A,R6
   \   000036   A2E0         MOV     C,0xE0 /* A   */.0
   \   000038   501E         JNC     ??Hal_ProcessEvent_7
    214            {
    215          
    216          #if (defined HAL_KEY) && (HAL_KEY == TRUE)
    217              /* Check for keys */
    218              HalKeyPoll();
   \   00003A                ; Setup parameters for call to function HalKeyPoll
   \   00003A   12....       LCALL   ??HalKeyPoll?relay
    219          
    220              /* if interrupt disabled, do next polling */
    221              if (!Hal_KeyIntEnable)
   \   00003D   90....       MOV     DPTR,#Hal_KeyIntEnable
   \   000040   E0           MOVX    A,@DPTR
   \   000041   7010         JNZ     ??Hal_ProcessEvent_8
    222              {
    223                osal_start_timerEx( Hal_TaskID, HAL_KEY_EVENT, 100);
   \   000043                ; Setup parameters for call to function osal_start_timerEx
   \   000043   7C64         MOV     R4,#0x64
   \   000045   7D00         MOV     R5,#0x0
   \   000047   7A01         MOV     R2,#0x1
   \   000049   7B00         MOV     R3,#0x0
   \   00004B   90....       MOV     DPTR,#Hal_TaskID
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   F9           MOV     R1,A
   \   000050   12....       LCALL   ??osal_start_timerEx?relay
    224              }
    225          #endif // HAL_KEY
    226          
    227              return events ^ HAL_KEY_EVENT;
   \                     ??Hal_ProcessEvent_8:
   \   000053   EE           MOV     A,R6
   \   000054   6401         XRL     A,#0x1
   \   000056   80D9         SJMP    ??Hal_ProcessEvent_6
    228            }
    229          
    230          #ifdef POWER_SAVING
    231            if ( events & HAL_SLEEP_TIMER_EVENT )
    232            {
    233              halRestoreSleepLevel();
    234              return events ^ HAL_SLEEP_TIMER_EVENT;
    235            }
    236          #endif
    237          
    238            /* Nothing interested, discard the message */
    239            return 0;
   \                     ??Hal_ProcessEvent_7:
   \   000058   7A00         MOV     R2,#0x0
   \   00005A   7B00         MOV     R3,#0x0
   \                     ??Hal_ProcessEvent_4:
   \   00005C   7F02         MOV     R7,#0x2
   \   00005E   02....       LJMP    ?BANKED_LEAVE_XDATA
    240          
    241          }
    242          
    243          /**************************************************************************************************
    244           * @fn      Hal_ProcessPoll
    245           *
    246           * @brief   This routine will be called by OSAL to poll UART, TIMER...
    247           *
    248           * @param   task_id - Hal TaskId
    249           *
    250           * @return  None
    251           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    252          void Hal_ProcessPoll ()
   \                     Hal_ProcessPoll:
    253          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    254          
    255            /* Timer Poll */
    256          #if (defined HAL_TIMER) && (HAL_TIMER == TRUE)
    257            HalTimerTick();
    258          #endif
    259          
    260            /* UART Poll */
    261          #if (defined HAL_UART) && (HAL_UART == TRUE)
    262            HalUARTPoll();
   \   000004                ; Setup parameters for call to function HalUARTPoll
   \   000004   12....       LCALL   ??HalUARTPoll?relay
    263          #endif
    264          
    265          }
   \   000007   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Hal_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Hal_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalDriverInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalDriverInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Hal_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Hal_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Hal_ProcessPoll?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Hal_ProcessPoll
    266          
    267          
    268          /**************************************************************************************************
    269          **************************************************************************************************/
    270          

   Maximum stack usage in bytes:

     Function                 ISTACK PSTACK XSTACK
     --------                 ------ ------ ------
     HalDriverInit                2      0      0
       -> HalAdcInit              4      0      0
       -> HalDmaInit              4      0      0
       -> HalFlashInit            4      0      0
       -> HalAesInit              4      0      0
       -> HalLcdInit              4      0      0
       -> HalLedInit              4      0      0
       -> HalUARTInit             4      0      0
       -> HalKeyInit              4      0      0
     Hal_Init                     2      0      0
     Hal_ProcessEvent             0      0     10
       -> osal_msg_receive        0      0     20
       -> osal_msg_deallocate     0      0     20
       -> osal_msg_receive        0      0     20
       -> HalLedUpdate            0      0     20
       -> HalKeyPoll              0      0     20
       -> osal_start_timerEx      0      0     20
     Hal_ProcessPoll              2      0      0
       -> HalUARTPoll             4      0      0


   Segment part sizes:

     Function/Label           Bytes
     --------------           -----
     Hal_TaskID                  1
     Hal_Init                    9
     ?Subroutine0                7
     HalDriverInit              30
     Hal_ProcessEvent           97
     Hal_ProcessPoll            10
     ??Hal_Init?relay            6
     ??HalDriverInit?relay       6
     ??Hal_ProcessEvent?relay    6
     ??Hal_ProcessPoll?relay     6

 
 153 bytes in segment BANKED_CODE
  24 bytes in segment BANK_RELAYS
   1 byte  in segment XDATA_Z
 
 177 bytes of CODE  memory
   1 byte  of XDATA memory

Errors: none
Warnings: none
