###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.1.10194/W32 for 8051         10/Jul/2018  15:41:22 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  E:\123\´óÈý\Éú²úÊµÏ°\Àý³Ì\Àý³Ì\Ë«»ú\WSN_ZigBee\Pro #
#                          jects\zstack\Utilities\SerialApp\Source\SerialApp. #
#                          c                                                  #
#    Command line       =  -f E:\123\´óÈý\Éú²úÊµÏ°\Àý³Ì\Àý³Ì\Ë«»ú\WSN_ZigBee\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\Tools\CC2530DB\f8wRouter.cfg (-DCPU32MHZ       #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRU #
#                          E -DRTR_NWK -DBLINK_LEDS) -f                       #
#                          E:\123\´óÈý\Éú²úÊµÏ°\Àý³Ì\Àý³Ì\Ë«»ú\WSN_ZigBee\Pro #
#                          jects\zstack\Utilities\SerialApp\CC2530DB\..\..\.. #
#                          \Tools\CC2530DB\f8wConfig.cfg (-DSECURE=0          #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          E:\123\´óÈý\Éú²úÊµÏ°\Àý³Ì\Àý³Ì\Ë«»ú\WSN_ZigBee\Pro #
#                          jects\zstack\Utilities\SerialApp\Source\SerialApp. #
#                          c -D ZIGBEEPRO -D HAL_UART=TRUE -D                 #
#                          SERIAL_APP_PORT=0 -D LCD_SUPPORTED -lC             #
#                          E:\123\´óÈý\Éú²úÊµÏ°\Àý³Ì\Àý³Ì\Ë«»ú\WSN_ZigBee\Pro #
#                          jects\zstack\Utilities\SerialApp\CC2530DB\RouterEB #
#                          -Pro\List\ -lA E:\123\´óÈý\Éú²úÊµÏ°\Àý³Ì\Àý³Ì\Ë«»ú #
#                          \WSN_ZigBee\Projects\zstack\Utilities\SerialApp\CC #
#                          2530DB\RouterEB-Pro\List\ --diag_suppress          #
#                          Pe001,Pa010 -o E:\123\´óÈý\Éú²úÊµÏ°\Àý³Ì\Àý³Ì\Ë«»ú #
#                          \WSN_ZigBee\Projects\zstack\Utilities\SerialApp\CC #
#                          2530DB\RouterEB-Pro\Obj\ -e --debug --core=plain   #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 8 -I E:\123\´óÈý\Éú²úÊµÏ°\Àý³Ì\À #
#                          ý³Ì\Ë«»ú\WSN_ZigBee\Projects\zstack\Utilities\Seri #
#                          alApp\CC2530DB\ -I E:\123\´óÈý\Éú²úÊµÏ°\Àý³Ì\Àý³Ì\ #
#                          Ë«»ú\WSN_ZigBee\Projects\zstack\Utilities\SerialAp #
#                          p\CC2530DB\..\SOURCE\ -I                           #
#                          E:\123\´óÈý\Éú²úÊµÏ°\Àý³Ì\Àý³Ì\Ë«»ú\WSN_ZigBee\Pro #
#                          jects\zstack\Utilities\SerialApp\CC2530DB\..\..\.. #
#                          \ZMAIN\TI2530DB\ -I E:\123\´óÈý\Éú²úÊµÏ°\Àý³Ì\Àý³Ì #
#                          \Ë«»ú\WSN_ZigBee\Projects\zstack\Utilities\SerialA #
#                          pp\CC2530DB\..\..\..\..\..\COMPONENTS\MT\ -I       #
#                          E:\123\´óÈý\Éú²úÊµÏ°\Àý³Ì\Àý³Ì\Ë«»ú\WSN_ZigBee\Pro #
#                          jects\zstack\Utilities\SerialApp\CC2530DB\..\..\.. #
#                          \..\..\COMPONENTS\HAL\INCLUDE\ -I                  #
#                          E:\123\´óÈý\Éú²úÊµÏ°\Àý³Ì\Àý³Ì\Ë«»ú\WSN_ZigBee\Pro #
#                          jects\zstack\Utilities\SerialApp\CC2530DB\..\..\.. #
#                          \..\..\COMPONENTS\HAL\TARGET\CC2530EB\ -I          #
#                          E:\123\´óÈý\Éú²úÊµÏ°\Àý³Ì\Àý³Ì\Ë«»ú\WSN_ZigBee\Pro #
#                          jects\zstack\Utilities\SerialApp\CC2530DB\..\..\.. #
#                          \..\..\COMPONENTS\OSAL\MCU\CCSOC\ -I               #
#                          E:\123\´óÈý\Éú²úÊµÏ°\Àý³Ì\Àý³Ì\Ë«»ú\WSN_ZigBee\Pro #
#                          jects\zstack\Utilities\SerialApp\CC2530DB\..\..\.. #
#                          \..\..\COMPONENTS\OSAL\INCLUDE\ -I                 #
#                          E:\123\´óÈý\Éú²úÊµÏ°\Àý³Ì\Àý³Ì\Ë«»ú\WSN_ZigBee\Pro #
#                          jects\zstack\Utilities\SerialApp\CC2530DB\..\..\.. #
#                          \..\..\COMPONENTS\STACK\AF\ -I                     #
#                          E:\123\´óÈý\Éú²úÊµÏ°\Àý³Ì\Àý³Ì\Ë«»ú\WSN_ZigBee\Pro #
#                          jects\zstack\Utilities\SerialApp\CC2530DB\..\..\.. #
#                          \..\..\COMPONENTS\STACK\NWK\ -I                    #
#                          E:\123\´óÈý\Éú²úÊµÏ°\Àý³Ì\Àý³Ì\Ë«»ú\WSN_ZigBee\Pro #
#                          jects\zstack\Utilities\SerialApp\CC2530DB\..\..\.. #
#                          \..\..\COMPONENTS\STACK\SEC\ -I                    #
#                          E:\123\´óÈý\Éú²úÊµÏ°\Àý³Ì\Àý³Ì\Ë«»ú\WSN_ZigBee\Pro #
#                          jects\zstack\Utilities\SerialApp\CC2530DB\..\..\.. #
#                          \..\..\COMPONENTS\STACK\SAPI\ -I                   #
#                          E:\123\´óÈý\Éú²úÊµÏ°\Àý³Ì\Àý³Ì\Ë«»ú\WSN_ZigBee\Pro #
#                          jects\zstack\Utilities\SerialApp\CC2530DB\..\..\.. #
#                          \..\..\COMPONENTS\STACK\SYS\ -I                    #
#                          E:\123\´óÈý\Éú²úÊµÏ°\Àý³Ì\Àý³Ì\Ë«»ú\WSN_ZigBee\Pro #
#                          jects\zstack\Utilities\SerialApp\CC2530DB\..\..\.. #
#                          \..\..\COMPONENTS\STACK\ZDO\ -I                    #
#                          E:\123\´óÈý\Éú²úÊµÏ°\Àý³Ì\Àý³Ì\Ë«»ú\WSN_ZigBee\Pro #
#                          jects\zstack\Utilities\SerialApp\CC2530DB\..\..\.. #
#                          \..\..\COMPONENTS\ZMAC\F8W\ -I                     #
#                          E:\123\´óÈý\Éú²úÊµÏ°\Àý³Ì\Àý³Ì\Ë«»ú\WSN_ZigBee\Pro #
#                          jects\zstack\Utilities\SerialApp\CC2530DB\..\..\.. #
#                          \..\..\COMPONENTS\ZMAC\ -I                         #
#                          E:\123\´óÈý\Éú²úÊµÏ°\Àý³Ì\Àý³Ì\Ë«»ú\WSN_ZigBee\Pro #
#                          jects\zstack\Utilities\SerialApp\CC2530DB\..\..\.. #
#                          \..\..\COMPONENTS\SERVICES\SADDR\ -I               #
#                          E:\123\´óÈý\Éú²úÊµÏ°\Àý³Ì\Àý³Ì\Ë«»ú\WSN_ZigBee\Pro #
#                          jects\zstack\Utilities\SerialApp\CC2530DB\..\..\.. #
#                          \..\..\COMPONENTS\SERVICES\SDATA\ -I               #
#                          E:\123\´óÈý\Éú²úÊµÏ°\Àý³Ì\Àý³Ì\Ë«»ú\WSN_ZigBee\Pro #
#                          jects\zstack\Utilities\SerialApp\CC2530DB\..\..\.. #
#                          \..\..\COMPONENTS\MAC\INCLUDE\ -I                  #
#                          E:\123\´óÈý\Éú²úÊµÏ°\Àý³Ì\Àý³Ì\Ë«»ú\WSN_ZigBee\Pro #
#                          jects\zstack\Utilities\SerialApp\CC2530DB\..\..\.. #
#                          \..\..\COMPONENTS\MAC\HIGH_LEVEL\ -I               #
#                          E:\123\´óÈý\Éú²úÊµÏ°\Àý³Ì\Àý³Ì\Ë«»ú\WSN_ZigBee\Pro #
#                          jects\zstack\Utilities\SerialApp\CC2530DB\..\..\.. #
#                          \..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\ -I          #
#                          E:\123\´óÈý\Éú²úÊµÏ°\Àý³Ì\Àý³Ì\Ë«»ú\WSN_ZigBee\Pro #
#                          jects\zstack\Utilities\SerialApp\CC2530DB\..\..\.. #
#                          \..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\ #
#                           -Ohz --require_prototypes                         #
#    List file          =  E:\123\´óÈý\Éú²úÊµÏ°\Àý³Ì\Àý³Ì\Ë«»ú\WSN_ZigBee\Pro #
#                          jects\zstack\Utilities\SerialApp\CC2530DB\RouterEB #
#                          -Pro\List\SerialApp.lst                            #
#    Object file        =  E:\123\´óÈý\Éú²úÊµÏ°\Àý³Ì\Àý³Ì\Ë«»ú\WSN_ZigBee\Pro #
#                          jects\zstack\Utilities\SerialApp\CC2530DB\RouterEB #
#                          -Pro\Obj\SerialApp.r51                             #
#                                                                             #
#                                                                             #
###############################################################################

E:\123\´óÈý\Éú²úÊµÏ°\Àý³Ì\Àý³Ì\Ë«»ú\WSN_ZigBee\Projects\zstack\Utilities\SerialApp\Source\SerialApp.c
      1          /*********************************************************************
      2          * INCLUDES
      3          */
      4          #include <stdio.h>
      5          #include <string.h>
      6          
      7          #include "AF.h"
      8          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0x80
   \   union <unnamed> volatile __sfr _A_P0
   \                     _A_P0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf3
   \   unsigned char volatile __sfr P0SEL
   \                     P0SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfd
   \   unsigned char volatile __sfr P0DIR
   \                     P0DIR:
   \   000000                DS 1
      9          #include "OSAL_Tasks.h"
     10          #include "SerialApp.h"
     11          #include "ZDApp.h"
     12          #include "ZDObject.h"
     13          #include "ZDProfile.h"
     14          
     15          #include "hal_drivers.h"
     16          #include "hal_key.h"
     17          #if defined ( LCD_SUPPORTED )
     18          #include "hal_lcd.h"
     19          #endif
     20          #include "hal_led.h"
     21          #include "hal_uart.h"
     22          
     23          #include "DHT11.h"
     24          #include "nwk_globals.h"
     25          /*********************************************************************
     26          * MACROS
     27          */
     28          #define COORD_ADDR   0x00
     29          #define ED_ADDR      0x01
     30          #define UART0        0x00
     31          #define MAX_NODE     0x04
     32          #define UART_DEBUG   0x00        //µ÷ÊÔºê,Í¨¹ý´®¿ÚÊä³öÐ­µ÷Æ÷ºÍÖÕ¶ËµÄIEEE¡¢¶ÌµØÖ·
     33          #define LAMP_PIN     P0_5        //¶¨ÒåP0.5¿ÚÎª¼ÌµçÆ÷ÊäÈë¶Ë
     34          #define GAS_PIN      P0_6        //¶¨ÒåP0.6¿ÚÎªÑÌÎí´«¸ÐÆ÷µÄÊäÈë¶Ë  
     35          #define ARRAY_SIZE(arr) (sizeof(arr) / sizeof(arr)[0])
     36          
     37          //---------------------------------------------------------------------
     38          //±ê×¼°æ²»Í¬µÄÖÕ¶ËÐèÒªÐÞ¸Ä´ËID,ÓÃÓÚÊ¶±ðÐ­µ÷Æ÷·¢¹ýÀ´µÄÊý¾Ý£¬IDÏàÍ¬Ôò´¦Àí
     39          //×¨Òµ°æ×Ô¶¯´ÓFlash»ñµÃµØÖ·£¬ËùÓÐÖÕ¶Ë¹Ì¼þÏàÍ¬£¬ÊÊºÏÁ¿²ú

   \                                 In  segment XDATA_I, align 1, keep-with-next
     40          static uint16 EndDeviceID = 0x0001; //ÖÕ¶ËID£¬ÖØÒª
   \                     EndDeviceID:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for EndDeviceID>`
   \   000002                REQUIRE __INIT_XDATA_I
     41          //---------------------------------------------------------------------
     42          
     43          /*********************************************************************
     44          * CONSTANTS
     45          */
     46          
     47          #if !defined( SERIAL_APP_PORT )
     48          #define SERIAL_APP_PORT  0
     49          #endif
     50          
     51          #if !defined( SERIAL_APP_BAUD )
     52          #define SERIAL_APP_BAUD  HAL_UART_BR_38400
     53          //#define SERIAL_APP_BAUD  HAL_UART_BR_115200
     54          #endif
     55          
     56          // When the Rx buf space is less than this threshold, invoke the Rx callback.
     57          #if !defined( SERIAL_APP_THRESH )
     58          #define SERIAL_APP_THRESH  64
     59          #endif
     60          
     61          #if !defined( SERIAL_APP_RX_SZ )
     62          #define SERIAL_APP_RX_SZ  128
     63          #endif
     64          
     65          #if !defined( SERIAL_APP_TX_SZ )
     66          #define SERIAL_APP_TX_SZ  128
     67          #endif
     68          
     69          // Millisecs of idle time after a byte is received before invoking Rx callback.
     70          #if !defined( SERIAL_APP_IDLE )
     71          #define SERIAL_APP_IDLE  6
     72          #endif
     73          
     74          // Loopback Rx bytes to Tx for throughput testing.
     75          #if !defined( SERIAL_APP_LOOPBACK )
     76          #define SERIAL_APP_LOOPBACK  FALSE
     77          #endif
     78          
     79          // This is the max byte count per OTA message.
     80          #if !defined( SERIAL_APP_TX_MAX )
     81          #define SERIAL_APP_TX_MAX  20
     82          #endif
     83          
     84          #define SERIAL_APP_RSP_CNT  4
     85          
     86          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
     87          const cId_t SerialApp_ClusterList[SERIALAPP_MAX_CLUSTERS] =
   \                     SerialApp_ClusterList:
   \   000000   0100         DW 1
   \   000002   0000         DW 0
     88          {
     89          	SERIALAPP_CLUSTERID
     90          };
     91          

   \                                 In  segment XDATA_ROM_C, align 1
     92          const SimpleDescriptionFormat_t SerialApp_SimpleDesc =
   \                     SerialApp_SimpleDesc:
   \   000000   0B           DB 11
   \   000001   050F         DW 3845
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   02           DB 2
   \   000007   ....         DW SerialApp_ClusterList
   \   000009   02           DB 2
   \   00000A   ....         DW SerialApp_ClusterList
     93          {
     94          	SERIALAPP_ENDPOINT,              //  int   Endpoint;
     95              SERIALAPP_PROFID,                //  uint16 AppProfId[2];
     96              SERIALAPP_DEVICEID,              //  uint16 AppDeviceId[2];
     97              SERIALAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
     98              SERIALAPP_FLAGS,                 //  int   AppFlags:4;
     99              SERIALAPP_MAX_CLUSTERS,          //  byte  AppNumInClusters;
    100              (cId_t *)SerialApp_ClusterList,  //  byte *pAppInClusterList;
    101              SERIALAPP_MAX_CLUSTERS,          //  byte  AppNumOutClusters;
    102              (cId_t *)SerialApp_ClusterList   //  byte *pAppOutClusterList;
    103          };
    104          

   \                                 In  segment XDATA_ROM_C, align 1
    105          const endPointDesc_t SerialApp_epDesc =
   \                     SerialApp_epDesc:
   \   000000   0B           DB 11
   \   000001   ....         DW SerialApp_TaskID
   \   000003   ....         DW SerialApp_SimpleDesc
   \   000005   00           DB 0
    106          {
    107          	SERIALAPP_ENDPOINT,
    108              &SerialApp_TaskID,
    109              (SimpleDescriptionFormat_t *)&SerialApp_SimpleDesc,
    110              noLatencyReqs
    111          };
    112          
    113          /*********************************************************************
    114          * TYPEDEFS
    115          */
    116          
    117          /*********************************************************************
    118          * GLOBAL VARIABLES
    119          */
    120          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    121          uint8 SerialApp_TaskID;    // Task ID for internal task/event processing.
   \                     SerialApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    122          
    123          /*********************************************************************
    124          * EXTERNAL VARIABLES
    125          */
    126          
    127          /*********************************************************************
    128          * EXTERNAL FUNCTIONS
    129          */
    130          
    131          /*********************************************************************
    132          * LOCAL VARIABLES
    133          */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    134          static bool SendFlag = 0;
   \                     SendFlag:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    135          
    136          static uint8 SerialApp_MsgID;
    137          
    138          static afAddrType_t SerialApp_TxAddr;

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    139          static afAddrType_t Broadcast_DstAddr;
   \                     Broadcast_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    140          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    141          static uint8 SerialApp_TxSeq;
   \                     SerialApp_TxSeq:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    142          static uint8 SerialApp_TxBuf[SERIAL_APP_TX_MAX+1];
   \                     SerialApp_TxBuf:
   \   000000                DS 21
   \   000015                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    143          static uint8 SerialApp_TxLen;
   \                     SerialApp_TxLen:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    144          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    145          static afAddrType_t SerialApp_RxAddr;
   \                     SerialApp_RxAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    146          static uint8 SerialApp_RspBuf[SERIAL_APP_RSP_CNT];
   \                     SerialApp_RspBuf:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
    147          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    148          static devStates_t SerialApp_NwkState;
   \                     SerialApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    149          static afAddrType_t SerialApp_TxAddr;
   \                     SerialApp_TxAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    150          static uint8 SerialApp_MsgID;
   \                     SerialApp_MsgID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    151          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    152          uint8 NodeData[MAX_NODE][5];         //ÖÕ¶ËÊý¾Ý»º³åÇø 0=ÎÂ¶È 1=Êª¶È 2=ÆøÌå 3=µÆ
   \                     NodeData:
   \   000000                DS 20
   \   000014                REQUIRE __INIT_XDATA_Z
    153          
    154          /*********************************************************************
    155          * LOCAL FUNCTIONS
    156          */
    157          
    158          static void SerialApp_HandleKeys( uint8 shift, uint8 keys );
    159          static void SerialApp_ProcessMSGCmd( afIncomingMSGPacket_t *pkt );
    160          static void SerialApp_Send(void);
    161          static void SerialApp_Resp(void);
    162          static void SerialApp_CallBack(uint8 port, uint8 event);
    163          
    164          static void PrintAddrInfo(uint16 shortAddr, uint8 *pIeeeAddr);
    165          static void AfSendAddrInfo(void);
    166          static void GetIeeeAddr(uint8 * pIeeeAddr, uint8 *pStr);
    167          static void SerialApp_SendPeriodicMessage( void );
    168          static uint8 GetDataLen(uint8 fc);
    169          static uint8 GetLamp( void );
    170          static uint8 GetGas( void );
    171          static uint8 XorCheckSum(uint8 * pBuf, uint8 len);
    172          uint8 SendData(uint8 addr, uint8 FC);
    173          /*********************************************************************
    174          * @fn      SerialApp_Init
    175          *
    176          * @brief   This is called during OSAL tasks' initialization.
    177          *
    178          * @param   task_id - the Task ID assigned by OSAL.
    179          *
    180          * @return  none
    181          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    182          void SerialApp_Init( uint8 task_id )
   \                     SerialApp_Init:
    183          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 29
   \   000005   74E3         MOV     A,#-0x1d
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
    184          	halUARTCfg_t uartConfig;
    185              
    186              P0SEL &= 0xDf;                  //ÉèÖÃP0.5¿ÚÎªÆÕÍ¨IO
   \   00000C   53F3DF       ANL     0xf3,#0xdf
    187              P0DIR |= 0x20;                  //ÉèÖÃP0.5ÎªÊä³ö
   \   00000F   43FD20       ORL     0xfd,#0x20
    188              LAMP_PIN = 1;                   //¸ßµçÆ½¼ÌµçÆ÷¶Ï¿ª;µÍµçÆ½¼ÌµçÆ÷ÎüºÏ
   \   000012   D285         SETB    0x80.5
    189              P0SEL &= ~0x40;                 //ÉèÖÃP0.6ÎªÆÕÍ¨IO¿Ú
   \   000014   53F3BF       ANL     0xf3,#0xbf
    190              P0DIR &= ~0x40;                 //P0.6¶¨ÒåÎªÊäÈë¿Ú
   \   000017   53FDBF       ANL     0xfd,#0xbf
    191              P0SEL &= 0x7f;                  //P0_7ÅäÖÃ³ÉÍ¨ÓÃio
   \   00001A   53F37F       ANL     0xf3,#0x7f
    192          	
    193          	SerialApp_TaskID = task_id;
   \   00001D   90....       MOV     DPTR,#SerialApp_TaskID
   \   000020   F0           MOVX    @DPTR,A
    194          	//SerialApp_RxSeq = 0xC3;
    195          	
    196          	afRegister( (endPointDesc_t *)&SerialApp_epDesc );
   \   000021                ; Setup parameters for call to function afRegister
   \   000021   7A..         MOV     R2,#SerialApp_epDesc & 0xff
   \   000023   7B..         MOV     R3,#(SerialApp_epDesc >> 8) & 0xff
   \   000025   12....       LCALL   ??afRegister?relay
    197          	
    198          	RegisterForKeys( task_id );
   \   000028                ; Setup parameters for call to function RegisterForKeys
   \   000028   EE           MOV     A,R6
   \   000029   F9           MOV     R1,A
   \   00002A   12....       LCALL   ??RegisterForKeys?relay
    199          	
    200          	uartConfig.configured           = TRUE;              // 2x30 don't care - see uart driver.
   \   00002D   85..82       MOV     DPL,?XSP + 0
   \   000030   85..83       MOV     DPH,?XSP + 1
   \   000033   7401         MOV     A,#0x1
   \   000035   F0           MOVX    @DPTR,A
    201          	uartConfig.baudRate             = SERIAL_APP_BAUD;
   \   000036   12....       LCALL   ?XSTACK_DISP0_8
   \   000039   7402         MOV     A,#0x2
   \   00003B   F0           MOVX    @DPTR,A
    202          	uartConfig.flowControl          = FALSE;
   \   00003C   12....       LCALL   ?XSTACK_DISP0_8
   \   00003F   E4           CLR     A
   \   000040   F0           MOVX    @DPTR,A
    203          	uartConfig.flowControlThreshold = SERIAL_APP_THRESH; // 2x30 don't care - see uart driver.
   \   000041   7403         MOV     A,#0x3
   \   000043   12....       LCALL   ?XSTACK_DISP0_8
   \   000046   7440         MOV     A,#0x40
   \   000048   F0           MOVX    @DPTR,A
   \   000049   A3           INC     DPTR
   \   00004A   E4           CLR     A
   \   00004B   F0           MOVX    @DPTR,A
    204          	uartConfig.rx.maxBufSize        = SERIAL_APP_RX_SZ;  // 2x30 don't care - see uart driver.
   \   00004C   740A         MOV     A,#0xa
   \   00004E   12....       LCALL   ?XSTACK_DISP0_8
   \   000051   7480         MOV     A,#-0x80
   \   000053   F0           MOVX    @DPTR,A
   \   000054   A3           INC     DPTR
   \   000055   E4           CLR     A
   \   000056   F0           MOVX    @DPTR,A
    205          	uartConfig.tx.maxBufSize        = SERIAL_APP_TX_SZ;  // 2x30 don't care - see uart driver.
   \   000057   7412         MOV     A,#0x12
   \   000059   12....       LCALL   ?XSTACK_DISP0_8
   \   00005C   7480         MOV     A,#-0x80
   \   00005E   F0           MOVX    @DPTR,A
   \   00005F   A3           INC     DPTR
   \   000060   E4           CLR     A
   \   000061   F0           MOVX    @DPTR,A
    206          	uartConfig.idleTimeout          = SERIAL_APP_IDLE;   // 2x30 don't care - see uart driver.
   \   000062   7405         MOV     A,#0x5
   \   000064   12....       LCALL   ?XSTACK_DISP0_8
   \   000067   7406         MOV     A,#0x6
   \   000069   F0           MOVX    @DPTR,A
    207          	uartConfig.intEnable            = TRUE;              // 2x30 don't care - see uart driver.
   \   00006A   7416         MOV     A,#0x16
   \   00006C   12....       LCALL   ?XSTACK_DISP0_8
   \   00006F   7401         MOV     A,#0x1
   \   000071   F0           MOVX    @DPTR,A
    208          	uartConfig.callBackFunc         = SerialApp_CallBack;
   \   000072   741B         MOV     A,#0x1b
   \   000074   12....       LCALL   ?XSTACK_DISP0_8
   \   000077   74..         MOV     A,#??SerialApp_CallBack?relay & 0xff
   \   000079   F0           MOVX    @DPTR,A
   \   00007A   A3           INC     DPTR
   \   00007B   74..         MOV     A,#(??SerialApp_CallBack?relay >> 8) & 0xff
   \   00007D   12....       LCALL   ?Subroutine4 & 0xFFFF
    209          	HalUARTOpen (UART0, &uartConfig);
   \                     ??CrossCallReturnLabel_2:
   \   000080   AA82         MOV     R2,DPL
   \   000082   AB83         MOV     R3,DPH
   \   000084   7900         MOV     R1,#0x0
   \   000086   12....       LCALL   ??HalUARTOpen?relay
    210          	
    211          #if defined ( LCD_SUPPORTED )
    212          	HalLcdWriteString( "SerialApp", HAL_LCD_LINE_2 );
   \   000089                ; Setup parameters for call to function HalLcdWriteString
   \   000089   7902         MOV     R1,#0x2
   \   00008B   7A..         MOV     R2,#`?<Constant "SerialApp">` & 0xff
   \   00008D   7B..         MOV     R3,#(`?<Constant "SerialApp">` >> 8) & 0xff
   \   00008F   12....       LCALL   ??HalLcdWriteString?relay
    213          #endif
    214          	//HalUARTWrite(UART0, "Init", 4);
    215          	//ZDO_RegisterForZDOMsg( SerialApp_TaskID, End_Device_Bind_rsp );
    216          	//ZDO_RegisterForZDOMsg( SerialApp_TaskID, Match_Desc_rsp );
    217          }
   \   000092   741D         MOV     A,#0x1d
   \   000094   12....       LCALL   ?DEALLOC_XSTACK8
   \   000097                REQUIRE ?Subroutine0
   \   000097                REQUIRE P0SEL
   \   000097                REQUIRE P0DIR
   \   000097                REQUIRE _A_P0
   \   000097                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function HalUARTOpen
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   22           RET
    218          
    219          /*********************************************************************
    220          * @fn      SerialApp_ProcessEvent
    221          *
    222          * @brief   Generic Application Task event processor.
    223          *
    224          * @param   task_id  - The OSAL assigned task ID.
    225          * @param   events   - Bit map of events to process.
    226          *
    227          * @return  Event flags of all unprocessed events.
    228          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    229          UINT16 SerialApp_ProcessEvent( uint8 task_id, UINT16 events )
   \                     SerialApp_ProcessEvent:
    230          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV     A,#-0xb
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    231          	(void)task_id;  // Intentionally unreferenced parameter
    232          	
    233          	if ( events & SYS_EVENT_MSG )
   \   00000E   75....       MOV     ?V0 + 6,#SerialApp_epDesc & 0xff
   \   000011   75....       MOV     ?V0 + 7,#(SerialApp_epDesc >> 8) & 0xff
   \   000014   5480         ANL     A,#0x80
   \   000016   6003         JZ      $+5
   \   000018   02....       LJMP    ??SerialApp_ProcessEvent_0 & 0xFFFF
    234          	{
    235          		afIncomingMSGPacket_t *MSGpkt;
    236          		
    237          		while ( (MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SerialApp_TaskID )) )
    238          		{
    239          			switch ( MSGpkt->hdr.event )
    240          			{
    241          			case ZDO_CB_MSG:
    242          				//SerialApp_ProcessZDOMsgs( (zdoIncomingMsg_t *)MSGpkt );
    243          				break;
    244          				
    245          			case KEY_CHANGE:
    246          				SerialApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    247          				break;
    248          				
    249          			case AF_INCOMING_MSG_CMD:
    250          				SerialApp_ProcessMSGCmd( MSGpkt );
    251          				break;
    252                          
    253                      case ZDO_STATE_CHANGE:
    254                        SerialApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
    255                        if ( (SerialApp_NwkState == DEV_ZB_COORD)
    256                            || (SerialApp_NwkState == DEV_ROUTER)
    257                            || (SerialApp_NwkState == DEV_END_DEVICE) )
    258                        {
    259                          #if defined(ZDO_COORDINATOR) //Ð­µ÷Æ÷Í¨¹ý´®¿ÚÊä³ö×ÔÉí¶ÌµØÖ·¡¢IEEE  
    260                              Broadcast_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
    261                              Broadcast_DstAddr.endPoint = SERIALAPP_ENDPOINT;
    262                              Broadcast_DstAddr.addr.shortAddr = 0xFFFF;
    263                              #if UART_DEBUG           
    264                              PrintAddrInfo( NLME_GetShortAddr(), aExtendedAddress + Z_EXTADDR_LEN - 1);
    265                              #endif 
    266                              //³õÊ¼»¯µÆµÄ×´Ì¬£¬1ÎªÏ¨Ãð×´Ì¬£¬0ÎªµãÁÁ
    267                              NodeData[0][3] = 1;
    268                              NodeData[1][3] = 1;
    269                              NodeData[2][3] = 1;
    270                              NodeData[3][3] = 1;
    271                          #else                        //ÖÕ¶ËÎÞÏß·¢ËÍ¶ÌµØÖ·¡¢IEEE   
    272                              AfSendAddrInfo();
    273                          #endif
    274                          
    275                        }
    276                        break;				
    277          			default:
    278          				break;
    279          			}
    280          			
    281          			osal_msg_deallocate( (uint8 *)MSGpkt );
    282          		}
    283          		
    284          		return ( events ^ SYS_EVENT_MSG );
    285          	}
    286              
    287              //ÔÚ´ËÊÂ¼þÖÐ¿ÉÒÔ¶¨Ê±ÏòÐ­µ÷Æ÷·¢ËÍ½Úµã´«¸ÐÆ÷²ÎÊýÐÅÏ¢
    288              if ( events & SERIALAPP_SEND_PERIODIC_EVT )
   \   00001B   EE           MOV     A,R6
   \   00001C   5403         ANL     A,#0x3
   \   00001E   7003         JNZ     $+5
   \   000020   02....       LJMP    ??SerialApp_ProcessEvent_1 & 0xFFFF
    289              {
    290                  SerialApp_SendPeriodicMessage();
   \   000023                ; Setup parameters for call to function SerialApp_SendPeriodicMessage
   \   000023   12....       LCALL   ??SerialApp_SendPeriodicMessage?relay
    291                  
    292                  osal_start_timerEx( SerialApp_TaskID, SERIALAPP_SEND_PERIODIC_EVT,
    293                      (SERIALAPP_SEND_PERIODIC_TIMEOUT + (osal_rand() & 0x00FF)) );
   \   000026                ; Setup parameters for call to function osal_rand
   \   000026   12....       LCALL   ??osal_rand?relay
   \   000029                ; Setup parameters for call to function osal_start_timerEx
   \   000029   EA           MOV     A,R2
   \   00002A   24F4         ADD     A,#-0xc
   \   00002C   FC           MOV     R4,A
   \   00002D   E4           CLR     A
   \   00002E   3401         ADDC    A,#0x1
   \   000030   FD           MOV     R5,A
   \   000031   12....       LCALL   ?Subroutine8 & 0xFFFF
    294                  
    295                  return (events ^ SERIALAPP_SEND_PERIODIC_EVT);
   \                     ??CrossCallReturnLabel_9:
   \   000034   EE           MOV     A,R6
   \   000035   6403         XRL     A,#0x3
   \                     ??SerialApp_ProcessEvent_2:
   \   000037   FA           MOV     R2,A
   \   000038   EF           MOV     A,R7
   \                     ??SerialApp_ProcessEvent_3:
   \   000039   FB           MOV     R3,A
   \   00003A   02....       LJMP    ??SerialApp_ProcessEvent_4 & 0xFFFF
    296              }
   \                     ??SerialApp_ProcessEvent_5:
   \   00003D   A3           INC     DPTR
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   90....       MOV     DPTR,#SerialApp_NwkState
   \   000042   F0           MOVX    @DPTR,A
   \   000043   6409         XRL     A,#0x9
   \   000045   600D         JZ      ??SerialApp_ProcessEvent_6
   \   000047   E0           MOVX    A,@DPTR
   \   000048   6407         XRL     A,#0x7
   \   00004A   6008         JZ      ??SerialApp_ProcessEvent_6
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   6406         XRL     A,#0x6
   \   00004F   6003         JZ      $+5
   \   000051   02....       LJMP    ??SerialApp_ProcessEvent_7 & 0xFFFF
   \                     ??SerialApp_ProcessEvent_6:
   \   000054   85..82       MOV     DPL,?XSP + 0
   \   000057   85..83       MOV     DPH,?XSP + 1
   \   00005A   AC82         MOV     R4,DPL
   \   00005C   AD83         MOV     R5,DPH
   \   00005E   7583..       MOV     DPH,#(`?<Constant {0}>_2` >> 8) & 0xff
   \   000061   7582..       MOV     DPL,#`?<Constant {0}>_2` & 0xff
   \   000064   740B         MOV     A,#0xb
   \   000066   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   \   000069   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   00006C                ; Setup parameters for call to function NLME_GetShortAddr
   \   00006C   12....       LCALL   ??NLME_GetShortAddr?relay
   \   00006F   85..82       MOV     DPL,?XSP + 0
   \   000072   85..83       MOV     DPH,?XSP + 1
   \   000075   743B         MOV     A,#0x3b
   \   000077   F0           MOVX    @DPTR,A
   \   000078   7401         MOV     A,#0x1
   \   00007A   12....       LCALL   ?XSTACK_DISP0_8
   \   00007D   EB           MOV     A,R3
   \   00007E   F0           MOVX    @DPTR,A
   \   00007F   7402         MOV     A,#0x2
   \   000081   12....       LCALL   ?XSTACK_DISP0_8
   \   000084   EA           MOV     A,R2
   \   000085   F0           MOVX    @DPTR,A
   \   000086                ; Setup parameters for call to function osal_memcpy
   \   000086                ; Setup parameters for call to function NLME_GetExtAddr
   \   000086   12....       LCALL   ??NLME_GetExtAddr?relay
   \   000089   8A..         MOV     ?V0 + 0,R2
   \   00008B   8B..         MOV     ?V0 + 1,R3
   \   00008D   75..00       MOV     ?V0 + 2,#0x0
   \   000090   78..         MOV     R0,#?V0 + 0
   \   000092   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000095   7C08         MOV     R4,#0x8
   \   000097   7D00         MOV     R5,#0x0
   \   000099   7406         MOV     A,#0x6
   \   00009B   12....       LCALL   ?XSTACK_DISP0_8
   \   00009E   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   0000A1   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A4                ; Setup parameters for call to function AF_DataRequest
   \   0000A4   75..1E       MOV     ?V0 + 0,#0x1e
   \   0000A7   78..         MOV     R0,#?V0 + 0
   \   0000A9   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000AC   75....       MOV     ?V0 + 0,#SerialApp_MsgID & 0xff
   \   0000AF   75....       MOV     ?V0 + 1,#(SerialApp_MsgID >> 8) & 0xff
   \   0000B2   78..         MOV     R0,#?V0 + 0
   \   0000B4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B7   7403         MOV     A,#0x3
   \   0000B9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BC   8582..       MOV     ?V0 + 0,DPL
   \   0000BF   8583..       MOV     ?V0 + 1,DPH
   \   0000C2   78..         MOV     R0,#?V0 + 0
   \   0000C4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C7   75..0B       MOV     ?V0 + 0,#0xb
   \   0000CA   75..00       MOV     ?V0 + 1,#0x0
   \   0000CD   78..         MOV     R0,#?V0 + 0
   \   0000CF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000D2   75..01       MOV     ?V0 + 0,#0x1
   \   0000D5   78..         MOV     R0,#?V0 + 0
   \   0000D7   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000DA   7900         MOV     R1,#0x0
   \   0000DC   AC..         MOV     R4,?V0 + 6
   \   0000DE   AD..         MOV     R5,?V0 + 7
   \   0000E0   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   0000E3   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??SerialApp_ProcessEvent_7:
   \   0000E6                ; Setup parameters for call to function osal_msg_deallocate
   \   0000E6   AA..         MOV     R2,?V0 + 4
   \   0000E8   AB..         MOV     R3,?V0 + 5
   \   0000EA   12....       LCALL   ??osal_msg_deallocate?relay
   \                     ??SerialApp_ProcessEvent_0:
   \   0000ED                ; Setup parameters for call to function osal_msg_receive
   \   0000ED   90....       MOV     DPTR,#SerialApp_TaskID
   \   0000F0   E0           MOVX    A,@DPTR
   \   0000F1   F9           MOV     R1,A
   \   0000F2   12....       LCALL   ??osal_msg_receive?relay
   \   0000F5   8A..         MOV     ?V0 + 4,R2
   \   0000F7   8B..         MOV     ?V0 + 5,R3
   \   0000F9   EA           MOV     A,R2
   \   0000FA   45..         ORL     A,?V0 + 5
   \   0000FC   602E         JZ      ??SerialApp_ProcessEvent_8
   \   0000FE   8A82         MOV     DPL,R2
   \   000100   8B83         MOV     DPH,R3
   \   000102   E0           MOVX    A,@DPTR
   \   000103   24E6         ADD     A,#-0x1a
   \   000105   6020         JZ      ??SerialApp_ProcessEvent_9
   \   000107   245A         ADD     A,#0x5a
   \   000109   6009         JZ      ??SerialApp_ProcessEvent_10
   \   00010B   24EF         ADD     A,#-0x11
   \   00010D   7003         JNZ     $+5
   \   00010F   02....       LJMP    ??SerialApp_ProcessEvent_5 & 0xFFFF
   \   000112   80D2         SJMP    ??SerialApp_ProcessEvent_7
   \                     ??SerialApp_ProcessEvent_10:
   \   000114                ; Setup parameters for call to function SerialApp_HandleKeys
   \   000114   A3           INC     DPTR
   \   000115   A3           INC     DPTR
   \   000116   A3           INC     DPTR
   \   000117   E0           MOVX    A,@DPTR
   \   000118   FA           MOV     R2,A
   \   000119   85..82       MOV     DPL,?V0 + 4
   \   00011C   8B83         MOV     DPH,R3
   \   00011E   A3           INC     DPTR
   \   00011F   A3           INC     DPTR
   \   000120   E0           MOVX    A,@DPTR
   \   000121   F9           MOV     R1,A
   \   000122   12....       LCALL   ??SerialApp_HandleKeys?relay
   \   000125   80BF         SJMP    ??SerialApp_ProcessEvent_7
   \                     ??SerialApp_ProcessEvent_9:
   \   000127                ; Setup parameters for call to function SerialApp_ProcessMSGCmd
   \   000127   12....       LCALL   ??SerialApp_ProcessMSGCmd?relay
   \   00012A   80BA         SJMP    ??SerialApp_ProcessEvent_7
   \                     ??SerialApp_ProcessEvent_8:
   \   00012C   EE           MOV     A,R6
   \   00012D   FA           MOV     R2,A
   \   00012E   EF           MOV     A,R7
   \   00012F   6480         XRL     A,#0x80
   \   000131   02....       LJMP    ??SerialApp_ProcessEvent_3 & 0xFFFF
    297              
    298          	if ( events & SERIALAPP_SEND_EVT )
   \                     ??SerialApp_ProcessEvent_1:
   \   000134   EE           MOV     A,R6
   \   000135   A2E0         MOV     C,0xE0 /* A   */.0
   \   000137   5009         JNC     ??SerialApp_ProcessEvent_11
    299          	{
    300          		SerialApp_Send();
   \   000139                ; Setup parameters for call to function SerialApp_Send
   \   000139   12....       LCALL   ??SerialApp_Send?relay
    301          		return ( events ^ SERIALAPP_SEND_EVT );
   \   00013C   EE           MOV     A,R6
   \   00013D   6401         XRL     A,#0x1
   \   00013F   02....       LJMP    ??SerialApp_ProcessEvent_2 & 0xFFFF
    302          	}
    303          	
    304          	if ( events & SERIALAPP_RESP_EVT )
   \                     ??SerialApp_ProcessEvent_11:
   \   000142   5402         ANL     A,#0x2
   \   000144   6056         JZ      ??SerialApp_ProcessEvent_12
    305          	{
    306          		SerialApp_Resp();
   \   000146                ; Setup parameters for call to function AF_DataRequest
   \   000146   75..1E       MOV     ?V0 + 0,#0x1e
   \   000149   78..         MOV     R0,#?V0 + 0
   \   00014B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00014E   75....       MOV     ?V0 + 0,#SerialApp_MsgID & 0xff
   \   000151   75....       MOV     ?V0 + 1,#(SerialApp_MsgID >> 8) & 0xff
   \   000154   78..         MOV     R0,#?V0 + 0
   \   000156   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000159   75....       MOV     ?V0 + 0,#SerialApp_RspBuf & 0xff
   \   00015C   75....       MOV     ?V0 + 1,#(SerialApp_RspBuf >> 8) & 0xff
   \   00015F   78..         MOV     R0,#?V0 + 0
   \   000161   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000164   75..04       MOV     ?V0 + 0,#0x4
   \   000167   75..00       MOV     ?V0 + 1,#0x0
   \   00016A   78..         MOV     R0,#?V0 + 0
   \   00016C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00016F   75..02       MOV     ?V0 + 0,#0x2
   \   000172   78..         MOV     R0,#?V0 + 0
   \   000174   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000177   7900         MOV     R1,#0x0
   \   000179   AC..         MOV     R4,?V0 + 6
   \   00017B   AD..         MOV     R5,?V0 + 7
   \   00017D   7A..         MOV     R2,#SerialApp_RxAddr & 0xff
   \   00017F   7B..         MOV     R3,#(SerialApp_RxAddr >> 8) & 0xff
   \   000181   12....       LCALL   ??Subroutine12_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   000184   12....       LCALL   ?DEALLOC_XSTACK8
   \   000187   E9           MOV     A,R1
   \   000188   600C         JZ      ??SerialApp_ProcessEvent_13
   \   00018A                ; Setup parameters for call to function osal_set_event
   \   00018A   7A02         MOV     R2,#0x2
   \   00018C   7B00         MOV     R3,#0x0
   \   00018E   90....       MOV     DPTR,#SerialApp_TaskID
   \   000191   E0           MOVX    A,@DPTR
   \   000192   F9           MOV     R1,A
   \   000193   12....       LCALL   ??osal_set_event?relay
    307          		return ( events ^ SERIALAPP_RESP_EVT );
   \                     ??SerialApp_ProcessEvent_13:
   \   000196   EE           MOV     A,R6
   \   000197   6402         XRL     A,#0x2
   \   000199   02....       LJMP    ??SerialApp_ProcessEvent_2 & 0xFFFF
    308          	}
    309          	
    310          	return ( 0 ); 
   \                     ??SerialApp_ProcessEvent_12:
   \   00019C   7A00         MOV     R2,#0x0
   \   00019E   7B00         MOV     R3,#0x0
   \                     ??SerialApp_ProcessEvent_4:
   \   0001A0   740B         MOV     A,#0xb
   \   0001A2   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001A5                REQUIRE ?Subroutine1
   \   0001A5                ; // Fall through to label ?Subroutine1
    311          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F08         MOV     R7,#0x8
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   7A03         MOV     R2,#0x3
   \   000002                REQUIRE ??Subroutine10_0
   \   000002                ; // Fall through to label ??Subroutine10_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine10_0:
   \   000000   7B00         MOV     R3,#0x0
   \   000002   90....       MOV     DPTR,#SerialApp_TaskID
   \   000005   E0           MOVX    A,@DPTR
   \   000006   F9           MOV     R1,A
   \   000007   12....       LCALL   ??osal_start_timerEx?relay
   \   00000A   22           RET
    312          
    313          /*********************************************************************
    314          * @fn      SerialApp_HandleKeys
    315          *
    316          * @brief   Handles all key events for this device.
    317          *
    318          * @param   shift - true if in shift/alt.
    319          * @param   keys  - bit field for key events.
    320          *
    321          * @return  none
    322          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    323          void SerialApp_HandleKeys( uint8 shift, uint8 keys )
   \                     SerialApp_HandleKeys:
    324          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FF           MOV     R7,A
    325          	zAddrType_t txAddr;
    326          	
    327              if ( keys & HAL_KEY_SW_6 ) //°´S1¼üÆô¶¯»òÍ£Ö¹ÖÕ¶Ë¶¨Ê±ÉÏ±¨Êý¾Ý 
   \   00000C   A2E5         MOV     C,0xE0 /* A   */.5
   \   00000E   502B         JNC     ??SerialApp_HandleKeys_0
    328              {
    329                if(SendFlag == 0)
   \   000010   90....       MOV     DPTR,#SendFlag
   \   000013   E0           MOVX    A,@DPTR
   \   000014   7011         JNZ     ??SerialApp_HandleKeys_1
    330                  {
    331                  SendFlag = 1;
   \   000016   7401         MOV     A,#0x1
   \   000018   F0           MOVX    @DPTR,A
    332                  HalLedSet ( HAL_LED_1, HAL_LED_MODE_ON );
   \   000019                ; Setup parameters for call to function HalLedSet
   \   000019   FA           MOV     R2,A
   \   00001A   F9           MOV     R1,A
   \   00001B   12....       LCALL   ??HalLedSet?relay
    333                  osal_start_timerEx( SerialApp_TaskID,
    334                                      SERIALAPP_SEND_PERIODIC_EVT,
    335                                      SERIALAPP_SEND_PERIODIC_TIMEOUT );
   \   00001E                ; Setup parameters for call to function osal_start_timerEx
   \   00001E   7CF4         MOV     R4,#-0xc
   \   000020   7D01         MOV     R5,#0x1
   \   000022   12....       LCALL   ?Subroutine8 & 0xFFFF
    336                  }
   \                     ??CrossCallReturnLabel_10:
   \   000025   8014         SJMP    ??SerialApp_HandleKeys_0
    337                  else
    338                  {      
    339                      SendFlag = 0;
   \                     ??SerialApp_HandleKeys_1:
   \   000027   E4           CLR     A
   \   000028   F0           MOVX    @DPTR,A
    340                      HalLedSet ( HAL_LED_1, HAL_LED_MODE_OFF );
   \   000029                ; Setup parameters for call to function HalLedSet
   \   000029   FA           MOV     R2,A
   \   00002A   7901         MOV     R1,#0x1
   \   00002C   12....       LCALL   ??HalLedSet?relay
    341                      osal_stop_timerEx(SerialApp_TaskID, SERIALAPP_SEND_PERIODIC_EVT);
   \   00002F                ; Setup parameters for call to function osal_stop_timerEx
   \   00002F   7A03         MOV     R2,#0x3
   \   000031   7B00         MOV     R3,#0x0
   \   000033   90....       MOV     DPTR,#SerialApp_TaskID
   \   000036   E0           MOVX    A,@DPTR
   \   000037   F9           MOV     R1,A
   \   000038   12....       LCALL   ??osal_stop_timerEx?relay
    342                  }
    343              }
    344              
    345              if ( keys & HAL_KEY_SW_1 ) //°´S2
   \                     ??SerialApp_HandleKeys_0:
   \   00003B   EF           MOV     A,R7
   \   00003C   A2E0         MOV     C,0xE0 /* A   */.0
   \   00003E   500A         JNC     ??SerialApp_HandleKeys_2
    346              {
    347                  LAMP_PIN = ~LAMP_PIN;
   \   000040   D2F0         SETB    B.0
   \   000042   A285         MOV     C,0x80.5
   \   000044   30F001       JNB     B.0,??SerialApp_HandleKeys_3
   \   000047   B3           CPL     C
   \                     ??SerialApp_HandleKeys_3:
   \   000048   9285         MOV     0x80.5,C
    348              }
    349              
    350              if ( keys & HAL_KEY_SW_2 )
   \                     ??SerialApp_HandleKeys_2:
   \   00004A   75....       MOV     ?V0 + 0,#SerialApp_ClusterList & 0xff
   \   00004D   75....       MOV     ?V0 + 1,#(SerialApp_ClusterList >> 8) & 0xff
   \   000050   A2E1         MOV     C,0xE0 /* A   */.1
   \   000052   5059         JNC     ??SerialApp_HandleKeys_4
    351              {
    352                  HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
   \   000054                ; Setup parameters for call to function HalLedSet
   \   000054   7A00         MOV     R2,#0x0
   \   000056   7908         MOV     R1,#0x8
   \   000058   12....       LCALL   ??HalLedSet?relay
    353                  
    354                  // Initiate an End Device Bind Request for the mandatory endpoint
    355                  txAddr.addrMode = Addr16Bit;
   \   00005B   7408         MOV     A,#0x8
   \   00005D   12....       LCALL   ?XSTACK_DISP0_8
   \   000060   7402         MOV     A,#0x2
   \   000062   12....       LCALL   ?Subroutine4 & 0xFFFF
    356                  txAddr.addr.shortAddr = 0x0000; // Coordinator
   \                     ??CrossCallReturnLabel_3:
   \   000065   E4           CLR     A
   \   000066   F0           MOVX    @DPTR,A
   \   000067   A3           INC     DPTR
   \   000068   F0           MOVX    @DPTR,A
    357                  ZDP_EndDeviceBindReq( &txAddr, NLME_GetShortAddr(), 
    358                      SerialApp_epDesc.endPoint,
    359                      SERIALAPP_PROFID,
    360                      SERIALAPP_MAX_CLUSTERS, (cId_t *)SerialApp_ClusterList,
    361                      SERIALAPP_MAX_CLUSTERS, (cId_t *)SerialApp_ClusterList,
    362                      FALSE );
   \   000069                ; Setup parameters for call to function ZDP_EndDeviceBindReq
   \   000069   F5..         MOV     ?V0 + 2,A
   \   00006B   78..         MOV     R0,#?V0 + 2
   \   00006D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000070   78..         MOV     R0,#?V0 + 0
   \   000072   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000075   75..02       MOV     ?V0 + 2,#0x2
   \   000078   78..         MOV     R0,#?V0 + 2
   \   00007A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00007D   78..         MOV     R0,#?V0 + 0
   \   00007F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000082   78..         MOV     R0,#?V0 + 2
   \   000084   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000087   75..05       MOV     ?V0 + 2,#0x5
   \   00008A   75..0F       MOV     ?V0 + 3,#0xf
   \   00008D   78..         MOV     R0,#?V0 + 2
   \   00008F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000092                ; Setup parameters for call to function NLME_GetShortAddr
   \   000092   12....       LCALL   ??NLME_GetShortAddr?relay
   \   000095   EA           MOV     A,R2
   \   000096   FC           MOV     R4,A
   \   000097   EB           MOV     A,R3
   \   000098   FD           MOV     R5,A
   \   000099   740B         MOV     A,#0xb
   \   00009B   F9           MOV     R1,A
   \   00009C   7409         MOV     A,#0x9
   \   00009E   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A1   AA82         MOV     R2,DPL
   \   0000A3   AB83         MOV     R3,DPH
   \   0000A5   12....       LCALL   ??ZDP_EndDeviceBindReq?relay
   \   0000A8   7409         MOV     A,#0x9
   \   0000AA   12....       LCALL   ?DEALLOC_XSTACK8
    363              }
    364              
    365              if ( keys & HAL_KEY_SW_3 )
    366              {
    367              }
    368              
    369              if ( keys & HAL_KEY_SW_4 )
   \                     ??SerialApp_HandleKeys_4:
   \   0000AD   EF           MOV     A,R7
   \   0000AE   A2E3         MOV     C,0xE0 /* A   */.3
   \   0000B0   5052         JNC     ??SerialApp_HandleKeys_5
    370              {
    371                  HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
   \   0000B2                ; Setup parameters for call to function HalLedSet
   \   0000B2   7A00         MOV     R2,#0x0
   \   0000B4   7908         MOV     R1,#0x8
   \   0000B6   12....       LCALL   ??HalLedSet?relay
    372                  
    373                  // Initiate a Match Description Request (Service Discovery)
    374                  txAddr.addrMode = AddrBroadcast;
   \   0000B9   7408         MOV     A,#0x8
   \   0000BB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BE   740F         MOV     A,#0xf
   \   0000C0   12....       LCALL   ?Subroutine4 & 0xFFFF
    375                  txAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR;
   \                     ??CrossCallReturnLabel_4:
   \   0000C3   74FF         MOV     A,#-0x1
   \   0000C5   F0           MOVX    @DPTR,A
   \   0000C6   A3           INC     DPTR
   \   0000C7   F0           MOVX    @DPTR,A
    376                  ZDP_MatchDescReq( &txAddr, NWK_BROADCAST_SHORTADDR,
    377                      SERIALAPP_PROFID,
    378                      SERIALAPP_MAX_CLUSTERS, (cId_t *)SerialApp_ClusterList,
    379                      SERIALAPP_MAX_CLUSTERS, (cId_t *)SerialApp_ClusterList,
    380                      FALSE );
   \   0000C8                ; Setup parameters for call to function ZDP_MatchDescReq
   \   0000C8   75..00       MOV     ?V0 + 2,#0x0
   \   0000CB   78..         MOV     R0,#?V0 + 2
   \   0000CD   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000D0   78..         MOV     R0,#?V0 + 0
   \   0000D2   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000D5   75..02       MOV     ?V0 + 2,#0x2
   \   0000D8   78..         MOV     R0,#?V0 + 2
   \   0000DA   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000DD   78..         MOV     R0,#?V0 + 0
   \   0000DF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000E2   75..05       MOV     ?V0 + 0,#0x5
   \   0000E5   75..0F       MOV     ?V0 + 1,#0xf
   \   0000E8   78..         MOV     R0,#?V0 + 0
   \   0000EA   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000ED   7902         MOV     R1,#0x2
   \   0000EF   7CFF         MOV     R4,#-0x1
   \   0000F1   7DFF         MOV     R5,#-0x1
   \   0000F3   7408         MOV     A,#0x8
   \   0000F5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F8   AA82         MOV     R2,DPL
   \   0000FA   AB83         MOV     R3,DPH
   \   0000FC   12....       LCALL   ??ZDP_MatchDescReq?relay
   \   0000FF   7408         MOV     A,#0x8
   \   000101   12....       LCALL   ?DEALLOC_XSTACK8
    381              }
    382          
    383          }
   \                     ??SerialApp_HandleKeys_5:
   \   000104   7409         MOV     A,#0x9
   \   000106   12....       LCALL   ?DEALLOC_XSTACK8
   \   000109   7F04         MOV     R7,#0x4
   \   00010B   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   00010E                REQUIRE _A_P0
    384          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   AA82         MOV     R2,DPL
   \   000002   AB83         MOV     R3,DPH
   \   000004                REQUIRE ??Subroutine11_0
   \   000004                ; // Fall through to label ??Subroutine11_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine11_0:
   \   000000   12....       LCALL   ??osal_memcpy?relay
   \   000003   7403         MOV     A,#0x3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    385          void SerialApp_ProcessMSGCmd( afIncomingMSGPacket_t *pkt )
   \                     SerialApp_ProcessMSGCmd:
    386          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 30
   \   000005   74E2         MOV     A,#-0x1e
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    387              uint16 shortAddr;
                            ^
Warning[Pe177]: variable "shortAddr" was declared but never referenced
    388              uint8 *pIeeeAddr; 
                            ^
Warning[Pe177]: variable "pIeeeAddr" was declared but never referenced
    389              uint8 delay;
    390              uint8 afRxData[30]={0};
   \   00000A   90....       MOV     DPTR,#`?<Constant {0}>`
   \   00000D   C082         PUSH    DPL
   \   00000F   85..82       MOV     DPL,?XSP + 0
   \   000012   85..83       MOV     DPH,?XSP + 1
   \   000015   AC82         MOV     R4,DPL
   \   000017   AD83         MOV     R5,DPH
   \   000019   7583..       MOV     DPH,#(`?<Constant {0}>` >> 8) & 0xff
   \   00001C   D082         POP     DPL
   \   00001E   741E         MOV     A,#0x1e
   \   000020   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    391              
    392          	//²éÑ¯µ¥¸öÖÕ¶ËÉÏËùÓÐ´«¸ÐÆ÷µÄÊý¾Ý 3A 00 01 02 39 23  ÏìÓ¦£º3A 00 01 02 00 00 00 00 xor 23
    393          	switch ( pkt->clusterId )
   \   000023   8A82         MOV     DPL,R2
   \   000025   8B83         MOV     DPH,R3
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   A3           INC     DPTR
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F5..         MOV     ?V0 + 0,A
   \   00002E   A3           INC     DPTR
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   F5..         MOV     ?V0 + 1,A
   \   000032   78..         MOV     R0,#?V0 + 0
   \   000034   12....       LCALL   ?US_SWITCH_DENSE
   \                     `?<Jumptable for SerialApp_ProcessMSGCmd>_0`:
   \   000037   0100         DW        1
   \   000039   01           DB        1
   \   00003A   ....         DW        ??CrossCallReturnLabel_11
   \   00003C   ....         DW        ??SerialApp_ProcessMSGCmd_0
   \   00003E   ....         DW        ??SerialApp_ProcessMSGCmd_1
    394          	{
    395          	// A message with a serial data block to be transmitted on the serial port.
    396          	case SERIALAPP_CLUSTERID:
    397                  osal_memcpy(afRxData, pkt->cmd.Data, pkt->cmd.DataLength);
   \                     ??SerialApp_ProcessMSGCmd_0:
   \   000040                ; Setup parameters for call to function osal_memcpy
   \   000040   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000043   F5..         MOV     ?V0 + 0,A
   \   000045   A3           INC     DPTR
   \   000046   E0           MOVX    A,@DPTR
   \   000047   F5..         MOV     ?V0 + 1,A
   \   000049   75..00       MOV     ?V0 + 2,#0x0
   \   00004C   78..         MOV     R0,#?V0 + 0
   \   00004E   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000051   EA           MOV     A,R2
   \   000052   241F         ADD     A,#0x1f
   \   000054   F582         MOV     DPL,A
   \   000056   EB           MOV     A,R3
   \   000057   3400         ADDC    A,#0x0
   \   000059   F583         MOV     DPH,A
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   FC           MOV     R4,A
   \   00005D   A3           INC     DPTR
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   FD           MOV     R5,A
   \   000060   7403         MOV     A,#0x3
   \   000062   12....       LCALL   ?XSTACK_DISP0_8
   \   000065   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000068   12....       LCALL   ?DEALLOC_XSTACK8
    398          		switch(afRxData[0]) //¼òµ¥Ð­ÒéÃüÁî×Ö½âÎö
   \   00006B   85..82       MOV     DPL,?XSP + 0
   \   00006E   85..83       MOV     DPH,?XSP + 1
   \   000071   E0           MOVX    A,@DPTR
   \   000072   643A         XRL     A,#0x3a
   \   000074   6003         JZ      $+5
   \   000076   02....       LJMP    ??CrossCallReturnLabel_11 & 0xFFFF
    399          		{
    400          #if defined(ZDO_COORDINATOR)
    401          		case 0x3B:  //ÊÕµ½ÖÕ¶ËÎÞÏß·¢¹ýÀ´µÄ¶ÌµØÖ·ºÍIEEEµØÖ·,Í¨¹ý´®¿ÚÊä³öÏÔÊ¾      
    402          			shortAddr=(afRxData[1]<<8)|afRxData[2];
    403          			pIeeeAddr = &afRxData[3];
    404                      #if UART_DEBUG
    405          			PrintAddrInfo(shortAddr, pIeeeAddr + Z_EXTADDR_LEN - 1);
    406                      #endif   
    407          			break;
    408          		case 0x3A:	
    409                      if(afRxData[3] == 0x02) //ÊÕµ½ÖÕ¶Ë´«¹ýÀ´µÄ´«¸ÐÆ÷Êý¾Ý²¢±£´æ
    410                      {  
    411                          NodeData[afRxData[2]-1][0] = afRxData[4];
    412                          NodeData[afRxData[2]-1][1] = afRxData[5];
    413                          NodeData[afRxData[2]-1][2] = afRxData[6];
    414                          NodeData[afRxData[2]-1][3] = afRxData[7];
    415                          NodeData[afRxData[2]-1][4] = 0x00;
    416                      }
    417                      
    418                  #if UART_DEBUG
    419                      HalUARTWrite (UART0, NodeData[afRxData[3]-1], 4); //µ÷ÊÔÊ±Í¨¹ý´®¿ÚÊä³ö
    420                      HalUARTWrite (UART0, "\n", 1);
    421                  #endif            
    422                     break;
    423          #else  
    424          		case 0x3A:  //¿ª¹ØµÆÉè±¸          
    425                  if(afRxData[3] == 0x0A || afRxData[3] == 0x0B || afRxData[3] == 0x0C) //¿ØÖÆÖÕ¶Ë          
   \   000079   7403         MOV     A,#0x3
   \   00007B   12....       LCALL   ?XSTACK_DISP0_8
   \   00007E   E0           MOVX    A,@DPTR
   \   00007F   F8           MOV     R0,A
   \   000080   740A         MOV     A,#0xa
   \   000082   68           XRL     A,R0
   \   000083   600A         JZ      ??SerialApp_ProcessMSGCmd_2
   \   000085   740B         MOV     A,#0xb
   \   000087   68           XRL     A,R0
   \   000088   6005         JZ      ??SerialApp_ProcessMSGCmd_2
   \   00008A   740C         MOV     A,#0xc
   \   00008C   68           XRL     A,R0
   \   00008D   7076         JNZ     ??CrossCallReturnLabel_11
    426                  {  
    427          			if(EndDeviceID == afRxData[2] || afRxData[2]==0xFF)
   \                     ??SerialApp_ProcessMSGCmd_2:
   \   00008F   7402         MOV     A,#0x2
   \   000091   12....       LCALL   ?XSTACK_DISP0_8
   \   000094   E0           MOVX    A,@DPTR
   \   000095   F8           MOV     R0,A
   \   000096   90....       MOV     DPTR,#EndDeviceID
   \   000099   88..         MOV     ?V0 + 0,R0
   \   00009B   E0           MOVX    A,@DPTR
   \   00009C   65..         XRL     A,?V0 + 0
   \   00009E   7002         JNZ     ??SerialApp_ProcessMSGCmd_3
   \   0000A0   A3           INC     DPTR
   \   0000A1   E0           MOVX    A,@DPTR
   \                     ??SerialApp_ProcessMSGCmd_3:
   \   0000A2   6005         JZ      ??SerialApp_ProcessMSGCmd_4
   \   0000A4   74FF         MOV     A,#-0x1
   \   0000A6   68           XRL     A,R0
   \   0000A7   705C         JNZ     ??CrossCallReturnLabel_11
    428          			{
    429          				if(afRxData[4] == 1)
   \                     ??SerialApp_ProcessMSGCmd_4:
   \   0000A9   7404         MOV     A,#0x4
   \   0000AB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AE   E0           MOVX    A,@DPTR
   \   0000AF   6401         XRL     A,#0x1
   \   0000B1   700B         JNZ     ??SerialApp_ProcessMSGCmd_5
    430                          {
    431                              LAMP_PIN = 0;
   \   0000B3   C285         CLR     0x80.5
    432          					HalLedSet ( HAL_LED_2, HAL_LED_MODE_OFF );
   \   0000B5                ; Setup parameters for call to function HalLedSet
   \   0000B5   7A00         MOV     R2,#0x0
   \                     ??SerialApp_ProcessMSGCmd_6:
   \   0000B7   7902         MOV     R1,#0x2
   \   0000B9   12....       LCALL   ??HalLedSet?relay
   \   0000BC   8047         SJMP    ??CrossCallReturnLabel_11
    433                          }
    434          				else
    435                          {
    436                              LAMP_PIN = 1;
   \                     ??SerialApp_ProcessMSGCmd_5:
   \   0000BE   D285         SETB    0x80.5
    437          					HalLedSet ( HAL_LED_2, HAL_LED_MODE_ON );
   \   0000C0                ; Setup parameters for call to function HalLedSet
   \   0000C0   7A01         MOV     R2,#0x1
   \   0000C2   80F3         SJMP    ??SerialApp_ProcessMSGCmd_6
    438                          }
    439          			}
    440          			break;
    441                  }		
    442          #endif
    443                  default :
    444                      break;
    445                  }
    446                  break;
    447          		// A response to a received serial data block.
    448          		case SERIALAPP_CLUSTERID2:
    449          			if ((pkt->cmd.Data[1] == SerialApp_TxSeq) &&
    450          				((pkt->cmd.Data[0] == OTA_SUCCESS) || (pkt->cmd.Data[0] == OTA_DUP_MSG)))
   \                     ??SerialApp_ProcessMSGCmd_1:
   \   0000C4   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   0000C7   F8           MOV     R0,A
   \   0000C8   A3           INC     DPTR
   \   0000C9   E0           MOVX    A,@DPTR
   \   0000CA   F9           MOV     R1,A
   \   0000CB   8882         MOV     DPL,R0
   \   0000CD   8983         MOV     DPH,R1
   \   0000CF   A3           INC     DPTR
   \   0000D0   E0           MOVX    A,@DPTR
   \   0000D1   FA           MOV     R2,A
   \   0000D2   90....       MOV     DPTR,#SerialApp_TxSeq
   \   0000D5   E0           MOVX    A,@DPTR
   \   0000D6   6A           XRL     A,R2
   \   0000D7   701D         JNZ     ??SerialApp_ProcessMSGCmd_7
   \   0000D9   8882         MOV     DPL,R0
   \   0000DB   8983         MOV     DPH,R1
   \   0000DD   E0           MOVX    A,@DPTR
   \   0000DE   6004         JZ      ??SerialApp_ProcessMSGCmd_8
   \   0000E0   6401         XRL     A,#0x1
   \   0000E2   7012         JNZ     ??SerialApp_ProcessMSGCmd_7
    451          			{
    452          				SerialApp_TxLen = 0;
   \                     ??SerialApp_ProcessMSGCmd_8:
   \   0000E4   90....       MOV     DPTR,#SerialApp_TxLen
   \   0000E7   E4           CLR     A
   \   0000E8   F0           MOVX    @DPTR,A
    453          				osal_stop_timerEx(SerialApp_TaskID, SERIALAPP_SEND_EVT);
   \   0000E9                ; Setup parameters for call to function osal_stop_timerEx
   \   0000E9   7A01         MOV     R2,#0x1
   \   0000EB   FB           MOV     R3,A
   \   0000EC   90....       MOV     DPTR,#SerialApp_TaskID
   \   0000EF   E0           MOVX    A,@DPTR
   \   0000F0   F9           MOV     R1,A
   \   0000F1   12....       LCALL   ??osal_stop_timerEx?relay
   \   0000F4   800F         SJMP    ??CrossCallReturnLabel_11
    454          			}
    455          			else
    456          			{
    457          				// Re-start timeout according to delay sent from other device.
    458          				delay = BUILD_UINT16( pkt->cmd.Data[2], pkt->cmd.Data[3] );
    459          				osal_start_timerEx( SerialApp_TaskID, SERIALAPP_SEND_EVT, delay );
   \                     ??SerialApp_ProcessMSGCmd_7:
   \   0000F6                ; Setup parameters for call to function osal_start_timerEx
   \   0000F6   8882         MOV     DPL,R0
   \   0000F8   8983         MOV     DPH,R1
   \   0000FA   A3           INC     DPTR
   \   0000FB   A3           INC     DPTR
   \   0000FC   E0           MOVX    A,@DPTR
   \   0000FD   FC           MOV     R4,A
   \   0000FE   7D00         MOV     R5,#0x0
   \   000100   7A01         MOV     R2,#0x1
   \   000102   12....       LCALL   ??Subroutine10_0 & 0xFFFF
    460          			}
    461          			break;
    462          			
    463          		default:
    464          			break;
    465          	}
    466          }
   \                     ??CrossCallReturnLabel_11:
   \   000105   741E         MOV     A,#0x1e
   \   000107   12....       LCALL   ?DEALLOC_XSTACK8
   \   00010A   7F03         MOV     R7,#0x3
   \   00010C   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   00010F                REQUIRE _A_P0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   EA           MOV     A,R2
   \   000001   2421         ADD     A,#0x21
   \   000003   F582         MOV     DPL,A
   \   000005   EB           MOV     A,R3
   \   000006   3400         ADDC    A,#0x0
   \   000008   F583         MOV     DPH,A
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   22           RET
    467          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    468          uint8 TxBuffer[128];
   \                     TxBuffer:
   \   000000                DS 128
   \   000080                REQUIRE __INIT_XDATA_Z
    469          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    470          uint8 SendData(uint8 addr, uint8 FC)
   \                     SendData:
    471          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
    472          	uint8 ret, i, index=4;
   \   000005   75..04       MOV     ?V0 + 0,#0x4
    473          
    474          	TxBuffer[0] = 0x3A;
   \   000008   90....       MOV     DPTR,#TxBuffer
   \   00000B   743A         MOV     A,#0x3a
   \   00000D   F0           MOVX    @DPTR,A
    475          	TxBuffer[1] = 0x00;
   \   00000E   A3           INC     DPTR
   \   00000F   E4           CLR     A
   \   000010   F0           MOVX    @DPTR,A
    476          	TxBuffer[2] = addr;
   \   000011   E9           MOV     A,R1
   \   000012   A3           INC     DPTR
   \   000013   F0           MOVX    @DPTR,A
    477          	TxBuffer[3] = FC;
   \   000014   EA           MOV     A,R2
   \   000015   A3           INC     DPTR
   \   000016   F0           MOVX    @DPTR,A
    478          
    479          	switch(FC)
   \   000017   14           DEC     A
   \   000018   6006         JZ      ??SendData_0
   \   00001A   14           DEC     A
   \   00001B   6078         JZ      ??SendData_1
   \   00001D   02....       LJMP    ??SendData_2 & 0xFFFF
    480          	{
    481          	case 0x01: //²éÑ¯ËùÓÐÖÕ¶Ë´«¸ÐÆ÷µÄÊý¾Ý
    482          		for (i=0; i<MAX_NODE; i++)
   \                     ??SendData_0:
   \   000020   7E00         MOV     R6,#0x0
    483          		{
    484          			osal_memcpy(&TxBuffer[index], NodeData[i], 4);
   \                     ??SendData_3:
   \   000022                ; Setup parameters for call to function osal_memcpy
   \   000022   EE           MOV     A,R6
   \   000023   75F005       MOV     B,#0x5
   \   000026   A4           MUL     AB
   \   000027   F8           MOV     R0,A
   \   000028   A9F0         MOV     R1,B
   \   00002A   74..         MOV     A,#NodeData & 0xff
   \   00002C   28           ADD     A,R0
   \   00002D   F5..         MOV     ?V0 + 4,A
   \   00002F   74..         MOV     A,#(NodeData >> 8) & 0xff
   \   000031   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000034   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000037   7C04         MOV     R4,#0x4
   \   000039   7D00         MOV     R5,#0x0
   \   00003B   85....       MOV     ?V0 + 2,?V0 + 0
   \   00003E   74..         MOV     A,#TxBuffer & 0xff
   \   000040   25..         ADD     A,?V0 + 2
   \   000042   FA           MOV     R2,A
   \   000043   74..         MOV     A,#(TxBuffer >> 8) & 0xff
   \   000045   3400         ADDC    A,#0x0
   \   000047   FB           MOV     R3,A
   \   000048   12....       LCALL   ??Subroutine11_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   00004B   12....       LCALL   ?DEALLOC_XSTACK8
    485          			index += 4;
   \   00004E   7404         MOV     A,#0x4
   \   000050   25..         ADD     A,?V0 + 0
   \   000052   F5..         MOV     ?V0 + 0,A
    486          		}
   \   000054   0E           INC     R6
   \   000055   EE           MOV     A,R6
   \   000056   C3           CLR     C
   \   000057   9404         SUBB    A,#0x4
   \   000059   40C7         JC      ??SendData_3
    487          		TxBuffer[index] = XorCheckSum(TxBuffer, index);
   \   00005B   85..82       MOV     DPL,?V0 + 0
   \   00005E   AE82         MOV     R6,DPL
   \   000060   74..         MOV     A,#TxBuffer & 0xff
   \   000062   2E           ADD     A,R6
   \   000063   F5..         MOV     ?V0 + 2,A
   \   000065   74..         MOV     A,#(TxBuffer >> 8) & 0xff
   \   000067   3400         ADDC    A,#0x0
   \   000069   F5..         MOV     ?V0 + 3,A
   \   00006B                ; Setup parameters for call to function XorCheckSum
   \   00006B   A9..         MOV     R1,?V0 + 0
   \   00006D   7A..         MOV     R2,#TxBuffer & 0xff
   \   00006F   7B..         MOV     R3,#(TxBuffer >> 8) & 0xff
   \   000071   12....       LCALL   ??XorCheckSum?relay
   \   000074   E9           MOV     A,R1
   \   000075   85..82       MOV     DPL,?V0 + 2
   \   000078   85..83       MOV     DPH,?V0 + 3
   \   00007B   F0           MOVX    @DPTR,A
    488          		TxBuffer[index+1] = 0x23; 
   \   00007C   A3           INC     DPTR
   \   00007D   7423         MOV     A,#0x23
   \   00007F   F0           MOVX    @DPTR,A
    489          		
    490          		HalUARTWrite(UART0, TxBuffer, index+2);
   \   000080                ; Setup parameters for call to function HalUARTWrite
   \   000080   EE           MOV     A,R6
   \   000081   2402         ADD     A,#0x2
   \   000083   FC           MOV     R4,A
   \   000084   E4           CLR     A
   \   000085   3400         ADDC    A,#0x0
   \   000087   FD           MOV     R5,A
   \                     ??SendData_4:
   \   000088   7A..         MOV     R2,#TxBuffer & 0xff
   \   00008A   7B..         MOV     R3,#(TxBuffer >> 8) & 0xff
   \   00008C   7900         MOV     R1,#0x0
   \   00008E   12....       LCALL   ??HalUARTWrite?relay
    491                  ret = 1;
   \   000091   7901         MOV     R1,#0x1
    492          		break;
   \   000093   803D         SJMP    ??SendData_5
    493          	case 0x02: //²éÑ¯µ¥¸öÖÕ¶ËÉÏËùÓÐ´«¸ÐÆ÷µÄÊý¾Ý
    494          		osal_memcpy(&TxBuffer[index], NodeData[addr-1], 4);
   \                     ??SendData_1:
   \   000095                ; Setup parameters for call to function osal_memcpy
   \   000095   E9           MOV     A,R1
   \   000096   75F005       MOV     B,#0x5
   \   000099   A4           MUL     AB
   \   00009A   F8           MOV     R0,A
   \   00009B   A9F0         MOV     R1,B
   \   00009D   74..         MOV     A,#(NodeData + 251) & 0xff
   \   00009F   28           ADD     A,R0
   \   0000A0   F5..         MOV     ?V0 + 4,A
   \   0000A2   74..         MOV     A,#((NodeData - 5) >> 8) & 0xff
   \   0000A4   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   0000A7   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000AA   7C04         MOV     R4,#0x4
   \   0000AC   7D00         MOV     R5,#0x0
   \   0000AE   7A..         MOV     R2,#(TxBuffer + 4) & 0xff
   \   0000B0   7B..         MOV     R3,#((TxBuffer + 4) >> 8) & 0xff
   \   0000B2   12....       LCALL   ??Subroutine11_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   0000B5   12....       LCALL   ?DEALLOC_XSTACK8
    495          		index += 4;
    496          		TxBuffer[index] = XorCheckSum(TxBuffer, index);
   \   0000B8                ; Setup parameters for call to function XorCheckSum
   \   0000B8   7908         MOV     R1,#0x8
   \   0000BA   7A..         MOV     R2,#TxBuffer & 0xff
   \   0000BC   7B..         MOV     R3,#(TxBuffer >> 8) & 0xff
   \   0000BE   12....       LCALL   ??XorCheckSum?relay
   \   0000C1   E9           MOV     A,R1
   \   0000C2   90....       MOV     DPTR,#TxBuffer + 8
   \   0000C5   F0           MOVX    @DPTR,A
    497          		TxBuffer[index+1] = 0x23; 
   \   0000C6   A3           INC     DPTR
   \   0000C7   7423         MOV     A,#0x23
   \   0000C9   F0           MOVX    @DPTR,A
    498          	
    499          		HalUARTWrite(UART0, TxBuffer, index+2);		
   \   0000CA                ; Setup parameters for call to function HalUARTWrite
   \   0000CA   7C0A         MOV     R4,#0xa
   \   0000CC   7D00         MOV     R5,#0x0
   \   0000CE   80B8         SJMP    ??SendData_4
    500                  ret = 1;
    501          		break;   
    502          	default:
    503                  ret = 0;
   \                     ??SendData_2:
   \   0000D0   7900         MOV     R1,#0x0
    504          		break;
    505          	}
    506          
    507              return ret;
   \                     ??SendData_5:
   \   0000D2   02....       LJMP    ?Subroutine1 & 0xFFFF
    508          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   39           ADDC    A,R1
   \   000001   F5..         MOV     ?V0 + 5,A
   \   000003   75..00       MOV     ?V0 + 6,#0x0
   \   000006   78..         MOV     R0,#?V0 + 4
   \   000008   22           RET
    509          
    510          /*********************************************************************
    511          * @fn      SerialApp_Send
    512          *
    513          * @brief   Send data OTA.
    514          *
    515          * @param   none
    516          *
    517          * @return  none
    518          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    519          static void SerialApp_Send(void)
   \                     SerialApp_Send:
    520          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
    521              uint8 len=0, addr, FC;
    522              uint8 checksum=0;
    523          	
    524          #if SERIAL_APP_LOOPBACK
    525          	if (SerialApp_TxLen < SERIAL_APP_TX_MAX)
    526          	{
    527          		SerialApp_TxLen += HalUARTRead(SERIAL_APP_PORT, SerialApp_TxBuf+SerialApp_TxLen+1,
    528          			SERIAL_APP_TX_MAX-SerialApp_TxLen);
    529          	}
    530          	
    531          	if (SerialApp_TxLen)
    532          	{
    533          		(void)SerialApp_TxAddr;
    534          		if (HalUARTWrite(SERIAL_APP_PORT, SerialApp_TxBuf+1, SerialApp_TxLen))
    535          		{
    536          			SerialApp_TxLen = 0;
    537          		}
    538          		else
    539          		{
    540          			osal_set_event(SerialApp_TaskID, SERIALAPP_SEND_EVT);
    541          		}
    542          	}
    543          #else
    544          	if (!SerialApp_TxLen && 
    545          		(SerialApp_TxLen = HalUARTRead(UART0, SerialApp_TxBuf, SERIAL_APP_TX_MAX)))
   \   000005   90....       MOV     DPTR,#SerialApp_TxLen
   \   000008   E0           MOVX    A,@DPTR
   \   000009   6003         JZ      $+5
   \   00000B   02....       LJMP    ??SerialApp_Send_0 & 0xFFFF
   \   00000E                ; Setup parameters for call to function HalUARTRead
   \   00000E   7C14         MOV     R4,#0x14
   \   000010   7D00         MOV     R5,#0x0
   \   000012   7A..         MOV     R2,#SerialApp_TxBuf & 0xff
   \   000014   7B..         MOV     R3,#(SerialApp_TxBuf >> 8) & 0xff
   \   000016   7900         MOV     R1,#0x0
   \   000018   12....       LCALL   ??HalUARTRead?relay
   \   00001B   EA           MOV     A,R2
   \   00001C   90....       MOV     DPTR,#SerialApp_TxLen
   \   00001F   F0           MOVX    @DPTR,A
   \   000020   7003         JNZ     $+5
   \   000022   02....       LJMP    ??SerialApp_Send_0 & 0xFFFF
    546          	{
    547                  if (SerialApp_TxLen)
    548                  {
    549                      SerialApp_TxLen = 0;
   \   000025   E4           CLR     A
   \   000026   F0           MOVX    @DPTR,A
    550                      if(SerialApp_TxBuf[0] == 0x3A)
   \   000027   90....       MOV     DPTR,#SerialApp_TxBuf
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   643A         XRL     A,#0x3a
   \   00002D   6003         JZ      $+5
   \   00002F   02....       LJMP    ??SerialApp_Send_0 & 0xFFFF
    551                      {
    552          				addr = SerialApp_TxBuf[2];
   \   000032   90....       MOV     DPTR,#SerialApp_TxBuf + 2
   \   000035   E0           MOVX    A,@DPTR
   \   000036   F5..         MOV     ?V0 + 1,A
    553          				FC = SerialApp_TxBuf[3];
   \   000038   A3           INC     DPTR
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   F5..         MOV     ?V0 + 0,A
    554                          len = GetDataLen(FC); 
   \   00003C   7800         MOV     R0,#0x0
   \   00003E   24F6         ADD     A,#-0xa
   \   000040   6009         JZ      ??SerialApp_Send_1
   \   000042   14           DEC     A
   \   000043   6006         JZ      ??SerialApp_Send_1
   \   000045   14           DEC     A
   \   000046   6003         JZ      ??SerialApp_Send_1
   \   000048   14           DEC     A
   \   000049   7001         JNZ     ??SerialApp_Send_2
   \                     ??SerialApp_Send_1:
   \   00004B   08           INC     R0
    555                          len += 4;
   \                     ??SerialApp_Send_2:
   \   00004C   7404         MOV     A,#0x4
   \   00004E   28           ADD     A,R0
   \   00004F   FE           MOV     R6,A
    556                          checksum = XorCheckSum(SerialApp_TxBuf, len);
   \   000050                ; Setup parameters for call to function XorCheckSum
   \   000050   F9           MOV     R1,A
   \   000051   7A..         MOV     R2,#SerialApp_TxBuf & 0xff
   \   000053   7B..         MOV     R3,#(SerialApp_TxBuf >> 8) & 0xff
   \   000055   12....       LCALL   ??XorCheckSum?relay
   \   000058   E9           MOV     A,R1
   \   000059   FA           MOV     R2,A
    557                          
    558          				//½ÓÊÕÊý¾ÝÕýÈ··µ»ØÏàÓ¦Êý¾Ý
    559                          if(checksum == SerialApp_TxBuf[len] && SerialApp_TxBuf[len+1] == 0x23)
   \   00005A   8E82         MOV     DPL,R6
   \   00005C   A882         MOV     R0,DPL
   \   00005E   74..         MOV     A,#SerialApp_TxBuf & 0xff
   \   000060   28           ADD     A,R0
   \   000061   F5..         MOV     ?V0 + 2,A
   \   000063   74..         MOV     A,#(SerialApp_TxBuf >> 8) & 0xff
   \   000065   3400         ADDC    A,#0x0
   \   000067   F5..         MOV     ?V0 + 3,A
   \   000069   85..82       MOV     DPL,?V0 + 2
   \   00006C   F583         MOV     DPH,A
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   6A           XRL     A,R2
   \   000070   6003         JZ      $+5
   \   000072   02....       LJMP    ??SerialApp_Send_0 & 0xFFFF
   \   000075   A3           INC     DPTR
   \   000076   E0           MOVX    A,@DPTR
   \   000077   6423         XRL     A,#0x23
   \   000079   6003         JZ      $+5
   \   00007B   02....       LJMP    ??SerialApp_Send_0 & 0xFFFF
    560                          {
    561                              if(FC == 0x0A || FC == 0x0B || FC == 0x0C) //¿ØÖÆÖÕ¶Ë
   \   00007E   740A         MOV     A,#0xa
   \   000080   65..         XRL     A,?V0 + 0
   \   000082   600F         JZ      ??SerialApp_Send_3
   \   000084   740B         MOV     A,#0xb
   \   000086   65..         XRL     A,?V0 + 0
   \   000088   6009         JZ      ??SerialApp_Send_3
   \   00008A   740C         MOV     A,#0xc
   \   00008C   65..         XRL     A,?V0 + 0
   \   00008E   6003         JZ      $+5
   \   000090   02....       LJMP    ??SerialApp_Send_4 & 0xFFFF
    562                              {                            
    563                                  if (afStatus_SUCCESS == AF_DataRequest(&Broadcast_DstAddr,
    564                                      (endPointDesc_t *)&SerialApp_epDesc,
    565                                      SERIALAPP_CLUSTERID,
    566                                      len+2, SerialApp_TxBuf,
    567                                      &SerialApp_MsgID, 0, AF_DEFAULT_RADIUS))
   \                     ??SerialApp_Send_3:
   \   000093   E5..         MOV     A,?V0 + 2
   \   000095   24FF         ADD     A,#-0x1
   \   000097   F5..         MOV     ?V0 + 6,A
   \   000099   E5..         MOV     A,?V0 + 3
   \   00009B   34FF         ADDC    A,#-0x1
   \   00009D   F5..         MOV     ?V0 + 7,A
   \   00009F   E8           MOV     A,R0
   \   0000A0   2402         ADD     A,#0x2
   \   0000A2   0E           INC     R6
   \   0000A3   0E           INC     R6
   \   0000A4   E4           CLR     A
   \   0000A5   3400         ADDC    A,#0x0
   \   0000A7   FF           MOV     R7,A
   \   0000A8                ; Setup parameters for call to function AF_DataRequest
   \   0000A8   75..1E       MOV     ?V0 + 4,#0x1e
   \   0000AB   78..         MOV     R0,#?V0 + 4
   \   0000AD   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000B0   75....       MOV     ?V0 + 4,#SerialApp_MsgID & 0xff
   \   0000B3   75....       MOV     ?V0 + 5,#(SerialApp_MsgID >> 8) & 0xff
   \   0000B6   78..         MOV     R0,#?V0 + 4
   \   0000B8   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000BB   75....       MOV     ?V0 + 4,#SerialApp_TxBuf & 0xff
   \   0000BE   75....       MOV     ?V0 + 5,#(SerialApp_TxBuf >> 8) & 0xff
   \   0000C1   78..         MOV     R0,#?V0 + 4
   \   0000C3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C6   8E..         MOV     ?V0 + 4,R6
   \   0000C8   8F..         MOV     ?V0 + 5,R7
   \   0000CA   78..         MOV     R0,#?V0 + 4
   \   0000CC   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000CF   75..01       MOV     ?V0 + 4,#0x1
   \   0000D2   75..00       MOV     ?V0 + 5,#0x0
   \   0000D5   78..         MOV     R0,#?V0 + 4
   \   0000D7   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000DA   7900         MOV     R1,#0x0
   \   0000DC   7C..         MOV     R4,#SerialApp_epDesc & 0xff
   \   0000DE   7D..         MOV     R5,#(SerialApp_epDesc >> 8) & 0xff
   \   0000E0   7A..         MOV     R2,#Broadcast_DstAddr & 0xff
   \   0000E2   7B..         MOV     R3,#(Broadcast_DstAddr >> 8) & 0xff
   \   0000E4   12....       LCALL   ??Subroutine12_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   0000E7   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000EA   E9           MOV     A,R1
   \   0000EB   7034         JNZ     ??SerialApp_Send_5
    568                                  {
    569                                      if(FC == 0x0A) //Èç¹û¿ªÆô×Ô¶¯Ë¢ÐÂÔò²»ÐèÒªÕâ²½²Ù×÷
   \   0000ED   740A         MOV     A,#0xa
   \   0000EF   65..         XRL     A,?V0 + 0
   \   0000F1   701F         JNZ     ??SerialApp_Send_6
    570                                          NodeData[addr-1][3] = SerialApp_TxBuf[len-1];  //¸üÐÂ»º³åÇøµÆµÄ×´Ì¬
   \   0000F3   85..82       MOV     DPL,?V0 + 6
   \   0000F6   85..83       MOV     DPH,?V0 + 7
   \   0000F9   E0           MOVX    A,@DPTR
   \   0000FA   C0E0         PUSH    A
   \   0000FC   E5..         MOV     A,?V0 + 1
   \   0000FE   75F005       MOV     B,#0x5
   \   000101   A4           MUL     AB
   \   000102   F8           MOV     R0,A
   \   000103   A9F0         MOV     R1,B
   \   000105   74..         MOV     A,#(NodeData + 254) & 0xff
   \   000107   28           ADD     A,R0
   \   000108   F582         MOV     DPL,A
   \   00010A   74..         MOV     A,#((NodeData - 2) >> 8) & 0xff
   \   00010C   39           ADDC    A,R1
   \   00010D   F583         MOV     DPH,A
   \   00010F   D0E0         POP     A
   \                     ??SerialApp_Send_7:
   \   000111   F0           MOVX    @DPTR,A
    571                                        
    572                                      HalUARTWrite(UART0, SerialApp_TxBuf, len+2); //ÎÞÏß·¢ËÍ³É¹¦ºóÔ­Ñù·µ»Ø¸øÉÏÎ»»ú	
   \                     ??SerialApp_Send_6:
   \   000112                ; Setup parameters for call to function HalUARTWrite
   \   000112   EE           MOV     A,R6
   \   000113   FC           MOV     R4,A
   \   000114   EF           MOV     A,R7
   \   000115   FD           MOV     R5,A
   \   000116   7A..         MOV     R2,#SerialApp_TxBuf & 0xff
   \   000118   7B..         MOV     R3,#(SerialApp_TxBuf >> 8) & 0xff
   \   00011A   7900         MOV     R1,#0x0
   \   00011C   12....       LCALL   ??HalUARTWrite?relay
   \   00011F   8017         SJMP    ??SerialApp_Send_0
    573                                      //osal_set_event(SerialApp_TaskID, SERIALAPP_SEND_EVT);
    574                                  }
    575                                  else  //ÔÝÊ±Ã»·¢ÏÖ´íÎó£¬¹Ø±ÕÖÕ¶Ë·¢ËÍÒ²Õý³£¡£ÎÞÏß·¢ËÍÊ§°Üºó½«Êý¾ÝÎ»ºÍÐ£ÑéÎ»ÖÃ0·µ¸øÉÏÎ»»ú	
    576                                  {
    577                                      SerialApp_TxBuf[len-1] = 0x00;
   \                     ??SerialApp_Send_5:
   \   000121   85..82       MOV     DPL,?V0 + 6
   \   000124   85..83       MOV     DPH,?V0 + 7
   \   000127   E4           CLR     A
   \   000128   F0           MOVX    @DPTR,A
    578                                      SerialApp_TxBuf[len] = 0x00;
   \   000129   85..82       MOV     DPL,?V0 + 2
   \   00012C   85..83       MOV     DPH,?V0 + 3
   \   00012F   80E0         SJMP    ??SerialApp_Send_7
   \   000131                ; Setup parameters for call to function HalUARTWrite
    579                                      HalUARTWrite(UART0, SerialApp_TxBuf, len+2);
    580                                  }
    581                              }
    582                              else
    583                              {
    584          					    SendData(addr, FC);   //²éÑ¯²Ù×÷
   \                     ??SerialApp_Send_4:
   \   000131                ; Setup parameters for call to function SendData
   \   000131   AA..         MOV     R2,?V0 + 0
   \   000133   A9..         MOV     R1,?V0 + 1
   \   000135   12....       LCALL   ??SendData?relay
    585                              }
    586          				}
    587          			}
    588          		}
    589              }
    590          #endif
    591          }
   \                     ??SerialApp_Send_0:
   \   000138   02....       LJMP    ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine12_0:
   \   000000   12....       LCALL   ??AF_DataRequest?relay
   \   000003   7409         MOV     A,#0x9
   \   000005   22           RET
    592          
    593          /*********************************************************************
    594          * @fn      SerialApp_Resp
    595          *
    596          * @brief   Send data OTA.
    597          *
    598          * @param   none
    599          *
    600          * @return  none
    601          */
    602          static void SerialApp_Resp(void)
    603          {
    604          	if (afStatus_SUCCESS != AF_DataRequest(&SerialApp_RxAddr,
    605          		(endPointDesc_t *)&SerialApp_epDesc,
    606          		SERIALAPP_CLUSTERID2,
    607          		SERIAL_APP_RSP_CNT, SerialApp_RspBuf,
    608          		&SerialApp_MsgID, 0, AF_DEFAULT_RADIUS))
    609          	{
    610          		osal_set_event(SerialApp_TaskID, SERIALAPP_RESP_EVT);
    611          	}
    612          }
    613          
    614          /*********************************************************************
    615          * @fn      SerialApp_CallBack
    616          *
    617          * @brief   Send data OTA.
    618          *
    619          * @param   port - UART port.
    620          * @param   event - the UART port event flag.
    621          *
    622          * @return  none
    623          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    624          static void SerialApp_CallBack(uint8 port, uint8 event)
   \                     SerialApp_CallBack:
    625          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
    626          	(void)port;
    627          	
    628          	if ((event & (HAL_UART_RX_FULL | HAL_UART_RX_ABOUT_FULL | HAL_UART_RX_TIMEOUT)) &&
    629          #if SERIAL_APP_LOOPBACK
    630          		(SerialApp_TxLen < SERIAL_APP_TX_MAX))
    631          #else
    632          		!SerialApp_TxLen)
   \   000007   7407         MOV     A,#0x7
   \   000009   5E           ANL     A,R6
   \   00000A   6009         JZ      ??SerialApp_CallBack_0
   \   00000C   90....       MOV     DPTR,#SerialApp_TxLen
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   7003         JNZ     ??SerialApp_CallBack_0
    633          #endif
    634          	{
    635          		SerialApp_Send();
   \   000012                ; Setup parameters for call to function SerialApp_Send
   \   000012   12....       LCALL   ??SerialApp_Send?relay
    636          	}
    637          }
   \                     ??SerialApp_CallBack_0:
   \   000015   02....       LJMP    ?Subroutine0 & 0xFFFF
    638          
    639          
    640          //------------------------------------------------------------------------------------------------------------------------------------------
    641          //²éÑ¯µ¥¸öÖÕ¶ËÉÏËùÓÐ´«¸ÐÆ÷µÄÊý¾Ý 3A 00 01 02 XX 23  ÏìÓ¦£º3A 00 01 02 00 00 00 00 xor 23

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   7A..         MOV     R2,#SerialApp_TxAddr & 0xff
   \   000002   7B..         MOV     R3,#(SerialApp_TxAddr >> 8) & 0xff
   \   000004                REQUIRE ??Subroutine12_0
   \   000004                ; // Fall through to label ??Subroutine12_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    642          void SerialApp_SendPeriodicMessage( void )
   \                     SerialApp_SendPeriodicMessage:
    643          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV     A,#-0xb
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    644              uint8 SendBuf[11]={0};
   \   00000A   90....       MOV     DPTR,#`?<Constant {0}>_1`
   \   00000D   C082         PUSH    DPL
   \   00000F   85..82       MOV     DPL,?XSP + 0
   \   000012   85..83       MOV     DPH,?XSP + 1
   \   000015   AC82         MOV     R4,DPL
   \   000017   AD83         MOV     R5,DPH
   \   000019   7583..       MOV     DPH,#(`?<Constant {0}>_1` >> 8) & 0xff
   \   00001C   D082         POP     DPL
   \   00001E   740B         MOV     A,#0xb
   \   000020   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    645              
    646              SendBuf[0] = 0x3A;                          
   \   000023   85..82       MOV     DPL,?XSP + 0
   \   000026   85..83       MOV     DPH,?XSP + 1
   \   000029   743A         MOV     A,#0x3a
   \   00002B   F0           MOVX    @DPTR,A
    647              SendBuf[1] = HI_UINT16( EndDeviceID );
   \   00002C   90....       MOV     DPTR,#EndDeviceID + 1
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   C0E0         PUSH    A
   \   000032   7401         MOV     A,#0x1
   \   000034   12....       LCALL   ?XSTACK_DISP0_8
   \   000037   D0E0         POP     A
   \   000039   F0           MOVX    @DPTR,A
    648              SendBuf[2] = LO_UINT16( EndDeviceID );
   \   00003A   90....       MOV     DPTR,#EndDeviceID
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   C0E0         PUSH    A
   \   000040   7402         MOV     A,#0x2
   \   000042   12....       LCALL   ?XSTACK_DISP0_8
   \   000045   D0E0         POP     A
   \   000047   F0           MOVX    @DPTR,A
    649              SendBuf[3] = 0x02;                       //FC
   \   000048   7403         MOV     A,#0x3
   \   00004A   12....       LCALL   ?XSTACK_DISP0_8
   \   00004D   7402         MOV     A,#0x2
   \   00004F   F0           MOVX    @DPTR,A
    650              
    651              DHT11();                //»ñÈ¡ÎÂÊª¶È
   \   000050                ; Setup parameters for call to function DHT11
   \   000050   12....       LCALL   ??DHT11?relay
    652              SendBuf[4] = wendu;  
   \   000053   90....       MOV     DPTR,#wendu
   \   000056   E0           MOVX    A,@DPTR
   \   000057   C0E0         PUSH    A
   \   000059   7404         MOV     A,#0x4
   \   00005B   12....       LCALL   ?XSTACK_DISP0_8
   \   00005E   D0E0         POP     A
   \   000060   F0           MOVX    @DPTR,A
    653              SendBuf[5] = shidu;  
   \   000061   90....       MOV     DPTR,#shidu
   \   000064   E0           MOVX    A,@DPTR
   \   000065   C0E0         PUSH    A
   \   000067   7405         MOV     A,#0x5
   \   000069   12....       LCALL   ?XSTACK_DISP0_8
   \   00006C   D0E0         POP     A
   \   00006E   F0           MOVX    @DPTR,A
    654              SendBuf[6] = GetGas();  //»ñÈ¡ÆøÌå´«¸ÐÆ÷µÄ×´Ì¬  
   \   00006F   A286         MOV     C,0x80.6
   \   000071   E4           CLR     A
   \   000072   33           RLC     A
   \   000073   C0E0         PUSH    A
   \   000075   7406         MOV     A,#0x6
   \   000077   12....       LCALL   ?XSTACK_DISP0_8
   \   00007A   D0E0         POP     A
   \   00007C   F0           MOVX    @DPTR,A
    655              SendBuf[7] = GetLamp(); //»ñµÃµÆµÄ×´Ì¬
   \   00007D   A285         MOV     C,0x80.5
   \   00007F   E4           CLR     A
   \   000080   33           RLC     A
   \   000081   C0E0         PUSH    A
   \   000083   7407         MOV     A,#0x7
   \   000085   12....       LCALL   ?XSTACK_DISP0_8
   \   000088   D0E0         POP     A
   \   00008A   F0           MOVX    @DPTR,A
    656              SendBuf[8] = XorCheckSum(SendBuf, 9);
   \   00008B                ; Setup parameters for call to function XorCheckSum
   \   00008B   7909         MOV     R1,#0x9
   \   00008D   85..82       MOV     DPL,?XSP + 0
   \   000090   85..83       MOV     DPH,?XSP + 1
   \   000093   AA82         MOV     R2,DPL
   \   000095   AB83         MOV     R3,DPH
   \   000097   12....       LCALL   ??XorCheckSum?relay
   \   00009A   7408         MOV     A,#0x8
   \   00009C   12....       LCALL   ?XSTACK_DISP0_8
   \   00009F   E9           MOV     A,R1
   \   0000A0   F0           MOVX    @DPTR,A
    657              SendBuf[9] = 0x23;
   \   0000A1   7409         MOV     A,#0x9
   \   0000A3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A6   7423         MOV     A,#0x23
   \   0000A8   F0           MOVX    @DPTR,A
    658            
    659              SerialApp_TxAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \   0000A9   12....       LCALL   ?Subroutine3 & 0xFFFF
    660              SerialApp_TxAddr.endPoint = SERIALAPP_ENDPOINT;
    661              SerialApp_TxAddr.addr.shortAddr = 0x00;  
    662              if ( AF_DataRequest( &SerialApp_TxAddr, (endPointDesc_t *)&SerialApp_epDesc,
    663                         SERIALAPP_CLUSTERID,
    664                         10,
    665                         SendBuf,
    666                         &SerialApp_MsgID, 
    667                         0, 
    668                         AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \                     ??CrossCallReturnLabel_1:
   \   0000AC                ; Setup parameters for call to function AF_DataRequest
   \   0000AC   75..1E       MOV     ?V0 + 0,#0x1e
   \   0000AF   78..         MOV     R0,#?V0 + 0
   \   0000B1   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000B4   75....       MOV     ?V0 + 0,#SerialApp_MsgID & 0xff
   \   0000B7   75....       MOV     ?V0 + 1,#(SerialApp_MsgID >> 8) & 0xff
   \   0000BA   78..         MOV     R0,#?V0 + 0
   \   0000BC   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000BF   7403         MOV     A,#0x3
   \   0000C1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C4   8582..       MOV     ?V0 + 0,DPL
   \   0000C7   8583..       MOV     ?V0 + 1,DPH
   \   0000CA   78..         MOV     R0,#?V0 + 0
   \   0000CC   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000CF   75..0A       MOV     ?V0 + 0,#0xa
   \   0000D2   75..00       MOV     ?V0 + 1,#0x0
   \   0000D5   78..         MOV     R0,#?V0 + 0
   \   0000D7   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000DA   75..01       MOV     ?V0 + 0,#0x1
   \   0000DD   78..         MOV     R0,#?V0 + 0
   \   0000DF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000E2   7900         MOV     R1,#0x0
   \   0000E4   7C..         MOV     R4,#SerialApp_epDesc & 0xff
   \   0000E6   7D..         MOV     R5,#(SerialApp_epDesc >> 8) & 0xff
   \   0000E8   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   0000EB   12....       LCALL   ?DEALLOC_XSTACK8
    669              {
    670              // Successfully requested to be sent.
    671              }
    672              else
    673              {
    674              // Error occurred in request to send.
    675              }
    676          }
   \   0000EE   740B         MOV     A,#0xb
   \   0000F0   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000F3                REQUIRE ?Subroutine2
   \   0000F3                REQUIRE _A_P0
   \   0000F3                ; // Fall through to label ?Subroutine2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   90....       MOV     DPTR,#SerialApp_TxAddr + 8
   \   000003   7402         MOV     A,#0x2
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   740B         MOV     A,#0xb
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   90....       MOV     DPTR,#SerialApp_TxAddr
   \   00000D   E4           CLR     A
   \   00000E   F0           MOVX    @DPTR,A
   \   00000F   A3           INC     DPTR
   \   000010   F0           MOVX    @DPTR,A
   \   000011   22           RET
    677          
    678          
    679          
    680          //Í¨¹ý´®¿ÚÊä³ö¶ÌµØÖ· IEEE
    681          void PrintAddrInfo(uint16 shortAddr, uint8 *pIeeeAddr)
                      ^
Warning[Pe177]: function "PrintAddrInfo" was declared but never referenced
    682          {
    683              uint8 strIeeeAddr[17] = {0};
    684              char  buff[30] = {0};    
    685              
    686              //»ñµÃ¶ÌµØÖ·   
    687              sprintf(buff, "shortAddr:%04X   IEEE:", shortAddr);  
    688           
    689              //»ñµÃIEEEµØÖ·
    690              GetIeeeAddr(pIeeeAddr, strIeeeAddr);
    691          
    692              HalUARTWrite (UART0, (uint8 *)buff, strlen(buff));
    693              Delay_ms(10);
    694              HalUARTWrite (UART0, strIeeeAddr, 16); 
    695              HalUARTWrite (UART0, "\n", 1);
    696          }
    697          
    698          void AfSendAddrInfo(void)
    699          {
    700              uint16 shortAddr;
    701              uint8 strBuf[11]={0};  
    702              
    703              SerialApp_TxAddr.addrMode = (afAddrMode_t)Addr16Bit;
    704              SerialApp_TxAddr.endPoint = SERIALAPP_ENDPOINT;
    705              SerialApp_TxAddr.addr.shortAddr = 0x00;   
    706              
    707              shortAddr=NLME_GetShortAddr();
    708              
    709              strBuf[0] = 0x3B;                          //·¢ËÍµØÖ·¸øÐ­µ÷Æ÷ ¿ÉÓÃÓÚµã²¥
    710              strBuf[1] = HI_UINT16( shortAddr );        //´æ·Å¶ÌµØÖ·¸ß8Î»
    711              strBuf[2] = LO_UINT16( shortAddr );        //´æ·Å¶ÌµØÖ·µÍ8Î»
    712              
    713              osal_memcpy(&strBuf[3], NLME_GetExtAddr(), 8);
    714                  
    715             if ( AF_DataRequest( &SerialApp_TxAddr, (endPointDesc_t *)&SerialApp_epDesc,
    716                                 SERIALAPP_CLUSTERID,
    717                                 11,
    718                                 strBuf,
    719                                 &SerialApp_MsgID, 
    720                                 0, 
    721                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
    722            {
    723            }
    724            else
    725            {
    726              // Error occurred in request to send.
    727            }   
    728          }
    729          
    730          void GetIeeeAddr(uint8 * pIeeeAddr, uint8 *pStr)
    731          {
    732            uint8 i;
    733            uint8 *xad = pIeeeAddr;
    734          
    735            for (i = 0; i < Z_EXTADDR_LEN*2; xad--)
    736            {
    737              uint8 ch;
    738              ch = (*xad >> 4) & 0x0F;
    739              *pStr++ = ch + (( ch < 10 ) ? '0' : '7');
    740              i++;
    741              ch = *xad & 0x0F;
    742              *pStr++ = ch + (( ch < 10 ) ? '0' : '7');
    743              i++;
    744            }
    745          }
    746          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    747          uint8 XorCheckSum(uint8 * pBuf, uint8 len)
   \                     XorCheckSum:
    748          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FC           MOV     R4,A
    749          	uint8 i;
    750          	uint8 byRet=0;
    751          
    752          	if(len == 0)
   \   000007   7004         JNZ     ??XorCheckSum_0
    753          		return byRet;
   \   000009   7900         MOV     R1,#0x0
   \   00000B   8020         SJMP    ??XorCheckSum_1
    754          	else
    755          		byRet = pBuf[0];
   \                     ??XorCheckSum_0:
   \   00000D   8A82         MOV     DPL,R2
   \   00000F   8B83         MOV     DPH,R3
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F9           MOV     R1,A
    756          
    757          	for(i = 1; i < len; i ++)
   \   000013   7801         MOV     R0,#0x1
   \   000015   8011         SJMP    ??XorCheckSum_2
    758          		byRet = byRet ^ pBuf[i];
   \                     ??XorCheckSum_3:
   \   000017   88..         MOV     ?V0 + 0,R0
   \   000019   EA           MOV     A,R2
   \   00001A   25..         ADD     A,?V0 + 0
   \   00001C   F582         MOV     DPL,A
   \   00001E   EB           MOV     A,R3
   \   00001F   3400         ADDC    A,#0x0
   \   000021   F583         MOV     DPH,A
   \   000023   E0           MOVX    A,@DPTR
   \   000024   C9           XCH     A,R1
   \   000025   69           XRL     A,R1
   \   000026   F9           MOV     R1,A
   \   000027   08           INC     R0
   \                     ??XorCheckSum_2:
   \   000028   E8           MOV     A,R0
   \   000029   C3           CLR     C
   \   00002A   9C           SUBB    A,R4
   \   00002B   40EA         JC      ??XorCheckSum_3
    759          
    760          	return byRet;
   \                     ??XorCheckSum_1:
   \   00002D   80..         SJMP    ?Subroutine2
    761          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for EndDeviceID>`:
   \   000000   0100         DW 1

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SerialApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SerialApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SerialApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SerialApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SerialApp_HandleKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SerialApp_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SerialApp_ProcessMSGCmd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SerialApp_ProcessMSGCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SendData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SendData

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SerialApp_Send?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SerialApp_Send

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SerialApp_CallBack?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SerialApp_CallBack

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SerialApp_SendPeriodicMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SerialApp_SendPeriodicMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??XorCheckSum?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    XorCheckSum

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SerialApp">`:
   \   000000   53657269     DB "SerialApp"
   \            616C4170
   \            7000    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0}>`:
   \   000000   00           DB 0
   \   000001   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000009   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000011   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000019   00000000     DB 0, 0, 0, 0, 0
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0}>_1`:
   \   000000   00           DB 0
   \   000001   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000009   0000         DB 0, 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0}>_2`:
   \   000000   00           DB 0
   \   000001   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000009   0000         DB 0, 0
    762          
    763          uint8 GetDataLen(uint8 fc)
    764          {
    765              uint8 len=0;
    766              switch(fc)
    767              {
    768              case 0x0A:
    769              case 0x0B:
    770              case 0x0C:
    771              case 0x0D:
    772                len = 1;
    773                break;
    774              }
    775              
    776              return len;
    777          }
    778          
    779          
    780          //»ñµÃP0_5 ¼ÌµçÆ÷Òý½ÅµÄµçÆ½
    781          uint8 GetLamp( void )
    782          {
    783            uint8 ret;
    784            
    785            if(LAMP_PIN == 0)
    786              ret = 0;
    787            else
    788              ret = 1;
    789            
    790            return ret;
    791          }
    792          
    793          //»ñµÃP0_6 MQ-2ÆøÌå´«¸ÐÆ÷µÄÊý¾Ý
    794          uint8 GetGas( void )
    795          {
    796            uint8 ret;
    797            
    798            if(GAS_PIN == 0)
    799              ret = 0;
    800            else
    801              ret = 1;
    802            
    803            return ret;
    804          }
    805          
    806          //-------------------------------------------------------------------
    807          
    808          
    809          
    810          /*********************************************************************
    811          *********************************************************************/

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     SendData                           1      0     35
       -> osal_memcpy                   0      0     38
       -> XorCheckSum                   0      0     32
       -> HalUARTWrite                  0      0     32
       -> osal_memcpy                   0      0     38
       -> XorCheckSum                   0      0     32
       -> HalUARTWrite                  0      0     32
     SerialApp_CallBack                 0      0      9
       -> SerialApp_Send                0      0     18
     SerialApp_HandleKeys               0      0     57
       -> HalLedSet                     0      0     42
       -> osal_start_timerEx            0      0     42
       -> HalLedSet                     0      0     42
       -> osal_stop_timerEx             0      0     42
       -> HalLedSet                     0      0     42
       -> NLME_GetShortAddr             0      0     60
       -> ZDP_EndDeviceBindReq          0      0     60
       -> HalLedSet                     0      0     42
       -> ZDP_MatchDescReq              0      0     58
     SerialApp_Init                     0      0     38
       -> afRegister                    0      0     76
       -> RegisterForKeys               0      0     76
       -> HalUARTOpen                   0      0     76
       -> HalLcdWriteString             0      0     76
     SerialApp_ProcessEvent             2      0     36
       -> SerialApp_SendPeriodicMessage
                                        0      0     54
       -> osal_rand                     0      0     54
       -> osal_start_timerEx            0      0     54
       -> NLME_GetShortAddr             0      0     54
       -> NLME_GetExtAddr               0      0     54
       -> osal_memcpy                   0      0     60
       -> AF_DataRequest                0      0     72
       -> osal_msg_deallocate           0      0     54
       -> osal_msg_receive              0      0     54
       -> SerialApp_HandleKeys          0      0     54
       -> SerialApp_ProcessMSGCmd       0      0     54
       -> SerialApp_Send                0      0     54
       -> AF_DataRequest                0      0     72
       -> osal_set_event                0      0     54
     SerialApp_ProcessMSGCmd            2      0     71
       -> osal_memcpy                   0      0     88
       -> HalLedSet                     0      0     82
       -> HalLedSet                     0      0     82
       -> osal_stop_timerEx             0      0     82
       -> osal_start_timerEx            0      0     82
     SerialApp_Send                     1      0     52
       -> HalUARTRead                   0      0     32
       -> XorCheckSum                   0      0     32
       -> AF_DataRequest                0      0     50
       -> HalUARTWrite                  0      0     32
       -> HalUARTWrite                  0      0     32
       -> SendData                      0      0     32
     SerialApp_SendPeriodicMessage      2      0     57
       -> DHT11                         0      0     42
       -> XorCheckSum                   0      0     42
       -> AF_DataRequest                0      0     60
     XorCheckSum                        0      0     31


   Segment part sizes:

     Function/Label                        Bytes
     --------------                        -----
     _A_P0                                    1
     P0SEL                                    1
     P0DIR                                    1
     EndDeviceID                              2
     SerialApp_ClusterList                    4
     SerialApp_SimpleDesc                    12
     SerialApp_epDesc                         6
     SerialApp_TaskID                         1
     SendFlag                                 1
     Broadcast_DstAddr                       12
     SerialApp_TxSeq                          1
     SerialApp_TxBuf                         21
     SerialApp_TxLen                          1
     SerialApp_RxAddr                        12
     SerialApp_RspBuf                         4
     SerialApp_NwkState                       1
     SerialApp_TxAddr                        12
     SerialApp_MsgID                          1
     NodeData                                20
     SerialApp_Init                         151
     ?Subroutine0                             5
     ?Subroutine4                             8
     SerialApp_ProcessEvent                 421
     ?Subroutine1                             5
     ?Subroutine8                             2
     ??Subroutine10_0                        11
     SerialApp_HandleKeys                   270
     ?Subroutine6                             4
     ??Subroutine11_0                         6
     SerialApp_ProcessMSGCmd                271
     ?Subroutine5                            12
     TxBuffer                               128
     SendData                               213
     ?Subroutine9                             9
     SerialApp_Send                         315
     ??Subroutine12_0                         6
     SerialApp_CallBack                      24
     ?Subroutine7                             4
     SerialApp_SendPeriodicMessage          243
     ?Subroutine2                             5
     ?Subroutine3                            18
     XorCheckSum                             47
     ?<Initializer for EndDeviceID>           2
     ??SerialApp_Init?relay                   6
     ??SerialApp_ProcessEvent?relay           6
     ??SerialApp_HandleKeys?relay             6
     ??SerialApp_ProcessMSGCmd?relay          6
     ??SendData?relay                         6
     ??SerialApp_Send?relay                   6
     ??SerialApp_CallBack?relay               6
     ??SerialApp_SendPeriodicMessage?relay    6
     ??XorCheckSum?relay                      6
     ?<Constant "SerialApp">                 10
     ?<Constant {0}>                         30
     ?<Constant {0}>_1                       11
     ?<Constant {0}>_2                       11

 
 2 050 bytes in segment BANKED_CODE
    54 bytes in segment BANK_RELAYS
     3 bytes in segment SFR_AN
     2 bytes in segment XDATA_I
     2 bytes in segment XDATA_ID
    84 bytes in segment XDATA_ROM_C
   215 bytes in segment XDATA_Z
 
 2 106 bytes of CODE  memory
    84 bytes of CONST memory
     0 bytes of DATA  memory (+ 3 bytes shared)
   217 bytes of XDATA memory

Errors: none
Warnings: 3
